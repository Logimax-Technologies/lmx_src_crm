// const { isNaN } = require("formik");

var path = url_params();

var ctrl_page = path.route.split("/");

var lot_details = [];

var tax_details = [];

var purities = [];

var cur_search_tags = [];

var matel_types = [];

var stones = [];

var materials = [];

var chit_details = [];

var giftVoucher_details = [];

var card_payment = [];

var adv_adj_details = [];

var img_resource = [];

var total_files = [];

var redeem_sales_amt = 0;

var order_adv_details = [];

var packing_items = [];

var other_inventory_item = [];

var scheme_details = [];

var chit_deposit_acc_details = [];

var chit_adj_details = [];

var bank_details = [];

var delivered_address = [];

var branch_details = [];

var registered_address = [];

var payment_device_details = [];

var old_discount = 0;

var branch_day_closing_details = [];

var metal_rates = [];

var purity_rate = [];

var returntaggeditemlist = [];

var nontagreturnitemlist = [];

var insertedcatdetails = [];

var purchasereturnitemlist = [];

var karigar_details = [];

var available_metal_stock = [];

var prod_details = [];

var uom_details = [];

var stone_types = [];

var payment_mode_details = [];

var cus_country = [];

var formSubmit = false;

var loose_product_rate = [];

var other_charges_details = [];

var estimation_id = [];

var tot_amt_received = 0;

var account_details = [];

var total_splitted_pur_gross_weight = 0;

var selected_split_row;

var item_emp_details = [];

var stone_rate_settings = [];

var wast_settings_details = [];

var count = 0;

var nb_values = [];

var tot_bill_amount_edit = 0;

var nbpayment = [];

var canCloseNBModal = false;

var canCloseCardModal = false;

var canCloseChqModal = false;

let mc_readonly = $("#allow_mc_edit").val() == 1 ? "" : "readonly";

let mc_type_selection =
  $("#allow_mc_edit").val() == 1 ? "" : "pointer-events : none";

let va_readonly = $("#allow_va_edit").val() == 1 ? "" : "readonly";

let rate_readonly = $("#allow_manual_rate").val() == 1 ? "" : "readonly";

$(document).ready(function () {
  $.toaster({
    settings: {
      timeout: 1000 * 60 * 1, // 1 Minute
    },
  });

  $("#net_bank_modal").click(function () {
    $("#net_banking_modal")
      .modal({
        backdrop: "static",

        keyboard: false,
      })
      .modal("show");
  });
  $("#cheque_modal").click(function () {
    $("#cheque-detail-modal")
      .modal({
        backdrop: "static",

        keyboard: false,
      })
      .modal("show");
  });

  $("#card_detail_modal").click(function () {
    $("#card-detail-modal")
      .modal({
        backdrop: "static",
      })
      .modal("show");
  });

  $(document).on("keydown", "input[type='number']", function (event) {
    if (
      event.which == 40 ||
      event.which == 38 ||
      event.which == 37 ||
      event.which == 39 ||
      event.which == 189 ||
      event.which == 45 ||
      event.which == 109
    ) {
      event.preventDefault();
    }
  });

  console.log("mac_id:" + localStorage.getItem("mac_id"));

  $(".dateRangePicker").daterangepicker({
    format: "DD/MM/YYYY",

    //startDate:  moment().subtract(6, 'days'),

    endDate: moment(),
  });

  $("#receipt_date").datepicker();

  var path = url_params();

  $("#status").bootstrapSwitch();

  $(window).scroll(function () {
    // this will work when your window scrolled.

    var height = $(window).scrollTop(); //getting the scrolling height of window

    if (height > 300) {
      $(".stickyBlk").css({ position: "fixed" });
    } else {
      $(".stickyBlk").css({ position: "static" });
    }
  });

  switch (ctrl_page[1]) {
    case "billing":
      switch (ctrl_page[2]) {
        case "list":
          get_billing_list();

          break;

        case "approvallist":
          $("#order_status").select2({
            placeholder: "Select Order Status",

            allowClear: true,
          });

          get_order_status();

          get_approval_billing_list();

          break;

        case "edit":
          if ($("#bill_type_sales:checked").val() == 1) {
            $(".search_esti").css("display", "block");

            $(".search_tag").css("display", "block");

            $(".search_order").css("display", "block");

            $(".search_bill").css("display", "none");

            $(".sale_details").css("display", "block");

            $(".return_details").css("display", "none");

            $(".purchase_details").css("display", "none");

            $(".order_adv_details").css("display", "none");
          } else if ($("#bill_type_sales:checked").val() == 2) {
            $(".search_esti").css("display", "block");

            $(".search_tag").css("display", "block");

            $(".search_order").css("display", "block");

            $(".search_bill").css("display", "none");

            $(".sale_details").css("display", "block");

            $(".return_details").css("display", "none");

            $(".purchase_details").css("display", "block");

            $(".order_adv_details").css("display", "none");
          } else if ($("#bill_type_sales:checked").val() == 3) {
            $(".search_esti").css("display", "block");

            $(".search_tag").css("display", "block");

            $(".search_order").css("display", "block");

            $(".search_bill").css("display", "block");

            $(".sale_details").css("display", "block");

            $(".return_details").css("display", "block");

            $(".purchase_details").css("display", "block");

            $(".order_adv_details").css("display", "none");
          } else if ($("#bill_type_sales:checked").val() == 4) {
            $(".search_esti").css("display", "block");

            $(".search_tag").css("display", "none");

            $(".search_order").css("display", "none");

            $(".search_bill").css("display", "none");

            $(".sale_details").css("display", "none");

            $(".return_details").css("display", "none");

            $(".purchase_details").css("display", "block");

            $(".order_adv_details").css("display", "none");
          } else if ($("#bill_type_sales:checked").val() == 5) {
            $(".search_esti").css("display", "block");

            $(".search_tag").css("display", "none");

            $(".search_order").css("display", "block");

            $(".search_bill").css("display", "none");

            $(".sale_details").css("display", "none");

            $(".return_details").css("display", "none");

            $(".purchase_details").css("display", "none");

            $(".order_adv_details").css("display", "block");
          } else if ($("#bill_type_sales:checked").val() == 6) {
            $(".search_bill").css("display", "none");

            $(".search_order").css("display", "none");

            $(".search_esti").css("display", "none");

            $(".search_tag").css("display", "none");

            $(".sale_details").css("display", "none");

            $(".return_details").css("display", "none");

            $(".purchase_details").css("display", "none");

            $(".order_adv_details").css("display", "none");

            $(".total_summary_details").css("display", "none");
          } else if ($("#bill_type_sales:checked").val() == 7) {
            $(".search_bill").css("display", "block");

            $(".search_order").css("display", "none");

            $(".search_esti").css("display", "none");

            $(".search_tag").css("display", "none");

            $(".sale_details").css("display", "none");

            $(".return_details").css("display", "block");

            $(".purchase_details").css("display", "none");

            $(".order_adv_details").css("display", "none");

            $(".total_summary_details").css("display", "block");

            $(".from_date").css("display", "block");
          }

          break;

        case "add":
          get_employee();

          get_ActiveUOM();

          get_ActiveProduct();

          getLooseStoneProductRateSettings();

          getStoneRateSettings();

          $("#profession").select2({
            placeholder: "Select Profession",

            allowClear: true,
          });

          getOtherChargesDetails();

          get_profession();

          $("#date_of_birth").datepicker({ format: "dd-mm-yyyy" });

          $("#date_of_wed").datepicker({ format: "dd-mm-yyyy" });

          $("#eda_tax_calc").on("change", function () {
            if ($("#is_eda").val() == 2) {
              if ($(this).is(":checked")) {

								$('#is_eda_tax_calc').val(1);

								$('.pan_no').attr('disabled',true);

							}

							else {

								$('#is_eda_tax_calc').val(0);
								
								$('.pan_no').attr('disabled',false);

							}

            }

            calculateSaleBillRowTotal();
          });

          // Allow bill type 3-All , 1-Normal ,2-EDA

          if ($("#allow_bill_type").val() == 3) {
            $(document).on("keypress", function (e) {
              var bill_type = $(".bill_type_sales:checked").val();

              var billing_for = $(
                "input[name='billing[billing_for]']:checked"
              ).val();

              if (e.keyCode == 10) {
                //ctrl+enter

                if ($("#is_eda").val() == 1) {
                  //IF is_eda is 1 Normal Sale,2-No2 Sale

                  $("#is_eda").val(2);

									$('.pan_no').attr('disabled', true);

									$('#bill_cus_name').css("background-color", "red");

									$('a.card-detail').css('display', 'none');

									$('a.cheque-detail').css('display', 'none');

									$('a.net_bank').css('display', 'none');

									let ord_adv_details = $('#ord_adv_adj_details').val() != '' ? JSON.parse($('#ord_adv_adj_details').val()) : '';

									if(ord_adv_details.length > 0 && ord_adv_details[0].is_eda == 1){
				  
									  window.location.reload();
				  
									}

									if (bill_type == 1 || bill_type == 2 || bill_type == 3 || bill_type == 9 || bill_type == 15) {

										$('.eda_tax_calc').css('display', 'block');

									} else {

										$('.eda_tax_calc').css('display', 'none');

									}

                  if (billing_for == 2) {
                    // Company
                    clear_billing_details();

                    $.toaster({
                      priority: "danger",
                      title: "Warning!",
                      message: "" + "</br>B2B Bills Not allowed...",
                    });
                  }
                } else {
                  $("#is_eda").val(1);

									$('.pan_no').attr('disabled', false);

									$('a.card-detail').css('display', 'block');

                  $("a.cheque-detail").css("display", "block");

                  $("a.net_bank").css("display", "block");

                  $("#bill_cus_name").css("background-color", "");

									$('.eda_tax_calc').css('display', 'none');
									
									let ord_adv_details = $('#ord_adv_adj_details').val() != '' ? JSON.parse($('#ord_adv_adj_details').val()) : '';

									if(ord_adv_details.length > 0 && ord_adv_details[0].is_eda == 2){
				  
									  window.location.reload();
				  
									}

								}

                calculateSaleBillRowTotal();

                calculate_sales_details();
              }
            });
          } else if ($("#allow_bill_type").val() == 1) {
            //Only Normal Bills

            $("#is_eda").val(1);

            $("#bill_cus_name").css("background-color", "");

            $(".eda_tax_calc").css("display", "none");

            $("a.card-detail").css("display", "block");

						$('a.cheque-detail').css('display', 'block');

						$('a.net_bank').css('display', 'block');

						let ord_adv_details = $('#ord_adv_adj_details').val() != '' ? JSON.parse($('#ord_adv_adj_details').val()) : '';

						if (ord_adv_details.length > 0 && ord_adv_details[0].is_eda == 2) {

							window.location.reload();

						}


					}

					else //Only EDA Bills

					{

						$('#is_eda').val(2);

						$('.eda_tax_calc').css('display', 'block');

						$('#bill_cus_name').css("background-color", "red");

						$('a.net_bank').css('display', 'none');

						$('a.card-detail').css('display', 'none');

						$('a.cheque-detail').css('display', 'none');

						let ord_adv_details = $('#ord_adv_adj_details').val() != '' ? JSON.parse($('#ord_adv_adj_details').val()) : '';

						if (ord_adv_details.length > 0 && ord_adv_details[0].is_eda == 1) {

							window.location.reload();

						}

					}







          get_branches();

          $("#chit-confirm-add").on("shown.bs.modal", function (e) {
            $(".scheme_account").focus();
          });

          $("#gv-confirm-add").on("shown.bs.modal", function (e) {
            $(".voucher_no").focus();
          });

          $("#gv-confirm-add").on("hidden.bs.modal", function () {
            $("#make_pay_cash").focus();
          });

          $("#card_details").on("shown.bs.modal", function (e) {
            $(".card_name").focus();
          });

          $("#cheque-detail-modal").on("shown.bs.modal", function (e) {
            $(".cheque_datetime").focus();
          });

          $("#net_banking_modal").on("shown.bs.modal", function (e) {
            $(".nb_type").focus();
          });

          //$(":input:not(:hidden)").each(function (i) { $(this).attr('tabindex', i + 1); });

          $('a[data-toggle="tab"]').on("shown.bs.tab", function (e) {
            var target = $(e.target).attr("href"); // activated tab

            if (target == "#make_pay") {
              /*$(".receive_amount").focus();

							$(".receive_amount").attr('readonly', 'true');*/

              var is_credit = $(
                "input[name='billing[is_credit]']:checked"
              ).val();

              var is_to_be = $("input[name='billing[is_to_be]']:checked").val();

              /*$("input[name='billing[is_credit]']").click(function () {

								   if ($("#is_credit_no").is(":checked")){

									  $(".receive_amount").attr({readonly: true, disabled: false});

								  }

								  else{

									  $(".receive_amount").removeAttr('readonly');

									  if($('#credit_sales_otp_req').val()==1){

										  send_credit_bill_otp()

										  $('#otp_modal').modal('show');

									  }

									  $(".receive_amount").focus();

								  }

							  });*/
            } else if (target == "#tot_summary") {
              $(".summary_discount_amt").focus();
            } else if (target == "#pay_items") {
              var bill_type = $(".bill_type_sales:checked").val();

              if (bill_type != 7 && bill_type != 10) {
                $("#filter_est_no").focus();
              } else if (bill_type == 7) {
                $("#filter_bill_no").focus();
              }
            }

            //alert(target);
          });

          if (ctrl_page[1] == "billing") {
            $("input[name='billing[is_credit]']").click(function () {
              if ($("#is_credit_no").is(":checked")) {
                $(".receive_amount").attr({ readonly: true, disabled: false });
              } else {
                $(".receive_amount").removeAttr("readonly");
              }
            });
          }

          if ($("#credit_due_date").length > 0) {
            $("#credit_due_date")
              .datepicker({
                startDate: "+1d",

                format: "dd-mm-yyyy",
              })

              .on("changeDate", function (ev) {
                $(this).datepicker("hide");
              });
          }

          jQuery("body").on("click", ".next-tab", function () {
            var next = jQuery(".nav-tabs > .active").next("li");

            if (next.length) {
              next.find("a").trigger("click");
            } else {
              jQuery("#billing-tab a:first").tab("show");
            }
          });

          get_delivery_details();

          hide_page_open_details();

          get_ActiveMetal();

          $("#payment_list1").empty();

          $("#payment_list2").empty();

          $("#payment_list1").text(
            moment().startOf("month").format("dd-mm-yyyy")
          );

          $("#payment_list2").text(
            moment().endOf("month").format("dd-mm-yyyy")
          );

          $("#payment-dt-btn").daterangepicker(
            {
              ranges: {
                Today: [moment(), moment()],

                Yesterday: [
                  moment().subtract(1, "days"),
                  moment().subtract(1, "days"),
                ],

                "Last 7 Days": [moment().subtract(6, "days"), moment()],

                "Last 30 Days": [moment().subtract(29, "days"), moment()],

                "This Month": [
                  moment().startOf("month"),
                  moment().endOf("month"),
                ],

                "Last Month": [
                  moment().subtract(1, "month").startOf("month"),
                  moment().subtract(1, "month").endOf("month"),
                ],
              },

              startDate: moment().subtract(29, "days"),

              endDate: moment(),
            },

            function (start, end) {
              $("#reportrange span").html(
                start.format("MMMM D, YYYY") +
                  " - " +
                  end.format("MMMM D, YYYY")
              );

              if ($("#id_branch").val() != "") {
                if ($("#bill_cus_id").val() != "") {
                  getBillDetails_DateFilter(
                    start.format("dd-mm-yyyy"),
                    end.format("dd-mm-yyyy")
                  );
                } else {
                  alert("Select Customer");
                }
              } else {
                alert("Select Branch");
              }

              $("#payment_list1").text(start.format("dd-mm-yyyy"));

              $("#payment_list2").text(end.format("dd-mm-yyyy"));
            }
          );

          $("input[name='billing[is_to_be]']").click(function () {
            if ($("#is_to_be_no").is(":checked")) {
              $(".receive_amount").attr({ readonly: true, disabled: false });
            } else {
              $(".receive_amount").removeAttr("readonly");
            }
          });

          $(document).on("click", "#send_discount_otp", function () {
            var mc_va_disc_status = discount_validation_for_salebill();

            // calculate_discount_amt();

            let disc_status = DiscountValidationForBill();

            if (disc_status.status == true) {
              if ($("#bill_disc_approval_type").val() == 1) {
                discount_otp();
              } else if ($("#bill_disc_approval_type").val() == 2) {
                send_mobile_approval_request();
              }
            } else {
              $("#otp_validation").modal("hide");
            }
          });

          $(document).on("click", "#send_credit_otp", function () {
            if ($("#credit_sales_approval_type").val() == 1) {
              send_credit_bill_otp();
            } else if ($("#credit_sales_approval_type").val() == 2) {
              send_cc_app_approval_request();
            }
          });

          break;
      }

      break;

    case "bill_split":
      get_ActiveUOM();

      get_payModes();

      get_ActiveMetal();

      getStoneRateSettings();

      $("#credit_discount").css("display", "none");

      $("#eda_tax_calc").on("change", function () {
        if ($("#is_eda").val() == 2) {
          if ($(this).is(":checked")) {
            $("#is_eda_tax_calc").val(1);
          } else {
            $("#is_eda_tax_calc").val(0);
          }
        }

        calculateSaleBillRowTotal();
      });

      // Allow bill type 3-All , 1-Normal ,2-EDA

      if ($("#allow_bill_type").val() == 3) {
        $(document).on("keypress", function (e) {
          var bill_type = $(".bill_type_sales:checked").val();

          if (e.keyCode == 10) {
            //ctrl+enter

            if ($("#is_eda").val() == 1) {
              //IF is_eda is 1 Normal Sale,2-No2 Sale

              $("#is_eda").val(2);

              $("#bill_cus_name").css("background-color", "red");

              if (
                bill_type == 1 ||
                bill_type == 2 ||
                bill_type == 3 ||
                bill_type == 9 ||
                bill_type == 15
              ) {
                $(".eda_tax_calc").css("display", "block");
              } else {
                $(".eda_tax_calc").css("display", "none");
              }
            } else {
              $("#is_eda").val(1);

              $("#bill_cus_name").css("background-color", "");

              $(".eda_tax_calc").css("display", "none");
            }

            calculateSaleBillRowTotal();

            calculate_sales_details();
          }
        });
      } else if ($("#allow_bill_type").val() == 1) {
        //Only Normal Bills

        $("#is_eda").val(1);

        $("#bill_cus_name").css("background-color", "");

        $(".eda_tax_calc").css("display", "none");
      } //Only EDA Bills
      else {
        $("#is_eda").val(2);

        $(".eda_tax_calc").css("display", "block");

        $("#bill_cus_name").css("background-color", "red");
      }

      break;

    case "item_delivery":
      get_delivery_list();

      break;

    case "cash_collection":
      switch (ctrl_page[2]) {
        case "add":
          get_ActiveCounters();

          $("#cash_coll_date").datepicker("setDate", new Date());
          break;

        case "list":
          var date = new Date();

          var firstDay = new Date(
            date.getFullYear(),
            date.getMonth(),
            date.getDate() - 0,
            1
          );

          var from_date =
            firstDay.getFullYear() +
            "-" +
            (firstDay.getMonth() + 1) +
            "-" +
            firstDay.getDate();

          var to_date =
            date.getDate() +
            "-" +
            (date.getMonth() + 1) +
            "-" +
            date.getFullYear();

          $("#cash_date1").html(from_date);

          $("#cash_date2").html(to_date);

          get_cash_collection_list(from_date, to_date);

          $("#ltInward-dt-btn").daterangepicker(
            {
              ranges: {
                Today: [moment(), moment()],

                Yesterday: [
                  moment().subtract(1, "days"),
                  moment().subtract(1, "days"),
                ],

                "Last 7 Days": [moment().subtract(6, "days"), moment()],

                "Last 30 Days": [moment().subtract(29, "days"), moment()],

                "This Month": [
                  moment().startOf("month"),
                  moment().endOf("month"),
                ],

                "Last Month": [
                  moment().subtract(1, "month").startOf("month"),
                  moment().subtract(1, "month").endOf("month"),
                ],
              },

              startDate: moment().subtract(29, "days"),

              endDate: moment(),
            },

            function (start, end) {
              $("#cash_date1").text(start.format("dd-mm-yyyy"));

              $("#cash_date2").text(end.format("dd-mm-yyyy"));

              get_cash_collection_list(from_date, to_date);
            }
          );

          break;
      }

      break;

    case "receipt":
      switch (ctrl_page[2]) {
        case "list":
          get_ActiveKaigar();

          set_receipt_list();

          break;

        case "add":
          get_branch_day_closing_details();

          get_employee();

          get_profession();

          $("#date_of_birth").datepicker({ format: "dd-mm-yyyy" });

          $("#date_of_wed").datepicker({ format: "dd-mm-yyyy" });

          $("#profession").select2({
            placeholder: "Select Profession",

            allowClear: true,
          });

          // Allow bill type 3-All , 1-Normal ,2-EDA

          if ($("#allow_bill_type").val() == 3) {
            $(document).on("keypress", function (e) {
              if (e.keyCode == 10) {
                //ctrl+enter

                if ($("#is_eda").val() == 1) {
                  //IF is_eda is 1 Normal Sale,2-No2 Sale

                  $("#is_eda").val(2);

                  $("#name").css("background-color", "red");

                  $("#card_detail_modal").css("display", "none");

                  $("#cheque_modal").css("display", "none");

                  $("a.net_bank").css("display", "none");
                } else {
                  $("#is_eda").val(1);

                  $("#name").css("background-color", "");

                  $("#card_detail_modal").css("display", "block");

                  $("#cheque_modal").css("display", "block");

                  $("a.net_bank").css("display", "block");
                }
              }
            });
          } else if ($("#allow_bill_type").val() == 1) {
            $("#is_eda").val(1);

            $("#name").css("background-color", "");

            $("#card_detail_modal").css("display", "block");

            $("#cheque_modal").css("display", "block");

            $("a.net_bank").css("display", "block");
          } else {
            $("#is_eda").val(2);

            $("#name").css("background-color", "red");

            $("#card_detail_modal").css("display", "none");

            $("#cheque_modal").css("display", "none");

            $("a.net_bank").css("display", "none");
          }

          break;
      }

      break;

    case "issue":
      switch (ctrl_page[2]) {
        case "list":
          get_ActiveKaigar();

          set_issue_list();

          break;

        case "add":
          // Allow bill type 3-All , 1-Normal ,2-EDA
          get_employee();

          get_account_head();

          if ($("#allow_bill_type").val() == 3) {
            $(document).on("keypress", function (e) {
              if (e.keyCode == 10) {
                //ctrl+enter

                if ($("#is_eda").val() == 1) {
                  //IF is_eda is 1 Normal Sale,2-No2 Sale

                  $("#is_eda").val(2);

                  $("#name").css("background-color", "red");

                  $("#card_detail_modal").css("display", "none");

                  $("#cheque_modal").css("display", "none");

                  $("a.net_bank").css("display", "none");

                  $("a.card").css("display", "none");
                } else {
                  $("#is_eda").val(1);

                  $("#name").css("background-color", "");

                  $("#card_detail_modal").css("display", "block");

                  $("#cheque_modal").css("display", "block");

                  $("a.net_bank").css("display", "block");

                  $("a.card").css("display", "block");
                }
              }
            });
          } else if ($("#allow_bill_type").val() == 1) {
            $("#is_eda").val(1);

            $("#name").css("background-color", "");

            $("#card_detail_modal").css("display", "block");

            $("#cheque_modal").css("display", "block");

            $("a.net_bank").css("display", "block");

            $("a.card").css("display", "block");
          } else {
            $("#is_eda").val(2);

            $("#name").css("background-color", "red");

            $("#card_detail_modal").css("display", "none");

            $("#cheque_modal").css("display", "none");

            $("a.net_bank").css("display", "none");

            $("a.card").css("display", "none");
          }

          break;
      }

		case 'paymentmode_edit':
			switch (ctrl_page[2]) {
				case 'list':
					get_bank_details();
					$('#save_bill_edit').prop('disabled', true);
					$('#updBilledName').prop('disabled', true);
					$('#updEmpName').prop('disabled', true);
					$('#updCusName').prop('disabled', true);
					$('#updPanNo').prop('disabled', true);
					$('#updGstNo').prop('disabled', true);
					$('#updAadharNo').prop('disabled', true);
					$('#updCusType').prop('disabled', true);
					$('#card_detail_modal').prop('disabled', true);
					$('#cheque_modal').prop('disabled', true);
					$('#net_bank_modal').prop('disabled', true);
					get_payment_device_details();
					$('#paymentmode_ed').val(ctrl_page[3]);
					get_employee();
					setTimeout(function () {
						$('#billed_search').trigger('click');
					}, 100);
					break;
			}
			break;

    case "service_bill":
      switch (ctrl_page[2]) {
        case "list":
          get_service_bill_list();

          break;

        case "add":
          create_new_empty_repair_order_row();

          break;
      }

      $(document)
        .on('input[type="number"]')
        .on("keypress", function (e) {
          if (e.keyCode == 45) {
            e.preventDefault();

            return false;
          }
        });

      break;

      break;
  }

  get_taxgroup_items();

  get_tag_purities();

  get_tag_matels();

  get_stones();

  get_materials();

  get_bank_details();

  get_payment_device_details();

  get_purity_rate();

  get_all_old_metal_rates();

  get_old_metal_categories();

  get_old_metal_types();

  get_stone_types();

  $("#bill_search").click(function (event) {
    $("#total_billing").text(0);
    get_billing_list();
  });

  $("#approval_bill_search").click(function (event) {
    get_approval_billing_list();
  });

  $("#gst_number").on("change", function () {
    if ($("#gst_number").val() != "") {
      var regexp =
        /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Za-z]{1}[Zz]{1}[0-9A-Za-z]{1}$/;

      if (!regexp.test($("#gst_number").val())) {
        $("#gst_number").val("");
        alert("Not a valid GST No.");
        $("#gst_number").focus();
      }
    } else {
      alert("Enter valid GST No.");
    }
  });

  $("#pay_submit").on("click", function () {
    if (ctrl_page[1] == "bill_split") {
      bill_split_submit();
    } else {
      var is_counter_req = $("#is_counter_req").val();

      var counter_id = $("#counter_id").val();

      var mac_id = localStorage.getItem("mac_id");

      var allow_submit = true;

      var finalname = $("#finalname").val();

      var is_store_delivery = $("#delivered_at").val();

      var bill_type = $("input[name='billing[bill_type]']:checked").val();

      var is_credit = $("input[name='billing[is_credit]']:checked").val();

      var is_to_be = $("input[name='billing[is_to_be]']:checked").val();

      var is_aganist_order = $(
        "input[name='billing[is_aganist_order]']:checked"
      ).val();

      var credit_Otp_approval = $("#credit_sales_otp_req").val();

      var billing_for = $("input[name='billing[billing_for]']:checked").val();

      // alert((bill_type==9) && $('#otp_required').val() == 1 && $('#is_otp_verfied').val() != 1);

      if ($("#id_branch").val() == "") {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Please Select The Branch..",
        });

        allow_submit = false;
      } else if (finalname == "" || finalname == undefined) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Please Enter Customer Name..",
        });

        allow_submit = false;
      } else if (bill_type == "" || bill_type == undefined) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Please Select The Bill Type..",
        });

        allow_submit = false;
      } else if ($("#bill_cus_id").val() == "") {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Please Select The Customer",
        });

        allow_submit = false;
      } else if (bill_type == 5 && $("#filter_order_no").val() == "") {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Please Enter The Order No",
        });

        allow_submit = false;
      } else if (
        /*else if (billing_for == 2 && ($('#gst_number').val() == '')) {

				$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>Please Enter The GST No." });

				allow_submit = false;

			}*/
        bill_type == 5 &&
        $("#billing_order_adv_details >tbody>tr").length == 0
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Order Details Not Found..",
        });

        allow_submit = false;
      } else if (
        (bill_type == 1 || bill_type == 15) &&
        $("#billing_sale_details >tbody>tr").length == 0
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Sales Details Not Found..",
        });

        allow_submit = false;
      } else if (
        bill_type == 2 &&
        ($("#billing_sale_details >tbody>tr").length == 0 ||
          $("#purchase_item_details >tbody>tr").length == 0)
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Sales Or Old Metal Items Details Not Found..",
        });

        allow_submit = false;
      } else if (
        bill_type == 3 &&
        ($("#billing_sale_details >tbody>tr").length == 0 ||
          $("#sale_return_details >tbody>tr").length == 0)
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Sales Or Sales Return Items Details Not Found..",
        });

        allow_submit = false;
      } else if (
        bill_type == 4 &&
        $("#purchase_item_details >tbody>tr").length == 0
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Old Metal Items Details Not Found..",
        });

        allow_submit = false;
      } else if (
        bill_type == 6 &&
        $("#sale_return_details >tbody>tr").length == 0
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Sales Return Items Details Not Found..",
        });

        allow_submit = false;
      } else if (bill_type == 5 && $("#filter_order_no").val() == "") {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Please Enter The Order No",
        });

        allow_submit = false;
      } else if (
        bill_type == 5 &&
        $("#billing_order_adv_details >tbody>tr").length == 0
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Order Details Not Found..",
        });

        allow_submit = false;
      } else if (
        bill_type == 7 &&
        $("#sale_return_details >tbody>tr").length == 0
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Return Details Not Found..",
        });

        allow_submit = false;
      } else if (bill_type == 8 && $("#filter_bill_no").val() == "") {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Please Select Bill No..",
        });

        allow_submit = false;
      } else if (
        bill_type == 9 &&
        $("#billing_sale_details >tbody>tr").length == 0
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Sales Details Not Found..",
        });

        allow_submit = false;
      } else if (
        bill_type == 9 &&
        $("#otp_required").val() == 1 &&
        $("#is_otp_verfied").val() != 1
      ) {
        $("#order_otp_modal").modal("show");

        order_at_send_otp();

        allow_submit = false;
      } else if (
        bill_type == 11 &&
        $("#billing_repair_order_details >tbody>tr").length == 0 &&
        is_aganist_order == 1
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Repair Item Details Not Found..",
        });

        allow_submit = false;
      } else if (
        bill_type == 11 &&
        $("#billing_repair_order_other_details >tbody>tr").length == 0 &&
        is_aganist_order == 2
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Repair Item Details Not Found..",
        });

        allow_submit = false;
      } else if (is_credit == 1 && $("#credit_due_date").val() == "") {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Please Select Credit Due Date..",
        });

        allow_submit = false;
      } else if (
        $("#billing_sale_details >tbody>tr").length > 0 &&
        bill_type != 11
      ) {
        if (
          ($("#cus_del_state").val() == "" ||
            $("#cus_del_country").val() == "") &&
          bill_type != 12
        ) {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>Please Check The Delivery Address..",
          });

          allow_submit = false;
        }

        if (
          $(".sales_sgst").html() == 0 &&
          $(".sales_cgst").html() == 0 &&
          $(".sales_igst").html() == 0 &&
          $("#is_eda").val() == 1
        ) {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message:
              "" +
              "</br>GST Not Calculated..Please Check The Delivery Address..",
          });

          allow_submit = false;
        }
      } else if (
        $("#billing_sale_details >tbody>tr").length > 0 &&
        bill_type != 11
      ) {
        $("#billing_sale_details > tbody tr").each(function (idx, row) {
          curRow = $(this);

          if (
            curRow.find(".bill_net_val").val() !=
              curRow.find(".bill_tag_net_wt_val").val() &&
            curRow.find(".is_partial").val() == 0
          ) {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message:
                "" + "</br>Tag Net Weight and Sale weight is difference..",
            });

            allow_submit = false;
          }
        });
      } else if (bill_type == 12) {
        var tag_sales_list = [];

        var non_tag_sales_list = [];

        if ($("#nontagreturnitemlist").val() != "") {
          non_tag_sales_list = JSON.parse($("#nontagreturnitemlist").val());
        }

        if ($("#returntaggeditemlist").val() != "") {
          tag_sales_list = JSON.parse($("#returntaggeditemlist").val());
        }

        if (tag_sales_list.length == 0 && non_tag_sales_list.length == 0) {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>Sales Details Not Found..",
          });

          allow_submit = false;
        }
      }

      if (is_counter_req == 1 && bill_type != 12) {
        if (counter_id == "" || counter_id == null || counter_id == undefined) {
          allow_submit = false;

          $.toaster({
            priority: "danger",
            title: "Warning!",
            message:
              "" +
              "</br>Unable to Set The MAC Address For Your System.Please Contact Your Admin..",
          });
        }
      }

      if (ctrl_page[1] == "billing" && $("#is_eda").val() == 1) {
        get_check_customer_payment_det();

        let max_cash_valid = validate_max_cash();

        if (max_cash_valid == false) {
          allow_submit = false;
        }
      }

      if (bill_type == 1 || bill_type == 2 || bill_type == 3) {
        $("#billing_sale_details > tbody > tr").each(function (idx, row) {
          currow = $(this);
          if (
            currow.find(".item_emp_sel ").val() == "" &&
            currow.find(".est_itm_id ").val() == ""
          ) {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: "" + "Please Select Employee In Sales Items",
            });
            allow_submit = false;
          }
        });
      }

      if (allow_submit == true && is_credit == 1 && is_to_be == 0) {
        $(".receive_amount").prop("readonly", false);
        if ($("#credit_sales_otp_req").val() == 1) {
          let CreditApprovalMessage =
            "OTP will be sent to the administrator for approval. Do you wish to proceed?";
          credit_otp_confirmation(CreditApprovalMessage);
        }
        $(".receive_amount").focus();
      } else {
        $(".receive_amount").prop("readonly", true);
      }

      if (allow_submit == true && is_credit == 1 && credit_Otp_approval == 1) {
        if ($("#credit_sales_approval_type").val() == 1) {
          // OTP Will Send To Mobile
          let CreditApprovalMessage =
            "OTP will be sent to the administrator for approval. Do you wish to proceed?";
          credit_otp_confirmation(CreditApprovalMessage);
          allow_submit = false;
        } else if (
          $("#credit_sales_approval_type").val() == 2 &&
          $("#is_approval_success").val() == 0
        ) {
          //Mobile App Approval
          let CreditApprovalMessage =
            "App Approval Request will be sent to the administraton. Do you wish to proceed?";
          credit_app_approval_confirmation(CreditApprovalMessage);
          allow_submit = false;
        }
      }

      if (
        $("#billing_emp_select_req").val() == 1 &&
        ($("#emp_select").val() == "" || $("#emp_select").val() == null)
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Please Select Employee..",
        });

        allow_submit = false;
      }

      if (bill_type == 5) {
        console.log("Tot_amt ---", $(".sum_of_amt").html());
        console.log("adv_amt ---", $(".adv_amt").val());
        if (parseFloat($(".sum_of_amt").html()) > 0) {
          if (
            parseFloat($(".adv_amt").val()) !=
            parseFloat($(".sum_of_amt").html())
          ) {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: "" + "</br>Please Enter the Advance Amount..",
            });
            allow_submit = false;
            var prev = $(".nav-tabs > .active").prev("li");
            prev.find("a").trigger("click");
            $(".adv_amt").focus();
          }
        }
      }

      let sales_item_len = $("#billing_sale_details tbody tr").length;

      let is_direct_billing = true;

      $("#billing_sale_details > tbody > tr").each(function (idx, row) {
        currow = $(this);
        if (
          currow.find("#item_type").val() != 1 ||
          currow.find("#item_type").val() != 2
        ) {
          is_direct_billing = false;
        }
      });

      if (sales_item_len > 0 && is_direct_billing == true) {
        if (!validateSaleTagDetailRow()) {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>Please Enter All Requied field in Sales item..",
          });

          allow_submit = false;
        }
      }

      if (allow_submit == true) {
        $("div.overlay").css("display", "block");

        var form_data = $("#bill_pay").serialize();

        $("#pay_submit").prop("disabled", true);

        var url =
          base_url +
          "index.php/admin_ret_billing/billing/save?nocache=" +
          my_Date.getUTCSeconds();

        $.ajax({
          url: url,

          data: form_data,

          type: "POST",

          dataType: "JSON",

          success: function (data) {
            if (data.status) {
              $("div.overlay").css("display", "none");

              if (bill_type == 11 && data.print_type == 2) {
                window.open(
                  base_url +
                    "index.php/admin_ret_billing/repair_order_thermal_print/" +
                    data["id"],
                  "_blank"
                );
              } else {
                window.open(
                  base_url +
                    "index.php/admin_ret_billing/billing_invoice/" +
                    data["id"],
                  "_blank"
                );
              }

              window.location.href =
                base_url + "index.php/admin_ret_billing/billing/add";
            } else {
              window.location.href =
                base_url + "index.php/admin_ret_billing/billing/add";
            }

            $("div.overlay").css("display", "none");
          },

          error: function (error) {
            $("div.overlay").css("display", "none");
          },
        });
      } else {
        $("#pay_submit").prop("disabled", false);

        $("div.overlay").css("display", "none");
      }
    }
  });

  if ($("#id_branch").val() != "" && $("#id_branch").val() != undefined) {
    get_metal_rates_by_branch();

    get_branch_details();

    get_branch_day_closing_details();

    get_employee();

    get_invnetory_item($("#id_branch").val());
  }

  if (ctrl_page[2] == "edit" && $("#bill_type_sales:checked").val() != 6) {
    setTimeout(function () {
      calculateSaleBillRowTotal();

      calculatePurchaseBillRowTotal();

      calculate_salesReturn_details();
    }, 1000);
  }

  $("#select_Allsale").click(function (event) {
    $("#est_items_to_sale_convertion tbody tr td .select_est_details").prop(
      "checked",
      $(this).prop("checked")
    );

    var item_pcs = 0;

    var item_gwt = 0;

    var total_pcs = $("#blc_pcs").html();

    var total_gwt = $("#blc_gwt").html();

    $("#est_items_to_sale_convertion > tbody tr").each(function (idx, row) {
      curRow = $(this);

      if (curRow.find(".select_est_details").is(":checked")) {
        if (curRow.find(".is_non_tag").val() == 1) {
          item_pcs += parseFloat(curRow.find(".est_pcs").val());

          item_gwt += parseFloat(curRow.find(".est_gross_val").val());
        }
      }
    });

    if (item_pcs <= total_pcs || item_gwt <= total_gwt) {
      $("#update_estimation_to_bill").attr("disabled", false);
    } else {
      $("#update_estimation_to_bill").attr("disabled", true);
    }

    $("#tot_pcs").html(item_pcs);

    $("#tot_wt").html(item_gwt);

    event.stopPropagation();
  });

  $("#select_Allpur").click(function (event) {
    $(
      "#est_olditems_to_sale_convertion tbody tr td input[type='checkbox']"
    ).prop("checked", $(this).prop("checked"));

    event.stopPropagation();
  });

  $("#pan_no").on("change", function () {
    if ($("#pan_no").val() != "") {
      var regexp = /^[a-zA-Z]{5}\d{4}[a-zA-Z]{1}$/;

      if (!regexp.test($("#pan_no").val())) {
        $("#pan_no").val("");

        alert("Not a valid PAN No.");

        $("#pan_no").focus();
      }
    } else {
      alert("Enter valid PAN No.");
    }

    if (ctrl_page[1] == "receipt") {
      calculate_ReceiptAmount();
    } else {
      get_tcs_percent($("#bill_cus_id").val());
      calculateFinalCost();
    }
  });



	$("#aadharid,#ed_cus_aadhar,#aadhar_no,#aadhaar_no").keyup(function () {

		var value = $(this).val();

    value = value
      .replace(/\D/g, "")
      .split(/(?:([\d]{4}))/g)
      .filter((s) => s.length > 0)
      .join("-");

    $(this).val(value);
  });

  $("#aadhar_no").on("change", function () {
    var value = $(this).val();

    var maxLength = $(this).attr("maxLength");

    if (value.length != maxLength) {
      $("#aadhar_no").val("");

      alert("Not a valid ADHAAR No.");

      $("#aadhar_no").focus();
    }

    if (ctrl_page[1] == "receipt") {
      calculate_ReceiptAmount();
    } else {
      calculateFinalCost();
    }
  });

  if ($("#credit_due_date").length > 0) {
    $("#credit_due_date")
      .datepicker({
        format: "dd-mm-yyyy",
      })

      .on("changeDate", function (ev) {
        $(this).datepicker("hide");
      });
  }

  $("input[name='billing[is_credit]']:radio").on("change", function () {
    if ($(this).val() == 0) {
      $("#credit_due_date").prop("disabled", true);
      $("#credit_due_date").val("");

      $(".receive_amount").val($("#total_cost").val());

      // For Delivery Item

      $(".delivery_status").prop("disabled", true);

      $(".delivery_status").prop("checked", true);

      $(".is_delivered").val(1);

      $("#is_to_be_no").prop("checked", true);

      $("#credit_reference").prop("disabled", true);
    } else {
      $("#credit_due_date").prop("disabled", false);

      // For Deilvery Item

      $(".delivery_status").prop("disabled", false);

      $("#credit_reference").prop("disabled", false);
    }
    calculatePaymentCost();
  });

  $("input[name='billing[sale_store_as]']:radio").on("change", function () {
    if (this.value == 1) {
      $("#rate_calc1").prop("disabled", true);

      $("#rate_calc2").prop("disabled", true);
    } else {
      $("#rate_calc1").prop("disabled", false);

      $("#rate_calc2").prop("disabled", false);
    }
  });

  $("input[name='billing[bill_type]']:radio").on("change", function () {
    clear_billing_details();

    $(".search_bill").css("display", "none");

    $(".advance_amt").css("display", "none");

    $(".search_order").css("display", "none");

    $(".search_esti").css("display", "block");

    $(".search_tag").css("display", "block");

    $(".search_order").css("display", "none");

    $(".repair_order").css("display", "none");

    $(".credit_col").css("display", "none");

    $(".eda_tax_calc").css("display", "none");

    $(".supplier_sales_bill_details").css("display", "none");

    $("#card_detail_modal").attr("disabled", false);

    $("#adv_adj_modal").attr("disabled", false);

    $("#cheque_modal").attr("disabled", false);

    $("#cheque_modal").attr("disabled", false);

    $("#is_credit_no").attr("disabled", false);

    $("#is_credit_yes").attr("disabled", false);

    $("#credit_discount").css("display", "none");

    $("#net_banking_modal").attr("disabled", false);

    $(
      ".purchase_details.order_adv_details,.sale_details,.return_details,.custom_details,.advance_amt,.total_summary_details,.summary_adv_details,.repair_order_details"
    ).hide();

    if (this.value == 1 || this.value == 15) {
      // Sales

      $(".sale_details").show();

      $(".date_filter").css("display", "none");

      $(".total_summary_details").css("display", "block");

      $(".summary_adv_details").css("display", "none");

      //$('#gift_voucher_modal').attr('disabled',false);

      if ($("#billing_sale_details tbody tr").length == 0) {
        create_new_empty_bill_sale_row(); //Create new empty bill sale empty row
      }

      $(
        ".purchase_details,.return_details,.order_adv_details,.custom_details,.old_matel_details,.advance_amt"
      ).hide();

      $("#credit_discount").css("display", "none");

      $("#sale_discount").css("display", "block");

      if ($("#is_eda").val() == 2) {
        $(".eda_tax_calc").css("display", "block");
      }

      $(".search_oldtag").show();
    } else if (this.value == 2) {
      // Sales & Purchase

      $(".sale_details,.purchase_details").show();

      $(".date_filter").css("display", "none");

      $(".summary_adv_details").css("display", "none");

      $(".total_summary_details").css("display", "block");

      //$('#gift_voucher_modal').attr('disabled',false);

      $(
        ".custom_details,.order_adv_details,.return_details,.old_matel_details,.old_matel_details,.stone_details,.material_details,.advance_amt"
      ).hide();

      if ($("#billing_sale_details tbody tr").length == 0) {
        create_new_empty_bill_sale_row(); //Create new empty bill sale empty row

        create_new_empty_est_catalog_row();
      }

      $("#credit_discount").css("display", "none");

      $("#sale_discount").css("display", "block");

      if ($("#is_eda").val() == 2) {
        $(".eda_tax_calc").css("display", "block");
      }
      $(".search_oldtag").show();
    } else if (this.value == 3) {
      // Sales & Return

      $(".search_bill").css("display", "block");

      $(".date_filter").css("display", "none");

      $(".sale_details,.return_details").show();

      $(".summary_adv_details").css("display", "none");

      $(".total_summary_details").css("display", "block");

      $(".purchase_details").show();

      $(".order_adv_details,.custom_details,.advance_amt").hide();

      //$('#gift_voucher_modal').attr('disabled',false);

      if ($("#billing_sale_details tbody tr").length == 0) {
        create_new_empty_bill_sale_row(); //Create new empty bill sale empty row
      }

      $("#credit_discount").css("display", "none");

      $("#sale_discount").css("display", "block");

      if ($("#is_eda").val() == 2) {
        $(".eda_tax_calc").css("display", "block");
      }

      if ($("#bill_cus_name").val() != "") {
        getCustomerSalesDetails($("#bill_cus_id").val());
      }
      $(".search_oldtag").show();
    } else if (this.value == 4) {
      // Purchase

      $(".search_order").css("display", "none");

      $(".total_summary_details").css("display", "block");

      $(".search_tag").css("display", "none");

      $(".date_filter").css("display", "none");

      $(".purchase_details").show();

      $(".summary_adv_details").css("display", "none");

      $("#gift_voucher_modal").attr("disabled", true);

      $(
        ".sale_details,.order_adv_details,.return_details,.custom_details,.advance_amt"
      ).hide();

      if ($("#billing_sale_details tbody tr").length == 0) {
        create_new_empty_bill_sale_row(); //Create new empty bill sale empty row
      }

      $("#credit_discount").css("display", "none");

      $("#sale_discount").css("display", "block");

      $(".search_oldtag").hide();
    } else if (this.value == 5) {
      // Order Advance

      $(".receive_amount").prop("readonly", true);

      $(".purchase_details").show();

      $(".order_adv_details").show();

      $(".search_tag").css("display", "none");

      $(".date_filter").css("display", "none");

      $(".total_summary_details").css("display", "none");

      $(".summary_adv_details").css("display", "block");

      $("#gift_voucher_modal").attr("disabled", true);

      $(".search_order").css("display", "block");

      $(".sale_details,.return_details,.custom_details,.advance_amt").hide();

      if ($("#billing_sale_details tbody tr").length == 0) {
        create_new_empty_bill_sale_row(); //Create new empty bill sale empty row
      }

      $("#credit_discount").css("display", "none");

      $("#sale_discount").css("display", "block");

      $(".search_oldtag").hide();
    } else if (this.value == 6) {
      // Advance

      $(".advance_amt").css("display", "block");

      $(".total_summary_details").css("display", "block");

      $(".search_bill").css("display", "none");

      $(".search_order").css("display", "none");

      $(".search_esti").css("display", "none");

      $(".search_tag").css("display", "none");

      $(".date_filter").css("display", "none");

      $(".purchase_details").show();

      $(".summary_adv_details").css("display", "none");

      $("#gift_voucher_modal").attr("disabled", true);

      $(
        ".total_summary_details,.purchase_details,.order_adv_details,.sale_details,.return_details,.custom_details"
      ).hide();

      if ($("#billing_sale_details tbody tr").length == 0) {
        create_new_empty_bill_sale_row(); //Create new empty bill sale empty row
      }

      $("#credit_discount").css("display", "none");

      $("#sale_discount").css("display", "block");

      $(".search_oldtag").hide();
    } else if (this.value == 7) {
      // Sales Return

      $(".search_bill").css("display", "block");

      $(".total_summary_details").css("display", "block");

      $(".date_filter").css("display", "block");

      $(".search_order").css("display", "none");

      $(".search_esti").css("display", "none");

      $(".search_tag").css("display", "none");

      $(".purchase_details").show();

      $(".summary_adv_details").css("display", "none");

      $("#gift_voucher_modal").attr("disabled", true);

      $(
        ".purchase_details,.order_adv_details,.sale_details,.return_details,.custom_details,.advance_amt"
      ).hide();

      if ($("#billing_sale_details tbody tr").length == 0) {
        create_new_empty_bill_sale_row(); //Create new empty bill sale empty row
      }

      $("#credit_discount").css("display", "none");

      $("#sale_discount").css("display", "block");

      if ($("#bill_cus_name").val() != "") {
        getCustomerSalesDetails($("#bill_cus_id").val());
      }

      $(".search_oldtag").hide();
    } else if (this.value == 8) {
      $(".search_bill").css("display", "block");

      $(".search_order").css("display", "none");

      $(".search_esti").css("display", "block");

      $(".search_tag").css("display", "none");

      $(".total_summary_details").css("display", "block");

      $(".date_filter").css("display", "none");

      $(".purchase_details").show();

      $(".summary_adv_details").css("display", "none");

      $("#gift_voucher_modal").attr("disabled", true);

      $(
        ".order_adv_details,.sale_details,.return_details,.custom_details,.advance_amt"
      ).hide();

      $("#credit_discount").css("display", "block");

      $("#sale_discount").css("display", "none");

      $(".credit_col").css("display", "block");

      if ($("#bill_cus_name").val() != "") {
        getCreditPending($("#bill_cus_id").val());
      }

      $(".search_oldtag").hide();
    } else if (this.value == 9) {
      $(".search_esti").css("display", "block");

      $(".search_tag").css("display", "none");

      $(".search_bill").css("display", "none");

      $(".search_order").css("display", "block");

      $(".total_summary_details").css("display", "block");

      $(".sale_details").show();

      $(".purchase_details").show();

      $("#credit_discount").css("display", "none");

      $("#sale_discount").css("display", "block");

      if ($("#is_eda").val() == 2) {
        $(".eda_tax_calc").css("display", "block");
      }

      $(".search_oldtag").hide();
    } else if (this.value == 10) {
      $(".search_esti").css("display", "none");

      $(".search_tag").css("display", "none");

      $(".search_bill").css("display", "none");

      $(".search_order").css("display", "none");

      $(".total_summary_details").css("display", "block");

      $("#card_detail_modal").attr("disabled", true);

      $("#card_detail_modal").attr("disabled", true);

      $("#adv_adj_modal").attr("disabled", true);

      $("#cheque_modal").attr("disabled", true);

      $("#cheque_modal").attr("disabled", true);

      $("#is_credit_no").attr("disabled", true);

      $("#is_credit_yes").attr("disabled", true);

      $("#gift_voucher_modal").attr("disabled", true);

      $("#net_banking_modal").attr("disabled", true);

      $("#credit_discount").css("display", "none");

      $("#sale_discount").css("display", "block");

      $(".search_oldtag").hide();
    } else if (this.value == 11) {
      // repair order

      $(".repair_order_details").show();

      $("#repair_order").css("display", "block");

      $(".search_order").css("display", "block");

      $(".search_esti").css("display", "none");

      $(".search_bill").css("display", "none");

      $(".search_tag").css("display", "none");

      $(".total_summary_details").css("display", "block");

      $(".summary_adv_details").css("display", "none");

      $(".search_oldtag").hide();
    } else if (this.value == 12) {
      // SUPPLIER SALES BILL

      $(".search_esti").css("display", "none");

      $(".search_bill").css("display", "none");

      $(".search_tag").css("display", "none");

      $(".supplier_sales_bill_details").css("display", "block");

      $(".total_summary_details").css("display", "block");

      get_ActiveKaigar();

      $("#select_product").select2({
        placeholder: "Select Product",

        allowClear: true,
      });

      $("#select_design").select2({
        placeholder: "Select Design",

        allowClear: true,
      });

      $("#select_sub_design").select2({
        placeholder: "Select Sub Design",

        allowClear: true,
      });

      $("#billing_for3").prop("checked", true);

      get_non_tag_product();

      get_available_metal_stock_details();

      if ($("#billing_supplier_sales_bill_details tbody tr").length == 0) {
        //create_new_empty_supplier_sale_row();//Create new empty bill sale empty row
      }

      if ($("#is_eda").val() == 2) {
        $(".eda_tax_calc").css("display", "block");
      }
    } else {
      $(".sale_details,.purchase_details,.custom_details,.advance_amt").hide();
    }

    var target = $("ul.nav-tabs li.active a").attr("href");

    console.log(target);

    if (target == "#make_pay") {
      $(".receive_amount").focus();
    } else if (target == "#tot_summary") {
      $(".summary_discount_amt").focus();
    } else if (target == "#pay_items") {
      var bill_type = $(".bill_type_sales:checked").val();

      if (bill_type != 7 && bill_type != 10) {
        $("#filter_est_no").focus();
      } else if (bill_type == 7) {
        $("#filter_bill_no").focus();
      }
    }
  });

  $("#create_sale_details").on("click", function () {
    if (validateSaleDetailRow()) {
      create_new_empty_bill_sale_row();
    } else {
      alert("Please fill required fields");
    }
  });

  $("#create_purchase_details").on("click", function () {
    if (validateCatalogDetailRow()) {
      create_new_empty_est_catalog_row();
    } else {
      alert("Please fill required fields");
    }
  });

  $("#search_est_no").on("click", function () {
    var bill_type = $("input[name='billing[bill_type]']:checked").val();

    if (
      $("#filter_est_no").val() != "" &&
      $("#id_branch").val() != "" &&
      bill_type != "" &&
      validateSaleTagDetailRow()
    ) {
      if (bill_type == 5 && $("#filter_order_no").val() != "") {
        getEstimationDetails($("#filter_est_no").val(), "", bill_type);
      }

      if (bill_type != 5) {
        getEstimationDetails($("#filter_est_no").val(), "", bill_type);
      }
    } else {
      if ($("#id_branch").val() == "") {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>" + "Select Branch",
        });

        $("#id_branch").focus();
      } else if ($("#filter_est_no").val() == "") {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>" + "Enter Estimation No",
        });

        $("#filter_order_no").focus();
      }
    }

    $("#filter_est_no").val("").focus();
  });

  $("#update_estimation_to_bill").on("click", function () {
    var bill_type = $("input[name='billing[bill_type]']:checked").val();

    $("#est_items_to_sale_convertion > tbody tr").each(function (idx, row) {
      est_sale_row = $(this);

      var rowExist = false;

      if (est_sale_row.find("td:first .select_est_details").is(":checked")) {
        if (bill_type != 5) {
          $(".sale_details").show();

          $("#billing_sale_details > tbody tr").each(function (bidx, brow) {
            bill_sale_row = $(this);

            // CHECK DUPLICATES - TAG

            if (bill_sale_row.find(".sale_tag_id").val() != "") {
              if (
                est_sale_row.find(".est_tag_id").val() ==
                bill_sale_row.find(".sale_tag_id").val()
              ) {
                rowExist = true;

                /*console.log("Tag ID - "+bidx+" : From Modal"+est_sale_row.find('td:first .est_tag_id').val()+" From Bill"+bill_sale_row.find('td:eq(15) .sale_tag_id').val());

								console.log(rowExist);*/
              }
            }

            // CHECK DUPLICATES - ESTIMATION ITEM

            if (bill_sale_row.find("td:first .is_est_details").val() == 1) {
              if (
                est_sale_row.find("td:first .est_itm_id").val() ==
                bill_sale_row.find("td:first .est_itm_id").val()
              ) {
                rowExist = true;

                /*console.log("Esti ID - "+bidx+" : From Modal"+est_sale_row.find('td:first .est_itm_id').val()+" From Bill"+est_sale_row.find('td:first .est_itm_id').val());

								console.log(rowExist);*/
              }
            }
          });

          console.log(rowExist);

          if (!rowExist) {
            var row_st_details = est_sale_row.find(".est_item_stone_dt").val();

            var stone_details = JSON.parse(row_st_details);

            var tot_length = $("#billing_sale_details tbody tr").length;

            if (est_sale_row.find(".select_est_partial").is(":checked")) {
              var row =
                '<tr id="' +
                tot_length +
                '">' +
                "<td><span>" +
                est_sale_row.find("td:first .est_hsn").val() +
                '</span><input type="hidden" class="sale_pro_hsn" name="sale[hsn]" value="' +
                est_sale_row.find("td:first .est_hsn").val() +
                '" /><input type="hidden" class="sale_type" name="sale[sourcetype][]" value="1" /><input type="hidden" class="sale_item_type" name="sale[itemtype][]" value="' +
                est_sale_row.find("td:first .est_item_type").val() +
                '" /><input type="hidden" class="is_est_details" value="1" name="sale[is_est_details][]" /><input type="hidden" class="est_itm_id" name="sale[est_itm_id][]" value="' +
                est_sale_row.find("td:first .est_itm_id").val() +
                '" /><input type="hidden" class="sale_cal_type" name="sale[calltype][]" value="' +
                est_sale_row.find("td:first .est_cal_type").val() +
                '" /><input type="hidden" class="sale_metal_type" value="' +
                est_sale_row.find("td:first .est_metal_type").val() +
                '" /><input type="hidden" class="sale_purity" value="' +
                est_sale_row.find(".est_purid").val() +
                '"  name="sale[purity][]" /><input type="hidden" class="sale_size" value="' +
                est_sale_row.find(".est_size_val").val() +
                '"  name="sale[size][]" /><input type="hidden" class="is_partial" value="' +
                est_sale_row.find(".select_est_partial").val() +
                '"  name="sale[is_partial][]" /><input type="hidden" class="total_tax" name="sale[item_total_tax][]"><input type="hidden" class="sale_uom" value="' +
                est_sale_row.find("td:eq(0) .est_uom").val() +
                '"  name="sale[uom][]" /><input type="hidden" class="min_wastage" value="' +
                est_sale_row.find(".min_wastage").val() +
                '"  name="sale[min_wastage][]" /><input type="hidden" class="max_wastage" value="' +
                est_sale_row.find(".max_wastage").val() +
                '"  name="sale[max_wastage][]" /><input type="hidden" class="wastage_dis" value="0" /><input type="hidden" class="stock_type" name="sale[stock_type][]" value="' +
                est_sale_row.find(".stock_type").val() +
                '" /><input type="hidden" class="is_non_tag" name="sale[is_non_tag][]" value="' +
                est_sale_row.find(".is_non_tag").val() +
                '" /><input type="hidden" name="sale[id_orderdetails][]" class="id_orderdetails" value="' +
                est_sale_row.find(".id_orderdetails").val() +
                '"></td>' +
                "<td><span>" +
                est_sale_row.find(".est_product_name").html() +
                '</span><input class="sale_product_id" type="hidden" name="sale[product][]" value="' +
                est_sale_row.find(".est_product_id").val() +
                '" /></td>' +
                "<td><span>" +
                est_sale_row.find(".est_design_code").html() +
                '</span><input type="hidden" class="sale_design_id" name="sale[design][]" value="' +
                est_sale_row.find(".est_design_id").val() +
                '" /></td>' +
                "<td><span>" +
                est_sale_row.find(".est_piece").html() +
                '</span><input type="hidden" class="sale_pcs" name="sale[pcs][]" value="' +
                est_sale_row.find(".est_pcs").val() +
                '"  /></td>' +
                '<td><input type="number" class="sale_gwt" value="' +
                est_sale_row.find(".est_gross_wt").html() +
                '" style="width:80px;"><input type="hidden" class="bill_gross_val" name="sale[gross][]" value="' +
                est_sale_row.find(".est_gross_val").val() +
                '" /></td>' +
                '<td><input type="number" class="sale_lwt" value="' +
                est_sale_row.find(".est_less_wt").html() +
                '" style="width:80px;"><input type="hidden" class="bill_less_val" name="sale[less][]" value="' +
                est_sale_row.find(".est_less_val").val() +
                '" /></td>' +
                '<td><input type="number" class="sale_nwt" value="' +
                est_sale_row.find(".est_net_wt").html() +
                '" style="width:80px;"><input type="hidden" class="bill_net_val" name="sale[net][]" value="' +
                est_sale_row.find(".est_net_val").val() +
                '" /></td>' +
                '<td><span class="est_wastage">' +
                est_sale_row.find(".est_wastage").html() +
                '</span><input type="hidden" class="bill_wastage" name="sale[wastage][]" value="' +
                est_sale_row.find(".est_wastage_percent").val() +
                '" /><input type="hidden" class="bill_wastage_per" name="sale[wastage][]" value="' +
                est_sale_row.find(".est_wastage_percent").val() +
                '" /></td>' +
                '<td><span class="est_wastage_wt">' +
                est_sale_row.find(".est_wastage_wt").html() +
                '</span><input type="hidden" class="bill_wastage_wt" value="' +
                est_sale_row.find(".est_wastage_wt").html() +
                '"><input type="hidden" name="sale[wastage_discount][]" class="wastage_discount" value=""><input type="hidden" name="sale[mc_discount][]" class="mc_discount" value=""><input type="hidden" name="sale[item_blc_discount][]" class="item_blc_discount" value=""></td>' +
                '<td><span class="making_charge">' +
                est_sale_row.find(".est_mc").html() +
                '</span><input type="hidden" class="mc_dis" value="0"><input type="hidden" class="bill_mctype" name="sale[bill_mctype][]" value="' +
                est_sale_row.find(".est_mc_type").val() +
                '" /><input type="hidden" class="bill_mc" name="sale[mc][]" value="' +
                est_sale_row.find(".est_mc_value").val() +
                '" /><input type="hidden" class="discount" name="sale[adjusted_dis][]" value="" /><input type="hidden" class="bill_mc_value" value="' +
                est_sale_row.find(".est_mc_value").val() +
                '" /></td>' +
                '<td><input type="number" class="bill_discount" name="sale[discount][]"  step="any" readonly/></td>' +
                '<td><span class="bill_taxable_amt"></span></td>' +
                "<td><span>" +
                est_sale_row.find(".est_tgrp_name").html() +
                '</span><input type="hidden" class="sale_tax_group" name="sale[taxgroup][]" value="' +
                est_sale_row.find(".est_tax_id").val() +
                '" /></td>' +
                "<td></td>" +
                "<td>" +
                (stone_details.length > 0
                  ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>'
                  : "-") +
                '<input type="hidden" class="stone_details" value=\'' +
                est_sale_row.find(".est_item_stone_dt").val() +
                '\' name="sale[stone_details][]"/><input type="hidden" class="bill_stone_price" value="' +
                est_sale_row.find(".est_stone_price").val() +
                '" /><input type="hidden" class="certification_cost" value="' +
                est_sale_row.find(".est_certification_price").val() +
                '" /><input type="hidden" class="bill_material_price" value="' +
                est_sale_row.find(".est_material_price").val() +
                '"/></td>' +
                '<td><input type="number" class="bill_amount" name="sale[billamount][]" value="" step="any" readonly /><input type="hidden" class="per_grm_amount" name="sale[per_grm][]" value="" step="any" /></td>' +
                "<td>Yes</td>" +
                "<td><span>" +
                est_sale_row.find("td:first .est_tag_id").val() +
                '</span><input type="hidden" class="sale_tag_id" name="sale[tag][]" value="' +
                est_sale_row.find("td:first .est_tag_id").val() +
                '" /><input type="hidden" name="sale[total_cgst][]" class="sale_cgst"/><input type="hidden" class="sale_sgst" name="sale[total_sgst][]"/><input type="hidden" class="sale_igst" name="sale[total_igst][]"/></td>' +
                "<td>-</td>" +
                "<td><span>" +
                est_sale_row.find("td:first .est_itm_id").val() +
                '</span><input type="hidden" class="sale_est_itm_id" name="sale[estid][]" value="' +
                est_sale_row.find("td:first .est_itm_id").val() +
                '" /></td>' +
                '<td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
                "</tr>";
            } else {
              var row =
                '<tr id="' +
                tot_length +
                '">' +
                "<td><span>" +
                est_sale_row.find("td:first .est_hsn").val() +
                '</span><input type="hidden" name="sale[id_orderdetails][]" class="id_orderdetails" value="' +
                est_sale_row.find(".id_orderdetails").val() +
                '"><input type="hidden" class="sale_pro_hsn" name="sale[hsn]" value="' +
                est_sale_row.find("td:first .est_hsn").val() +
                '" /><input type="hidden" class="sale_type" name="sale[sourcetype][]" value="1" /><input type="hidden" class="sale_item_type" name="sale[itemtype][]" value="' +
                est_sale_row.find("td:first .est_item_type").val() +
                '" /><input type="hidden" class="is_est_details" value="1" name="sale[is_est_details][]" /><input type="hidden" class="est_itm_id" name="sale[est_itm_id][]" value="' +
                est_sale_row.find("td:first .est_itm_id").val() +
                '" /><input type="hidden" class="sale_cal_type" name="sale[calltype][]" value="' +
                est_sale_row.find("td:first .est_cal_type").val() +
                '" /><input type="hidden" class="sale_metal_type" value="' +
                est_sale_row.find("td:first .est_metal_type").val() +
                '" /><input type="hidden" class="sale_purity" value="' +
                est_sale_row.find(".est_purid").val() +
                '"  name="sale[purity][]" /><input type="hidden" class="sale_size" value="' +
                est_sale_row.find(".est_size_val").val() +
                '"  name="sale[size][]" /><input type="hidden" class="sale_uom" value="' +
                est_sale_row.find("td:eq(0) .est_uom").val() +
                '"  name="sale[uom][]" /><input type="hidden" class="total_tax" name="sale[item_total_tax][]"><input type="hidden" class="is_partial" value="0"  name="sale[is_partial][]" /><input type="hidden" class="min_wastage" value="' +
                est_sale_row.find(".min_wastage").val() +
                '"  name="sale[min_wastage][]" /><input type="hidden" class="max_wastage" value="' +
                est_sale_row.find(".max_wastage").val() +
                '"  name="sale[max_wastage][]" /><input type="hidden" class="stock_type" name="sale[stock_type][]" value="' +
                est_sale_row.find(".stock_type").val() +
                '" /><input type="hidden" class="is_non_tag" name="sale[is_non_tag][]" value="' +
                est_sale_row.find(".is_non_tag").val() +
                '" /></td>' +
                "<td><span>" +
                est_sale_row.find(".est_product_name").html() +
                '</span><input class="sale_product_id" type="hidden" name="sale[product][]" value="' +
                est_sale_row.find(".est_product_id").val() +
                '" /></td>' +
                "<td><span>" +
                est_sale_row.find(".est_design_code").html() +
                '</span><input type="hidden" class="sale_design_id" name="sale[design][]" value="' +
                est_sale_row.find(".est_design_id").val() +
                '" /></td>' +
                "<td><span>" +
                est_sale_row.find(".est_piece").html() +
                '</span><input type="hidden" class="sale_pcs" name="sale[pcs][]" value="' +
                est_sale_row.find(".est_pcs").val() +
                '"  /></td>' +
                "<td><span>" +
                est_sale_row.find(".est_gross_wt").html() +
                '</span><input type="hidden" class="bill_gross_val" name="sale[gross][]" value="' +
                est_sale_row.find(".est_gross_val").val() +
                '" /></td>' +
                "<td><span>" +
                est_sale_row.find(".est_less_wt").html() +
                '</span><input type="hidden" class="bill_less_val" name="sale[less][]" value="' +
                est_sale_row.find(".est_less_val").val() +
                '" /></td>' +
                "<td><span>" +
                est_sale_row.find(".est_net_wt").html() +
                '</span><input type="hidden" class="bill_net_val" name="sale[net][]" value="' +
                est_sale_row.find(".est_net_val").val() +
                '" /></td>' +
                '<td><span class="est_wastage">' +
                est_sale_row.find(".est_wastage").html() +
                '</span><input type="hidden" class="bill_wastage" name="sale[wastage][]" value="' +
                est_sale_row.find(".est_wastage_percent").val() +
                '" /><input type="hidden" class="bill_wastage_per" name="sale[wastage][]" value="' +
                est_sale_row.find(".est_wastage_percent").val() +
                '" /></td>' +
                '<td><span class="est_wastage_wt">' +
                est_sale_row.find(".est_wastage_wt").html() +
                '</span><input type="hidden" class="bill_wastage_wt" value="' +
                est_sale_row.find(".est_wastage_wt").html() +
                '"><input type="hidden" name="sale[wastage_discount][]" class="wastage_discount" value=""><input type="hidden" name="sale[mc_discount][]" class="mc_discount" value=""><input type="hidden" name="sale[item_blc_discount][]" class="item_blc_discount" value=""></td>' +
                '<td><span class="making_charge">' +
                est_sale_row.find(".est_mc").html() +
                '</span><input type="hidden" class="mc_dis" value="0"><input type="hidden" class="bill_mctype" name="sale[bill_mctype][]" value="' +
                est_sale_row.find(".est_mc_type").val() +
                '" /><input type="hidden" class="bill_mc" name="sale[mc][]" value="' +
                est_sale_row.find(".est_mc_value").val() +
                '" /><input type="hidden" class="discount"  name="sale[adjusted_dis][]" value="" /><input type="hidden" class="bill_mc_value" value="' +
                est_sale_row.find(".est_mc_value").val() +
                '" /></td>' +
                '<td><input type="number" class="bill_discount" name="sale[discount][]" value="" step="any" readonly/></td>' +
                '<td><span class="bill_taxable_amt"></span></td>' +
                "<td><span>" +
                est_sale_row.find(".est_tgrp_name").html() +
                '</span><input type="hidden" class="sale_tax_group" name="sale[taxgroup][]" value="' +
                est_sale_row.find(".est_tax_id").val() +
                '" /></td>' +
                "<td></td>" +
                "<td>" +
                (stone_details.length > 0
                  ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>'
                  : "-") +
                '<input type="hidden" class="stone_details" value=\'' +
                est_sale_row.find(".est_item_stone_dt").val() +
                '\' name="sale[stone_details][]"/><input type="hidden" class="bill_stone_price" value="' +
                est_sale_row.find(".est_stone_price").val() +
                '" /><input type="hidden" class="certification_cost" value="' +
                est_sale_row.find(".est_certification_price").val() +
                '" /><input type="hidden" class="est_old_stone_val" value="' +
                est_sale_row.find(".est_old_stone_val").val() +
                '" /><input type="hidden" class="est_old_dust_val" value="' +
                est_sale_row.find(".est_old_dust_val").val() +
                '" /><input type="hidden" class="bill_material_price" value="' +
                est_sale_row.find(".est_material_price").val() +
                '"/></td>' +
                '<td><input type="number" class="bill_amount" name="sale[billamount][]" value="" step="any" readonly /><input type="hidden" class="per_grm_amount" name="sale[per_grm][]" value="" step="any" /></td>' +
                "<td>No</td>" +
                "<td><span>" +
                est_sale_row.find("td:first .est_tag_id").val() +
                '</span><input type="hidden" class="sale_tag_id" name="sale[tag][]" value="' +
                est_sale_row.find("td:first .est_tag_id").val() +
                '" /><input type="hidden" name="sale[total_cgst][]" class="sale_cgst"/><input type="hidden" class="sale_sgst" name="sale[total_sgst][]"/><input type="hidden" class="sale_igst" name="sale[total_igst][]"/></td>' +
                "<td>-</td>" +
                "<td><span>" +
                est_sale_row.find("td:first .est_itm_id").val() +
                '</span><input type="hidden" class="sale_est_itm_id" name="sale[estid][]" value="' +
                est_sale_row.find("td:first .est_itm_id").val() +
                '" /></td>' +
                '<td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
                "</tr>";
            }

            $("#billing_sale_details tbody").append(row);
          }
        } else {
          updateEstiOrderdetailsInBill(est_sale_row);
        }
      }
    });

    $("#est_olditems_to_sale_convertion > tbody tr").each(function (idx, row) {
      old_est_sale_row = $(this);

      var rowExist = false;

      if (
        old_est_sale_row
          .find("td:first .select_est_old_itm_details")
          .is(":checked")
      ) {
        //$('#bill_type_purchase').prop('checked', true);

        $(".purchase_details").show();

        $("#purchase_item_details > tbody tr").each(function (bidx, brow) {
          bill_pur_row = $(this);

          if (bill_pur_row.find(".is_est_details").val() == 1) {
            //1 -> From estimation

            if (
              old_est_sale_row.find(".est_old_itm_id").val() ==
              bill_pur_row.find(".est_itm_id").val()
            ) {
              rowExist = true;
            }
          }
        });

        /*<td><span>'+old_est_sale_row.find('td:eq(3) .est_old_item_pur').html()+'</span><input type="hidden" class="pur_pur_id" name="purchase[purity][]" value="'+old_est_sale_row.find('td:eq(3) .est_old_item_purid').val()+'" /></td>*/

        if (!rowExist) {
          var tot_length = $("#purchase_item_details tbody tr").length;

          var row =
            '<tr id="' +
            tot_length +
            '">' +
            "<td><span>" +
            (old_est_sale_row.find(".est_purpose").val() == 1
              ? "Cash"
              : "Exchange") +
            "</span></td>" +
            "<td><span>" +
            old_est_sale_row.find("td:eq(2) .est_old_item_metal").html() +
            " - " +
            old_est_sale_row.find("td:eq(1) .est_purpose").val() +
            '</span><input type="hidden" class="is_est_details" value="1" name="purchase[is_est_details][]" /><input type="hidden" class="est_old_itm_id" value="' +
            old_est_sale_row.find("td:first .est_old_itm_id").val() +
            '" name="purchase[est_old_itm_id][]" /><input type="hidden" name="purchase[est_itm_id][]" class="est_itm_id" value="' +
            old_est_sale_row.find("td:first .est_old_itm_id").val() +
            '" /><input type="hidden" class="item_type" name="purchase[itemtype][]" value="2" /><input type="hidden" class="pur_metal_type" value="' +
            old_est_sale_row.find("td:eq(2) .est_old_item_cat_id").val() +
            '" name="purchase[metal_type][]" /></td>' +
            "<td>-</td>" +
            '<td><input type="number" class="pur_pcs" name="purchase[pcs][]" value="1" /></td>' +
            "<td><span>" +
            old_est_sale_row.find(".est_old_itm_gross_wt").html() +
            '</span><input type="hidden" class="pur_gross_val" name="purchase[gross][]" value="' +
            old_est_sale_row.find(".est_old_gross_val").val() +
            '" /></td>' +
            "<td><span>" +
            old_est_sale_row.find(".est_old_item_less_wt").val() +
            '</span><input type="hidden" class="pur_less_val" name="purchase[less][]" value="' +
            old_est_sale_row.find(".est_old_item_less_wt").val() +
            '" /></td>' +
            "<td><span>" +
            old_est_sale_row.find(".est_old_net_wt").html() +
            '</span><input type="hidden" class="pur_net_val" name="purchase[net][]" value="' +
            old_est_sale_row.find(".est_old_net_wt").html() +
            '" /><input type="hidden" class="est_old_dust_val" name="purchase[dust_wt][]" value="' +
            old_est_sale_row.find(".est_old_dust_val").val() +
            '" /><input type="hidden" class="est_old_stone_val" value="' +
            old_est_sale_row.find(".est_old_stone_val").val() +
            '"  name="purchase[stone_wt][]"/></td>' +
            "<td><span>" +
            old_est_sale_row.find(".est_old_wastage").html() +
            '</span><input type="hidden" class="pur_wastage" name="purchase[wastage][]" value="' +
            old_est_sale_row.find(".est_old_wastage_percent").val() +
            '" /></td>' +
            "<td><span>" +
            old_est_sale_row.find(".est_old_wastage_wt").html() +
            '</span><input type="hidden" class="pur_wastage_wt" name="purchase[wastage_wt][]" value="' +
            old_est_sale_row.find(".est_old_wastage_wt").html() +
            '" /></td>' +
            '<td><input type="number" class="pur_discount" name="purchase[discount][]" value="' +
            old_est_sale_row.find(".est_old_discount").val() +
            '" /></td>' +
            '<td><a href="#" onClick="create_new_empty_bill_purchase_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" class="stone_details" value=' +
            old_est_sale_row.find(".est_item_stone_dt").val() +
            ' name="purchase[stone_details][]"/><input type="hidden" class="other_stone_price" value="' +
            old_est_sale_row.find(".other_stone_price").val() +
            '" /><input type="hidden" class="other_stone_wt" value="' +
            old_est_sale_row.find(".other_stone_wt").val() +
            '" /><input type="hidden" class="bill_material_price" value="' +
            old_est_sale_row.find(".est_material_price").val() +
            '"/></td>' +
            '<td><input type="number" class="bill_amount" name="purchase[billamount][]" value="' +
            old_est_sale_row.find(".est_old_item_amount_val").val() +
            '" step="any" readonly /><input type="hidden" class="bill_rate_per_grm" name="purchase[rate_per_grm][]" value="' +
            old_est_sale_row.find(".est_old_rate_per_gram_val").val() +
            '" step="any" readonly /></td>' +
            "<td><span>" +
            old_est_sale_row.find("td:first .est_id").val() +
            '</span><input type="hidden" class="pur_est_id" name="purchase[estid][]" value="' +
            old_est_sale_row.find("td:first .est_id").val() +
            '" /></td>' +
            '<td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
            "</tr>";

          $("#purchase_item_details tbody").append(row);
        }
      }
    });

    if (bill_type != 5) {
      calculateSaleBillRowTotal();
    } else {
      calculateOrderAdvBillRowTotal();
    }

    $("#estimation-popup").modal("toggle");
  });

  $("#id_branch").change(function () {
    $("#supplier_sales_bill").prop("disabled", true);

    if ($("#id_branch").val() != "") {
      let id_branch = this.value;

      if (this.value == 1) {
        $("#supplier_sales_bill").prop("disabled", false);
      }

      get_branch_details();

      get_metal_rates_by_branch();

      get_invnetory_item($("#id_branch").val());

      get_employee();

      $.each(branch_details, function (key, items) {
        if (id_branch == items.id_branch) {
          $("#cmp_state").val(items.id_state);

          $("#cmp_country").val(items.id_country);
        }
      });
    }
  });

  $("#branch_select").on("change", function () {
    if (this.value != "") {
      get_branch_day_closing_details();

      get_employee();
    }
  });

  $(document).on("keyup", ".est_discount", function (e) {
    calculateEsttoSaleConvertion();
  });

  $(document).on("keyup", ".bill_discount", function (e) {
    //calculateSaleBillRowTotal();
  });

  $(document).on("keyup", ".sale_gwt,.sale_lwt", function (e) {
    var row = $(this).closest("tr");

    var gross_wt =
      isNaN(row.find(".sale_gwt").val()) || row.find(".sale_gwt").val() == ""
        ? 0
        : row.find(".sale_gwt").val();

    var less_wt =
      isNaN(row.find(".sale_lwt").val()) || row.find(".sale_lwt").val() == ""
        ? 0
        : row.find(".sale_lwt").val();

    var net_wt = parseFloat(parseFloat(gross_wt) - parseFloat(less_wt)).toFixed(
      3
    );

    row.find(".bill_gross_val").val(gross_wt);

    row.find(".bill_less_val").val(less_wt);

    row.find(".bill_net_val").val(net_wt);

    row.find(".sale_nwt").val(net_wt);

    calculateSaleBillRowTotal();
  });

  $(document).on("keyup", ".est_old_discount", function (e) {
    calculateOldEsttoSaleConvertion();
  });

  $(document).on("keyup", ".pur_discount", function (e) {
    calculatePurchaseBillRowTotal();
  });

  $(document).on("keyup", ".bill_amount", function (e) {
    calculate_orderAdv_purchase_details();
  });

  /* Tag id search. - Start */

  $("#search_tag_no").on("click", function () {
    if ($("#bill_cus_id").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Enter Customer Name",
      });
    } else if (
      ($("#filter_tag_no").val() != "") != "" &&
      $("#id_branch").val() != ""
    ) {
      getEstimationDetails();
    } else {
      if ($("#filter_tag_no").val() == "") {
        alert("Please enter Tag number");

        $("#filter_tag_no").focus();
      } else if ($("#id_branch").val() == "") {
        alert("Please select branch");

        $("#id_branch").focus();
      }
    }

    $("#filter_tag_no").val("").focus();
  });

  /* Ends - tag id search. */

  /* Order No Search */

  $("#search_order_no").on("click", function () {
    var bill_type = $("input[name='billing[bill_type]']:checked").val();

    if (
      $("#filter_order_no").val() != "" &&
      $("#id_branch").val() != "" &&
      bill_type != ""
    ) {
      $("#order_no").val($("#filter_order_no").val());

      //$(".summary_adv_details").css("display","block");

      getEstimationDetails("", $("#filter_order_no").val(), bill_type);
    } else {
      if ($("#id_branch").val() == "") {
        alert("Please select branch");

        $("#branchAlert").append("<span>Choose Branch</span>");

        $("#branchAlert span").delay(10000).fadeOut(500);

        $("#id_branch").focus();
      } else if ($("#filter_order_no").val() == "") {
        $("#searchOrderNoAlert").append("<span>Enter Order Number</span>");

        $("#searchOrderNoAlert span").delay(10000).fadeOut(500);

        $("#filter_order_no").focus();
      }
    }
  });

  /* Bill No events - STARTS */

  $("#search_bill_no").on("click", function () {
    var bill_type = $("input[name='billing[bill_type]']:checked").val();

    if (
      $("#filter_bill_no").val() != "" &&
      $("#id_branch").val() != "" &&
      bill_type != ""
    ) {
      if (bill_type == 7 || bill_type == 3) {
        getBillDetails($("#filter_bill_no").val(), bill_type);
      } else {
        getCreditBillDetails($("#filter_bill_no").val(), bill_type);
      }
    } else {
      if ($("#id_branch").val() == "") {
        alert("Please select branch");

        $("#branchAlert").append("<span>Choose Branch</span>");

        $("#branchAlert span").delay(10000).fadeOut(500);

        $("#id_branch").focus();
      } else if ($("#filter_bill_no").val() == "") {
        $("#searchBillAlert").append("<span>Enter Order Number</span>");

        $("#searchBillAlert span").delay(10000).fadeOut(500);

        $("#filter_bill_no").focus();
      }
    }
  });

	$("#update_bill_return").on("click", function () {
		var bill_type = $("input[name='billing[bill_type]']:checked").val();
	  
		$("#bill_items_tbl_for_return > tbody tr").each(function (i, row) {
		  sold_items_row = $(this);
	  
		  var rowExist = false;
	  
		  var idx = $("#sale_return_details > tbody tr").length;
	  
		  idx = idx++;
	  
		  if (sold_items_row.find(".select_est_details").is(":checked")) {
			$(".return_details").show();
	  
			$("#sale_return_details > tbody tr").each(function (bidx, brow) {
			  return_items_row = $(this);
	  
			  // CHECK DUPLICATES - TAG
	  
			  if (return_items_row.find(".bill_det_id").val() != "") {
				if (
				  sold_items_row.find(".bill_det_id").val() ==
				  return_items_row.find(".bill_det_id").val()
				) {
				  rowExist = true;
	  
				  /*console.log("Tag ID - "+bidx+" : From Modal"+sold_items_row.find('td:first .est_tag_id').val()+" From Bill"+return_items_row.find('td:eq(15) .sale_tag_id').val());
	  
					console.log(rowExist);*/
				}
			  }
	  
			  // CHECK DUPLICATES - ESTIMATION ITEM
	  
			  // if (return_items_row.find('td:first .is_est_details').val() == 1) {
	  
			  // 	if (sold_items_row.find('td:first .est_itm_id').val() == return_items_row.find('td:first .est_itm_id').val()) {
	  
			  // 		rowExist = true;
	  
			  /*console.log("Esti ID - "+bidx+" : From Modal"+sold_items_row.find('td:first .est_itm_id').val()+" From Bill"+sold_items_row.find('td:first .est_itm_id').val());
	  
				console.log(rowExist);*/
	  
			  // 	}
	  
			  // }
			});
	  
			if (!rowExist) {
			  var cashPayRow =
				sold_items_row.find("td:first .bill_id").val() + "_cashPayRow";
	  
			  if (sold_items_row.find("td:last .select_est_partial").is(":checked")) {
				var row =
				  "<tr><td><span>" +
				  sold_items_row.find("td:first .est_hsn").val() +
				  '</span><input type="hidden" class="bill_id" name="sales_return[' +
				  idx +
				  '][bill_id]" value="' +
				  sold_items_row.find("td:first .bill_id").val() +
				  '" /><input type="hidden" class="bill_det_id" name="sales_return[' +
				  idx +
				  '][bill_det_id]" value="' +
				  sold_items_row.find("td:first .bill_det_id").val() +
				  '" /><input type="hidden" class="sale_pro_hsn" name="sales_return[' +
				  idx +
				  '][hsn]" value="' +
				  sold_items_row.find("td:first .est_hsn").val() +
				  '" /><input type="hidden" class="sale_type" name="sales_return[' +
				  idx +
				  '][sourcetype]" value="1" /><input type="hidden" class="sale_item_type" name="sales_return[' +
				  idx +
				  '][itemtype]" value="' +
				  sold_items_row.find("td:first .est_item_type").val() +
				  '" /><input type="hidden" class="is_est_details" value="1" name="sales_return[' +
				  idx +
				  '][is_est_details]" /><input type="hidden" class="est_itm_id" name="sales_return[' +
				  idx +
				  '][est_itm_id]" value="' +
				  sold_items_row.find("td:first .est_itm_id").val() +
				  '" /><input type="hidden" class="sale_cal_type" name="sales_return[' +
				  idx +
				  '][calltype]" value="' +
				  sold_items_row.find("td:first .est_cal_type").val() +
				  '" /><input type="hidden" class="sale_metal_type" value="' +
				  sold_items_row.find("td:first .est_metal_type").val() +
				  '" /><input type="hidden" class="sale_purity" value="' +
				  sold_items_row.find("td:eq(4) .est_purid").val() +
				  '"  name="sales_return[' +
				  idx +
				  '][purity]" /><input type="hidden" class="sale_size" value="' +
				  sold_items_row.find("td:eq(5) .est_size_val").val() +
				  '"  name="sales_return[' +
				  idx +
				  '][size]" /><input type="hidden" class="sale_uom" value="' +
				  sold_items_row.find("td:eq(0) .est_uom").val() +
				  '"  name="sales_return[' +
				  idx +
				  '][uom]" /><input type="hidden" class="return_cash_paid" value="' +
				  sold_items_row.find(".ret_bill_cash_paid").val() +
				  '" /><input type="hidden" class="' +
				  cashPayRow +
				  '" name="sales_return[' +
				  idx +
				  '][return_cash_paid]" value="0" /></td><td><span>' +
				  sold_items_row.find("td:eq(1) .est_product_name").html() +
				  '</span><input class="sale_product_id" type="hidden" name="sales_return[' +
				  idx +
				  '][product]" value="' +
				  sold_items_row.find("td:eq(1) .est_product_id").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(2) .est_design_code").html() +
				  '</span><input type="hidden" class="sale_design_id" name="sales_return[' +
				  idx +
				  '][design]" value="' +
				  sold_items_row.find("td:eq(2) .est_design_id").val() +
				  '" /></td><td><input type="number" class="sale_pcs" name="sales_return[' +
				  idx +
				  '][pcs]" value="' +
				  sold_items_row.find("td:eq(3) .est_pcs").val() +
				  '"  /></td><td><span>' +
				  sold_items_row.find("td:eq(6) .est_gross_wt").html() +
				  '</span><input type="hidden" class="bill_gross_val" name="sales_return[' +
				  idx +
				  '][gross]" value="' +
				  sold_items_row.find("td:eq(6) .est_gross_val").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(7) .est_less_wt").html() +
				  '</span><input type="hidden" class="bill_less_val" name="sales_return[' +
				  idx +
				  '][less]" value="' +
				  sold_items_row.find("td:eq(7) .est_less_val").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(8) .est_net_wt").html() +
				  '</span><input type="hidden" class="bill_net_val" name="sales_return[' +
				  idx +
				  '][net]" value="' +
				  sold_items_row.find("td:eq(8) .est_net_val").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(9) .est_wastage").html() +
				  '</span><input type="hidden" class="bill_wastage" name="sales_return[' +
				  idx +
				  '][wastage]" value="' +
				  sold_items_row.find("td:eq(9) .est_wastage_percent").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(10) .est_mc").html() +
				  '</span><input type="hidden" class="bill_mctype" name="sales_return[' +
				  idx +
				  '][bill_mctype]" value="' +
				  sold_items_row.find("td:eq(10) .est_mc_type").val() +
				  '" /><input type="hidden" class="bill_mc" name="sales_return[' +
				  idx +
				  '][mc]" value="' +
				  sold_items_row.find("td:eq(10) .est_mc_value").val() +
				  '" /></td><td><input type="hidden" class="bill_discount" name="sales_return[' +
				  idx +
				  '][discount]" value="' +
				  sold_items_row.find("td:eq(11) .est_discount").val() +
				  '"  />' +
				  sold_items_row.find("td:eq(11) .est_discount").val() +
				  "</td><td></td><td><span>" +
				  sold_items_row.find("td:eq(12) .est_tgrp_name").html() +
				  '</span><input type="hidden" class="sale_tax_group" name="sales_return[' +
				  idx +
				  '][taxgroup]" value="' +
				  sold_items_row.find("td:eq(12) .est_tax_id").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(12) .est_tax_val").val() +
				  '</span></td><td><input type="hidden" class="bill_stone_price" value="' +
				  sold_items_row.find(".est_stone_price").val() +
				  '" /><input type="hidden" class="bill_material_price" value="' +
				  sold_items_row.find(".est_material_price").val() +
				  '"/><input type="number" class="bill_amount" name="sales_return[' +
				  idx +
				  '][billamount]" value="' +
				  sold_items_row.find(".est_item_cost_val").val() +
				  '" step="any" readonly style="width: 100px;"/><input type="hidden" class="per_grm_amount" name="sales_return[' +
				  idx +
				  '][per_grm]" value="" step="any" /></td><td><input type="number" class="sale_ret_disc_amt" name="sales_return[' +
				  idx +
				  '][sale_ret_disc_amt]" value="" step="any" style="width: 100px;"/></td><td><input type="number" class="sale_ret_amt" name="sales_return[' +
				  idx +
				  '][sale_ret_amt]" value="' +
				  sold_items_row.find(".est_item_cost_val").val() +
				  '" step="any" readonly style="width: 100px;" readonly/></td><td>Yes</td><td><span>' +
				  sold_items_row.find("td:first .est_tag_id").val() +
				  '</span><input type="hidden" class="sale_tag_id" name="sales_return[' +
				  idx +
				  '][tag]" value="' +
				  sold_items_row.find("td:first .est_tag_id").val() +
				  '" /></td><td>-</td><td><span>' +
				  sold_items_row.find("td:first .est_id").val() +
				  '</span><input type="hidden" class="sale_est_itm_id" name="sales_return[' +
				  idx +
				  '][estid]" value="' +
				  sold_items_row.find("td:first .est_itm_id").val() +
				  '" /></td>><td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
			  } else {
				var row =
				  "<tr><td><span>" +
				  sold_items_row.find("td:first .est_hsn").val() +
				  '</span><input type="hidden" class="bill_id" name="sales_return[' +
				  idx +
				  '][bill_id]" value="' +
				  sold_items_row.find("td:first .bill_id").val() +
				  '" /><input type="hidden" class="bill_det_id" name="sales_return[' +
				  idx +
				  '][bill_det_id]" value="' +
				  sold_items_row.find("td:first .bill_det_id").val() +
				  '" /><input type="hidden" class="sale_pro_hsn" name="sales_return[' +
				  idx +
				  '][hsn]" value="' +
				  sold_items_row.find("td:first .est_hsn").val() +
				  '" /><input type="hidden" class="sale_type" name="sales_return[' +
				  idx +
				  '][sourcetype]" value="1" /><input type="hidden" class="sale_item_type" name="sales_return[' +
				  idx +
				  '][itemtype]" value="' +
				  sold_items_row.find("td:first .est_item_type").val() +
				  '" /><input type="hidden" class="is_est_details" value="1" name="sales_return[' +
				  idx +
				  '][is_est_details]" /><input type="hidden" class="est_itm_id" name="sales_return[' +
				  idx +
				  '][est_itm_id]" value="' +
				  sold_items_row.find("td:first .est_itm_id").val() +
				  '" /><input type="hidden" class="sale_cal_type" name="sales_return[' +
				  idx +
				  '][calltype]" value="' +
				  sold_items_row.find("td:first .est_cal_type").val() +
				  '" /><input type="hidden" class="sale_metal_type" value="' +
				  sold_items_row.find("td:first .est_metal_type").val() +
				  '" /><input type="hidden" class="sale_purity" value="' +
				  sold_items_row.find("td:eq(4) .est_purid").val() +
				  '"  name="sales_return[' +
				  idx +
				  '][purity]" /><input type="hidden" class="sale_size" value="' +
				  sold_items_row.find("td:eq(5) .est_size_val").val() +
				  '"  name="sales_return[' +
				  idx +
				  '][size]" /><input type="hidden" class="sale_uom" value="' +
				  sold_items_row.find("td:eq(0) .est_uom").val() +
				  '"  name="sales_return[' +
				  idx +
				  '][uom]" /><input type="hidden" class="return_cash_paid" value="' +
				  sold_items_row.find(".ret_bill_cash_paid").val() +
				  '" /><input type="hidden" class="' +
				  cashPayRow +
				  '" name="sales_return[' +
				  idx +
				  '][return_cash_paid]" value="0" /></td><td><span>' +
				  sold_items_row.find("td:eq(1) .est_product_name").html() +
				  '</span><input class="sale_product_id" type="hidden" name="sales_return[' +
				  idx +
				  '][product]" value="' +
				  sold_items_row.find("td:eq(1) .est_product_id").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(2) .est_design_code").html() +
				  '</span><input type="hidden" class="sale_design_id" name="sales_return[' +
				  idx +
				  '][design]" value="' +
				  sold_items_row.find("td:eq(2) .est_design_id").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(3) .est_piece").html() +
				  '</span><input type="hidden" class="sale_pcs" name="sales_return[' +
				  idx +
				  '][pcs]" value="' +
				  sold_items_row.find("td:eq(3) .est_pcs").val() +
				  '"  /></td><td><span>' +
				  sold_items_row.find("td:eq(6) .est_gross_wt").html() +
				  '</span><input type="hidden" class="bill_gross_val" name="sales_return[' +
				  idx +
				  '][gross]" value="' +
				  sold_items_row.find("td:eq(6) .est_gross_val").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(7) .est_less_wt").html() +
				  '</span><input type="hidden" class="bill_less_val" name="sales_return[' +
				  idx +
				  '][less]" value="' +
				  sold_items_row.find("td:eq(7) .est_less_val").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(8) .est_net_wt").html() +
				  '</span><input type="hidden" class="bill_net_val" name="sales_return[' +
				  idx +
				  '][net]" value="' +
				  sold_items_row.find("td:eq(8) .est_net_val").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(9) .est_wastage").html() +
				  '</span><input type="hidden" class="bill_wastage" name="sales_return[' +
				  idx +
				  '][wastage]" value="' +
				  sold_items_row.find("td:eq(9) .est_wastage_percent").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(10) .est_mc").html() +
				  '</span><input type="hidden" class="bill_mctype" name="sales_return[' +
				  idx +
				  '][bill_mctype]" value="' +
				  sold_items_row.find("td:eq(10) .est_mc_type").val() +
				  '" /><input type="hidden" class="bill_mc" name="sales_return[' +
				  idx +
				  '][mc]" value="' +
				  sold_items_row.find("td:eq(10) .est_mc_value").val() +
				  '" /></td><td><input type="hidden" class="bill_discount" name="sales_return[' +
				  idx +
				  '][discount]" value="' +
				  sold_items_row.find("td:eq(11) .est_discount").val() +
				  '"  />' +
				  sold_items_row.find("td:eq(11) .est_discount").val() +
				  "</td><td></td><td><span>" +
				  sold_items_row.find("td:eq(12) .est_tgrp_name").html() +
				  '</span><input type="hidden" class="sale_tax_group" name="sales_return[' +
				  idx +
				  '][taxgroup]" value="' +
				  sold_items_row.find("td:eq(12) .est_tax_id").val() +
				  '" /></td><td><span>' +
				  sold_items_row.find("td:eq(12) .est_tax_val").val() +
				  '</span></td><td><input type="hidden" class="bill_stone_price" value="' +
				  sold_items_row.find(".est_stone_price").val() +
				  '" /><input type="hidden" class="bill_material_price" value="' +
				  sold_items_row.find(".est_material_price").val() +
				  '"/><input type="number" class="bill_amount" name="sales_return[' +
				  idx +
				  '][billamount]" value="' +
				  sold_items_row.find(".est_item_cost_val").val() +
				  '" step="any" readonly style="width: 100px;"/><input type="hidden" class="per_grm_amount" name="sales_return[' +
				  idx +
				  '][per_grm]" value="" step="any" /></td><td><input type="number" class="sale_ret_disc_amt" name="sales_return[' +
				  idx +
				  '][sale_ret_disc_amt]" value="" step="any" style="width: 100px;"/></td><td><input type="number" class="sale_ret_amt" name="sales_return[' +
				  idx +
				  '][sale_ret_amt]" value="' +
				  sold_items_row.find(".est_item_cost_val").val() +
				  '" step="any" readonly style="width: 100px;"/></td><td>No</td><td><span>' +
				  sold_items_row.find("td:first .est_tag_id").val() +
				  '</span><input type="hidden" class="sale_tag_id" name="sales_return[' +
				  idx +
				  '][tag]" value="' +
				  sold_items_row.find("td:first .est_tag_id").val() +
				  '" /></td><td>-</td><td><span>' +
				  sold_items_row.find("td:first .est_itm_id").val() +
				  '</span><input type="hidden" class="sale_est_itm_id" name="sales_return[' +
				  idx +
				  '][estid]" value="' +
				  sold_items_row.find("td:first .est_itm_id").val() +
				  '" /></td><td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
			  }
	  
			  $("#sale_return_details tbody").append(row);
			}
		  }
		});
	  
		calculate_salesReturn_details();
	  
		updateReturnColumnTotal();
	  
		$("#bill-detail-popup").modal("toggle");
	  });


    $("#bill-detail-popup").on("shown.bs.modal", function () {
      setTimeout(set_excisting_sales_return_details, 200);
      });
  /*Bill No events - ENDS*/

  $("#create_custom_details").on("click", function () {
    if (validateCustomDetailRow()) {
      create_new_empty_est_custom_row();
    } else {
      alert("Please fill required fields");
    }
  });

  $("#select_custom_details").change(function () {
    if (this.checked) {
      $(".custom_details").show();

      if ($("#estimation_custom_details tbody tr").length == 0) {
        create_new_empty_est_custom_row();
      }
    } else {
      $(".custom_details").hide();
    }
  });

  $("#select_oldmatel_details").change(function () {
    if (this.checked) {
      $(".old_matel_details").show();

      if ($("#estimation_old_matel_details tbody tr").length == 0) {
        create_new_empty_est_oldmatel_row();
      }
    } else {
      $(".old_matel_details").hide();
    }
  });

  $("#create_old_matel_details").on("click", function () {
    if (validateOldMatelDetailRow()) {
      create_new_empty_est_oldmatel_row();
    } else {
      alert("Please fill required fields");
    }
  });

  $("#select_has_stn_details").change(function () {
    if (this.checked) {
      $(".stone_details").show();

      if ($("#estimation_stone_details tbody tr").length == 0) {
        create_new_empty_est_stone_row();
      }
    } else {
      $(".stone_details").hide();
    }
  });

  $("#create_stone_details").on("click", function () {
    if (validateStoneDetailRow()) {
      create_new_empty_est_stone_row();
    } else {
      alert("Please fill required fields");
    }
  });

  $("#select_materials_details").change(function () {
    if (this.checked) {
      $(".material_details").show();

      if ($("#estimation_material_details tbody tr").length == 0) {
        create_new_empty_est_material_row();
      }
    } else {
      $(".material_details").hide();
    }
  });

  $("#create_material_details").on("click", function () {
    if (validateMaterialDetailRow()) {
      create_new_empty_est_material_row();
    } else {
      alert("Please fill required fields");
    }
  });

  $("#cus_mobile").on("blur", function () {
    var min_mob_len = $("#country option:selected").attr("min_mob_len");
    var max_mob_len = $("#country option:selected").attr("max_mob_len");
    console.log("min_mob_len", min_mob_len);
    console.log("max_mob_len", min_mob_len);
    if (min_mob_len != null && max_mob_len != null) {
      if (
        this.value.length >= min_mob_len &&
        this.value.length <= max_mob_len
      ) {
        $("#cus_mobile").val(this.value);
      } else {
        $.toaster({
          priority: "danger",
          title: "warning!",
          message:
            "" +
            "</br>" +
            "Please enter between " +
            min_mob_len +
            " and " +
            max_mob_len +
            " digit mobile number..",
        });
        $("#cus_mobile").val("");
        $("#cus_mobile").prop("disabled", false);
      }
    } else {
      $("#cus_mobile").val(this.value);
    }
  });

  $("#pin_code_add").on("blur", function () {
    if (this.value.length == 6) {
      $("#pin_code_add").val(this.value);

      //$('#pincode').focus();
    } else {
      $.toaster({
        priority: "danger",
        title: "warning!",
        message: "" + "</br>" + "Please enter Valid Number..",
      });

      $("#pin_code_add").val("");

      $("#pin_code_add").focus();
    }
  });

  /* $("#add_newcutomer").on('click', function(){

		var billing_for     = $("input[name='billing[billing_for]']:checked").val();

		var allow_submit    = true;

		var regexp          = /^[a-zA-Z]{5}\d{4}[a-zA-Z]{1}$/;

		var maxLength       = $('#aadharid').attr("maxLength");

		var reggst          = /^([0-9]){2}([a-zA-Z]){5}([0-9]){4}([a-zA-Z]){1}([0-9]){1}([a-zA-Z]){1}([0-9]){1}?$/;

		var regdl           = /^(([A-Z]{2}[0-9]{2})( )|([A-Z]{2}-[0-9]{2}))((19|20)[0-9][0-9])[0-9]{7}$/;

		var dl_maxLength       = $('#dl').attr("maxLength");

		var regpp           = /^[A-Za-z]{3}\d{6}$/;





		if($('#cus_first_name').val() != "")

		{

			if($('#cus_mobile').val() == "" || $('#cus_mobile').val() == null)

			{

				$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please enter customer mobile"});

				allow_submit = false;



			}

			else if($('#country').val() == "" || $('#country').val() == null)

			{

				$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please Select Country"});

				allow_submit = false;

			}

			else if($('#state').val() == "" || $('#state').val() == null)

			{

				$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please Select State"});

				allow_submit = false;

			}

			else if($('#address1').val() == "" || $('#address1').val() == null)

			{

				$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please enter customer Address"});

				allow_submit = false;

			}

			else if($('#id_branch').val() == "" || $('#id_branch').val() == null)

			{

				$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please Select The Branch"});

				allow_submit = false;

			}

			else if(($('#pan').val()!='') && (!regexp.test($('#pan').val())))

			{

			   $.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please Enter The Valid PAN No."});

			   allow_submit = false;

			}

			else if(($('#aadharid').val()!='') && (($('#aadharid').val()).length != maxLength))

			{

				  $.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please Enter The Valid Aadhar No."});

				  allow_submit = false;

			}

			else if($('#country').val()!=101)
			{
				if(($('#pp').val()!=''))
				{

				   $.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please Enter The Valid PassPort No."});

				   allow_submit = false;

				}
			}

			else if ($('#id_village').val() == '' ) {

				$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>" + 'Select the Area..' });

				return false;

			}


			else if(billing_for == 2 && ($('#gst_no').val()==''))

			{

					 $.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please Enter The GST No."});

					 allow_submit = false;

			}

			else if(($('#gst_no').val()!='') && (!reggst.test($('#gst_no').val())))

			{

					 $.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please Enter The Valid GST No."});

					 allow_submit = false;

			}

			if(allow_submit)

			{

				  if($('#id_customer').val() == "")

				  {

						add_customer();

				  }

				  else

				  {

					  update_customer();

				  }

			}

		}else{

			$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Please Enter The First Name.."});

		}

	}); */

  $("#gst_no").on("change", function () {
    var reggst =
      /^([0][1-9]|[1-2][0-9]|[3][0-7])([a-zA-Z]{5}[0-9]{4}[a-zA-Z]{1}[1-9a-zA-Z]{1}[zZ]{1}[0-9])+$/;

    if (!reggst.test($("#gst_no").val())) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Enter the Valid GST No..",
      });

      return false;
    } else {
      //$('#gst_no').val('');
      //$('#gst_no').focus();
    }
  });

  /* Customer search. - Start */

  $("#bill_cus_name").on("keyup", function (e) {
    var customer = $("#bill_cus_name").val();

    if (customer.length >= 2) {
      getSearchCustomers(customer);
    }
  });

  /* Ends - Customer search. */

  $(document).on(
    "keyup",
    "#estimation_sale_details input[type='text'], #purchase_purchase_details input[type='text'], #estimation_custom_details input[type='text'], #estimation_stone_details input[type='text'], #estimation_material_details input[type='text']",
    function (e) {
      calculate_purchase_details();
    }
  );

  $(document).on(
    "change",
    "#estimation_sale_details input[type='text'], #purchase_purchase_details input[type='text'], #estimation_custom_details input[type='text'], #estimation_stone_details input[type='text'], #estimation_material_details input[type='text']",
    function (e) {
      calculate_purchase_details();
    }
  );

  $(document).on(
    "keyup",
    ".old_gwt, .old_lwt, .old_wastage, .gift_voucher_amt, .voucher_no, .scheme_account_id, .chit_amt, #estimation_old_matel_details input[type='text'], #gift_voucher_details input[type='text'], #estimation_chit_details input[type='text']",
    function (e) {
      calculate_sales_details();
    }
  );

  $(document).on(
    "change",
    "#estimation_old_matel_details input[type='text'], #gift_voucher_details input[type='text'], #estimation_chit_details input[type='text'], .old_item_type, .old_id_category",
    function (e) {
      calculate_sales_details();
    }
  );

  /* Product id search. - Start */

  $(document).on("keyup", ".cat_product", function (e) {
    var product = $(".cat_product").val();

    //var row = $(this).parent().parent();

    var row = $(this).closest("tr");

    getSearchProducts(product, row);
  });

  /* Ends - product id search. */

  /* Design id search. - Start */

  $(document).on("keyup", ".cat_design", function (e) {
    var design = $(".cat_design").val();

    //var row = $(this).parent().parent();

    var row = $(this).closest("tr");

    getSearchDesign(design, row);
  });

  /* Ends - design id search. */

  $(document).on(
    "keyup",
    ".cat_gwt, .cat_lwt, .cat_wastage, .cat_mc",
    function (e) {
      var row = $(this).closest("tr");

      var gross_wt =
        isNaN(row.find("td:eq(6) .cat_gwt").val()) ||
        row.find("td:eq(6) .cat_gwt").val() == ""
          ? 0
          : row.find("td:eq(6) .cat_gwt").val();

      var less_wt =
        isNaN(row.find("td:eq(7) .cat_lwt").val()) ||
        row.find("td:eq(7) .cat_lwt").val() == ""
          ? 0
          : row.find("td:eq(7) .cat_lwt").val();

      var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

      row.find("td:eq(8) .cat_nwt").val(net_wt);

      calculateSaleValue(row);
    }
  );

  $(document).on("keypress", ".cat_mc, .cat_amt", function (e) {
    if (e.which === 13) {
      e.preventDefault();

      if (validateCatalogDetailRow()) {
        create_new_empty_est_catalog_row();
      } else {
        alert("Please fill required fields");
      }
    }
  });

  /* custom Product id search. - Start */

  $(document).on("keyup", ".cus_product", function (e) {
    var product = $(".cus_product").val();

    //var row = $(this).parent().parent();

    var row = $(this).closest("tr");

    getSearchCustomProducts(product, row);
  });

  /* Ends - product id search. */

  $(document).on(
    "keyup",
    ".cus_gwt, .cus_lwt, .cus_wastage, .cus_mc",
    function (e) {
      var row = $(this).closest("tr");

      var gross_wt =
        isNaN(row.find("td:eq(5) .cus_gwt").val()) ||
        row.find("td:eq(5) .cus_gwt").val() == ""
          ? 0
          : row.find("td:eq(5) .cus_gwt").val();

      var less_wt =
        isNaN(row.find("td:eq(6) .cus_lwt").val()) ||
        row.find("td:eq(6) .cus_lwt").val() == ""
          ? 0
          : row.find("td:eq(6) .cus_lwt").val();

      var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

      row.find("td:eq(7) .cus_nwt").val(net_wt);

      calculateCustomItemSaleValue(row);
    }
  );

  $(document).on("keypress", ".cus_mc, .cus_amt", function (e) {
    if (e.which === 13) {
      e.preventDefault();

      if (validateCustomDetailRow()) {
        create_new_empty_est_custom_row();
      } else {
        alert("Please fill required fields");
      }
    }
  });

  $(document).on("keyup", ".old_gwt, .old_lwt, .old_wastage", function (e) {
    var row = $(this).closest("tr");

    var gross_wt =
      isNaN(row.find("td:eq(3) .old_gwt").val()) ||
      row.find("td:eq(3) .old_gwt").val() == ""
        ? 0
        : row.find("td:eq(3) .old_gwt").val();

    var less_wt =
      isNaN(row.find("td:eq(4) .old_lwt").val()) ||
      row.find("td:eq(4) .old_lwt").val() == ""
        ? 0
        : row.find("td:eq(4) .old_lwt").val();

    var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

    row.find("td:eq(5) .old_nwt").val(net_wt);

    calculateOldMatelItemSaleValue(row);
  });

  $(document).on("keypress", ".old_use_type, .old_amount", function (e) {
    if (e.which === 13) {
      e.preventDefault();

      if (validateOldMatelDetailRow()) {
        create_new_empty_est_old_row();
      } else {
        alert("Please fill required fields");
      }
    }
  });

  $(document).on("keypress", ".stone_price", function (e) {
    if (e.which === 13) {
      e.preventDefault();

      if (validateStoneDetailRow()) {
        create_new_empty_est_stone_row();
      } else {
        alert("Please fill required fields");
      }
    }
  });

  $(document).on("keypress", ".material_price", function (e) {
    if (e.which === 13) {
      e.preventDefault();

      if (validateMaterialDetailRow()) {
        create_new_empty_est_material_row();
      } else {
        alert("Please fill required fields");
      }
    }
  });

  $(document).on("keypress", ".chit_amt", function (e) {
    if (e.which === 13) {
      e.preventDefault();

      if (validateChitDetailRow()) {
        create_new_empty_est_chit_row();
      } else {
        alert("Please fill required fields");
      }
    }
  });

  $(document).on("change", ".old_id_category", function (e) {
    var row = $(this).closest("tr");

    var matelType = row.find("td:eq(1) .old_id_category").val();

    var rate_per_grm = 0;

    if (matelType == 1) {
      rate_per_grm =
        isNaN($(".per-grm-sale-value").html()) ||
        $(".per-grm-sale-value").html() == ""
          ? 0
          : parseFloat($(".per-grm-sale-value").html());
    } else if (matelType == 2) {
      rate_per_grm =
        isNaN($(".silver_per-grm-sale-value").html()) ||
        $(".silver_per-grm-sale-value").html() == ""
          ? 0
          : parseFloat($(".silver_per-grm-sale-value").html());
    }

    row.find("td:eq(7) .old_rate").val(rate_per_grm);
  });

  /* Lot Received At */

  $("#lt_rcvd_branch_sel").on("change", function (e) {
    if (this.value != "") {
      $("#id_branch").val(this.value);
    } else {
      $("#id_branch").val("");
    }
  });

  $("#billing_datetime").datetimepicker({
    format: "dd-mm-yyyy H:m:s",
  });

  $("#gross_wt, #less_wt").on("keyup", function (e) {
    var gross_wt =
      isNaN($("#gross_wt").val()) || $("#gross_wt").val() == ""
        ? 0
        : $("#gross_wt").val();

    var less_wt =
      isNaN($("#less_wt").val()) || $("#less_wt").val() == ""
        ? 0
        : $("#less_wt").val();

    var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

    $("#net_wt").val(net_wt);

    calculateWastage();

    calculateSaleValue();
  });

  $('input[type=checkbox][name="tagging[calculation_based_on]"]').change(
    function () {
      calculateWastage();

      calculateSaleValue();
    }
  );

  $("#est_cus_id").select2({
    placeholder: "Select Customer",

    allowClear: true,
  });

  $("#select_tax_group_id").on("change", function (e) {
    if (this.value != "") {
      var taxgroupid = this.value;

      my_Date = new Date();

      $.ajax({
        url:
          base_url +
          "index.php/admin_ret_tagging/getAvailableTaxGroupItems/?nocache=" +
          my_Date.getUTCSeconds(),

        dataType: "json",

        method: "POST",

        data: { taxGroupId: taxgroupid },

        success: function (data) {
          tax_details = data;

          calculateSaleValue();
        },
      });
    }
  });

  $("input[name='product[product_stone]']").on("change", function () {
    if ($("input[name='product[product_stone]'][value='2']").prop("checked")) {
      $("#tot_stone_diamond").attr("disabled", "disabled");

      $("#stone_name").prop("disabled", "disabled");

      $("#diamond_block").hide();
    } else {
      $("#tot_stone_diamond").prop("disabled", false);

      $("#diamond_block").show();

      if (
        $("input[name='product[product_stone]'][value='0']").prop("checked")
      ) {
        $("#stone_name").prop("disabled", "disabled");
      } else {
        $("#stone_name").prop("disabled", false);
      }
    }
  });

  $("#_create_stn_details").on("click", function () {
    if (validateStoneDetailRow()) {
      var temp_tag_stones = tag_stones;

      if ($("#design_id").val() != "") {
        temp_tag_stones = tag_design_stones;
      }

      var html = "";

      var row_id = $("#tagging_stone_details tbody tr").length;

      var select_op =
        '<select class="form-control select_stn_det" id="tagstone_' +
        row_id +
        '" name="tagstone[stone_id][]"><option value=""> - Select Stone - </option>';

      var selected_stones = [];

      var op_length = 0;

      $("#tagging_stone_details > tbody  > tr").each(function (index, tr) {
        selected_stones.push({
          st_id: $(this).find("td:first   .select_stn_det").val(),
        });
      });

      $.each(tag_stones, function (key, item) {
        var $exist_flag = false;

        $.each(selected_stones, function (stkey, stval) {
          if (stval.st_id == item.stone_id) {
            $exist_flag = true;
          }
        });

        if (!$exist_flag) {
          select_op +=
            '<option value="' +
            item.stone_id +
            '">' +
            item.stone_name +
            "</option>";

          op_length++;
        }
      });

      select_op += "</select>";

      if (op_length > 0) {
        html +=
          "<tr><td>" +
          select_op +
          '</td><td><div class="input-group"> <input class="form-control tagstone_pcs" type="number" step="any" name="tagstone[pcs][]" value="" required /></div></td><td><div class="input-group"><input type="number" class="form-control tagstone_wt" step="any" name="tagstone[weight][]" value="" required /></div></td><td><input type="hidden" name="tagstone[uom_id][]" value="" /><div class="stn_uom"></div></td><td><div class="input-group"> <input class="form-control tagstone_amt" type="number" step="any" name="tagstone[amount][]" value="" required /></div></td></tr>';

        $("#tagging_stone_details tbody").append(html);
      } else {
        alert("There is no more stone details are available");
      }
    } else {
      alert("Please fill required fields");
    }
  });

  $("#create_material_details").on("click", function () {
    if (validateMaterialDetailRow()) {
      var html = "";

      var row_id = $("#tagging_material_details tbody tr").length;

      var select_op =
        '<select class="form-control select_mat_det" id="tagmat_' +
        row_id +
        '" name="tagmaterials[material_id][]"><option value=""> - Select Material - </option>';

      var selected_materials = [];

      var op_length = 0;

      $("#tagging_material_details > tbody  > tr").each(function (index, tr) {
        selected_materials.push({
          mat_id: $(this).find("td:first .select_mat_det").val(),
        });
      });

      $.each(tag_materials, function (key, item) {
        var $exist_flag = false;

        $.each(selected_materials, function (stkey, stval) {
          if (stval.mat_id == item.material_id) {
            $exist_flag = true;
          }
        });

        if (!$exist_flag) {
          select_op +=
            '<option value="' +
            item.material_id +
            '">' +
            item.material_name +
            "</option>";

          op_length++;
        }
      });

      select_op += "</select>";

      if (op_length > 0) {
        html +=
          "<tr><td>" +
          select_op +
          '</td><td><div class="input-group"> <input class="form-control tagmat_wt" type="number" step="any" name="tagmaterials[weight]" value="" required /></div></td><td><input type="hidden" name="tagmaterials[uom_id]" value="" /><div class="stn_uom"></div></td><td><div class="input-group"> <input class="form-control tagmat_amt" type="number" step="any" name="tagmaterials[amount][]" value="" required /></div></td></tr>';

        $("#tagging_material_details tbody").append(html);
      } else {
        alert("There is no more materials details are available");
      }
    } else {
      alert("Please fill required fields");
    }
  });

  $(document).on("change", ".select_stn_det", function () {
    //alert(this.value);

    var selectId = this.value;

    //var row = $(this).parent().parent();

    var row = $(this).closest("tr");

    if (selectId != "") {
      $.each(tag_stones, function (key, item) {
        if (item.stone_id == selectId) {
          row.find("td:eq(3) .stn_uom").html(item.uom_short_code);

          //row.find('td eq(3) .stn_uom').html(item.uom_short_code);

          $(row).find("td:eq(3) input[type='hidden']").val(item.uom_id);
        }
      });
    } else {
      row.find("td:eq(3) .stn_uom").html("");

      $(row).find("td:eq(3) input[type='hidden']").val("");
    }
  });

  $(document).on("change", ".select_mat_det", function () {
    var selectedId = this.value;

    var row = $(this).closest("tr");

    if (selectedId != "") {
      $.each(tag_materials, function (key, item) {
        if (item.material_id == selectedId) {
          row.find("td:eq(2) .stn_uom").html(item.uom_short_code);

          $(row).find("td:eq(2) input[type='hidden']").val(item.uom_id);
        }
      });
    } else {
      row.find("td:eq(2) .stn_uom").html("");

      $(row).find("td:eq(2) input[type='hidden']").val("");
    }
  });
});

// function show_chargesdetails(e, row) {

// 	e.preventDefault();

// 	console.log(row);

// 	$('#charge_items_popup .modal-body').find('#billing_charges_details tbody tr').remove();

// 	var charges_details = $(row).find('.charges_details').val();

// 	var charges_details = JSON.parse(charges_details);

// 	let td_charges = "";

// 	$.each(charges_details,function(key,charge_item) {

// 		console.log(charge_item);

// 		td_charges += "<tr><td>"+charge_item.code_charge+"</td><td>"+charge_item.charge_value+"</td></tr>";

// 	});

// 	console.log("td_charges",td_charges);

// 	$('#billing_charges_details tbody').append(td_charges);

// 	$('#charge_items_popup').modal('show');

// }

//customer charges
function create_new_empty_est_cus_charges_item(curRow, id) {
  if (curRow != undefined) {
    $("#custom_active_id").val(curRow.closest("tr").attr("id"));
  }
  var row = "";
  console.log(id);
  if (id != undefined) {
    var charge_list = "<option value=''>-Select Charge Type-</option>";
    $.each(other_charges_details, function (pkey, pitem) {
      charge_list +=
        "<option value='" +
        pitem.id_charge +
        "'>" +
        pitem.name_charge +
        "</option>";
    });
    row +=
      '<tr><td><select class="id_charge" name="est_stones_item[id_charge][]">' +
      charge_list +
      '</select></td><td><input type="number" class="charge_value" name="est_stones_item[value_charge][]" value="" /></td></tr>';
  } else {
    var catRow = $("#custom_active_id").val();

    var row_charges_details_details = $("#" + catRow)
      .find(".charges_details")
      .val();

    console.log(row_charges_details_details);

    if (row_charges_details_details != "") {
      var cus_charges_details = JSON.parse(row_charges_details_details);
      $.each(cus_charges_details, function (pkey, pitem) {
        var charge_list = "";
        console.log(other_charges_details);
        $.each(other_charges_details, function (pkey, item) {
          var selected = "";
          if (item.id_charge == pitem.charge_id) {
            selected = "selected='selected'";
          }
          charge_list +=
            "<option value='" +
            item.id_charge +
            "'  " +
            selected +
            ">" +
            item.name_charge +
            "</option>";

          console.log(charge_list);
        });
        row +=
          '<tr><td><select class="id_charge" name="est_stones_item[id_charge][]">' +
          charge_list +
          '</select></td><td><input class="charge_value" type="number" name="est_stones_item[value_charge][]" value="' +
          pitem["charge_value"] +
          '" /><input class="est_item_id" type="hidden" name="est_stones_item[est_item_id][]" value="' +
          pitem["est_item_id"] +
          '" /></td><td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
      });
    } else {
      var charge_list = "<option value=''>-Select Charge Type-</option>";
      $.each(other_charges_details, function (pkey, pitem) {
        charge_list +=
          "<option value='" +
          pitem.id_charge +
          "'>" +
          pitem.name_charge +
          "</option>";
      });
      row +=
        '<tr><td><select class="id_charge" name="est_stones_item[id_charge][]">' +
        charge_list +
        '</select></td><td><input type="number" class="charge_value" name="est_stones_item[value_charge][]" value="" /></td><td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
    }
  }
  $("#cus_other_charges_modal .modal-body")
    .find("#estimation_other_charge_cus_item_details tbody")
    .append(row);
  $("#cus_other_charges_modal").modal("show");
}

function getOtherChargesDetails() {
  $.ajax({
    type: "GET",
    url: base_url + "index.php/admin_ret_tagging/getOtherCharges",
    dataType: "json",
    success: function (data) {
      other_charges_details = data;
      console.log(other_charges_details);
    },
  });
}

$(document).on("change", ".id_charge", function (e) {
  var id_charge = this.value;
  var row = $(this).closest("tr");
  $.each(other_charges_details, function (pkey, pitem) {
    if (id_charge == pitem.id_charge) {
      row.find(".value_charge").val(pitem.value_charge);
    }
  });
});

$("#cus_other_charges_modal .modal-body #add_new_charge").on(
  "click",
  function () {
    if (validatecusOtherChargeDetailRow()) {
      create_est_cus_charges_item();
    } else {
      alert("Please fill required fields");
    }
  }
);

function create_est_cus_charges_item() {
  var charge_list = "";
  $.each(other_charges_details, function (pkey, pitem) {
    charge_list +=
      "<option value='" +
      pitem.id_charge +
      "'>" +
      pitem.name_charge +
      "</option>";
  });

  row =
    '<tr><td><select class="id_charge" name="est_stones_item[id_charge][]">' +
    charge_list +
    '</select></td><td><input class="charge_value" type="number" name="est_stones_item[value_charge][]" value="" /></td><td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';

  $("#cus_other_charges_modal .modal-body")
    .find("#estimation_other_charge_cus_item_details tbody")
    .append(row);
  $("#cus_other_charges_modal").modal("show");
}

function validatecusOtherChargeDetailRow() {
  var row_validate = true;
  $(
    "#cus_other_charges_modal .modal-body #estimation_other_charge_cus_item_details> tbody  > tr"
  ).each(function (index, tr) {
    if (
      $(this).find(".id_charge").val() == "" ||
      $(this).find(".charge_value").val() == 0 ||
      $(this).find(".charge_value").val() == ""
    ) {
      row_validate = false;
    }
  });
  return row_validate;
}

$("#cus_other_charges_modal #update_charge_details").on("click", function () {
  var charge_details = [];
  var value_charge = 0;

  $(
    "#cus_other_charges_modal .modal-body #estimation_other_charge_cus_item_details > tbody > tr"
  ).each(function (index, tr) {
    value_charge += parseFloat($(this).find(".charge_value").val());
    charge_details.push({
      charge_value: $(this).find(".charge_value").val(),
      id_charge: $(this).find(".id_charge").val(),
      est_item_id: $(this).find(".est_item_id").val(),
    });
  });

  $("#cus_other_charges_modal").modal("toggle");

  var catRow = $("#custom_active_id").val();
  $("#" + catRow)
    .find(".charges_details")
    .val(charge_details.length > 0 ? JSON.stringify(charge_details) : "");
  $("#" + catRow)
    .find(".charge_value")
    .val(value_charge);

  calculateSaleBillRowTotal();
  // Remove the empty row that is added in the table body when updating
  $(
    "#cus_other_charges_modal .modal-body #estimation_other_charge_cus_item_details > tbody"
  ).empty();
});

//customer charges

function getEstimationDetails(estId, orderNo, billType) {
  $("#searchEstiAlert").html("");

  //$("div.overlay").css("display", "block");

  var metal_type =
    $("#isMetal").val() == 1 ? $("#select_metal_type").val() : "";

  var billType = $("input[name='billing[bill_type]']:checked").val();

  var is_eda = $("#is_eda").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getEstimationDetails/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      estId: $("#filter_est_no").val(),
      order_no: $("#filter_order_no").val(),
      billType: billType,
      id_branch: $("#id_branch").val(),
      fin_year: $("#order_fin_year_select").val(),
      metal_type: metal_type,
      tag_code: $("#filter_tag_no").val(),
      old_tag_id: $("#filter_oldtag_no").val(),
    }, //Need to update login branch id here from session

    success: function (data) {
      if (data.success == true) {
        $("#validate_max_cash").val(
          data.responsedata.other_details.max_cash.validate_cash_amt
        );

        $("#max_cash_amt").val(
          data.responsedata.other_details.max_cash.max_cash_amt
        );

        var mc_edit_in_bill = data.responsedata.other_details.mc_edit_in_bill;

        var wastage_edit_in_bill =
          data.responsedata.other_details.wastage_edit_in_bill;

        var billing_for = $("input[name='billing[billing_for]']:checked").val();

        var total_est_discount = 0;

        //$("div.overlay").css("display", "none");

        packing_items = [];

        packing_items = data.responsedata.packing_details;

        set_packing_items();

        //Check Order Advance Exists

        var advance_details = data.responsedata.advance_details;

        if (data.responsedata.chit_details.length > 0) {
          $.each(data.responsedata.chit_details, function (k, val) {
            var account_exists = false;

            $.each(chit_details, function (key, item) {
              if (val.scheme_account_id == item.scheme_account_id) {
                account_exists = true;
              }
            });

            if (!account_exists) {
              chit_details.push({
                additional_benefits: val.additional_benefits,

                chit_ut_id: val.chit_ut_id,

                closing_add_chgs: val.closing_add_chgs,

                closing_amount: val.closing_amount,

                closing_balance: val.closing_balance,

                closing_weight: val.closing_weight,

                est_id: val.est_id,

                is_wast_and_mc_benefit_apply: val.is_wast_and_mc_benefit_apply,

                mc_value: val.mc_value,

                paid_installments: val.paid_installments,

                savings_in_making_charge: val.savings_in_making_charge,

                savings_in_wastage: val.savings_in_wastage,

                scheme_acc_number: val.scheme_acc_number,

                scheme_account_id: val.scheme_account_id,

                scheme_type: val.scheme_type,

                total_installments: val.total_installments,

                utl_amount: val.utl_amount,

                wastage_per: val.wastage_per,
              });
            }
          });
        }

        if (advance_details.length > 0) {
          if (
            is_eda == advance_details[0].is_eda ||
            advance_details[0].is_eda == ""
          ) {
            var paid_advance = 0;

            var paid_weight = 0;

            var wt_amt = 0;

            var rate_per_grm = $(".per-grm-sale-value").html();

            $.each(advance_details, function (key, item) {
              paid_advance += parseFloat(item.paid_advance);

              paid_weight += parseFloat(item.paid_weight);

              wt_amt += parseFloat(item.paid_weight * item.rate_per_gram);

              item.is_checked = 1;
            });

            order_adv_details = advance_details;

            if (order_adv_details.length > 0) {
              $(".advance_btn").css("display", "inline-grid");
            }

            $(".summary_adv_paid_amt").html(
              parseFloat(paid_advance) + parseFloat(wt_amt)
            );

            $(".summary_adv_paid_wt").html(
              parseFloat(paid_advance) + parseFloat(paid_weight)
            );

            $(".adv_paid_wt").html(paid_weight);

            $("#ord_adv_adj_details").val(
              advance_details.length > 0 ? JSON.stringify(advance_details) : ""
            );
          } else {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: '' + "</br>Difference in advance type",
              settings: { timeout: 5000 },
            });
          }
        }

        //Check Order Advance Exists

        //Chit Adj Details

        chit_adj_details = chit_details;

        var total_chit_amt = 0;

        var total_chit_wt = 0;

        $.each(chit_details, function (key, item) {
          total_chit_amt += parseFloat(item.utl_amount);

          total_chit_wt +=
            item.scheme_type == 2 || item.scheme_type == 3
              ? parseFloat(item.closing_balance)
              : 0;
        });

        /*$('.summary_chit_paid_amt').html(parseFloat(total_chit_amt).toFixed(2));

				$('.summary_chit_paid_wt').html(parseFloat(total_chit_wt).toFixed(3));*/

        //$('#tot_chit_amt').html(parseFloat(total_chit_amt).toFixed(2));

        $("#chit_details").val(
          chit_details.length > 0 ? JSON.stringify(chit_details) : ""
        );

        //Chit Adj Details

        // ESTIMATION SALE ITEMS

        if (billType != 5) {
          //$('#estimation-popup').modal('toggle');
        }

        if (data.responsedata.item_details.length > 0) {
          total_est_discount = data.responsedata.item_details[0].est_discount;

          $("#billing_for1").attr("disabled", false);

          $("#billing_for2").attr("disabled", false);

          $("#billing_for3").attr("disabled", false);

          if (data.responsedata.item_details[0].esti_for == 1) {
            $("#billing_for1").prop("checked", true);

            $("#billing_for2").attr("disabled", true);

            $("#billing_for3").attr("disabled", true);
          } else if (data.responsedata.item_details[0].esti_for == 3) {
            $("#billing_for2").prop("checked", true);

            $("#emp_user").css("display", "block");

            $("#billing_for1").attr("disabled", true);

            $("#billing_for3").attr("disabled", true);

            $("#billing_for2").attr("disabled", false);
          }

          var rowExist = false;

          var available_gross_wt = 0;

          var available_pieces = 0;

          var total_wt = 0;

          $("#est_items_to_sale_convertion tbody").empty();

          $("#cus_info").html("");

          $("#from_cus_mobile").val(data.responsedata.item_details[0].mobile);

          if (
            data.responsedata.item_details[0].id_customer != "" &&
            data.responsedata.item_details[0].id_customer != undefined
          ) {
            $("#bill_cus_name").attr("readonly", true);

            $("#add_new_customer").attr("disabled", "disabled");

            $("#bill_cus_name").val(data.responsedata.item_details[0].cus_name);

            $("#from_cus_mobile").val(data.responsedata.item_details[0].mobile);

            $("#bill_cus_id").val(
              data.responsedata.item_details[0].id_customer
            );

            $("#cus_village").html(
              data.responsedata.item_details[0].village_name
            );

            $("#cus_info").append(
              data.responsedata.item_details[0].vip == "Yes"
                ? "<span class='label bg-orange'><i class='fa fa-fw fa-star'></i> V I P</span>"
                : ""
            );

            $("#cus_info").append(
              data.responsedata.item_details[0].accounts > 0
                ? "&nbsp;<span class='label label-info'>Chit Customer</span>"
                : ""
            );
          }

          $("#gst_number").val(data.responsedata.item_details[0].gst_number);

          $("#pan_no").val(data.responsedata.item_details[0].pan_no);

          $("#aadhar_no").val(data.responsedata.item_details[0].aadharid);

          $("#dl_no").val(data.responsedata.item_details[0].dl_no);

          $("#pp_no").val(data.responsedata.item_details[0].pp_no);

          $.each(data.responsedata.item_details, function (estkey, estval) {
            total_wt += parseFloat(estval.gross_wt);

            if (estval.is_non_tag == 1) {
              available_pieces += parseFloat(estval.available_pieces);

              available_gross_wt += parseFloat(estval.available_gross_wt);
            }
          });

          $.each(data.responsedata.item_details, function (estkey, estval) {
            var stone_details = [];

            var other_metal_details = [];

            var stone_price = 0;

            var tag_other_itm_amount = 0;

            if (estval.is_non_tag == 1) {
              available_pieces += parseFloat(estval.available_pieces);

              available_gross_wt += parseFloat(estval.available_gross_wt);
            }

            if (estval.tag_id == "") {
              $.each(estval.stone_details, function (key, item) {
                stone_price += parseFloat(item.amount);

                stone_details.push({
                  stone_id: item.stone_id,
                  uom_id: item.uom_id,
                  stone_pcs: item.pieces,
                  stone_wt: item.wt,
                  stone_price: item.amount,
                  certification_cost: item.certification_cost,
                  stone_name: item.stone_name,
                  is_apply_in_lwt: item.is_apply_in_lwt,
                  stone_cal_type: item.stone_cal_type,
                  rate_per_gram: item.rate_per_gram,
                  quality_id: item.quality_id,
                });
              });

              $.each(estval.other_metal_details, function (key, sitem) {
                tag_other_itm_amount += parseFloat(sitem.tag_other_itm_amount);

                other_metal_details.push({
                  tag_other_itm_id: sitem.tag_other_itm_id,

                  tag_other_itm_tag_id: sitem.tag_other_itm_tag_id,

                  tag_other_itm_metal_id: sitem.tag_other_itm_metal_id,

                  tag_other_itm_pur_id: sitem.tag_other_itm_pur_id,

                  tag_other_itm_grs_weight: sitem.tag_other_itm_grs_weight,

                  tag_other_itm_wastage: sitem.tag_other_itm_wastage,

                  tag_other_itm_uom: sitem.tag_other_itm_uom,

                  tag_other_itm_cal_type: sitem.tag_other_itm_cal_type,

                  tag_other_itm_mc: sitem.tag_other_itm_mc,

                  tag_other_itm_rate: sitem.tag_other_itm_rate,

                  tag_other_itm_pcs: sitem.tag_other_itm_pcs,

                  tag_other_itm_amount: sitem.tag_other_itm_amount,

                  purname: sitem.purname,

                  metal_name: sitem.metal_name,
                });
              });
            } else {
              $.each(estval.stone_details, function (key, item) {
                stone_price += parseFloat(item.amount);

                stone_details.push({
                  stone_id: item.stone_id,
                  uom_id: item.uom_id,
                  stone_pcs: item.pieces,
                  stone_wt: item.wt,
                  stone_price: item.amount,
                  certification_cost: item.certification_cost,
                  stone_name: item.stone_name,
                  is_apply_in_lwt: item.is_apply_in_lwt,
                  stone_cal_type: item.stone_cal_type,
                  rate_per_gram: item.rate_per_gram,
                  quality_id: item.quality_id,
                  stone_type: item.stone_type,
                });
              });

              $.each(estval.other_metal_details, function (key, sitem) {
                tag_other_itm_amount += parseFloat(sitem.tag_other_itm_amount);

                other_metal_details.push({
                  tag_other_itm_id: sitem.tag_other_itm_id,

                  tag_other_itm_tag_id: sitem.tag_other_itm_tag_id,

                  tag_other_itm_metal_id: sitem.tag_other_itm_metal_id,

                  tag_other_itm_pur_id: sitem.tag_other_itm_pur_id,

                  tag_other_itm_grs_weight: sitem.tag_other_itm_grs_weight,

                  tag_other_itm_wastage: sitem.tag_other_itm_wastage,

                  tag_other_itm_uom: sitem.tag_other_itm_uom,

                  tag_other_itm_cal_type: sitem.tag_other_itm_cal_type,

                  tag_other_itm_mc: sitem.tag_other_itm_mc,

                  tag_other_itm_rate: sitem.tag_other_itm_rate,

                  tag_other_itm_pcs: sitem.tag_other_itm_pcs,

                  tag_other_itm_amount: sitem.tag_other_itm_amount,

                  purname: sitem.purname,

                  metal_name: sitem.metal_name,
                });
              });
            }

            $("#billing_sale_details > tbody tr").each(function (bidx, brow) {
              bill_sale_row = $(this);

              // CHECK DUPLICATES - TAG

              var bill_type = $(
                "input[name='billing[bill_type]']:checked"
              ).val();

              if (bill_type != 9) {
                if (bill_sale_row.find(".sale_tag_id").val() != "") {
                  if (bill_sale_row.find(".sale_tag_id").val() != "") {
                    if (
                      estval.tag_code ==
                        bill_sale_row.find(".tag_code").html() &&
                      estval.item_type ==
                        bill_sale_row.find(".itemtype").val() &&
                      estval.item_type == 0
                    ) {
                      rowExist = true;

                      $("#searchEstiAlert").html("Tag No Already Exists");
                    }
                  }
                }
              }

              // CHECK DUPLICATES - ESTIMATION ITEM

              if (bill_sale_row.find(".sale_est_itm_id").val() != "") {
                if (
                  estval.est_item_id ==
                  bill_sale_row.find(".sale_est_itm_id").val()
                ) {
                  rowExist = true;

                  $("#searchEstiAlert").html("Est No Already Exists");
                }
              }

              // CHECK DUPLICATES - ORDER ITEM

              if (bill_sale_row.find(".id_orderdetails").val() != "") {
                if (
                  estval.id_orderdetails ==
                    bill_sale_row.find(".id_orderdetails").val() &&
                  estval.item_type == bill_sale_row.find(".itemtype").val()
                ) {
                  rowExist = true;

                  $("#searchEstiAlert").html("Order No Already Exists");
                }
              }
            });

            if (estval.tag_id != "") {
              if (estval.is_partial == 0 && estval.item_type == 0) {
                if (
                  parseFloat(estval.net_wt) != parseFloat(estval.tag_net_wt)
                ) {
                  rowExist = true;

                  $.toaster({
                    priority: "danger",
                    title: "Warning!",
                    message:
                      "" +
                      "</br> Tag Net Weight and Estimation Net weight is difference..",
                  });
                }
              }
            }

            if (estval.is_partial == 1) {
              alert("Partial Estimation");
            }

            /*if(estval.is_non_tag==1)

							{

								if(available_gross_wt<total_wt)

								{

									rowExist = true;

									alert('No Available Stock');

								}

							}*/

            var tag_image = base_url + "assets/img/no_image.png";

            if (estval.tag_images.length > 0) {
              $.each(estval.tag_images, function (key, val) {
                if (val.is_default == 1) {
                  tag_image = base_url + "assets/img/tag/" + val.image;
                }
              });
            }

            if (!rowExist) {
              let mc_cal_type =
                typeof estval.mc_va_limit != "undefined" &&
                estval.mc_va_limit != null &&
                estval.mc_va_limit.length != 0
                  ? !(estval.mc_va_limit.mc_cal_type >= 0) ||
                    estval.mc_va_limit.mc_cal_type == null
                    ? 0
                    : estval.mc_va_limit.mc_cal_type
                  : 0;

              let mc_limit =
                typeof estval.mc_va_limit != "undefined" &&
                estval.mc_va_limit != null &&
                estval.mc_va_limit.length != 0
                  ? !(estval.mc_va_limit.mc_min >= 0) ||
                    estval.mc_va_limit.mc_min == null
                    ? 0
                    : estval.mc_va_limit.mc_min
                  : 0;

              let va_limit =
                typeof estval.mc_va_limit != "undefined" &&
                estval.mc_va_limit != null &&
                estval.mc_va_limit.length != 0
                  ? !(estval.mc_va_limit.wastag_min >= 0) ||
                    estval.mc_va_limit.wastag_min == null
                    ? 0
                    : estval.mc_va_limit.wastag_min
                  : 0;

              let margin_mrp =
                typeof estval.mc_va_limit != "undefined" &&
                estval.mc_va_limit != null &&
                estval.mc_va_limit.length != 0
                  ? !(estval.mc_va_limit.margin_mrp >= 0) ||
                    estval.mc_va_limit.margin_mrp == null
                    ? 0
                    : estval.mc_va_limit.margin_mrp
                  : 0;

              let purchase_cost = typeof estval.esti_purchase_cost != 'undefined' && estval.esti_purchase_cost != null && estval.esti_purchase_cost != 0 ? estval.esti_purchase_cost : (estval.tag_purchase_cost > 0 ? estval.tag_purchase_cost : 0);

              let rate_per_grm = 0;
              if (estval.stone_type == 0) {
                // for ornaments
                rate_per_grm = parseFloat(estval.est_rate_per_grm);
              } else {
                $.each(loose_product_rate, function (key, items) {
                  console.log("looseproduct", items);
                  var product_centwt = 0;
                  if (estval.stone_type == 2) {
                    // for diamond products
                    var pcs =
                      isNaN(estval.piece) || estval.piece == ""
                        ? 0
                        : parseInt(estval.piece);
                    var grs_wt =
                      isNaN(estval.gross_wt) || estval.gross_wt == ""
                        ? 0
                        : parseFloat(estval.gross_wt);
                    product_centwt = parseFloat((grs_wt / pcs) * 100).toFixed(
                      3
                    );
                  }

                  if (
                    $("#id_branch").val() == items.id_branch &&
                    estval.product_id == items.id_product &&
                    estval.design_id == items.id_design &&
                    estval.id_sub_design == items.id_sub_design &&
                    estval.quality_id == items.quality_id &&
                    estval.uom_id == items.uom_id
                  ) {
                    if (product_centwt > 0) {
                      if (
                        product_centwt >= parseFloat(items.from_cent) &&
                        product_centwt <= parseFloat(items.to_cent)
                      ) {
                        rate_per_grm = items.max_rate;
                      }
                    } else {
                      rate_per_grm = items.max_rate;
                    }
                  }
                });
              }

              var select_emp = "<option value='0'>-Select Employee-</option>";
              $.each(item_emp_details, function (pkey, emp) {
                let emp_selected = "";
                if (estval.item_emp_id == emp.id_employee) {
                  emp_selected = "selected = 'selected'";
                }
                select_emp +=
                  "<option " +
                  emp_selected +
                  " value='" +
                  estval.item_emp_id +
                  "'>" +
                  emp.emp_name +
                  "</option>";
              });

              let isbillsplit =
                ctrl_page[1] == "bill_split"
                  ? '<td><input class="form-control sale_noof_bills" tabindex=-1 name="sale_noof_bills" type="text" readonly placeholder="No of bills." value="" autocomplete="off" tabindex=18 style="width: 50px;" /></td>'
                  : "";

              // $('#item_emp_se option[value="'+estval.item_emp_id+'"]').prop('selected',true).change();

              console.log(other_metal_details);

              var row =
                '<tr id="' +
                estkey +
                '">' +
                '<td><input type="checkbox" class="delivery_status"  checked disabled><input type="hidden" class="is_delivered" name="sale[is_delivered][]" value="1"></td>' +
                '<td><input type="checkbox" class="show_huid"  checked value="1"> <input type="hidden" class="showHuid" name="sale[show_huid][]" value ="1"></td>' +
                '<td><input type="text" class="form-control huid" style="width: 100px;" value="' +
                estval.huid +
                '"  ' +
                (estval.huid != "" ? "readonly" : "") +
                ' name="sale[huid][]"></td>' +
                '<td><select type="select" class="form-control sale_item_type itemtype"  style="width: 120px; pointer-events : none;" name="sale[itemtype][]" readonly><option value="0" ' +
                (estval.item_type == "0" ? "selected" : "") +
                ' >Tagged</option><option value = "1" ' +
                (estval.item_type == "1" ? "selected" : "") +
                '> Non_tagged</option><option value="2" ' +
                (estval.item_type == "2" ? "selected" : "") +
                ">Home Bill</option></td > " +
                "<td>" +
                (estval.tag_code == ""
                  ? "-"
                  : '<input type="text" class="form-control" style="width: 100px;" readonly value="' +
                    estval.tag_code +
                    '">') +
                "</td>" +
                '<td><select class="form-control item_emp_se" id="item_emp_se" style="width:170px;" name="sale[item_emp_id][]">' +
                select_emp +
                "</select></td>" +
                '<td><input type="checkbox" class="partial" readonly><input type="hidden" class="is_partial"   ><input type="hidden" name="sale[item_emp_id][]" class="item_emp_id" value="' +
                estval.item_emp_id +
                '"></td>' +
                isbillsplit +
                '<td><img src="' +
                tag_image +
                '" width="50" height="55"><a class="btn btn-secondary tag_images" data-toggle="modal" data-id="' +
                estval.tag_id +
                '" id="edit"><i class="fa fa-eye" ></i></a></td>' +
                '<td><span style="width: 100px;">' +
                estval.hsn_code +
                '</span><input type="hidden" name="sale[id_collecion_maping_det][]" class="id_collecion_maping_det" value="' +
                estval.id_collecion_maping_det +
                '"><input type="hidden" name="sale[order_no][]" class="order_no" value="' +
                estval.order_no +
                '"><input type="hidden" name="sale[id_orderdetails][]" class="id_orderdetails" value="' +
                estval.id_orderdetails +
                '"><input type="hidden" name="sale[id_customerorder][]" class="id_customerorder" value="' +
                estval.id_customerorder +
                '"><input type="hidden" class="sale_pro_hsn" name="sale[hsn]" value="' +
                estval.hsn_code +
                '" /><input type="hidden" class="sale_type" name="sale[sourcetype][]" value="1" /><input type="hidden" class="is_est_details" value="1" name="sale[is_est_details][]" /><input type="hidden" class="est_itm_id" name="sale[est_itm_id][]" value="' +
                estval.est_item_id +
                '" /><input type="hidden" class="esti_no" name="sale[esti_no][]" value="' +
                estval.esti_no +
                '" /><input type="hidden" class="sale_cal_type" name="sale[calltype][]" value="' +
                estval.calculation_based_on +
                '" /><input type="hidden" class="sale_metal_type" value="' +
                estval.metal_type +
                '" /><input type="hidden" class="sale_size" value="' +
                estval.size +
                '"  name="sale[size][]" /><input type="hidden" class="sale_uom" value="' +
                estval.uom +
                '"  name="sale[uom][]" /><input type="hidden" class="total_tax" name="sale[item_total_tax][]"><input type="hidden" class="is_partial" value="' +
                estval.is_partial +
                '"  name="sale[is_partial][]" /><input type="hidden" class="min_wastage" value="' +
                estval.min_wastage +
                '"  name="sale[min_wastage][]" /><input type="hidden" class="max_wastage" value="' +
                estval.max_wastage +
                '"  name="sale[max_wastage][]" /><input type="hidden" class="stock_type" name="sale[stock_type][]" value="' +
                estval.stock_type +
                '" /><input type="hidden" class="is_non_tag" name="sale[is_non_tag][]" value="' +
                estval.is_non_tag +
                '" /><input type="hidden" class="rate_field"  value="' +
                estval.rate_field +
                '" /><input type="hidden" class="mc_cal_type"  value="' +
                mc_cal_type +
                '" /><input type="hidden" class="mc_limit"  value="' +
                mc_limit +
                '" /><input type="hidden" class="va_limit"  value="' +
                va_limit +
                '" /><input type="hidden" class="margin_mrp"  value="' +
                margin_mrp +
                '" /><input type="hidden" class="purchase_cost" value="' +
                purchase_cost +
                '" /></td>' +
                '<td class="section">-</td>' +
                '<td><span class="product_name" style="width:130px">' +
                estval.product_name +
                '</span><input class="sale_product_id" type="hidden" name="sale[product][]" value="' +
                estval.product_id +
                '" /><input class="scheme_closure_benefit" type="hidden" name="sale[scheme_closure_benefit][]" value="' +
                estval.scheme_closure_benefit +
                '" /></td>' +
                // +'<td><span class="design_name">'+estval.design_name+'</span><input type="hidden" class="sale_design_id" name="sale[design][]" value="'+estval.design_id+'" /><input type="hidden" class="id_sub_design" name="sale[id_sub_design][]" value="'+estval.id_sub_design+'" /><input type="hidden" class="id_section" name="sale[id_section][]" value="'+estval.id_section+'" /></td>'

                '<td><span class="design_name" style="width:130px">' +
                estval.design_name +
                '</span><input type="hidden" class="sale_design_id" name="sale[design][]" value="' +
                estval.design_id +
                '" /><input type="hidden" class="id_section" name="sale[id_section][]" value="' +
                estval.id_section +
                '" /></td>' +
                '<td><span class="sub_design_name" style="width:130px">' +
                estval.sub_design_name +
                '</span><input type="hidden" class="id_sub_design" name="sale[id_sub_design][]" value="' +
                estval.id_sub_design +
                '" /></td>' +
                '<td><span style="width:50px">' +
                estval.piece +
                '</span><input type="hidden" class="sale_pcs" name="sale[pcs][]" value="' +
                estval.piece +
                '"  /></td>' +
                '<td><span class="pur_name" style="width:130px">' +
                Number(estval.purname).toFixed(2) +
                '</span><input type="hidden" class="sale_purity" value="' +
                estval.purid +
                '"  name="sale[purity][]" /></td>' +
                // + '<td>' + estval.size + '</td>'

                '<td><span style="width:100px">' +
                (estval.size_value == 0
                  ? "-"
                  : estval.size_value + " " + estval.size_name) +
                "</span></td>" +
                "<td>" +
                (estval.est_rate_per_grm != null
                  ? estval.est_rate_per_grm
                  : "-") +
                '<input type="hidden" class="certification_cost" value="' +
                estval.certification_cost +
                '" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="' +
                estval.othermat_amount +
                '"/><input type="hidden" name="sale[stone_details][]" value=\'' +
                JSON.stringify(stone_details) +
                '\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value="' +
                tag_other_itm_amount +
                '"/><input type="hidden" class="other_metal_details" name="sale[other_metal_details][]" value=' +
                JSON.stringify(other_metal_details) +
                ' class="other_metal_details" /></td>' +
                '<td><input type="number" class="bill_gross_val form-control " name="sale[gross][]"  style="width:150px"  value="' +
                estval.gross_wt +
                '" readonly/><input type="hidden" class="act_gwt" value="' +
                estval.gross_wt +
                '"/></td>' +
                '<td><div class="form-group"><div class="input-group "><input class="form-control lwt" value=' +
                (estval.less_wt == "" ? "0.000" : estval.less_wt) +
                ' onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));"  type="number"  step="any" readonly style="width:100px;"/><span class="input-group-addon input-sm add_tag_lwt" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));">+</span></div></div><input type="hidden" class="bill_less_val" name="sale[less][]" value="' +
                estval.less_wt +
                '" /></td>' +
                '<td><span class="bill_sale_net_wt"></span><input type="hidden" class="bill_net_val" name="sale[net][]" value="' +
                estval.net_wt +
                '" /><input type="hidden" class="bill_tag_net_wt_val"  value="' +
                estval.tag_net_wt +
                '" /></td>' +
                "<td><span " +
                va_readonly +
                ' class="est_wastage">' +
                estval.wastage_percent +
                '</span><input type="' +
                (wastage_edit_in_bill == 1 ? "text" : "hidden") +
                '" style="width: 100px;" ' +
                va_readonly +
                ' class="form-control bill_wastage" value="' +
                estval.wastage_percent +
                '" /><input type="hidden" class="bill_wastage_per" name="sale[wastage][]" value="' +
                estval.wastage_percent +
                '" /></td>' +
                '<td><spanclass="est_wastage_wt"></span><input type="' +
                (wastage_edit_in_bill == 1 ? "text" : "hidden") +
                '"  class="form-control bill_wastage_wt" style="width: 100px;" value=""  ' +
                va_readonly +
                ' ><input type="hidden" name="sale[wastage_discount][]" class="wastage_discount" value=""><input type="hidden" name="sale[mc_discount][]" class="mc_discount" value=""><input type="hidden" name="sale[item_blc_discount][]" class="item_blc_discount" value=""></td>' +
                '<td><select class="form-control bill_mctype" style="width: 80px; ' +
                mc_type_selection +
                '" name="sale[bill_mctype][]" ' +
                mc_readonly +
                '><option value="1" ' +
                (estval.mc_type == 1 ? "selected" : "") +
                '>Pcs</option><option value="2" ' +
                (estval.mc_type == 2 ? "selected" : "") +
                ">Gram</option></select></td>" +
                '<td><span class="making_charge">' +
                estval.mc_value +
                '</span><input type="hidden" class="mc_dis" value="0"><input type="' +
                (mc_edit_in_bill == 1 ? "text" : "hidden") +
                '"  class="form-control bill_mc" name="sale[mc][]" style="width: 100px;" value="' +
                estval.mc_value +
                '"  ' +
                mc_readonly +
                '/><input type="hidden" class="discount"  name="sale[adjusted_dis][]" value="" /><input type="hidden" class="bill_mc_value" value="' +
                estval.mc_value +
                '" /></td>' +
                '<td><input class="form-control bill_rate_per_grm per_grm_amount" style="width:100px" type="number" placeholder="Rate" value=""readonly /></td>' +
                '<td><input type="number" style="width: 100px;" class="form-control bill_discount" name="sale[discount][]"  step="any" readonly/></td>' +
                '<td><input type="number" class="form-control bill_taxable_amt" style="width: 120px;" value readonly></td>' +
                '<td><span class="tgrp_name">' +
                estval.tgrp_name +
                '</span><input type="hidden" class="sale_tax_group" name="sale[taxgroup][]" value="' +
                estval.tax_group_id +
                '" /></td>' +
                '<td class="tax_amt"></td>' +
                // +'<td class="total_charges">'+estval.charge_value+(estval.charges.length>0 ? ' <a href="#" onClick="show_chargesdetails(event, $(this).closest(\'tr\'));" class="btn btn-success btn-sm"><i class="fa fa-edit"></i></a>' :'-')+'<input type="hidden" value='+(JSON.stringify(estval.charges))+' class="charges_details" /><input type="hidden" class="charge_value" value="'+estval.charge_value+'" /></td>'

                '<td  class="total_charges"><a href="#" onClick="create_new_empty_est_cus_charges_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" class="charges_details" name="sale[charges_details][]" value=' +
                JSON.stringify(estval.charges) +
                ' ><input class="charge_value" type="hidden"  name="sale[charge_value][]" value="' +
                estval.charge_value +
                '" ></td>' +
                "<td>" +
                (tag_other_itm_amount > 0
                  ? '<a href="#" onClick="showTagothermetals($(this).closest(\'tr\'));"><span class="other_metal_amount"></span></a><input type="hidden" class="other_metal_details" value=' +
                    JSON.stringify(other_metal_details) +
                    ">"
                  : tag_other_itm_amount) +
                '</td><input type="hidden" class="tag_other_itm_amount" value="' +
                tag_other_itm_amount +
                '"/>' +
                //+'<td>'+(stone_details.length>0 ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>' :'-')+'<input type="hidden" class="certification_cost" value="'+estval.certification_cost+'" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="'+estval.othermat_amount+'"/><input type="hidden" name="sale[stone_details][]" value=\''+(JSON.stringify(stone_details))+'\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value="'+tag_other_itm_amount+'"/><input type="hidden" class="other_metal_details" name="sale[other_metal_details][]" value='+(JSON.stringify(other_metal_details))+' class="other_metal_details" /></td>'

                //+'<td>'+(stone_details.length>0 ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>' :'-')+'<input type="hidden" class="certification_cost" value="'+estval.certification_cost+'" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="'+estval.othermat_amount+'"/><input type="hidden" name="sale[stone_details][]" value=\''+(JSON.stringify(stone_details))+'\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value="'+tag_other_itm_amount+'"/><input type="hidden" class="other_metal_details" name="sale[other_metal_details][]" value='+(JSON.stringify(other_metal_details))+' class="other_metal_details" /></td>'

                '<td><input type="hidden" class="bill_stone_price" value="' +
                stone_price +
                '" /><input type="number" class="form-control bill_amount" name="sale[billamount][]" style="width: 130px;" value="" step="any" readonly /><input type="hidden" class="per_grm_amount" name="sale[per_grm][]" value="' +
                (rate_per_grm > 0 ? rate_per_grm : estval.est_rate_per_grm) +
                '" step="any" /></td>' +
                // + '<td>' + (estval.is_partial == 1 ? 'YES' : 'NO') + '</td>'

                '<td style="display: none;"><span class="tag_code">' +
                estval.tag_code +
                '</span><input type="hidden" class="sale_tag_id" name="sale[tag][]" value="' +
                estval.tag_id +
                '" /><input type="hidden" name="sale[total_cgst][]" class="sale_cgst"/><input type="hidden" class="sale_sgst" name="sale[total_sgst][]"/><input type="hidden" class="sale_igst" name="sale[total_igst][]"/></td>' +
                '<td style="display:none"><input type="hidden" class="min_sale_value" value="" /><input type="hidden" class="purchase_rate" name="sale[purchase_rate][]" value="' +
                estval.purchase_rate +
                '" /><input type="hidden" class="purchase_cal_type" name="sale[purchase_cal_type][]" value="' +
                estval.purchase_cal_type +
                '" /><input type="hidden" class="purchase_rate_calc_type" name="sale[purchase_rate_calc_type][]" value="' +
                estval.purchase_rate_calc_type +
                '" />' +
                '<input type="hidden" class="sale_diamond" name="sale[sale_diamond][]" value="' +
                estval.sale_diamond +
                '" /><input type="hidden" class="sale_stone" name="sale[sale_stone][]" value="' +
                estval.sale_stone +
                '" /><input type="hidden" class="pur_stone" name="sale[pur_stone][]" value="' +
                estval.pur_stone +
                '" /><input type="hidden" class="pur_diamond" name="sale[pur_diamond][]" value="' +
                estval.pur_diamond +
                '" /><input type="hidden" class="profit_percentage" name="sale[profit_percentage][]" value="" /><input type="hidden" class="profit" name="sale[profit][]" value="" /><input type="hidden" class="dis_amt" name="sale[dis_per][]" value="" /><input type="hidden" class="dis_per" name="sale[dis_per][]" value="" /><input type="hidden" class="purchase_touch" name="sale[purchase_touch][]" value="' +
                estval.purchase_touch +
                '" /><input type="hidden" class="pur_mc" name="sale[pur_mc][]" value="' +
                estval.purchase_mc +
                '" /><input type="hidden" class="tag_age" name="sale[tag_age][]" value="' +
                estval.tag_age +
                '" /><input type="hidden" class="tag_purchase_cost" name="sale[tag_purchase_cost][]" value="' +
                estval.tag_purchase_cost +
                '" /><input type="hidden" class="purchase_va" name="sale[purchase_va][]" value="' +
                estval.purchase_va +
                '" /><input type="hidden" class="purchase_mc" name="sale[purchase_mc][]" value="' +
                estval.purchase_mc +
                '" /><input type="hidden" class="purchase_mc_type" name="sale[purchase_mc_type][]" value="' +
                estval.purchase_mc_type +
                '" /></td>' +
                "<td>" +
                (estval.order_no == "" ? "-" : estval.order_no) +
                "</td>" +
                '<td><span class="esti_number">' +
                estval.esti_no +
                '</span><input type="hidden" class="sale_est_itm_id" name="sale[estid][]" value="' +
                estval.est_item_id +
                '" /><input type="hidden" class="tag_sales_value"  value="' +
                (rate_per_grm > 0 && estval.stone_type != 0
                  ? rate_per_grm
                  : estval.stone_type == 0
                  ? estval.item_cost
                  : estval.est_rate_per_grm) +
                '" /><input type="hidden" class="gift_applicable"  value="' +
                estval.gift_applicable +
                '" /><input type="hidden" class="quality_id" name="sale[quality_id][]" value=' +
                estval.quality_id +
                '><input type="hidden" class="stone_type" value=' +
                estval.stone_type +
                '><input type="hidden" class="uom_id" value=' +
                estval.uom_id +
                '><input type="hidden" class="stone_calculation_based_on" value=' +
                estval.stone_calculation_based_on +
                "></td>" +
                '<td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
                "</tr>";
            }

            $("#billing_sale_details tbody").append(row);

            $("#billing_sale_details > tbody").find(".item_emp_sel").select2();
          });

          if (billType == 9) {
            //Order Delivery
            if (ctrl_page[1] == 'bill_split' && ($('#cus_state').val() == '' && $('#cus_country').val() == '' )){

              $('#cus_state').val(data.responsedata.item_details[0]['id_state']);
      
              $('#cus_del_state').val(data.responsedata.item_details[0]['id_state']);
      
              $('#cus_country').val(data.responsedata.item_details[0]['id_country']);
      
              $('#cus_del_country').val(data.responsedata.item_details[0]['id_country']);
      
            }

            calculateOrderSaleBillRowTotal();
          } else {
            calculateSaleBillRowTotal();
          }

          if (chit_details.length > 0) {
            //$('#chit_util_modal').trigger('click');

            calculate_est_chit_closing_balance();
          }

          /*var next = $('.nav-tabs > .active').next('li');

					next.find('a').trigger('click');

					$('#total_cost').focus();*/
        }

        if (billType == 5 && data.responsedata.order_details.length > 0) {
          if (
            data.responsedata.order_details[0].is_eda == is_eda ||
            data.responsedata.order_details[0].is_eda == "" ||
            data.responsedata.order_details[0].is_eda == null
          ) {
            $("#billing_order_adv_details tbody").empty();

            $("#bill_cus_name").attr("readonly", true);

            $("#bill_cus_name").val(data.responsedata.order_details[0].cus_name);

            $("#bill_cus_id").val(data.responsedata.order_details[0].order_to);

            updateorderAdvance_sale_Bill(data.responsedata.order_details);

            var next = $(".nav-tabs > .active").next("li");

            next.find("a").trigger("click");

            $("#total_cost").focus();
          } else {
          }
        } else if (
          billType == 11 &&
          data.responsedata.order_details.length > 0
        ) {
          setRepairOrderDetails(data.responsedata.order_details);

          if (data.responsedata.item_details.length > 0) {
            $(".sale_details").css("display", "block");
          }

          var next = $(".nav-tabs > .active").next("li");

          next.find("a").trigger("click");

          $("#total_cost").focus();
        }

        // ESTIMATION PURCHASE ITEMS

        if (data.responsedata.old_matel_details.length > 0) {
          if (data.responsedata.old_matel_details[0].esti_for == 1) {
            $("#billing_for1").attr("checked", true);

            $("#billing_for2").attr("disabled", true);

            $("#billing_for3").attr("disabled", true);

            $("#billing_for1").attr("disabled", false);
          } else if (data.responsedata.old_matel_details[0].esti_for == 3) {
            $("#billing_for2").attr("checked", true);

            $("#emp_user").css("display", "block");

            $("#billing_for1").attr("disabled", true);

            $("#billing_for3").attr("disabled", true);

            $("#billing_for2").attr("disabled", false);
          }

          if (billType != 5) {
            var rowExist = false;

            $("#est_olditems_to_sale_convertion tbody").empty();

            $("#cus_info").html("");

            if (billing_for == 1) {
              $("#bill_cus_name").val(
                data.responsedata.old_matel_details[0].cus_name
              );

              $("#bill_cus_id").val(
                data.responsedata.old_matel_details[0].id_customer
              );

              $("#cus_village").html(
                data.responsedata.old_matel_details[0].village_name
              );

              $("#bill_cus_name").attr("readonly", true);

              $("#add_new_customer").attr("disabled", "disabled");
            }

            $.each(
              data.responsedata.old_matel_details,
              function (estkey, estval) {
                var stone_details = [];

                var other_stone_wt = 0;

                var other_stone_price = 0;

                $.each(estval.stone_details, function (key, item) {
                  stone_details.push({
                    est_old_metal_stone_id: item.est_old_metal_stone_id,
                    stone_id: item.stone_id,
                    stone_pcs: item.pieces,
                    stone_wt: item.wt,
                    stone_price: item.price,
                    rate_per_gram: item.rate_per_gram,
                    uom_id: item.uom_id,
                  });

                  other_stone_wt += parseFloat(item.wt);

                  other_stone_price += parseFloat(item.price);
                });

                $("#purchase_item_details > tbody tr").each(function (
                  bidx,
                  brow
                ) {
                  bill_pur_row = $(this);

                  if (
                    estval.old_metal_sale_id ==
                    bill_pur_row.find(".est_old_itm_id").val()
                  ) {
                    rowExist = true;
                  }
                });

                /* if(!rowExist)

							 {

								 let metal_types = [{'id_metal':1,'metal':'Gold'},{'id_metal':2,'metal':'Silver'},{'id_metal':3,'metal':'Platinum'}];

								 let matelTupes = '';

								 $.each(metal_types,function(mk,mv){
									 matelTupes += `<option ${(estval.id_category==mv.id_metal ? 'selected' : '')} value="${mv.id_metal}">${mv.metal}</option>`
								 });

								 var row = '<tr id="'+estkey+'">'


								 +'<td><select class="form-control" style="width:100px;" disabled>'+matelTupes+'</select><input type="hidden" class="bill_est_touch" name="purchase[touch][]" value="'+estval.touch+'" step="any" readonly /><input type="hidden" class="purity" value="'+estval.purity+'" name="purchase[purity][]" /><input type="hidden" class="is_est_details" value="1" name="purchase[is_est_details][]" /><input type="hidden" class="est_old_itm_id" value="'+estval.old_metal_sale_id+'" name="purchase[est_old_itm_id][]" /><input type="hidden" name="purchase[est_itm_id][]" class="est_itm_id" value="'+estval.old_metal_sale_id+'" /><input type="hidden" class="item_type" name="purchase[itemtype][]" value="2" /><input type="hidden" class="pur_metal_type" value="'+estval.id_category+'" name="purchase[metal_type][]" /></td>'

								 +'<td><input readonly type="text" style="width:120px;" class="form-control" value="'+estval.metal_type+'" /><input type="hidden" name="purchase[id_old_metal_type][]" value="'+estval.id_old_metal_type+'" /></td>'

								 +'<td><input readonly type="text" style="width:120px;" class="form-control" value="'+estval.old_metal_cat+'" /><input type="hidden" name="purchase[id_old_metal_category][]" value="'+estval.id_old_metal_category+'" /></td>'

								 +'<td><span>'+estval.purity+'<span/></td>'

								 +'<td><input type="number" class="pur_pcs" name="purchase[piece][]" value="'+estval.piece+'" /></td>'

								 +'<td><span>'+estval.gross_wt+'</span><input type="hidden" class="pur_gross_val" name="purchase[gross][]" value="'+estval.gross_wt+'" /></td>'

								 +'<td><span>'+estval.less_wt+'</span><input type="hidden" class="pur_less_val" name="purchase[less][]" value="'+estval.less_wt+'" /></td>'

								 +'<td><span>'+estval.stone_wt+'</span><input type="hidden" class="stone_wt" name="purchase[stone_wt][]" value="'+estval.stone_wt+'" /></td>'

								 +'<td><span>'+estval.wastage_percent+'</span><input type="hidden" class="pur_wastage" name="purchase[wastage][]" value="'+estval.wastage_percent+'" /></td>'

								 +'<td><span>'+estval.wastage_wt+'</span><input type="hidden" class="pur_wastage_wt" name="purchase[wastage_wt][]" value="'+estval.wastage_wt+'" /></td>'

								 +'<td><span>'+estval.net_wt+'</span><input type="hidden" class="pur_net_val" name="purchase[net][]" value="'+estval.net_wt+'" /><input type="hidden" class="est_old_dust_val" name="purchase[dust_wt][]" value="'+estval.dust_wt+'" /></td>'

								 +'<td><span>'+estval.rate_per_gram+'</span></td>'

								 //+'<td><input type="number" class="pur_discount" name="purchase[discount][]" value="" /></td>'

								 +'<td><span>'+estval.touch+'</span></td>'

								 +'<td><a href="#" onClick="create_new_empty_bill_purchase_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" class="stone_details" value='+(JSON.stringify(stone_details))+' name="purchase[stone_details][]"/><input type="hidden" class="other_stone_price" value="'+other_stone_price+'" /><input type="hidden" class="other_stone_wt" value="'+other_stone_wt+'" /><input type="hidden" class="bill_material_price" value=""/></td>'

								 +'<td><span>'+(estval.purpose== 1 ? "Cash" : "Exchange")+'</span><input type="hidden" name="purchase[id_purpose][]" value="'+estval.purpose+'"></td>'

								 +'<td><span>'+(estval.remark ? estval.remark :'-')+'</span><input type="hidden" class="remark" name="purchase[remark][]" value="'+estval.remark+'" /></td>'

								 +'<td><input type="number" class="bill_amount" name="purchase[billamount][]" value="'+estval.amount+'" step="any"  readonly/><input type="hidden" class="bill_rate_per_grm" name="purchase[rate_per_grm][]" value="'+estval.rate_per_gram+'" step="any" readonly /></td>'

								 //+'<td><span>'+estval.esti_no+'</span><input type="hidden" class="pur_est_id" name="purchase[estid][]" value="'+estval.est_id+'" /><input type="hidden" class="pur_esti_no" name="purchase[esti_no][]" value="'+estval.esti_no+'" /></td>'

								 +'<td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>'

								 +'</tr>';

							 }*/

                if (!rowExist) {
                  //oldref

                  let metal_types = [
                    { id_metal: 1, metal: "Gold" },
                    { id_metal: 2, metal: "Silver" },
                    { id_metal: 3, metal: "Platinum" },
                  ];

                  let matelTupes = "";

                  $.each(metal_types, function (mk, mv) {
                    matelTupes += `<option ${
                      estval.id_category == mv.id_metal ? "selected" : ""
                    } value="${mv.id_metal}">${mv.metal}</option>`;
                  });

                  let old_metal_types_str = `<option value=''>- Select Metal Type-</option>`;

                  $.each(old_metal_types, function (k, v) {
                    if (v.id_metal == estval.id_category) {
                      old_metal_types_str += `<option ${
                        estval.id_old_metal_type == v.id_metal_type
                          ? "selected"
                          : ""
                      } value="${v.id_metal_type}" >${v.metal_type}</option>`;
                    }
                  });

                  let old_metal_cat_str = `<option value=''>- Select Category-</option>`;

                  $.each(old_metal_category, function (k, v) {
                    if (v.id_old_metal_type == estval.id_old_metal_type) {
                      old_metal_cat_str += `<option ${
                        v.id_old_metal_cat == estval.id_old_metal_category
                          ? "selected"
                          : ""
                      } value="${v.id_old_metal_cat}">${
                        v.old_metal_cat
                      }</option>`;
                    }
                  });

                  let purpose_options = `<option value="1" ${
                    estval.purpose == 1 ? "selected" : ""
                  } >Cash</option><option value="2" ${
                    estval.purpose == 1 ? "selected" : ""
                  }>Exchange</option>`;

                  var row =
                    '<tr id="' +
                    estkey +
                    '">' +
                    '<td><select class="form-control pur_metal_type" name="purchase[metal_type][]" style="width:100px;">' +
                    matelTupes +
                    '</select><input type="hidden" class="is_est_details" value="1" name="purchase[is_est_details][]" /><input type="hidden" class="est_old_itm_id" value="' +
                    estval.old_metal_sale_id +
                    '" name="purchase[est_old_itm_id][]" /><input type="hidden" name="purchase[est_itm_id][]" class="est_itm_id" value="' +
                    estval.old_metal_sale_id +
                    '" /><input type="hidden" class="item_type" name="purchase[itemtype][]" value="2" /></td>' +
                    '<td><select type="text" style="width:120px;" name="purchase[id_old_metal_type][]" class="form-control old_metal_type">' +
                    old_metal_types_str +
                    "</select>" +
                    '<td><select type="text" style="width:120px;" name="purchase[id_old_metal_category][]" class="form-control old_metal_category" >' +
                    old_metal_cat_str +
                    "</select></td>" +
                    '<td><input type="number" style="width:80px;" class="purity form-control" value="' +
                    estval.purity +
                    '" name="purchase[purity][]" /></td>' +
                    '<td><input type="number" style="width:80px;" class="pur_piece form-control" name="purchase[piece][]" value="' +
                    estval.piece +
                    '" /></td>' +
                    '<td><input type="number" style="width:100px;" class="pur_gross_val form-control" name="purchase[gross][]" value="' +
                    estval.gross_wt +
                    '" /></td>' +
                    '<td><input type="number" style="width:100px;" class="est_old_dust_val form-control" name="purchase[dust_wt][]" value="' +
                    estval.dust_wt +
                    '" /></td>' +
                    '<td><input type="number" style="width:100px;" class="stone_wt form-control" name="purchase[stone_wt][]" value="' +
                    estval.stone_wt +
                    '" /></td>' +
                    '<td><input type="number" style="width:100px;" class="pur_wastage form-control" name="purchase[wastage][]" value="' +
                    estval.wastage_percent +
                    '" /></td>' +
                    '<td><input type="number" style="width:100px;" class="pur_wastage_wt form-control" name="purchase[wastage_wt][]" value="' +
                    estval.wastage_wt +
                    '" /></td>' +
                    '<td><input type="number" style="width:100px;" class="pur_net_val form-control" name="purchase[net][]" value="' +
                    estval.net_wt +
                    '" /></td>' +
                    '<td><input type="number" class="form-control bill_rate_per_grm" name="purchase[rate_per_grm][]" style="width:100px;" value="' +
                    estval.rate_per_gram +
                    '" /></td>' +
                    '<td><input type="number" style="width:100px;" name="purchase[touch][]" class="form-control old_touch" value="' +
                    estval.touch +
                    '" /></td>' +
                    '<td><a href="#" onClick="create_new_empty_bill_purchase_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" class="stone_details" value=' +
                    JSON.stringify(stone_details) +
                    ' name="purchase[stone_details][]"/><input type="hidden" class="other_stone_price" value="' +
                    other_stone_price +
                    '" /><input type="hidden" class="other_stone_wt" value="' +
                    other_stone_wt +
                    '" /><input type="hidden" class="bill_material_price" value=""/></td>' +
                    '<td><select class="form-control" style="width:100px;" name="purchase[id_purpose][]">' +
                    purpose_options +
                    "</select></td>" +
                    "<td><span>" +
                    (estval.remark ? estval.remark : "-") +
                    '</span><input type="hidden" class="remark" name="purchase[remark][]" value="' +
                    estval.remark +
                    '" /></td>' +
                    '<td><input type="number" style="width:100px;" class="bill_amount form-control" name="purchase[billamount][]" value="' +
                    estval.amount +
                    '" step="any" /></td>' +
                    //+'<td><span>'+estval.esti_no+'</span><input type="hidden" class="pur_esti_no" name="purchase[esti_no][]" value="'+estval.esti_no+'" /></td>'

                    '<td><input type="hidden" class="pur_est_id" name="purchase[estid][]" value="' +
                    estval.est_id +
                    '" /><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
                    "</tr>";
                }

                $("#purchase_item_details tbody").append(row);

                $(".purchase_details").show();
              }
            );

            if (ctrl_page[1] == "bill_split") {
              $(".pu_no_of_split").css("display", "block");
            }

            calculateSaleBillRowTotal();
          } else {
            //$('#est_olditems_to_sale_convertion_tbl').show();

            //$('#purchase_item_details tbody').empty();

            updateorderAdvance_purchase_Bill(
              data.responsedata.old_matel_details
            );
          }

          /*var next = $('.nav-tabs > .active').next('li');

					next.find('a').trigger('click');

					$('#total_cost').focus();*/
        } else {
          $("#est_olditems_to_sale_convertion tbody").empty();

          $("#est_olditems_to_sale_convertion_tbl").hide();
        }

        if (
          $("#bill_cus_id").val() != "" &&
          $("#bill_cus_id").val() != undefined
        ) {
          console.log("Fltag", $("#filter_tag_no").val());
          if ($("#filter_tag_no").val() == "") {
            //hide customer popup for tagno search
            get_customer_address_det();

            customer_detail_modal($("#bill_cus_id").val());

            get_tcs_percent($("#bill_cus_id").val());
          }
        }

        if (billType == 3) {
          getCustomerSalesDetails($("#bill_cus_id").val());
        }

        get_check_customer_payment_det();
      } else {
        //$("div.overlay").css("display", "none");

        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>" + data.message,
        });
      }

      //Get All Estimation Id

      if (
        data.responsedata.item_details.length > 0 ||
        data.responsedata.old_matel_details.length > 0
      ) {
        if (data.responsedata.item_details != "") {
          $.each(data.responsedata.item_details, function (key, item) {
            if (check_est(item.esti_id, estimation_id)) {
              estimation_id.push(item.esti_id);
            }
          });
        }
        if (data.responsedata.old_matel_details != "") {
          $.each(data.responsedata.old_matel_details, function (key, oitem) {
            if (check_est(oitem.est_id, estimation_id)) {
              estimation_id.push(oitem.est_id);
            }
          });
        }
        // if(data.responsedata.item_details.length > 0){
        // 	// $('#billing_sale_details > tbody tr').each(function (idx, row) {
        // 		curRow = $(this);
        // 		estimation_id.push({
        // 			'esti_id' : curRow.find('.esti_id').val()
        // 		});
        // 	// });
        // }
        // if(data.responsedata.old_matel_details.length > 0){
        // 	// $('#purchase_item_details > tbody tr').each(function (oidx, orow) {
        // 		Row = $(this);
        // 		estimation_id.push({
        // 			'esti_id' : Row.find('.esti_id').val()
        // 		});
        // 	// });
        // }
      }


      updatePurchaseColumnTotal();
      updateSaleColumnTotal();

      console.log("estimation_id : " + JSON.stringify(estimation_id));

      $("#filter_est_no").val("");
      setTabIndex();

      if ($("#is_eda").val() == 2) {
        // EDA
        var billing_for = $("input[name='billing[billing_for]']:checked").val();
        if (billing_for == 2) {
          // Company
          clear_billing_details();

          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>B2B Bills Not allowed...",
          });
        }
      }
    },
  });
}

function showTagothermetals(curRow) {
  $("#other_metalmodal").modal("toggle");
  if (curRow != undefined) {
    $("#custom_active_id").val(curRow.closest("tr").attr("id"));
  }
  var catRow = $("#custom_active_id").val();
  var other_metal_details = JSON.parse(
    $("#" + catRow)
      .find(".other_metal_details")
      .val()
  );
  console.log(other_metal_details);
  if (other_metal_details.length > 0) {
    var row = "";
    var pcs = 0;
    var wt = 0;
    var amount = 0;

    $.each(other_metal_details, function (key, val) {
      pcs += parseFloat(val.tag_other_itm_pcs);
      wt += parseFloat(val.tag_other_itm_grs_weight);
      amount += parseFloat(val.tag_other_itm_amount);

      row +=
        "<tr>" +
        "<td>" +
        val.metal_name +
        "</td>" +
        "<td>" +
        val.purname +
        "</td>" +
        "<td>" +
        val.tag_other_itm_pcs +
        "</td>" +
        "<td>" +
        val.tag_other_itm_grs_weight +
        "</td>" +
        "<td>" +
        val.tag_other_itm_wastage +
        "</td>" +
        "<td>" +
        (val.tag_other_itm_cal_type == 1 ? "Per Gram" : "Per Piece") +
        "</td>" +
        "<td>" +
        val.tag_other_itm_mc +
        "</td>" +
        "<td>" +
        val.tag_other_itm_rate +
        "</td>" +
        "<td>" +
        val.tag_other_itm_amount +
        "</td>" +
        "</tr>";
    });

    $(".total_pcs").html(parseFloat(money_format_india(pcs)).toFixed(0));
    $(".total_wt").html(parseFloat(money_format_india(wt)).toFixed(3));
    $(".total_amount").html(parseFloat(amount).toFixed(2));

    $("#other_metalmodal tbody").append(row);
  }
}

$("#tag_other_metal_details").on("click", function () {
  $("#other_metal_table tbody").empty();
  $(".total_pcs").html(0);
  $(".total_wt").html(0);
  $(".total_amount").html(0);
  $("#other_metalmodal").modal("toggle");
});

function setTabIndex() {
  let billType = $("input[name='billing[bill_type]']:checked").val();
  if (billType == 1) {
    let tabIndex = 21;
    $("#billing_sale_details tbody tr").each(function (idx, row) {
      let curRow = $(this);
      curRow.find(".bill_wastage:not([readonly])").attr("tabindex", ++tabIndex);
      curRow
        .find(".bill_wastage_wt:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow.find(".bill_mctype:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".bill_mc:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".bill_amount").attr("tabindex", ++tabIndex);
    });
  } else if (billType == 2) {
    let tabIndex = 21;
    $("#billing_sale_details tbody tr").each(function (idx, row) {
      let curRow = $(this);
      curRow.find(".bill_wastage:not([readonly])").attr("tabindex", ++tabIndex);
      curRow
        .find(".bill_wastage_wt:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow.find(".bill_mctype:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".bill_mc:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".bill_amount").attr("tabindex", ++tabIndex);
    });

    $(".purchase_add").attr("tabindex", ++tabIndex);

    $("#purchase_item_details tbody tr").each(function (idx, row) {
      let curRow = $(this);
      curRow
        .find(".pur_metal_type:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow
        .find(".old_metal_type:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow
        .find(".old_metal_category:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow.find(".purity:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".pur_piece:not([readonly])").attr("tabindex", ++tabIndex);
      curRow
        .find(".pur_gross_val:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow.find(".pur_net_val:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".bill_amount:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".del-btn").attr("tabindex", ++tabIndex);
      curRow.find(".add-btn").attr("tabindex", ++tabIndex);
    });
  } else if (billType == 3) {
    let tabIndex = 24;
    $("#billing_sale_details tbody tr").each(function (idx, row) {
      let curRow = $(this);
      curRow.find(".bill_wastage:not([readonly])").attr("tabindex", ++tabIndex);
      curRow
        .find(".bill_wastage_wt:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow.find(".bill_mctype:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".bill_mc:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".bill_amount").attr("tabindex", ++tabIndex);
    });

    $(".purchase_add").attr("tabindex", ++tabIndex);

    $("#purchase_item_details tbody tr").each(function (idx, row) {
      let curRow = $(this);
      curRow
        .find(".pur_metal_type:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow
        .find(".old_metal_type:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow
        .find(".old_metal_category:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow.find(".purity:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".pur_piece:not([readonly])").attr("tabindex", ++tabIndex);
      curRow
        .find(".pur_gross_val:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow.find(".pur_net_val:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".bill_amount:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".del-btn").attr("tabindex", ++tabIndex);
      curRow.find(".add-btn").attr("tabindex", ++tabIndex);
    });
  } else if (billType == 4) {
    let tabIndex = 19;

    $(".purchase_add").attr("tabindex", ++tabIndex);

    $("#purchase_item_details tbody tr").each(function (idx, row) {
      let curRow = $(this);
      curRow
        .find(".pur_metal_type:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow
        .find(".old_metal_type:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow
        .find(".old_metal_category:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow.find(".purity:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".pur_piece:not([readonly])").attr("tabindex", ++tabIndex);
      curRow
        .find(".pur_gross_val:not([readonly])")
        .attr("tabindex", ++tabIndex);
      curRow.find(".pur_net_val:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".bill_amount:not([readonly])").attr("tabindex", ++tabIndex);
      curRow.find(".del-btn").attr("tabindex", ++tabIndex);
      curRow.find(".add-btn").attr("tabindex", ++tabIndex);
    });
  }
}

$(document).on("change", ".select_est_details", function () {
  var item_pcs = 0;

  var item_gwt = 0;

  var total_pcs = $("#blc_pcs").html();

  var total_gwt = $("#blc_gwt").html();

  $("#est_items_to_sale_convertion > tbody tr").each(function (idx, row) {
    curRow = $(this);

    if (curRow.find(".select_est_details").is(":checked")) {
      if (curRow.find(".is_non_tag").val() == 1) {
        item_pcs += parseFloat(curRow.find(".est_pcs").val());

        item_gwt += parseFloat(curRow.find(".est_gross_val").val());
      }
    }
  });

  if (item_pcs <= total_pcs || item_gwt <= total_gwt) {
    $("#update_estimation_to_bill").attr("disabled", false);
  } else {
    $("#update_estimation_to_bill").attr("disabled", true);
  }

  $("#tot_pcs").html(item_pcs);

  $("#tot_wt").html(item_gwt);
});

function calculateEsttoSaleConvertion() {
  $("#est_items_to_sale_convertion > tbody tr").each(function (idx, row) {
    curRow = $(this);

    var gross_wt =
      isNaN(curRow.find(".est_gross_val").val()) ||
      curRow.find(".est_gross_val").val() == ""
        ? 0
        : curRow.find(".est_gross_val").val();

    var less_wt =
      isNaN(curRow.find(".est_less_val").val()) ||
      curRow.find(".est_less_val").val() == ""
        ? 0
        : curRow.find(".est_less_val").val();

    var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

    var calculation_type =
      isNaN(curRow.find(".est_cal_type").val()) ||
      curRow.find(".est_cal_type").val() == ""
        ? 0
        : curRow.find(".est_cal_type").val();

    var stone_price =
      isNaN(curRow.find(".est_stone_price").val()) ||
      curRow.find(".est_stone_price").val() == ""
        ? 0
        : curRow.find(".est_stone_price").val();

    var certification_price =
      isNaN(curRow.find(".est_certification_price").val()) ||
      curRow.find(".est_certification_price").val() == ""
        ? 0
        : curRow.find(".est_certification_price").val();

    var order_no =
      isNaN(curRow.find(".order_no").val()) ||
      curRow.find(".order_no").val() == ""
        ? ""
        : curRow.find(".order_no").val();

    var material_price =
      isNaN(curRow.find(".est_material_price").val()) ||
      curRow.find(".est_material_price").val() == ""
        ? 0
        : curRow.find(".est_material_price").val();

    var total_price = 0;

    var rate_per_grm = 0;

    if (curRow.find(".est_metal_type").val() == 1) {
      rate_per_grm =
        isNaN($(".per-grm-sale-value").html()) ||
        $(".per-grm-sale-value").html() == ""
          ? 0
          : parseFloat($(".per-grm-sale-value").html());
    } else {
      rate_per_grm =
        isNaN($(".silver_per-grm-sale-value").html()) ||
        $(".silver_per-grm-sale-value").html() == ""
          ? 0
          : parseFloat($(".silver_per-grm-sale-value").html());
    }

    var inclusive_tax_rate = 0;

    var total_tax = 0;

    var rate_with_mc = 0;

    var tax_group = curRow.find(".est_tax_id").val();

    var discount =
      isNaN(curRow.find(".est_discount").val()) ||
      curRow.find(".est_discount").val() == ""
        ? 0
        : curRow.find(".est_discount").val();

    var retail_max_mc =
      isNaN(curRow.find(".est_mc_value").val()) ||
      curRow.find(".est_mc_value").val() == ""
        ? 0
        : curRow.find(".est_mc_value").val();

    var tot_wastage =
      isNaN(curRow.find(".est_wastage_percent").val()) ||
      curRow.find(".est_wastage_percent").val() == ""
        ? 0
        : curRow.find(".est_wastage_percent").val();

    if (calculation_type == 0) {
      var wast_wgt = parseFloat(
        parseFloat(gross_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".est_mc_type").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".est_mc_type").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * curRow.find(".est_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(certification_price)
        );
      } else {
        var mc_type = parseFloat(
          parseFloat(retail_max_mc * gross_wt) * curRow.find(".est_pcs").val()
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 1) {
      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".est_mc_type").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".est_mc_type").val() == 2
            ? parseFloat(retail_max_mc * net_wt)
            : parseFloat(retail_max_mc * curRow.find(".est_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(certification_price)
        );
      } else {
        var mc_type = parseFloat(
          parseFloat(retail_max_mc * net_wt) * curRow.find(".est_pcs").val()
        );

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 2) {
      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".est_mc_type").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".est_mc_type").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * curRow.find(".est_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc =
          parseFloat(
            parseFloat(rate_per_grm) *
              (parseFloat(wast_wgt) + parseFloat(net_wt)) +
              parseFloat(mc_type)
          ) +
          parseFloat(stone_price) +
          parseFloat(certification_price);
      } else {
        var mc_type = parseFloat(
          parseFloat(retail_max_mc * gross_wt) * curRow.find(".est_pcs").val()
        );

        rate_with_mc =
          parseFloat(
            parseFloat(rate_per_grm) *
              (parseFloat(wast_wgt) + parseFloat(net_wt)) +
              parseFloat(mc_type)
          ) +
          parseFloat(stone_price) +
          parseFloat(certification_price);
      }
    }

    console.log(
      parseFloat(
        parseFloat(rate_per_grm) * (parseFloat(wast_wgt) + parseFloat(net_wt))
      ) + parseFloat(mc_type)
    );

    /*if(calculation_type == 0){

			rate_with_mc = parseFloat((parseFloat(rate_per_grm * gross_wt) + parseFloat(retail_max_mc * gross_wt)) - discount);

		}else if(calculation_type == 1){

			rate_with_mc = parseFloat((parseFloat(rate_per_grm * net_wt) + parseFloat(retail_max_mc * net_wt)) -discount );

		}else if(calculation_type == 2){

			rate_with_mc = parseFloat((((parseFloat(rate_per_grm) * parseFloat(net_wt) + parseFloat(tot_wastage * net_wt))) + parseFloat(retail_max_mc * net_wt)) - discount);

		}*/

    rate_with_mc = rate_with_mc - discount;

    total_tax = getTaxValueForItem(rate_with_mc, tax_group);

    inclusive_tax_rate = parseFloat(
      rate_with_mc + parseFloat(total_tax)
    ).toFixed(2);

    curRow.find("td:eq(14)").html(parseFloat(total_tax).toFixed(2));

    curRow
      .find(".est_item_cost")
      .html(parseFloat(inclusive_tax_rate).toFixed(2));

    curRow.find(".est_item_cost_val").val(inclusive_tax_rate);

    curRow.find(".est_wastage_wt").html(wast_wgt);

    console.log("Total Price :" + inclusive_tax_rate);

    console.log("rate_with_mc :" + rate_with_mc);

    console.log("wast_wgt :" + wast_wgt);

    console.log("tot_wastage :" + tot_wastage);

    console.log("calculation_type :" + calculation_type);

    console.log("net_wt :" + net_wt);

    console.log("mc_type :" + mc_type);

    console.log("rate_per_grm :" + rate_per_grm);

    console.log("retail_max_mc :" + retail_max_mc);

    console.log("---------------");
  });
}

function calculateOldEsttoSaleConvertion() {
  $("#est_olditems_to_sale_convertion > tbody tr").each(function (idx, row) {
    curRow = $(this);

    var gross_wt =
      isNaN(curRow.find(".est_old_gross_val").val()) ||
      curRow.find(".est_old_gross_val").val() == ""
        ? 0
        : curRow.find(".est_old_gross_val").val();

    var less_wt =
      isNaN(curRow.find(".est_old_less_val").val()) ||
      curRow.find(".est_old_less_val").val() == ""
        ? 0
        : curRow.find(".est_old_less_val").val();

    var dust_wt =
      isNaN(curRow.find(".est_old_dust_val").val()) ||
      curRow.find(".est_old_dust_val").val() == ""
        ? 0
        : curRow.find(".est_old_dust_val").val();

    var stone_wt =
      isNaN(curRow.find(".est_old_stone_val").val()) ||
      curRow.find(".est_old_stone_val").val() == ""
        ? 0
        : curRow.find(".est_old_stone_val").val();

    var other_stone_wt =
      isNaN(curRow.find(".other_stone_wt").val()) ||
      curRow.find(".other_stone_wt").val() == ""
        ? 0
        : curRow.find(".other_stone_wt").val();

    var other_stone_price =
      isNaN(curRow.find(".other_stone_price").val()) ||
      curRow.find(".other_stone_price").val() == ""
        ? 0
        : curRow.find(".other_stone_price").val();

    var other_stone_price =
      isNaN(curRow.find(".other_stone_price").val()) ||
      curRow.find(".other_stone_price").val() == ""
        ? 0
        : curRow.find(".other_stone_price").val();

    var other_stone_price =
      isNaN(curRow.find(".other_stone_price").val()) ||
      curRow.find(".other_stone_price").val() == ""
        ? 0
        : curRow.find(".other_stone_price").val();

    var cal_weight =
      isNaN(curRow.find(".est_old_wastage_val").val()) ||
      curRow.find(".est_old_wastage_val").val() == ""
        ? 0
        : curRow.find(".est_old_wastage_val").val();

    var net_wt = (
      parseFloat(gross_wt) -
      parseFloat(dust_wt) -
      parseFloat(stone_wt) -
      parseFloat(other_stone_wt) -
      parseFloat(cal_weight)
    ).toFixed(3);

    curRow.find(".est_old_net_wt").html(net_wt);

    var total_price = 0;

    var rate_per_grm = 0;

    rate_per_grm = curRow.find(".est_old_rate_per_gram_val").val();

    var discount =
      isNaN(curRow.find(".est_old_discount").val()) ||
      curRow.find(".est_old_discount").val() == ""
        ? 0
        : curRow.find(".est_old_discount").val();

    var tot_wastage =
      isNaN(curRow.find(".est_old_wastage_percent").val()) ||
      curRow.find(".est_old_wastage_percent").val() == ""
        ? 0
        : curRow.find(".est_old_wastage_percent").val();

    //		cal_weight = parseFloat((net_wt * (tot_wastage / 100))).toFixed(3);

    total_price = parseFloat(
      parseFloat(rate_per_grm) * parseFloat(net_wt) - discount
    );

    total_price = parseFloat(
      parseFloat(total_price) + parseFloat(other_stone_price)
    );

    curRow
      .find(".est_old_amount")
      .html(Math.round(parseFloat(total_price).toFixed(2)));

    curRow
      .find(".est_old_item_amount_val")
      .val(Math.round(parseFloat(total_price).toFixed(2)));

    console.log("total_price:" + total_price);

    console.log("rate_per_grm:" + rate_per_grm);

    console.log("discount:" + discount);

    console.log("tot_wastage:" + tot_wastage);

    console.log("cal_weight:" + cal_weight);

    console.log("other_stone_price:" + other_stone_price);

    console.log("net_wt:" + net_wt);

    console.log("gross_wt:" + gross_wt);

    console.log("dust_wt:" + dust_wt);

    console.log("stone_wt:" + stone_wt);

    console.log("stone_wt:" + stone_wt);
    1;

    console.log("other_stone_wt:" + other_stone_wt);

    console.log("-----------------");
  });
}

$("#disc_apply").on("click", function () {
  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  if (
    (ctrl_page[1] == "billing" && bill_type != 8) ||
    ctrl_page[1] == "bill_split"
  ) {
    var disc_status = DiscountValidationForBill();

    var mc_va_disc_status = discount_validation_for_salebill();

    var otp_emp_dis_approval = $("#otp_dis_approval").val();

    var otp_mcva_dis_approval = $("#otp_mcva_dis_approval").val();

    var emp_disc_limit = 0;

    var disc_limit_type = $("#disc_limit_type").val();

    var disc_limit = $("#disc_limit").val();

    var taxable_amt = $(".sale_amt_with_tax").html();

    if (disc_limit_type == 2) {
      //2-Percentage,1-Amount

      emp_disc_limit = Math.round(parseFloat((taxable_amt * disc_limit) / 100));

      console.log("emp_disc_limit:" + emp_disc_limit);
    } else {
      emp_disc_limit = disc_limit;
    }

    let emp_limit = {};

    if (
      parseFloat($("#summary_discount_amt").val()) > parseFloat(emp_disc_limit)
    ) {
      emp_limit.status = false;

      emp_limit.max_discount_limit = parseFloat(emp_disc_limit).toFixed(2);
    } else {
      emp_limit.status = true;

      emp_limit.max_discount_limit = parseFloat(emp_disc_limit).toFixed(2);
    }

    if (
      disc_status.status == false ||
      mc_va_disc_status.status == false ||
      emp_limit.status == false
    ) {
      if (
        emp_limit.status == false &&
        otp_emp_dis_approval == 1 &&
        (mc_va_disc_status.status == false && otp_mcva_dis_approval == 1
          ? parseFloat(emp_limit.max_discount_limit) >
            parseFloat(mc_va_disc_status.max_discount_limit)
          : true) &&
        disc_status.status == true
      ) {
        let discountApprovalMessage =
          "Greater than employee discount limit.Exceeding <b>Rs." +
          emp_limit.max_discount_limit +
          "</b> requires approval. OTP will be sent to the administrator for approval. Do you wish to proceed?";

        otp_confirmation(discountApprovalMessage);
      } else if (
        mc_va_disc_status.status == false &&
        otp_mcva_dis_approval == 1 &&
        (emp_limit.status == false && otp_emp_dis_approval == 1
          ? parseFloat(mc_va_disc_status.max_discount_limit) >
            emp_limit.max_discount_limit
          : true) &&
        disc_status.status == true
      ) {
        let discountApprovalMessage =
          "Greater than MC VA discount limit.Exceeding <b>Rs." +
          mc_va_disc_status.max_discount_limit +
          "</b> requires approval. OTP will be sent to the administrator for approval. Do you wish to proceed?";

        otp_confirmation(discountApprovalMessage);
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message:
            "" +
            "</br> Maximum Discount Limit reached. Employee discount - Rs." +
            emp_limit.max_discount_limit +
            ", Min MC VA discount - Rs." +
            mc_va_disc_status.max_discount_limit +
            ", Bill discount - Rs." +
            disc_status.max_discount_limit,
        });

        $("#summary_discount_amt").val(0);

        $("#summary_discount_amt").focus();

        calculateSaleBillRowTotal();

        $('.nav-tabs a[href="#tot_summary"]').tab("show");

        //$('#disc_apply').trigger('click');
      }
    } else {
      calculateSaleBillRowTotal();
    }
  }

  updateSaleColumnTotal();
});

$("#discount_close_modal").on("click", function () {
  $("#summary_discount_amt").val(0);

  $("#otp_validation").modal("toggle");
});

/*function calculate_discount_amt()

{

	 var bill_type          = $("input[name='billing[bill_type]']:checked").val();

	 var disc_limit_type    = $('#disc_limit_type').val();

	 var disc_limit         = $('#disc_limit').val();

	 var taxable_amt        = $('.sale_amt_with_tax').html();

	 var bill_discount_amt  = $('#summary_discount_amt').val();

	 var max_discount_amt   =0;

	 let disc_status = discount_validation_for_salebill();

			if(disc_limit_type==2) //2-Percentage,1-Amount

			 {

				 max_discount_amt=Math.round(parseFloat((taxable_amt*disc_limit)/100));

				 console.log('max_discount_amt:'+max_discount_amt);

			 }else{

				 max_discount_amt=disc_limit;

			 }

			 if(max_discount_amt>0 || disc_status.status == false)

			 {

				if(parseFloat(bill_discount_amt)<=parseFloat(max_discount_amt) && disc_status.status == true)

				{

				 calculateSaleBillRowTotal();

				}

				else {

					max_discount_amt = parseFloat(max_discount_amt) > 0 && disc_status.status == false ? (parseFloat(max_discount_amt) > parseFloat(disc_status.max_discount_limit) ? parseFloat(disc_status.max_discount_limit) : parseFloat(max_discount_amt)) : (parseFloat(max_discount_amt) > 0 && disc_status.status == true ? parseFloat(max_discount_amt) : disc_status.max_discount_limit);

					$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br> Maximum Discount Limit is Rs."+max_discount_amt});

					$('#summary_discount_amt').val(0);

				}



			 }

			 else

			 {

				 if(bill_type!=11)

				 {

					   calculateSaleBillRowTotal();

				 }

			 }

}*/

function calculate_discount_amt() {
  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  var disc_status = [];

  var mc_va_disc_status = [];

  let disc_amt_modified = $("#disc_amt_modified").val(); //From Mobile App Approval

  disc_status["status"] = true;

  mc_va_disc_status["status"] = true;

  if (ctrl_page[1] == "billing" && bill_type != 8) {
    disc_status = DiscountValidationForBill();

    mc_va_disc_status = discount_validation_for_salebill();
  }

  if (
    disc_status.status == true &&
    (mc_va_disc_status.status == true || disc_amt_modified == 1)
  ) {
    var bill_type = $("input[name='billing[bill_type]']:checked").val();

    var disc_limit_type = $("#disc_limit_type").val();

    var disc_limit = $("#disc_limit").val();

    var taxable_amt = $(".sale_amt_with_tax").html();

    var bill_discount_amt = $("#summary_discount_amt").val();

    var max_discount_amt = 0;

    if (disc_limit_type == 2) {
      //2-Percentage,1-Amount

      max_discount_amt = Math.round(
        parseFloat((taxable_amt * disc_limit) / 100)
      );

      console.log("max_discount_amt:" + max_discount_amt);
    } else {
      max_discount_amt = disc_limit;
    }

    if (max_discount_amt > 0) {
      /*if(parseFloat(bill_discount_amt)<=parseFloat(max_discount_amt))

			{

				calculateSaleBillRowTotal();

			}

			else

			{

				$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br> Maximum Discount Limit is Rs."+max_discount_amt});

				$('#summary_discount_amt').val(0);

				$('#disc_apply').trigger('click');

			}*/

      calculateSaleBillRowTotal();
    } else {
      if (bill_type != 11) {
        calculateSaleBillRowTotal();
      }
    }
  } else {
    let max_discount_limit =
      disc_status.status == false && mc_va_disc_status.status == true
        ? disc_status.max_discount_limit
        : disc_status.status == true && mc_va_disc_status.status == false
        ? mc_va_disc_status.max_discount_limit
        : disc_status.status == false && mc_va_disc_status.status == false
        ? disc_status.max_discount_limit < mc_va_disc_status.max_discount_limit
          ? disc_status.max_discount_limit
          : mc_va_disc_status.max_discount_limit
        : "";

    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br> Maximum Discount Limit is Rs." + max_discount_limit,
    });

    $("#summary_discount_amt").val(0);

    calculateSaleBillRowTotal();

    $("#summary_discount_amt").focus();

    $('.nav-tabs a[href="#tot_summary"]').tab("show");
  }
}

function gift_voucher_redeem(
  bill_id,
  utilize_for,
  gift_type,
  sale_value,
  credit_value,
  voucher_type,
  id_set_gift_voucher,
  id_gift_voucher
) {
  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  var allow_redeem = false;

  var sales_weight = 0;

  var sales_amount = 0;

  if (id_set_gift_voucher != "") {
    if (utilize_for == 0) {
      allow_redeem = true;
    } else if (utilize_for == 1 || utilize_for == 2) {
      $("#billing_sale_details > tbody tr").each(function (idx, row) {
        curRow = $(this);

        if (curRow.find(".sale_metal_type").val() == utilize_for) {
          redeem_sales_amt += parseFloat(
            isNaN($(this).find(".bill_amount").val()) ||
              $(this).find(".bill_amount").val() == ""
              ? 0
              : $(this).find(".bill_amount").val()
          );

          allow_redeem = true;

          return true;
        }
      });
    } else if (utilize_for == 3) {
      my_Date = new Date();

      $.ajax({
        url:
          base_url +
          "index.php/admin_ret_billing/GiftRedeemProduct?nocache=" +
          my_Date.getUTCSeconds() +
          "" +
          my_Date.getUTCMinutes() +
          "" +
          my_Date.getUTCHours(),

        data: { id_set_gift_voucher: id_set_gift_voucher },

        type: "POST",

        dataType: "json",

        async: false,

        success: function (data) {
          $("#billing_sale_details > tbody tr").each(function (idx, row) {
            curRow = $(this);

            $.each(data, function (key, item) {
              if (item.utilize == 1) {
                if (curRow.find(".sale_product_id").val() == item.id_product) {
                  redeem_sales_amt += parseFloat(
                    isNaN(curRow.find(".bill_amount").val()) ||
                      curRow.find(".bill_amount").val() == ""
                      ? 0
                      : curRow.find(".bill_amount").val()
                  );

                  allow_redeem = true;

                  return true;
                }
              }
            });
          });
        },
      });
    }
  } else {
    if (utilize_for == 0) {
      allow_redeem = true;
    } else if (utilize_for == 1 || utilize_for == 2) {
      $("#billing_sale_details > tbody tr").each(function (idx, row) {
        curRow = $(this);

        if (curRow.find(".sale_metal_type").val() == utilize_for) {
          redeem_sales_amt += parseFloat(
            isNaN($(this).find(".bill_amount").val()) ||
              $(this).find(".bill_amount").val() == ""
              ? 0
              : $(this).find(".bill_amount").val()
          );

          allow_redeem = true;

          return true;
        }
      });
    } else if (utilize_for == 3) {
      my_Date = new Date();

      $.ajax({
        url:
          base_url +
          "index.php/admin_ret_billing/GeneralGiftRedeemProduct?nocache=" +
          my_Date.getUTCSeconds() +
          "" +
          my_Date.getUTCMinutes() +
          "" +
          my_Date.getUTCHours(),

        data: { id_gift_voucher: id_gift_voucher },

        type: "POST",

        dataType: "json",

        async: false,

        success: function (data) {
          $("#billing_sale_details > tbody tr").each(function (idx, row) {
            curRow = $(this);

            $.each(data, function (key, item) {
              if (item.utilize == 1) {
                if (curRow.find(".sale_product_id").val() == item.id_product) {
                  redeem_sales_amt += parseFloat(
                    isNaN($(this).find(".bill_amount").val()) ||
                      $(this).find(".bill_amount").val() == ""
                      ? 0
                      : $(this).find(".bill_amount").val()
                  );

                  allow_redeem = true;

                  return true;
                }
              }
            });
          });
        },
      });
    }

    if (allow_redeem) {
      $("#billing_sale_details > tbody  > tr").each(function (index, tr) {
        if (
          $(this).find(".bill_gross_val").val() != "" &&
          $(this).find(".bill_amount").val() != ""
        ) {
          sales_weight += parseFloat(
            isNaN($(this).find(".bill_net_val").val()) ||
              $(this).find(".bill_net_val").val() == ""
              ? 0
              : $(this).find(".bill_net_val").val()
          );

          sales_amount += parseFloat(
            isNaN($(this).find(".bill_amount").val()) ||
              $(this).find(".bill_amount").val() == ""
              ? 0
              : $(this).find(".bill_amount").val()
          );
        }
      });

      if (
        parseFloat(sale_value) <= parseFloat(sales_amount) &&
        voucher_type == 1
      ) {
        allow_redeem = true;
      } else if (voucher_type == 2 && sale_value <= parseFloat(sales_weight)) {
        allow_redeem = true;
      } else {
        allow_redeem = false;

        if (voucher_type == 1) {
          alert("Minimum Sale Amount is Rs." + sale_value);
        } else {
          alert("Minimum Sale Weight is Rs." + sale_value);
        }
      }
    }
  }

  return allow_redeem;
}

function check_gift_vocuher_issue() {
  var gift_type = $("#gift_type").val();

  var utilize_for = $("#utilize_for").val();

  var issue_for = $("#issue_for").val();

  var bill_value = $("#bill_value").val();

  var credit_value = $("#credit_value").val();

  var id_set_gift_voucher = $("#id_set_gift_voucher").val();

  var validate_date = $("#validate_date").val();

  var calc_type = $("#calc_type").val();

  var allow_issue = false;

  var sale_weight = 0;

  var sales_amt = 0;

  /*

	   1.Issue For  0-All Metal,1-Gold,2-Silver,3-Product Based.

	   2.utilize_for 0-All,1-Gold,2-Silver,3-Product Based

	   3.Gift type 1-Amt to Amt,2-Amt to Weight,3-Weight to Amt,4-Weight to Amt

	   4.calc_type 1-Flat,2-Each

	   5.bill_value-Minimum Sales Amount

	   6.credit_value-Gift Issue Amount.

	*/

  if (issue_for == 0) {
    //All Metal

    $("#billing_sale_details > tbody tr").each(function (idx, row) {
      curRow = $(this);

      sale_weight += parseFloat(
        isNaN($(this).find(".bill_net_val").val()) ||
          $(this).find(".bill_net_val").val() == ""
          ? 0
          : $(this).find(".bill_net_val").val()
      );

      sales_amt += parseFloat(
        isNaN($(this).find(".bill_amount").val()) ||
          $(this).find(".bill_amount").val() == ""
          ? 0
          : $(this).find(".bill_amount").val()
      );
    });

    if (gift_type == 1) {
      if (bill_value <= sales_amt) {
        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        if (calc_type == 1) {
          var gift_amt = credit_value;
        } else {
          var gift_amt = parseFloat(
            parseFloat(sales_amt / bill_value) * credit_value
          );
        }

        $("#gift_voucher_amt").val(Math.round(gift_amt));

        $(".summary_gift_voucher").html(
          "Rs." + Math.round(gift_amt) + "  Valid Till " + validate_date
        );
      } else {
        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");

        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");
      }
    } else if (gift_type == 2) {
      if (bill_value <= sales_amt) {
        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        if (calc_type == 1) {
          gift_amt = credit_value;
        } else if (calc_type == 2) {
          var gift_amt = parseFloat(
            parseFloat(sales_amt / bill_value) * credit_value
          );
        }

        $("#gift_voucher_amt").val(Math.round(gift_amt));

        $(".summary_gift_voucher").html(
          Math.round(gift_amt) +
            " Gram For " +
            (utilize_for == 1 ? "Gold" : "Silver") +
            " Valid Till " +
            validate_date
        );
      } else {
        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");

        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");
      }
    } else if (gift_type == 3) {
      if (bill_value <= sale_weight) {
        var gift_voucher_amt = parseFloat(credit_value * sale_weight);

        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        $("#gift_voucher_amt").val(Math.round(gift_voucher_amt));

        $(".summary_gift_voucher").html(
          "Rs." + Math.round(gift_voucher_amt) + "  Valid Till " + validate_date
        );
      } else {
        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");

        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");
      }
    } else if (gift_type == 4) {
      if (bill_value <= sale_weight) {
        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        if (calc_type == 1) {
          gift_amt = credit_value;
        } else if (calc_type == 2) {
          var gift_amt = parseFloat(
            parseFloat(sale_weight / bill_value) * credit_value
          );
        }

        $("#gift_voucher_amt").val(Math.round(gift_amt));

        $(".summary_gift_voucher").html(
          Math.round(gift_amt) +
            " Gram For " +
            (utilize_for == 1 ? "Gold" : "Silver") +
            " Valid Till " +
            validate_date
        );
      } else {
        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");

        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");
      }
    }
  } else if (issue_for == 1) {
    //For Gold

    $("#billing_sale_details > tbody tr").each(function (idx, row) {
      curRow = $(this);

      if (curRow.find(".sale_metal_type").val() == 1) {
        sale_weight += parseFloat(
          isNaN($(this).find(".bill_net_val").val()) ||
            $(this).find(".bill_net_val").val() == ""
            ? 0
            : $(this).find(".bill_net_val").val()
        );

        sales_amt += parseFloat(
          isNaN($(this).find(".bill_amount").val()) ||
            $(this).find(".bill_amount").val() == ""
            ? 0
            : $(this).find(".bill_amount").val()
        );
      }
    });

    if (gift_type == 1) {
      if (bill_value <= sales_amt) {
        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        if (calc_type == 1) {
          var gift_amt = credit_value;
        } else {
          var gift_amt = parseFloat(
            parseFloat(sales_amt / bill_value) * credit_value
          );
        }

        $("#gift_voucher_amt").val(Math.round(gift_amt));

        $(".summary_gift_voucher").html(
          "Rs." + Math.round(gift_amt) + "  Valid Till " + validate_date
        );
      } else {
        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");

        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");
      }
    } else if (gift_type == 2) {
      if (bill_value <= sales_amt) {
        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        if (calc_type == 1) {
          gift_amt = credit_value;
        } else if (calc_type == 2) {
          var gift_amt = parseFloat(
            parseFloat(sales_amt / bill_value) * credit_value
          );
        }

        $("#gift_voucher_amt").val(Math.round(gift_amt));

        $(".summary_gift_voucher").html(
          Math.round(gift_amt) +
            " Gram For Gold " +
            (utilize_for == 1 ? "Gold" : "Silver") +
            " Valid Till " +
            validate_date
        );
      } else {
        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");

        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");
      }
    } else if (gift_type == 3) {
      if (bill_value <= sale_weight) {
        if (calc_type == 1) {
          gift_amt = credit_value;
        } else if (calc_type == 2) {
          var gift_amt = parseFloat(sale_weight * credit_value).toFixed(3);
        }

        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        $("#gift_voucher_amt").val(Math.round(gift_amt));

        $(".summary_gift_voucher").html(
          "Rs." + Math.round(gift_amt) + "  Valid Till " + validate_date
        );
      } else {
        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");

        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");
      }
    } else if (gift_type == 4) {
      if (bill_value <= sale_weight) {
        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        if (calc_type == 1) {
          gift_amt = credit_value;
        } else if (calc_type == 2) {
          var gift_amt = parseFloat(
            parseFloat(sale_weight / bill_value) * credit_value
          );
        }

        $("#gift_voucher_amt").val(Math.round(gift_amt));

        $(".summary_gift_voucher").html(
          Math.round(gift_amt) +
            " Gram For " +
            (utilize_for == 1 ? "Gold" : "Silver") +
            " Valid Till " +
            validate_date
        );
      } else {
        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");

        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");
      }
    }
  } else if (issue_for == 2) {
    //For Silver

    $("#billing_sale_details > tbody tr").each(function (idx, row) {
      curRow = $(this);

      if (curRow.find(".sale_metal_type").val() == 2) {
        sale_weight += parseFloat(
          isNaN($(this).find(".bill_net_val").val()) ||
            $(this).find(".bill_net_val").val() == ""
            ? 0
            : $(this).find(".bill_net_val").val()
        );

        sales_amt += parseFloat(
          isNaN($(this).find(".bill_amount").val()) ||
            $(this).find(".bill_amount").val() == ""
            ? 0
            : $(this).find(".bill_amount").val()
        );
      }
    });

    if (gift_type == 1) {
      if (bill_value <= sales_amt) {
        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        if (calc_type == 1) {
          var gift_amt = credit_value;
        } else {
          var gift_amt = parseFloat(
            parseFloat(sales_amt / bill_value) * credit_value
          );
        }

        $("#gift_voucher_amt").val(Math.round(gift_amt));

        $(".summary_gift_voucher").html(
          "Rs." + Math.round(gift_amt) + "  Valid Till " + validate_date
        );
      } else {
        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");

        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");
      }
    } else if (gift_type == 2) {
      if (bill_value <= sales_amt) {
        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        if (calc_type == 1) {
          gift_amt = credit_value;
        } else if (calc_type == 2) {
          var gift_amt = parseFloat(
            parseFloat(sales_amt / bill_value) * credit_value
          );
        }

        $("#gift_voucher_amt").val(Math.round(gift_amt));

        $(".summary_gift_voucher").html(
          Math.round(gift_amt) +
            " Gram For " +
            (utilize_for == 1 ? "Gold" : "Silver") +
            " Valid Till " +
            validate_date
        );
      } else {
        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");

        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");
      }
    } else if (gift_type == 3) {
      if (bill_value <= sale_weight) {
        var gift_voucher_amt = parseFloat(credit_value * sale_weight);

        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        $("#gift_voucher_amt").val(Math.round(gift_voucher_amt));

        $(".summary_gift_voucher").html(
          "Rs." + Math.round(gift_voucher_amt) + "  Valid Till " + validate_date
        );
      } else {
        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");

        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");
      }
    } else if (gift_type == 4) {
      if (bill_value <= sale_weight) {
        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        if (calc_type == 1) {
          gift_amt = credit_value;
        } else if (calc_type == 2) {
          var gift_amt = parseFloat(
            parseFloat(sale_weight / bill_value) * credit_value
          );
        }

        $("#gift_voucher_amt").val(Math.round(gift_amt));

        $(".summary_gift_voucher").html(
          Math.round(gift_amt) +
            " Gram For " +
            (utilize_for == 1 ? "Gold" : "Silver") +
            " Valid Till " +
            validate_date
        );
      } else {
        $("#gift_voucher_amt").val(0);

        $(".summary_gift_voucher").html("");

        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");
      }
    }
  } else if (issue_for == 3) {
    //For Products

    my_Date = new Date();

    $.ajax({
      url:
        base_url +
        "index.php/admin_ret_billing/getGiftProducts?nocache=" +
        my_Date.getUTCSeconds() +
        "" +
        my_Date.getUTCMinutes() +
        "" +
        my_Date.getUTCHours(),

      data: { id_set_gift_voucher: id_set_gift_voucher },

      type: "POST",

      dataType: "json",

      async: false,

      success: function (data) {
        var allow_issue = false;

        $.each(data, function (key, item) {
          $("#billing_sale_details > tbody tr").each(function (idx, row) {
            curRow = $(this);

            if (
              curRow.find(".sale_product_id").val() == item.id_product &&
              item.issue == 1
            ) {
              allow_issue = true;

              return true;
            }
          });
        });

        if (allow_issue) {
          $.each(data, function (key, item) {
            if ($("#billing_sale_details > tbody tr").length > 0) {
              $("#billing_sale_details > tbody tr").each(function (idx, row) {
                curRow = $(this);

                if (
                  curRow.find(".sale_product_id").val() == item.id_product &&
                  item.issue == 1
                ) {
                  sale_weight += parseFloat(
                    isNaN($(this).find(".bill_net_val").val()) ||
                      $(this).find(".bill_net_val").val() == ""
                      ? 0
                      : $(this).find(".bill_net_val").val()
                  );

                  sales_amt += parseFloat(
                    isNaN($(this).find(".bill_amount").val()) ||
                      $(this).find(".bill_amount").val() == ""
                      ? 0
                      : $(this).find(".bill_amount").val()
                  );

                  if (gift_type == 1) {
                    if (bill_value <= sales_amt) {
                      $(".gift_row").css("display", "block");

                      $(".summary_gift_voucher").css("display", "block");

                      if (calc_type == 1) {
                        var gift_amt = credit_value;
                      } else {
                        var gift_amt = parseFloat(
                          parseFloat(sales_amt / bill_value) * credit_value
                        );
                      }

                      $("#gift_voucher_amt").val(Math.round(gift_amt));

                      $(".summary_gift_voucher").html(
                        "Rs." +
                          Math.round(gift_amt) +
                          "  Valid Till " +
                          validate_date
                      );
                    } else {
                      $(".gift_row").css("display", "none");

                      $(".summary_gift_voucher").css("display", "none");
                    }
                  } else if (gift_type == 3) {
                    if (bill_value <= sale_weight) {
                      if (calc_type == 1) {
                        var gift_voucher_amt = credit_value;
                      } else {
                        var gift_voucher_amt = parseFloat(
                          sale_weight * credit_value
                        );
                      }

                      $(".gift_row").css("display", "block");

                      $(".summary_gift_voucher").css("display", "block");

                      $("#gift_voucher_amt").val(Math.round(gift_voucher_amt));

                      $(".summary_gift_voucher").html(
                        "Rs." +
                          Math.round(gift_voucher_amt) +
                          "  Valid Till " +
                          validate_date
                      );
                    } else {
                      $(".gift_row").css("display", "none");

                      $(".summary_gift_voucher").css("display", "none");

                      $("#gift_voucher_amt").val(0);

                      $(".summary_gift_voucher").html("");
                    }
                  } else if (gift_type == 4) {
                    if (bill_value <= sale_weight) {
                      $(".gift_row").css("display", "block");

                      $(".summary_gift_voucher").css("display", "block");

                      if (calc_type == 1) {
                        gift_amt = credit_value;
                      } else if (calc_type == 2) {
                        var gift_amt = parseFloat(
                          parseFloat(sale_weight / bill_value) * credit_value
                        );
                      }

                      $("#gift_voucher_amt").val(Math.round(gift_amt));

                      $(".summary_gift_voucher").html(
                        Math.round(gift_amt) +
                          " Gram For " +
                          (utilize_for == 1 ? "Gold" : "Silver") +
                          " Valid Till " +
                          validate_date
                      );
                    } else {
                      $("#gift_voucher_amt").val(0);

                      $(".summary_gift_voucher").html("");

                      $(".gift_row").css("display", "none");

                      $(".summary_gift_voucher").css("display", "none");
                    }
                  }
                }
              });
            } else {
              $(".gift_row").css("display", "none");

              $(".summary_gift_voucher").css("display", "none");

              $("#gift_voucher_amt").val(0);

              $(".summary_gift_voucher").html("");
            }
          });
        } else {
          $(".gift_row").css("display", "none");

          $(".summary_gift_voucher").css("display", "none");

          $("#gift_voucher_amt").val(0);

          $(".summary_gift_voucher").html("");
        }
      },
    });
  }
}

function calculateSaleBillRowTotal() {
  var is_store_delivery = $("#delivered_at").val();

  $("#billing_sale_details > tbody tr").each(function (idx, row) {
    $("#gift_voucher_modal").attr("disabled", false);

    curRow = $(this);

    //multi metal calculation

    var tag_other_itm_weight = 0;

    var tag_other_itm_amount = 0;

    var other_metal_details = curRow.find(".other_metal_details").val();

    if (other_metal_details != "" && other_metal_details != undefined) {
      var other_metal_details = JSON.parse(other_metal_details);

      if (other_metal_details.length > 0) {
        $.each(other_metal_details, function (key, items) {
          tag_other_itm_weight += parseFloat(items.tag_other_itm_grs_weight);
        });

        tag_other_itm_amount = calculate_other_metal_amount(
          other_metal_details,
          curRow
        );
      }
    }

    //multi metal calculation

    var pcs =
      isNaN(curRow.find(".sale_pcs").val()) ||
      curRow.find(".sale_pcs").val() == ""
        ? 0
        : curRow.find(".sale_pcs").val();

    var gross_wt =
      isNaN(curRow.find(".bill_gross_val").val()) ||
      curRow.find(".bill_gross_val").val() == ""
        ? 0
        : curRow.find(".bill_gross_val").val();

    var stone_price = 0;

    var dia_price = 0;

    var stn_price = 0;

    let tot_stone_wt = 0;

    let stone_details = curRow.find(".stone_details").val();

    if (stone_details != "" && stone_details != undefined) {
      var st_details = JSON.parse(stone_details);

      if (st_details.length > 0) {
        $.each(st_details, function (pkey, pitem) {
          $.each(uom_details, function (key, item) {
            if (item.uom_id == pitem.uom_id) {
              if (pitem.is_apply_in_lwt == 1) {
                if (
                  item.uom_short_code == "CT" &&
                  item.divided_by_value != null &&
                  item.divided_by_value != ""
                ) {
                  //For Carat Need to convert into gram

                  stone_wt = parseFloat(
                    parseFloat(pitem.stone_wt) /
                      parseFloat(item.divided_by_value)
                  );
                } else {
                  stone_wt = pitem.stone_wt;
                }

                tot_stone_wt += parseFloat(stone_wt);
              }

              if (item.uom_short_code == "CT") {
                dia_price += parseFloat(pitem.stone_price);
              } else {
                stn_price += parseFloat(pitem.stone_price);
              }
            }
          });

          stone_price += parseFloat(pitem.stone_price);
        });
      }
    }

    curRow.find(".bill_less_val").val(parseFloat(tot_stone_wt).toFixed(3));

    curRow.find(".bill_less_wt").html(parseFloat(tot_stone_wt).toFixed(3));

    var less_wt =
      isNaN(curRow.find(".bill_less_val").val()) ||
      curRow.find(".bill_less_val").val() == ""
        ? 0
        : curRow.find(".bill_less_val").val();

    var net_wt = parseFloat(
      parseFloat(gross_wt) -
        parseFloat(less_wt) -
        parseFloat(tag_other_itm_weight)
    ).toFixed(3);

    var calculation_type =
      isNaN(curRow.find(".sale_cal_type").val()) ||
      curRow.find(".sale_cal_type").val() == ""
        ? 0
        : curRow.find(".sale_cal_type").val();

    var certification_price =
      isNaN(curRow.find(".certification_cost").val()) ||
      curRow.find(".certification_cost").val() == ""
        ? 0
        : curRow.find(".certification_cost").val();

    var material_price =
      isNaN(curRow.find(".bill_material_price").val()) ||
      curRow.find(".bill_material_price").val() == ""
        ? 0
        : curRow.find(".bill_material_price").val();

    var total_price = 0;

    var rate_per_grm = 0;

    var base_value_amt = 0;

    var arrived_value_amt = 0;

    var arrived_value_tax = 0;

    var base_value_tax = 0;

    var total_tax_rate = 0;

    var cus_state = $("#cus_state").val();

    var cus_country = $("#cus_country").val();

    var cmp_state = $("#cmp_state").val();

    var cmp_country = $("#cmp_country").val();

    var cus_del_state = $("#cus_del_state").val();

    var cus_del_country = $("#cus_del_country").val();

    var is_eda = $("#is_eda").val();

    var cgst = 0;

    var igst = 0;

    var sgst = 0;

    var tag_sales_value = 0;

    rate_field = curRow.find(".rate_field").val();

    var dirSaleRate = curRow.find(".bill_rate_per_grm").val();

    if (
      isNaN(parseFloat(curRow.find(".per_grm_amount").val())) ||
      curRow.find(".per_grm_amount").val() == 0 ||
      curRow.find(".per_grm_amount").val() == ""
    ) {
      var rate_per_grm =
        isNaN($("#" + rate_field).val()) || $("#" + rate_field).val() == ""
          ? 0
          : parseFloat($("#" + rate_field).val());
    } else {
      var rate_per_grm =
        isNaN(parseFloat(curRow.find(".per_grm_amount").val())) ||
        curRow.find(".per_grm_amount").val() == ""
          ? 0
          : parseFloat(curRow.find(".per_grm_amount").val());
    }

    rate_per_grm = dirSaleRate > 0 ? dirSaleRate : rate_per_grm;

    curRow.find(".bill_rate_per_grm").val(rate_per_grm);

    var inclusive_tax_rate = 0;

    var total_tax = 0;

    var discount = 0;

    var disc_type = curRow.find(".disc_type").val();

    var disc_amt = $("#summary_discount_amt").val();

    var total_sales_amt = $(".sale_amt_with_tax").html();

    var tax_group = curRow.find(".sale_tax_group").val();

    var retail_max_mc =
      isNaN(curRow.find(".bill_mc").val()) ||
      curRow.find(".bill_mc").val() == ""
        ? 0
        : curRow.find(".bill_mc").val();

    var tot_wastage =
      isNaN(curRow.find(".bill_wastage").val()) ||
      curRow.find(".bill_wastage").val() == ""
        ? 0
        : curRow.find(".bill_wastage").val();

    // loose product
    var piece =
      isNaN(curRow.find(".sale_pcs").val()) ||
      curRow.find(".sale_pcs").val() == ""
        ? 0
        : curRow.find(".sale_pcs").val();
    var product_type = curRow.find(".stone_type").val(); // 0 -> ornaments, 1-> stone , 2 -> Diamond
    var stone_calc_type =
      !isNaN($(".stone_calculation_based_on").val()) &&
      $(".stone_calculation_based_on").val() != "" &&
      $(".stone_calculation_based_on").val() > 0
        ? $(".stone_calculation_based_on").val()
        : 0; // 1 -> wt , 2 -> pcs
    let loose_prod_stone_rate = 0;
    if (product_type != 0) {
      var prod_uom_id =
        curRow.find(".uom_id").val() != "" ? curRow.find(".uom_id").val() : 1;
      let prod_st_wt = 0;
      if (stone_calc_type == 2) {
        // pcs
        loose_prod_stone_rate =
          parseFloat(curRow.find(".tag_sales_value").val()) * parseFloat(piece);
      } // wt
      else {
        /*$.each(uom_details,function(key,item)
				{
					if(item.uom_id==prod_uom_id)
					{
						let divided_by_value = 1;
						if(item.divided_by_value > 0) {
							divided_by_value = item.divided_by_value;
						}
						prod_st_wt = parseFloat(net_wt) / parseFloat(divided_by_value);
						return false;
					}
				});*/
        loose_prod_stone_rate =
          parseFloat(curRow.find(".tag_sales_value").val()) *
          parseFloat(net_wt);
      }
    }
    // loose product

    //Discount Work

    var bill_discount_type = $("#bill_discount_type").val(); //1-General Discount , 2-Apply in V.A & M.C

    var bill_discount_apply_on = $("#bill_discount_apply_on").val(); //1- VA, 2 - MC

    var wast_wgt_amt = 0;

    var min_wast_wgt_amt = 0;

    var total_mc_and_wast_wgt_amt = 0;

    var wastage_discount = 0;

    var mc_discount = 0;

    var blc_discount = 0;

    var item_blc_discount = 0;

    var discount_weight = 0;

    var purchase_mc = 0;

    var pur_mc = parseFloat(curRow.find(".pur_mc").val()) || 0;

    //Discount Work

    if (calculation_type == 0) {
      var wast_wgt = parseFloat(
        parseFloat(gross_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      wast_wgt_amt = parseFloat(
        parseFloat(wast_wgt) * parseFloat(rate_per_grm)
      ).toFixed(2);

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * 1)
        );

        purchase_mc = parseFloat(
          curRow.find(".purchase_mc_type").val() == 1
            ? parseFloat(pur_mc * gross_wt)
            : parseFloat(pur_mc * 1)
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      } else {
        var mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) *
            (retail_max_mc / 100)
        );

        purchase_mc = parseFloat(
          curRow.find(".purchase_mc_type").val() == 1
            ? parseFloat(pur_mc * gross_wt)
            : parseFloat(pur_mc * 1)
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 1) {
      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      wast_wgt_amt = parseFloat(
        parseFloat(wast_wgt) * parseFloat(rate_per_grm)
      ).toFixed(2);

      purchase_mc = parseFloat(
        curRow.find(".purchase_mc_type").val() == 1
          ? parseFloat(pur_mc * net_wt)
          : parseFloat(pur_mc * 1)
      );

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * net_wt)
            : parseFloat(retail_max_mc * 1)
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      } else {
        var mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) *
            (retail_max_mc / 100)
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 2) {
      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      wast_wgt_amt = parseFloat(
        parseFloat(wast_wgt) * parseFloat(rate_per_grm)
      ).toFixed(2);

      purchase_mc = parseFloat(
        curRow.find(".purchase_mc_type").val() == 1
          ? parseFloat(pur_mc * gross_wt)
          : parseFloat(pur_mc * 1)
      );

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * 1)
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(rate_per_grm) *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        ).toFixed(2);
      } else {
        var mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) *
            (retail_max_mc / 100)
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(rate_per_grm) *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        ).toFixed(2);
      }
    } else if (calculation_type == 3) {
      rate_with_mc = parseFloat(
        isNaN(curRow.find(".tag_sales_value").val()) ||
          curRow.find(".tag_sales_value").val() == ""
          ? 0
          : curRow.find(".tag_sales_value").val()
      );

      tag_sales_value = rate_with_mc;

      var wast_wgt = 0;

      var mc_type = 0;
    } else if (calculation_type == 4) {
      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * net_wt)
            : parseFloat(retail_max_mc * 1)
        );
      }

      purchase_mc = parseFloat(
        curRow.find(".purchase_mc_type").val() == 1
          ? parseFloat(pur_mc * net_wt)
          : parseFloat(pur_mc * 1)
      );

      if (product_type == 0) {
        if (
          curRow.find(".itemtype ").val() == 1 ||
          curRow.find(".itemtype ").val() == 2
        ) {
          //Direct Billing Home Bill Or Non-Tag
          rate_with_mc = parseFloat(
            isNaN(curRow.find(".bill_rate_per_grm").val()) ||
              curRow.find(".bill_rate_per_grm").val() == ""
              ? 0
              : curRow.find(".bill_rate_per_grm").val() * gross_wt
          );
        } else {
          rate_with_mc = parseFloat(
            isNaN(curRow.find(".tag_sales_value").val()) ||
              curRow.find(".tag_sales_value").val() == ""
              ? 0
              : curRow.find(".tag_sales_value").val() * gross_wt
          );
        }

        tag_sales_value = parseFloat(
          isNaN(curRow.find(".tag_sales_value").val()) ||
            curRow.find(".tag_sales_value").val() == ""
            ? 0
            : curRow.find(".tag_sales_value").val() * gross_wt
        );
      } else {
        rate_with_mc = parseFloat(loose_prod_stone_rate);

        tag_sales_value = parseFloat(loose_prod_stone_rate);
      }

      rate_with_mc = parseFloat(
        parseFloat(rate_with_mc) + parseFloat(mc_type)
      ).toFixed(2);

      var wast_wgt = 0;

      var mc_type = 0;
    }

    let charge_value = isNaN(parseFloat(curRow.find(".charge_value").val()))
      ? 0
      : curRow.find(".charge_value").val();

    rate_with_mc = parseFloat(
      parseFloat(rate_with_mc) +
        parseFloat(charge_value) +
        parseFloat(tag_other_itm_amount)
    ).toFixed(2);

    //STARTS HERE  - FOR GETTING MINIMUM SALE VALUE
    var min_wastage_per =
      isNaN(curRow.find(".va_limit").val()) ||
      curRow.find(".va_limit").val() == ""
        ? 0
        : curRow.find(".va_limit").val();
    var min_retail_max_mc =
      isNaN(curRow.find(".mc_limit").val()) ||
      curRow.find(".mc_limit").val() == ""
        ? 0
        : curRow.find(".mc_limit").val();

    if (calculation_type == 0) {
      var min_wast_wgt = parseFloat(
        parseFloat(gross_wt) * parseFloat(min_wastage_per / 100)
      ).toFixed(3);
      min_wast_wgt_amt = parseFloat(
        parseFloat(min_wast_wgt) * parseFloat(rate_per_grm)
      ).toFixed(2);
      if (curRow.find(".mc_cal_type").val() != 3) {
        var min_mc_type = parseFloat(
          curRow.find(".mc_cal_type").val() == 2
            ? parseFloat(min_retail_max_mc * gross_wt)
            : parseFloat(min_retail_max_mc * 1)
        );
        purchase_mc = parseFloat(
          curRow.find(".purchase_mc_type").val() == 1
            ? parseFloat(pur_mc * gross_wt)
            : parseFloat(pur_mc * 1)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        min_rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(min_wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(min_mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      } else {
        var min_mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(min_wast_wgt) + parseFloat(net_wt)) *
            (min_retail_max_mc / 100)
        );
        purchase_mc = parseFloat(
          curRow.find(".purchase_mc_type").val() == 1
            ? parseFloat(pur_mc * gross_wt)
            : parseFloat(pur_mc * 1)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        min_rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(min_wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(min_mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 1) {
      var min_wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(min_wastage_per / 100)
      ).toFixed(3);
      min_wast_wgt_amt = parseFloat(
        parseFloat(min_wast_wgt) * parseFloat(rate_per_grm)
      ).toFixed(2);
      purchase_mc = parseFloat(
        curRow.find(".purchase_mc_type").val() == 1
          ? parseFloat(pur_mc * net_wt)
          : parseFloat(pur_mc * 1)
      );
      if (curRow.find(".mc_cal_type").val() != 3) {
        var min_mc_type = parseFloat(
          curRow.find(".mc_cal_type").val() == 2
            ? parseFloat(min_retail_max_mc * net_wt)
            : parseFloat(min_retail_max_mc * 1)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        min_rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(min_wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(min_mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      } else {
        var min_mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(min_wast_wgt) + parseFloat(net_wt)) *
            (min_retail_max_mc / 100)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        min_rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(min_wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(min_mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 2) {
      var min_wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(min_wastage_per / 100)
      ).toFixed(3);
      min_wast_wgt_amt = parseFloat(
        parseFloat(min_wast_wgt) * parseFloat(rate_per_grm)
      ).toFixed(2);
      purchase_mc = parseFloat(
        curRow.find(".purchase_mc_type").val() == 1
          ? parseFloat(pur_mc * gross_wt)
          : parseFloat(pur_mc * 1)
      );
      if (curRow.find(".mc_cal_type").val() != 3) {
        var min_mc_type = parseFloat(
          curRow.find(".mc_cal_type").val() == 2
            ? parseFloat(min_retail_max_mc * gross_wt)
            : parseFloat(min_retail_max_mc * 1)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        min_rate_with_mc = parseFloat(
          parseFloat(rate_per_grm) *
            (parseFloat(min_wast_wgt) + parseFloat(net_wt)) +
            parseFloat(min_mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        ).toFixed(2);
      } else {
        var min_mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(min_wast_wgt) + parseFloat(net_wt)) *
            (min_retail_max_mc / 100)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        min_rate_with_mc = parseFloat(
          parseFloat(rate_per_grm) *
            (parseFloat(min_wast_wgt) + parseFloat(net_wt)) +
            parseFloat(min_mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        ).toFixed(2);
      }
    } else if (calculation_type == 3) {
      min_rate_with_mc = parseFloat(
        isNaN(curRow.find(".tag_sales_value").val()) ||
          curRow.find(".tag_sales_value").val() == ""
          ? 0
          : curRow.find(".tag_sales_value").val()
      );
      tag_sales_value = min_rate_with_mc;
      var min_wast_wgt = 0;
      var min_mc_type = 0;
    } else if (calculation_type == 4) {
      if (curRow.find(".mc_cal_type").val() != 3) {
        var min_mc_type = parseFloat(
          curRow.find(".mc_cal_type").val() == 2
            ? parseFloat(min_retail_max_mc * net_wt)
            : parseFloat(min_retail_max_mc * 1)
        );
      }
      purchase_mc = parseFloat(
        curRow.find(".purchase_mc_type").val() == 1
          ? parseFloat(pur_mc * net_wt)
          : parseFloat(pur_mc * 1)
      );
      if (product_type == 0) {
        if (
          curRow.find(".itemtype ").val() == 1 ||
          curRow.find(".itemtype ").val() == 2
        ) {
          //Direct Billing Home Bill Or Non-Tag
          min_rate_with_mc = parseFloat(
            isNaN(curRow.find(".bill_rate_per_grm").val()) ||
              curRow.find(".bill_rate_per_grm").val() == ""
              ? 0
              : curRow.find(".bill_rate_per_grm").val() * gross_wt
          );
        } else {
          min_rate_with_mc = parseFloat(
            isNaN(curRow.find(".tag_sales_value").val()) ||
              curRow.find(".tag_sales_value").val() == ""
              ? 0
              : curRow.find(".tag_sales_value").val() * gross_wt
          );
        }
        tag_sales_value = parseFloat(
          isNaN(curRow.find(".tag_sales_value").val()) ||
            curRow.find(".tag_sales_value").val() == ""
            ? 0
            : curRow.find(".tag_sales_value").val() * gross_wt
        );
      } else {
        min_rate_with_mc = parseFloat(loose_prod_stone_rate);
        tag_sales_value = parseFloat(loose_prod_stone_rate);
      }
      min_rate_with_mc = parseFloat(
        parseFloat(rate_with_mc) + parseFloat(min_mc_type)
      ).toFixed(2);
      var min_mc_type = 0;
    }

    min_rate_with_mc = parseFloat(
      parseFloat(min_rate_with_mc) +
        parseFloat(charge_value) +
        parseFloat(tag_other_itm_amount)
    ).toFixed(2);

    curRow.find(".min_sale_value").val(parseFloat(min_rate_with_mc).toFixed(2));

    //ENDS HERE  - FOR GETTING MINIMUM SALE VALUE

    if (disc_amt > 0) {
      console.log("rate_with_mc:" + rate_with_mc);

      var disc_per = parseFloat((disc_amt / total_sales_amt) * 100);

      var discount = parseFloat((rate_with_mc * disc_per) / 100);

      rate_with_mc = parseFloat(rate_with_mc - discount).toFixed(2);

      console.log("disc_per:" + disc_per);

      console.log("discount:" + discount);

      console.log("rate_with_mc:" + rate_with_mc);

      if (bill_discount_type == 2) {
        if (bill_discount_apply_on == 2) {
          //Discount Apply on MC First

          if (parseFloat(mc_type) < parseFloat(discount)) {
            mc_discount = mc_type;

            blc_discount = parseFloat(
              parseFloat(discount) - parseFloat(mc_type)
            ).toFixed(2);

            if (blc_discount > 0) {
              if (wast_wgt_amt > 0) {
                if (parseFloat(wast_wgt_amt) > parseFloat(blc_discount)) {
                  wastage_discount = parseFloat(blc_discount).toFixed(2);
                } else {
                  wastage_discount = parseFloat(
                    parseFloat(wast_wgt_amt)
                  ).toFixed(2);
                }
              } else {
                wastage_discount = 0;
              }

              var total_applied_discount = parseFloat(
                parseFloat(mc_discount) + parseFloat(wastage_discount)
              ).toFixed(2);

              if (total_applied_discount < discount) {
                item_blc_discount = parseFloat(
                  parseFloat(discount) - parseFloat(total_applied_discount)
                ).toFixed(2);
              }
            }
          } else {
            if (mc_type > discount) {
              mc_discount = parseFloat(discount).toFixed(2);
            }
          }

          if (wastage_discount > 0) {
            discount_weight = parseFloat(
              parseFloat(wastage_discount) / parseFloat(rate_per_grm)
            ).toFixed(3);
          }
        } else if (bill_discount_apply_on == 1) {
          if (parseFloat(wast_wgt_amt) < parseFloat(discount)) {
            wastage_discount = wast_wgt_amt;

            blc_discount = parseFloat(
              parseFloat(discount) - parseFloat(wastage_discount)
            ).toFixed(2);

            if (blc_discount > 0) {
              if (mc_type > 0) {
                if (parseFloat(mc_type) > parseFloat(blc_discount)) {
                  mc_discount = parseFloat(blc_discount).toFixed(2);
                } else {
                  mc_discount = parseFloat(parseFloat(mc_type)).toFixed(2);
                }
              } else {
                mc_discount = 0;
              }

              var total_applied_discount = parseFloat(
                parseFloat(mc_discount) + parseFloat(wastage_discount)
              ).toFixed(2);

              if (total_applied_discount < discount) {
                item_blc_discount = parseFloat(
                  parseFloat(discount) - parseFloat(total_applied_discount)
                ).toFixed(2);
              }
            }
          } else {
            if (wast_wgt_amt > discount) {
              wastage_discount = parseFloat(discount).toFixed(2);
            }
          }

          if (wastage_discount > 0) {
            discount_weight = parseFloat(
              parseFloat(wastage_discount) / parseFloat(rate_per_grm)
            ).toFixed(3);
          }
        }
      }
    }

    var tax_type = "";

    $.each(prod_details, function (k, val) {
      if (val.pro_id == curRow.find(".sale_product_id").val()) {
        tax_type = val.tax_type;
      }
    });

    if (
      is_eda == 1 ||
      ($("#is_eda").val() == 2 && $("#is_eda_tax_calc").val() == 1)
    ) {
      var base_value_tax = parseFloat(
        calculate_base_value_tax(rate_with_mc, tax_group)
      );

      var base_value_amt = parseFloat(
        parseFloat(rate_with_mc) + parseFloat(base_value_tax)
      );

      var arrived_value_tax = parseFloat(
        calculate_arrived_value_tax(base_value_amt, tax_group)
      );

      var arrived_value_amt = parseFloat(
        parseFloat(base_value_amt) + parseFloat(arrived_value_tax)
      );

      var total_tax_rate = parseFloat(
        parseFloat(base_value_tax) + parseFloat(arrived_value_tax)
      ).toFixed(2);

      var tax_value = total_tax_rate.split("."); //Take Decimal Value

      var tax_decimal_value = tax_value[1];

      if (tax_decimal_value % 2 != 0) {
        //check even number

        total_tax_rate = parseFloat(
          parseFloat(total_tax_rate) + parseFloat(0.01)
        ).toFixed(2);
      }

      var arrived_value_amt = parseFloat(
        parseFloat(rate_with_mc) + parseFloat(total_tax_rate)
      ).toFixed(2);

      inclusive_tax_rate = arrived_value_amt;

      if ((calculation_type == 3 || calculation_type == 4) && tax_type == 1) {
        //tax_type 1-Inclusive ,2-Exclusive

        inclusive_tax_rate = rate_with_mc;

        var total_tax_rate = parseFloat(
          calculate_inclusiveGST(rate_with_mc, tax_group)
        ).toFixed(2);

        rate_with_mc = parseFloat(
          parseFloat(rate_with_mc) - parseFloat(total_tax_rate)
        ).toFixed(2);
      }

      if (is_store_delivery == 1) {
        // SHOW ROOM DELIVERY

        cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);

        sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);
      } else if (is_store_delivery == 2) {
        // Customer Delivery

        if (cus_del_country == cmp_country) {
          if (cus_del_state == cmp_state) {
            cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(2);

            sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(2);
          } else {
            cgst = 0;
            sgst = 0;

            igst = total_tax_rate;
          }
        }

        /*else if(cus_del_country=='')

				{

					cgst=parseFloat(parseFloat(total_tax_rate)/2).toFixed(2);

					sgst=parseFloat(parseFloat(total_tax_rate)/2).toFixed(2);

				}*/ // NO GST
        else {
          cgst = 0;
          sgst = 0;
          igst = 0;
          total_tax_rate = 0;

          inclusive_tax_rate = rate_with_mc;
        }
      }
    } else {
      inclusive_tax_rate = rate_with_mc;
    }

    // PURCHASE COST CALCULATION

    var pur_purity =
      isNaN(curRow.find(".purchase_touch").val()) ||
      curRow.find(".purchase_touch").val() == ""
        ? 0
        : curRow.find(".purchase_touch").val();

    var pur_wastage =
      isNaN(curRow.find(".purchase_va").val()) ||
      curRow.find(".purchase_va").val() == ""
        ? 0
        : curRow.find(".purchase_va").val();

    var pur_rate =
      isNaN(curRow.find(".purchase_rate").val()) ||
      curRow.find(".purchase_rate").val() == ""
        ? 0
        : curRow.find(".purchase_rate").val();

    //var mc_type = $('#purchase_mc_type').val();

    var karigar_calc_type = curRow.find(".purchase_cal_type").val();

    var ratecaltype = curRow.find(".purchase_rate_calc_type").val();

    var purchase_cost = 0;

    var purchase_stn_cost =
      (isNaN(curRow.find(".pur_diamond").val()) ||
      curRow.find(".pur_diamond").val() == ""
        ? 0
        : curRow.find(".pur_diamond").val()) +
      (isNaN(curRow.find(".pur_stone").val()) ||
      curRow.find(".pur_stone").val() == ""
        ? 0
        : curRow.find(".pur_stone").val());

    if (parseFloat(pur_wastage) <= 0) {
      pur_wastage = 100 - pur_purity;
    }

    if (pur_rate > 0) {
      if (karigar_calc_type == 1) {
        var purewt = parseFloat(
          (parseFloat(net_wt) *
            (parseFloat(pur_purity) + parseFloat(pur_wastage))) /
            100
        );
      } else if (karigar_calc_type == 2) {
        //Net weight * touch

        var purewt = parseFloat(
          parseFloat(net_wt) * (parseFloat(pur_purity) / 100)
        );
      } else if (karigar_calc_type == 3) {
        // ((net wt * 3%)*92%)

        var touch_weight = parseFloat(
          (parseFloat(net_wt) * parseFloat(pur_purity)) / 100
        ).toFixed(3);

        var wastage_touch = parseFloat(
          (parseFloat(touch_weight) * parseFloat(pur_wastage)) / 100
        );

        var purewt = parseFloat(
          parseFloat(touch_weight) + parseFloat(wastage_touch)
        ).toFixed(3);
      }

      if (product_type == 0) {
        // for ornaments Product
        if (ratecaltype == 1) {
          // Rate Calc By Grm(Wt)
          purchase_cost = parseFloat(
            parseFloat(purewt) * parseFloat(pur_rate) +
              parseFloat(purchase_mc) +
              parseFloat(tag_other_itm_amount) +
              parseFloat(charge_value) +
              parseFloat(purchase_stn_cost)
          ).toFixed(2);
        } else {
          purchase_cost = parseFloat(
            parseFloat(pcs) * parseFloat(pur_rate) +
              parseFloat(purchase_mc) +
              parseFloat(tag_other_itm_amount) +
              parseFloat(charge_value) +
              parseFloat(purchase_stn_cost)
          ).toFixed(2);
        }
      } // for stone and Diamond Product
      else {
        if (ratecaltype == 1) {
          // Rate Calc By Grm(Wt)
          purchase_cost = parseFloat(
            parseFloat(gross_wt) * parseFloat(pur_rate)
          ).toFixed(2);
        } else {
          purchase_cost = parseFloat(
            parseFloat(pcs) * parseFloat(pur_rate)
          ).toFixed(2);
        }
      }

      // PURCHASE TAX

      var pur_base_value_tax = parseFloat(
        calculate_base_value_tax(purchase_cost, tax_group)
      );

      var pur_base_value_amt = parseFloat(
        parseFloat(purchase_cost) + parseFloat(pur_base_value_tax)
      );

      var pur_arrived_value_tax = parseFloat(
        calculate_arrived_value_tax(pur_base_value_amt, tax_group)
      );

      var pur_arrived_value_amt = parseFloat(
        parseFloat(pur_base_value_amt) + parseFloat(pur_arrived_value_tax)
      );

      var pur_total_tax_rate = parseFloat(
        parseFloat(pur_base_value_tax) + parseFloat(pur_arrived_value_tax)
      ).toFixed(2);

      var pur_tax_value = pur_total_tax_rate.split("."); //Take Decimal Value

      var pur_tax_decimal_value = pur_tax_value[1];

      if (pur_tax_decimal_value % 2 != 0) {
        //check even number

        pur_total_tax_rate = parseFloat(
          parseFloat(pur_total_tax_rate) + parseFloat(0.01)
        ).toFixed(2);
      }

      var pur_arrived_value_amt = parseFloat(
        parseFloat(purchase_cost) + parseFloat(pur_total_tax_rate)
      ).toFixed(2);

      pur_inclusive_tax_rate = pur_arrived_value_amt;

      if ((calculation_type == 3 || calculation_type == 4) && tax_type == 1) {
        //tax_type 1-Inclusive ,2-Exclusive

        pur_inclusive_tax_rate = purchase_cost;

        var pur_total_tax_rate = parseFloat(
          calculate_inclusiveGST(rate_with_mc, tax_group)
        ).toFixed(2);

        purchase_cost = parseFloat(
          parseFloat(purchase_cost) - parseFloat(total_tax_rate)
        ).toFixed(2);
      }

      purchase_cost = pur_inclusive_tax_rate;
    }

    //PROFIT CALCULATION

    var profit = 0;

    var profit_per = 0;

    var discount_per = 0;

    if (purchase_cost > 0) {
      profit = inclusive_tax_rate - purchase_cost;

      profit_per = (profit / inclusive_tax_rate) * 100;
    }

    discount_per = (discount / inclusive_tax_rate) * 100;

    curRow.find(".tag_purchase_cost").val(parseFloat(purchase_cost).toFixed(2));

    curRow.find(".purchase_va").val(parseFloat(pur_wastage).toFixed(2));

    curRow.find(".purchase_mc").val(parseFloat(purchase_mc).toFixed(2));

    curRow.find(".dis_per").val(parseFloat(discount_per).toFixed(2));

    curRow.find(".profit").val(parseFloat(profit).toFixed(2));

    curRow.find(".profit_percentage").val(parseFloat(profit_per).toFixed(2));

    curRow.find(".sale_stone").val(stn_price);

    curRow.find(".sale_diamond").val(dia_price);

    console.log("cus_del_country:" + cus_del_country);

    console.log("cus_del_state:" + cus_del_state);

    console.log("cgst:" + cgst);

    console.log("sgst:" + sgst);

    console.log("igst:" + igst);

    console.log("mc_type:" + mc_type);

    console.log("mc_discount:" + mc_discount);

    console.log("blc_discount:" + blc_discount);

    console.log("wast_wgt_amt:" + wast_wgt_amt);

    console.log("wastage_discount:" + wastage_discount);

    curRow.find(".bill_taxable_amt").html(parseFloat(rate_with_mc).toFixed(2));

    curRow.find(".bill_taxable_amt").val(parseFloat(rate_with_mc).toFixed(2));

    curRow.find(".mc_discount").val(parseFloat(mc_discount).toFixed(2));

    curRow
      .find(".wastage_discount")
      .val(parseFloat(wastage_discount).toFixed(2));

    curRow
      .find(".item_blc_discount")
      .val(parseFloat(item_blc_discount).toFixed(2));

    curRow.find(".tax_amt").html(parseFloat(total_tax_rate).toFixed(2));

    curRow.find(".total_tax").val(parseFloat(total_tax_rate).toFixed(2));

    curRow.find(".bill_amount").val(parseFloat(inclusive_tax_rate).toFixed(2));

    curRow.find(".sale_cgst").val(cgst);

    curRow.find(".sale_sgst").val(sgst);

    curRow.find(".sale_igst").val(igst);

    curRow.find(".bill_discount").val(parseFloat(discount).toFixed(2));

    curRow.find(".per_grm_amount").val(rate_per_grm);

    curRow.find(".bill_wastage_wt").val(wast_wgt);

    if (discount_weight > 0) {
      curRow
        .find(".est_wastage")
        .html(
          parseFloat(
            parseFloat(
              parseFloat(parseFloat(wast_wgt) - parseFloat(discount_weight)) *
                100
            ) / parseFloat(net_wt)
          ).toFixed(2)
        );
    } else {
      curRow.find(".est_wastage").html(parseFloat(tot_wastage).toFixed(2));
    }

    // curRow.find('.est_wastage').html(parseFloat(parseFloat(parseFloat(parseFloat(wast_wgt)-parseFloat(discount_weight))*100)/net_wt).toFixed(2));

    curRow
      .find(".est_wastage_wt")
      .html(
        parseFloat(parseFloat(wast_wgt) - parseFloat(discount_weight)).toFixed(
          3
        )
      );

    curRow
      .find(".making_charge")
      .html(parseFloat(mc_type - mc_discount).toFixed(2));

    curRow.find(".bill_sale_net_wt").html(parseFloat(net_wt).toFixed(3));

    curRow.find(".bill_sale_net_wt").val(parseFloat(net_wt).toFixed(3));

    console.log("calculation_type:" + calculation_type);

    console.log("rate_with_mc:" + rate_with_mc);

    console.log("wast_wgt:" + wast_wgt);

    console.log("mc:" + curRow.find(".bill_mctype").val());

    console.log("mc_type:" + mc_type);

    console.log("retail_max_mc:" + retail_max_mc);

    console.log("inclusive_tax_rate:" + inclusive_tax_rate);

    console.log("total_tax:" + total_tax);

    console.log("tax_group:" + tax_group);

    console.log("rate_per_grm:" + rate_per_grm);

    console.log("------------");

    /*if(ctrl_page[1]=='bill_split' && curRow != undefined)

		{

			curRow.find('.sale_noof_bills').val(getNumberOfBillsSplit(curRow.find('.bill_amount').val()));

			//curRow.find('.sale_noof_bills').val(2);

			createSaleBillSplitRow(curRow, getRandomSplitRatio(100, curRow.find('.sale_noof_bills').val(), curRow));

		}*/
  });

  calculate_sales_details(); //Calculate Sales Details

  calculate_purchase_details(); //Calculate Purchase Details
}

$("input[name='billing[split_type]']:radio").on("change", function () {
  $("#billing_split_sale_details > tbody").empty();

  $(".no_of_split").css("display", "none");

  $("#apply_split").attr("disabled", false);

  if (this.value == 2) {
    $(".no_of_split").css("display", "block");

    $("#apply_split").attr("disabled", true);
  } else {
    $("#no_of_split").val("");
  }
});

$("#no_of_split").on("keyup", function () {
  if (this.value != "") {
    var split_value = $("#no_of_split").val().split(",");

    var count = 0;

    for (var i = 0, n = split_value.length; i < n; i++) {
      count += parseFloat(split_value[i]);
    }

    if (count == 100) {
      $("#apply_split").attr("disabled", false);
    } else {
      $("#apply_split").attr("disabled", true);
    }
  }
});

$("#apply_split").on("click", function () {
  $("#billing_split_sale_details > tbody").empty();

  $("#billing_sale_details > tbody tr").each(function (idx, row) {
    curRow = $(this);

    curRow
      .find(".sale_noof_bills")
      .val(getNumberOfBillsSplit(curRow.find(".bill_amount").val()));

    //curRow.find('.sale_noof_bills').val(2);

    createSaleBillSplitRow(
      curRow,
      getRandomSplitRatio(100, curRow.find(".sale_noof_bills").val(), curRow)
    );
  });

  // group_splitted_item();
});

$(document).on("change", ".bill_wastage", function () {
  var row = $(this).closest("tr");

  let wastage = isNaN(parseFloat($(this).val()))
    ? 0
    : parseFloat($(this).val());
  let this_value = this.value;
  let id_product = row.find(".sale_product_id").val();
  let id_desgin = row.find(".sale_design_id").val();
  let id_sub_design = row.find(".bill_id_sub_design").val();
  let id_branch = $("#id_branch").val();

  let wastage_min = isNaN(
    parseFloat($(this).closest("tr").find(".va_limit").val())
  )
    ? 0
    : parseFloat($(this).closest("tr").find(".va_limit").val());

  if (wastage < wastage_min) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Minimum wastage Percentage is " + wastage_min + "%",
      settings: { timeout: 5000 },
    });

    $(this).val(wastage_min);

    $(this).closest("tr").find(".est_wastage").html(wastage_min);
  }

  if (wastage > 100) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Enter Valid WastagePercent",
    });

    $(this).val(0);
  }
  if (
    id_product != "" &&
    id_desgin != "" &&
    id_sub_design != "" &&
    id_branch != ""
  ) {
    let mc_min = 0;

    $.each(wast_settings_details, function (key, items) {
      if (
        items.id_product == id_product &&
        items.id_design == id_desgin &&
        items.id_sub_design == id_sub_design &&
        items.id_branch == id_branch
      ) {
        if (items.wastage_type == 1) {
          //Fixed
          if (parseFloat(this_value) < parseFloat(items.wastag_min)) {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message:
                "" +
                "</br>" +
                "Minimum Wastage Percent is  :" +
                items.wastag_min,
            });
            row.find(".bill_wastage").val(items.wastag_min);
            row.find(".bill_wastage").focus();
          }
        } else if (
          items.wastage_type == 2 &&
          row.find(".bill_gross_val").val() != ""
        ) {
          //Flexiable
          $.each(items.weight_range_det, function (i, result) {
            if (result.wc_method == 1) {
              //Percent
              if (
                parseFloat(result.wc_from_weight) <=
                  parseFloat(row.find(".bill_gross_val  ").val()) &&
                parseFloat(row.find(".bill_gross_val  ").val()) <=
                  parseFloat(result.wc_to_weight)
              ) {
                if (parseFloat(this_value) < parseFloat(result.wc_min)) {
                  $.toaster({
                    priority: "danger",
                    title: "Warning!",
                    message:
                      "" +
                      "</br>" +
                      "Minimum Wastage Percent is  :" +
                      items.wastag_min,
                  });
                  row.find(".bill_wastage").val(result.wc_min);
                  row.find(".bill_wastage").focus();
                }
              }
            }

            if (result.wc_method == 2) {
              //Weight
              if (
                parseFloat(result.wc_from_weight) <=
                  parseFloat(row.find(".bill_gross_val  ").val()) &&
                parseFloat(row.find(".bill_gross_val  ").val()) <=
                  parseFloat(result.wc_to_weight)
              ) {
                let bill_sale_net_wt =
                  row.find(".bill_sale_net_wt").val() > 0
                    ? row.find(".bill_sale_net_wt").val()
                    : 0;
                const wastagePercentage =
                  (result.wc_min_wt / bill_sale_net_wt) * 100;
                if (parseFloat(this_value) < parseFloat(wastagePercentage)) {
                  $.toaster({
                    priority: "danger",
                    title: "Warning!",
                    message:
                      "" +
                      "</br>" +
                      "Minimum Wastage Percentage is  :" +
                      wastagePercentage,
                  });
                  row.find(".bill_wastage").val(wastagePercentage);
                }
              }
            }
          });
        }
      }
    });
  }

  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  if (bill_type == 9) {
    //Order Delivery

    calculateOrderSaleBillRowTotal();
  } else {
    calculateSaleBillRowTotal();
  }
});

$(document).on("change", ".bill_wastage_wt", function () {
  var row = $(this).closest("tr");
  let this_value = this.value;
  let id_product = row.find(".sale_product_id").val();
  let id_desgin = row.find(".sale_design_id").val();
  let id_sub_design = row.find(".bill_id_sub_design").val();
  let id_branch = $("#id_branch").val();

  let wastage_wt = isNaN(parseFloat($(this).val()))
    ? 0
    : parseFloat($(this).val());

  let wastage_wt_min = isNaN(
    parseFloat($(this).closest("tr").find(".va_wt_limit").val())
  )
    ? 0
    : parseFloat($(this).closest("tr").find(".va_wt_limit").val());

  let wastage_min = isNaN(
    parseFloat($(this).closest("tr").find(".va_limit").val())
  )
    ? 0
    : parseFloat($(this).closest("tr").find(".va_limit").val());

  let bill_sale_net_wt =
    $(this).closest("tr").find(".bill_sale_net_wt").val() > 0
      ? $(this).closest("tr").find(".bill_sale_net_wt").val()
      : 0;

  if (wastage_wt < wastage_wt_min) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Minimum wastage Wt is " + wastage_wt_min,
      settings: { timeout: 5000 },
    });

    $(this).closest("tr").find(".bill_wastage").val(wastage_min);
  } else {
    let wast_per = parseFloat(
      parseFloat(wastage_wt * 100) / parseFloat(bill_sale_net_wt)
    ).toFixed(2);

    $(this).closest("tr").find(".bill_wastage").val(wast_per);
  }

  let bill_wastage_wt =
    $(this).closest("tr").find(".bill_wastage_wt").val() > 0
      ? $(this).closest("tr").find(".bill_wastage_wt").val()
      : 0;
  let wast_perc = parseFloat(
    parseFloat(bill_wastage_wt * 100) / parseFloat(bill_sale_net_wt)
  ).toFixed(2);
  $(this).closest("tr").find(".bill_wastage").val(wast_perc);

  if (parseFloat($(this).closest("tr").find(".bill_wastage").val()) > 100) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      settings: { timeout: 4000 },
      message: "" + "</br>" + "Wastage Should below 100%..",
      timeOut: 9500,
    });

    $(this).val(0);
    $(this).closest("tr").find(".bill_wastage").val(0);
  }

  if (
    id_product != "" &&
    id_desgin != "" &&
    id_sub_design != "" &&
    id_branch != ""
  ) {
    $.each(wast_settings_details, function (key, items) {
      if (
        items.id_product == id_product &&
        items.id_design == id_desgin &&
        items.id_sub_design == id_sub_design &&
        items.id_branch == id_branch
      ) {
        if (items.wastage_type == 1) {
          //Fixed
          if (parseFloat(this_value) < parseFloat(items.wastag_min_wt)) {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message:
                "" +
                "</br>" +
                "Minimum Wastage Weight is  :" +
                items.wastag_min_wt,
            });
            row.find(".bill_wastage_wt").val(items.wastag_min);
            row.find(".bill_wastage_wt").focus();
          }
        } else if (
          items.wastage_type == 2 &&
          row.find(".bill_gross_val").val() != ""
        ) {
          //Flexiable
          $.each(items.weight_range_det, function (i, result) {
            if (
              parseFloat(result.wc_from_weight) <=
                parseFloat(row.find(".bill_gross_val  ").val()) &&
              parseFloat(row.find(".bill_gross_val  ").val()) <=
                parseFloat(result.wc_to_weight)
            ) {
              if (result.wc_method == 1) {
                //Percent
                if (parseFloat(this_value) < parseFloat(result.wc_min)) {
                  $.toaster({
                    priority: "danger",
                    title: "Warning!",
                    message:
                      "" +
                      "</br>" +
                      "Minimum Wastage Weight is  :" +
                      result.wc_min,
                  });
                  row.find(".bill_wastage").val(result.wc_min);
                  row.find(".bill_wastage").focus();
                }
              }
              if (result.wc_method == 2) {
                //Weight
                if (parseFloat(this_value) < parseFloat(result.wc_min_wt)) {
                  $.toaster({
                    priority: "danger",
                    title: "Warning!",
                    message:
                      "" +
                      "</br>" +
                      "Minimum Wastage Weight is  :" +
                      result.wc_min_wt,
                  });
                  // row.find('.bill_wastage').val(wast_perc);
                  row.find(".bill_wastage_wt").val(result.wc_min_wt);
                  let bill_sale_net_wt =
                    row.find(".bill_sale_net_wt").val() > 0
                      ? row.find(".bill_sale_net_wt").val()
                      : 0;

                  const wastagePercentage =
                    (result.wc_min_wt / bill_sale_net_wt) * 100;
                  row.find(".bill_wastage").val(wastagePercentage);
                  row.find(".bill_wastage_wt").focus();
                }
              }
            }
          });
        }
      }
    });
  }

  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  if (bill_type == 9) {
    //Order Delivery

    calculateOrderSaleBillRowTotal();
  } else {
    calculateSaleBillRowTotal();
  }
});

$(document).on("change", ".bill_mctype", function () {
  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  if (bill_type == 9) {
    //Order Delivery

    calculateOrderSaleBillRowTotal();
  } else {
    calculateSaleBillRowTotal();
  }
});

$(document).on("change", ".bill_mc", function () {
  var row = $(this).closest("tr");

  let this_value = this.value;
  let id_product = row.find(".sale_product_id").val();
  let id_desgin = row.find(".sale_design_id").val();
  let id_sub_design = row.find(".bill_id_sub_design").val();
  let id_branch = $("#id_branch").val();
  let mc = isNaN(parseFloat($(this).val())) ? 0 : parseFloat($(this).val());

  let mc_min = isNaN(parseFloat($(this).closest("tr").find(".mc_limit").val()))
    ? 0
    : parseFloat($(this).closest("tr").find(".mc_limit").val());

  if (mc < mc_min) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Minimum MC is " + mc_min,
      settings: { timeout: 5000 },
    });

    $(this).val(mc_min);
  }
  if (
    id_product != "" &&
    id_desgin != "" &&
    id_sub_design != "" &&
    id_branch != ""
  ) {
    $.each(wast_settings_details, function (key, items) {
      if (
        items.id_product == id_product &&
        items.id_design == id_desgin &&
        items.id_sub_design == id_sub_design &&
        items.id_branch == id_branch
      ) {
        if (parseFloat(this_value) < parseFloat(items.mc_min)) {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>" + "Minimum MC Value is  :" + items.mc_min,
          });
          row.find(".bill_mc").val(items.mc_min);
          row.find(".bill_mc").focus();
        }
      }
    });
  }
  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  if (bill_type == 9) {
    //Order Delivery

    calculateOrderSaleBillRowTotal();
  } else {
    calculateSaleBillRowTotal();
  }
});

function getNumberOfBillsSplit(rowTotal) {
  var minAmount = $("#bill_split_min_amount").val();

  var maxAmount = $("#bill_split_max_amount").val();

  var noOfBills = Math.ceil(
    parseFloat(rowTotal) /
      parseFloat(getRandBetweenNumbers(minAmount, maxAmount))
  );

  console.log(noOfBills);

  return parseInt(noOfBills);
}

function getRandBetweenNumbers(min, max) {
  var min = Math.ceil(min); // Round up the minimum number to ensure it's inclusive

  var max = Math.floor(max); // Round down the maximum number to ensure it's inclusive

  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function getRandomSplitRatioNew(total, count, curRow) {
  var numbers = [];

  var ratio = total / count;

  var totAmt = parseFloat(curRow.find(".bill_amount").val());

  var minAmount = parseFloat($("#bill_split_min_amount").val());

  var maxAmount = parseFloat($("#bill_split_max_amount").val());

  maxValue = Math.floor((maxAmount * 100) / totAmt);

  while (numbers.length < count - 1) {
    var randomNum = Math.floor(Math.random() * (maxValue - 1)) + 1;

    if (ratio + randomNum <= maxValue) {
      numbers.push(randomNum);

      total -= randomNum;

      ratio = total / (count - numbers.length);
    }
  }

  numbers.push(total);

  if (total > maxValue) {
    return getRandomNumbersWithMaxRatio(total, count, curRow);
  }

  return numbers;
}

/*Split random radio and return this as array*/

function getRandomSplitRatio(value, numberOfSplits, curRow) {
  var splits = [];

  var remainingValue = value;

  var totAmt = parseFloat(curRow.find(".bill_amount").val());

  var minAmount = parseFloat($("#bill_split_min_amount").val());

  var maxAmount = parseFloat($("#bill_split_max_amount").val());

  // Generate random splits

  for (var i = 0; i < numberOfSplits - 1; i++) {
    var random = Math.random();

    var maxSplit = Math.floor((remainingValue - 1) / (numberOfSplits - i));

    var split = Math.floor(random * maxSplit) + 1;

    var aprxSalVal = parseFloat((split / 100) * totAmt).toFixed(3);

    console.log("aprxSalVal", aprxSalVal);

    if (parseFloat(aprxSalVal) > parseFloat(maxAmount)) {
      var reeSplits = getRandomSplit(
        curRow,
        split,
        getNumberOfBillsSplit(parseFloat(aprxSalVal))
      );

      splits = $.merge(splits, reeSplits);
    } else {
      splits.push(split);
    }

    remainingValue -= split;
  }

  // The last split is the remaining value to ensure the sum matches the given value

  if (i == numberOfSplits - 1) {
    var aprxSalVal = parseFloat((remainingValue / 100) * totAmt).toFixed(3);

    if (parseFloat(aprxSalVal) > parseFloat(maxAmount)) {
      var reeSplits = getRandomSplit(
        curRow,
        remainingValue,
        getNumberOfBillsSplit(parseFloat(aprxSalVal))
      );

      splits = $.merge(splits, reeSplits);
    } else {
      splits.push(remainingValue);
    }
  }

  var split_type = $("input[name='billing[split_type]']:checked").val();

  if (split_type == 2) {
    var split_value = $("#no_of_split").val();

    splits = $("#no_of_split").val().split(",");
  }

  console.log(splits);

  maxValue = Math.floor((maxAmount * 100) / totAmt);

  var result = [];

  var currentAmount = 0;

  var currentWeight = 0;

  $.each(splits, function (key, val) {
    var newAmount = parseFloat(currentAmount) + parseFloat(val);

    if (newAmount <= maxValue) {
      currentAmount = newAmount;

      currentWeight += parseFloat(val);
    } else {
      if (currentWeight > 0 && currentAmount > 0) {
        result.push(currentWeight);
      }

      currentAmount = val;

      currentWeight = val;
    }
  });

  if (currentWeight > 0 && currentAmount > 0) {
    result.push(currentAmount);
  }

  console.log(result);

  return result;
}

function getRandomSplit(curRow, value, numberOfSplits) {
  var splits = [];

  var remainingValue = value;

  var totAmt = parseFloat(curRow.find(".bill_amount").val());

  var minAmount = $("#bill_split_min_amount").val();

  var maxAmount = $("#bill_split_max_amount").val();

  // Generate random splits

  for (var i = 0; i < numberOfSplits - 1; i++) {
    var random = Math.random();

    var maxSplit = Math.floor((remainingValue - 1) / (numberOfSplits - i));

    var split = Math.floor(random * maxSplit) + 1;

    var aprxSalVal = parseFloat((split / 100) * totAmt).toFixed(3);

    if (parseFloat(aprxSalVal) > parseFloat(maxAmount)) {
      getRandomSplit(curRow, value, numberOfSplits);
    } else {
      splits.push(split);
    }

    remainingValue -= split;
  }

  //splits.push(remainingValue);

  if (i == numberOfSplits - 1) {
    var aprxSalVal = parseFloat((remainingValue / 100) * totAmt).toFixed(3);

    if (parseFloat(aprxSalVal) > parseFloat(maxAmount)) {
      var reeSplits = getRandomSplit1(
        curRow,
        remainingValue,
        getNumberOfBillsSplit(parseFloat(aprxSalVal))
      );

      splits = $.merge(splits, reeSplits);
    } else {
      splits.push(remainingValue);
    }
  }

  // The last split is the remaining value to ensure the sum matches the given value

  /*splits.push(remainingValue);

	console.log("splits", splits);*/

  return splits;
}

function getRandomSplit1(curRow, value, numberOfSplits) {
  var splits = [];

  var remainingValue = value;

  var totAmt = parseFloat(curRow.find(".bill_amount").val());

  var minAmount = $("#bill_split_min_amount").val();

  var maxAmount = $("#bill_split_max_amount").val();

  // Generate random splits

  for (var i = 0; i < numberOfSplits - 1; i++) {
    var random = Math.random();

    var maxSplit = Math.floor((remainingValue - 1) / (numberOfSplits - i));

    var split = Math.floor(random * maxSplit) + 1;

    var aprxSalVal = parseFloat((split / 100) * totAmt).toFixed(3);

    if (parseFloat(aprxSalVal) > parseFloat(maxAmount)) {
      getRandomSplit1(curRow, value, numberOfSplits);
    } else {
      splits.push(split);
    }

    remainingValue -= split;
  }

  if (i == numberOfSplits - 1) {
    var aprxSalVal = parseFloat((remainingValue / 100) * totAmt).toFixed(3);

    if (parseFloat(aprxSalVal) > parseFloat(maxAmount)) {
      var reeSplits = getRandomSplit2(
        curRow,
        remainingValue,
        getNumberOfBillsSplit(parseFloat(aprxSalVal))
      );

      splits = $.merge(splits, reeSplits);
    } else {
      splits.push(remainingValue);
    }
  }

  return splits;
}

function getRandomSplit2(curRow, value, numberOfSplits) {
  var splits = [];

  var remainingValue = value;

  var totAmt = parseFloat(curRow.find(".bill_amount").val());

  var minAmount = $("#bill_split_min_amount").val();

  var maxAmount = $("#bill_split_max_amount").val();

  // Generate random splits

  for (var i = 0; i < numberOfSplits - 1; i++) {
    var random = Math.random();

    var maxSplit = Math.floor((remainingValue - 1) / (numberOfSplits - i));

    var split = Math.floor(random * maxSplit) + 1;

    var aprxSalVal = parseFloat((split / 100) * totAmt).toFixed(3);

    if (parseFloat(aprxSalVal) > parseFloat(maxAmount)) {
      getRandomSplit2(curRow, value, numberOfSplits);
    } else {
      splits.push(split);
    }

    remainingValue -= split;
  }

  if (i == numberOfSplits - 1) {
    var aprxSalVal = parseFloat((remainingValue / 100) * totAmt).toFixed(3);

    if (parseFloat(aprxSalVal) > parseFloat(maxAmount)) {
      var reeSplits = getRandomSplit2(
        curRow,
        remainingValue,
        getNumberOfBillsSplit(parseFloat(aprxSalVal))
      );

      splits = $.merge(splits, reeSplits);
    } else {
      splits.push(remainingValue);
    }
  }

  return splits;
}

function getRandomSplit3(curRow, value, numberOfSplits) {
  var splits = [];

  var remainingValue = value;

  var totAmt = parseFloat(curRow.find(".bill_amount").val());

  var minAmount = $("#bill_split_min_amount").val();

  var maxAmount = $("#bill_split_max_amount").val();

  // Generate random splits

  for (var i = 0; i < numberOfSplits - 1; i++) {
    var random = Math.random();

    var maxSplit = Math.floor((remainingValue - 1) / (numberOfSplits - i));

    var split = Math.floor(random * maxSplit) + 1;

    var aprxSalVal = parseFloat((split / 100) * totAmt).toFixed(3);

    if (parseFloat(aprxSalVal) > parseFloat(maxAmount)) {
      getRandomSplit3(curRow, value, numberOfSplits);
    } else {
      splits.push(split);
    }

    remainingValue -= split;
  }

  splits.push(remainingValue);

  return splits;
}

function calculateOrderSaleBillRowTotal() {
  var is_store_delivery = $("#delivered_at").val();

  var adv_paid_amt = 0;

  var adv_paid_wt = 0;

  var total_weight = 0;

  var balance_weight = 0;

  var balance_pay_amt = 0;

  var average_rate = 0;

  $.each(order_adv_details, function (key, items) {
    if (items.store_as == 2) {
      //Stored as Weight

      adv_paid_amt +=
        parseFloat(items.paid_weight) * parseFloat(items.rate_per_gram); // Convert Weight into Amount

      adv_paid_wt += parseFloat(items.paid_weight);
    } else if (items.store_as == 1) {
      //Stored as Amount

      adv_paid_amt += parseFloat(items.paid_advance);

      adv_paid_wt +=
        parseFloat(items.paid_advance) / parseFloat(items.rate_per_gram); // Convert Amount into Amount
    }
  });

  adv_paid_wt = parseFloat(adv_paid_wt).toFixed(3);

  $("#billing_sale_details > tbody tr").each(function (idx, row) {
    curRow = $(this);

    var gross_wt =
      isNaN(curRow.find(".bill_gross_val").val()) ||
      curRow.find(".bill_gross_val").val() == ""
        ? 0
        : curRow.find(".bill_gross_val").val();

    var less_wt =
      isNaN(curRow.find(".bill_less_val").val()) ||
      curRow.find(".bill_less_val").val() == ""
        ? 0
        : curRow.find(".bill_less_val").val();

    var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

    var calculation_type =
      isNaN(curRow.find(".sale_cal_type").val()) ||
      curRow.find(".sale_cal_type").val() == ""
        ? 0
        : curRow.find(".sale_cal_type").val();

    var tot_wastage =
      isNaN(curRow.find(".bill_wastage").val()) ||
      curRow.find(".bill_wastage").val() == ""
        ? 0
        : curRow.find(".bill_wastage").val();

    if (calculation_type == 0) {
      total_weight += parseFloat(
        parseFloat(gross_wt) * parseFloat(tot_wastage / 100) +
          parseFloat(gross_wt)
      );
    } else if (calculation_type == 1) {
      total_weight += parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100) + parseFloat(net_wt)
      );
    } else if (calculation_type == 2) {
      total_weight += parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100) + parseFloat(net_wt)
      );
    }
  });

  balance_weight = parseFloat(
    parseFloat(total_weight) - parseFloat(adv_paid_wt)
  ).toFixed(3);

  if (adv_paid_wt < total_weight) {
    var balance_pay_amt = parseFloat(
      parseFloat($("#goldrate_22ct").val()) * parseFloat(balance_weight)
    ).toFixed(2);
  }

  average_rate = parseFloat(
    parseFloat(parseFloat(adv_paid_amt) + parseFloat(balance_pay_amt)) /
      parseFloat(total_weight)
  ).toFixed(2);

  console.log("adv_paid_amt:" + adv_paid_amt);

  console.log("adv_paid_wt:" + adv_paid_wt);

  console.log("total_weight:" + total_weight);

  console.log("balance_weight:" + balance_weight);

  console.log("average_rate:" + average_rate);

  console.log("balance_pay_amt:" + balance_pay_amt);

  $("#billing_sale_details > tbody tr").each(function (idx, row) {
    $("#gift_voucher_modal").attr("disabled", false);

    curRow = $(this);

    var gross_wt =
      isNaN(curRow.find(".bill_gross_val").val()) ||
      curRow.find(".bill_gross_val").val() == ""
        ? 0
        : curRow.find(".bill_gross_val").val();

    var less_wt =
      isNaN(curRow.find(".bill_less_val").val()) ||
      curRow.find(".bill_less_val").val() == ""
        ? 0
        : curRow.find(".bill_less_val").val();

    var net_wt = parseFloat(parseFloat(gross_wt) - parseFloat(less_wt)).toFixed(
      3
    );

    var calculation_type =
      isNaN(curRow.find(".sale_cal_type").val()) ||
      curRow.find(".sale_cal_type").val() == ""
        ? 0
        : curRow.find(".sale_cal_type").val();

    var stone_price =
      isNaN(curRow.find(".bill_stone_price").val()) ||
      curRow.find(".bill_stone_price").val() == ""
        ? 0
        : curRow.find(".bill_stone_price").val();

    var tax_type = calculation_type == 3 ? 1 : 2;

    var certification_price =
      isNaN(curRow.find(".certification_cost").val()) ||
      curRow.find(".certification_cost").val() == ""
        ? 0
        : curRow.find(".certification_cost").val();

    var material_price =
      isNaN(curRow.find(".bill_material_price").val()) ||
      curRow.find(".bill_material_price").val() == ""
        ? 0
        : curRow.find(".bill_material_price").val();

    var total_price = 0;

    var rate_per_grm = 0;

    var base_value_amt = 0;

    var arrived_value_amt = 0;

    var arrived_value_tax = 0;

    var base_value_tax = 0;

    var total_tax_rate = 0;

    var cus_state = $("#cus_state").val();

    var cus_country = $("#cus_country").val();

    var cmp_state = $("#cmp_state").val();

    var cmp_country = $("#cmp_country").val();

    var cus_del_state = $("#cus_del_state").val();

    var cus_del_country = $("#cus_del_country").val();

    var cgst = 0;

    var igst = 0;

    var sgst = 0;

    /*if(curRow.find('.sale_metal_type').val() == 1){

		  rate_per_grm = (isNaN($('.per-grm-sale-value').html()) || $('.per-grm-sale-value').html() == '')  ? 0 : parseFloat($('.per-grm-sale-value').html());

		}else{

			 rate_per_grm = (isNaN($('.silver_per-grm-sale-value').html()) || $('.silver_per-grm-sale-value').html() == '')  ? 0 : parseFloat($('.silver_per-grm-sale-value').html());

		}*/

    //rate_field=curRow.find('.rate_field').val();

    //var rate_per_grm = (isNaN($('#'+rate_field).val()) ||$('#'+rate_field).val() == '')  ? 0 : parseFloat($('#'+rate_field).val());

    //var rate_per_grm = average_rate;

    if (
      isNaN(parseFloat(curRow.find(".per_grm_amount").val())) ||
      curRow.find(".per_grm_amount").val() == 0 ||
      curRow.find(".per_grm_amount").val() == ""
    ) {
      rate_per_grm = average_rate;
    } else {
      rate_per_grm =
        isNaN(parseFloat(curRow.find(".per_grm_amount").val())) ||
        curRow.find(".per_grm_amount").val() == ""
          ? 0
          : parseFloat(curRow.find(".per_grm_amount").val());
    }

    var inclusive_tax_rate = 0;

    var total_tax = 0;

    var discount = 0;

    var disc_type = curRow.find(".disc_type").val();

    var disc_amt = $("#summary_discount_amt").val();

    var total_sales_amt = $(".sale_amt_with_tax").html();

    var tax_group = curRow.find(".sale_tax_group").val();

    var retail_max_mc =
      isNaN(curRow.find(".bill_mc").val()) ||
      curRow.find(".bill_mc").val() == ""
        ? 0
        : curRow.find(".bill_mc").val();

    var tot_wastage =
      isNaN(curRow.find(".bill_wastage").val()) ||
      curRow.find(".bill_wastage").val() == ""
        ? 0
        : curRow.find(".bill_wastage").val();

    if (calculation_type == 0) {
      var wast_wgt = parseFloat(
        parseFloat(gross_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * curRow.find(".sale_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      } else {
        var mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) *
            (retail_max_mc / 100)
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 1) {
      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * net_wt)
            : parseFloat(retail_max_mc * curRow.find(".sale_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      } else {
        var mc_type = parseFloat(
          parseFloat(retail_max_mc * net_wt) * curRow.find(".sale_pcs").val()
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 2) {
      //var wast_wgt      = parseFloat(parseFloat(net_wt) * parseFloat(tot_wastage/100)).toFixed(3);

      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * curRow.find(".sale_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(rate_per_grm) *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price)
        ).toFixed(2);
      } else {
        var mc_type = parseFloat(
          parseFloat(retail_max_mc * gross_wt) * curRow.find(".sale_pcs").val()
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(rate_per_grm) *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price)
        ).toFixed(2);
      }
    } else if (calculation_type == 3 || calculation_type == 4) {
      rate_with_mc = parseFloat(
        isNaN(curRow.find(".tag_sales_value").val()) ||
          curRow.find(".tag_sales_value").val() == ""
          ? 0
          : curRow.find(".tag_sales_value").val()
      );
    }

    let charge_value = isNaN(parseFloat(curRow.find(".charge_value").val()))
      ? 0
      : curRow.find(".charge_value").val();

    rate_with_mc = parseFloat(rate_with_mc) + parseFloat(charge_value);

    if (disc_amt > 0) {
      var disc_per = parseFloat(
        (disc_amt / parseFloat(total_sales_amt + adv_paid_amt)) * 100
      );

      var discount = parseFloat((rate_with_mc * disc_per) / 100);

      rate_with_mc = parseFloat(rate_with_mc - discount).toFixed(2);

      if (disc_type == 2) {
        var wastage_amt = parseFloat(wast_wgt * rate_per_grm);

        var mc_wast_amt = parseFloat(wastage_amt + mc_type);

        var disc_per = parseFloat((discount / mc_wast_amt) * 100);

        var wast_disc = parseFloat(wastage_amt * disc_per * 100);

        var mc_disc = parseFloat(mc_type * disc_per * 100);
      }
    }

    console.log("disc_per:" + disc_per);

    console.log("wast_disc:" + wast_disc);

    console.log("mc_disc:" + mc_disc);

    console.log("discount:" + discount);

    var tax_type = "";

    $.each(prod_details, function (k, val) {
      if (val.pro_id == curRow.find(".sale_product_id").val()) {
        tax_type = val.tax_type;
      }
    });

    if (tax_type == 1) {
      // GST Inclusive

      curRow.find(".bill_amount").val(parseFloat(rate_with_mc).toFixed(2));

      var total_tax_rate = 0;

      var total_tax_rate = parseFloat(
        calculate_inclusiveGST(rate_with_mc, tax_group)
      ).toFixed(2);

      curRow.find(".bill_amount").val(parseFloat(rate_with_mc).toFixed(2));
    } else {
      var total_tax_rate = 0;

      var base_value_tax = parseFloat(
        calculate_base_value_tax(rate_with_mc, tax_group)
      );

      var base_value_amt = parseFloat(
        parseFloat(rate_with_mc) + parseFloat(base_value_tax)
      );

      var arrived_value_tax = parseFloat(
        calculate_arrived_value_tax(base_value_amt, tax_group)
      );

      var arrived_value_amt = parseFloat(
        parseFloat(base_value_amt) + parseFloat(arrived_value_tax)
      );

      var total_tax_rate = parseFloat(
        parseFloat(base_value_tax) + parseFloat(arrived_value_tax)
      ).toFixed(2);

      //total_tax = getTaxValueForItem(rate_with_mc, tax_group);

      var tax_value = total_tax_rate.split("."); //Take Decimal Value

      var tax_decimal_value = tax_value[1];

      if (tax_decimal_value % 2 != 0) {
        //check even number

        total_tax_rate = parseFloat(
          parseFloat(total_tax_rate) + parseFloat(0.01)
        ).toFixed(2);
      }

      var arrived_value_amt = parseFloat(
        parseFloat(rate_with_mc) + parseFloat(total_tax_rate)
      ).toFixed(2);

      inclusive_tax_rate = arrived_value_amt;

      if (cus_state == cmp_state) {
        cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);

        sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);
      } else {
        igst = total_tax_rate;
      }

      curRow
        .find(".bill_amount")
        .val(parseFloat(inclusive_tax_rate).toFixed(2));
    }

    if (is_store_delivery == 1) {
      cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);

      sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);
    } else {
      if (cus_del_country == cmp_country) {
        if (cus_del_state == cmp_state) {
          cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);

          sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);
        } else {
          igst = total_tax_rate;
        }
      } else {
        total_tax_rate = 0;

        cgst = 0;

        sgst = 0;

        igst = 0;
      }
    }

    curRow.find(".tax_amt").html(parseFloat(total_tax_rate).toFixed(2));

    curRow.find(".total_tax").val(parseFloat(total_tax_rate).toFixed(2));

    curRow.find(".sale_cgst").val(cgst);

    curRow.find(".sale_sgst").val(sgst);

    curRow.find(".sale_igst").val(igst);

    curRow.find(".tax_type").val(tax_type);

    curRow.find(".bill_taxable_amt").html(parseFloat(rate_with_mc).toFixed(2));

    curRow.find(".bill_taxable_amt").val(parseFloat(rate_with_mc).toFixed(2));

    curRow.find(".bill_discount").val(parseFloat(discount).toFixed(2));

    curRow.find(".per_grm_amount").val(rate_per_grm);

    curRow.find(".bill_wastage_wt").val(wast_wgt);

    curRow.find(".est_wastage_wt").html(wast_wgt);

    console.log("calculation_type:" + calculation_type);

    console.log("rate_with_mc:" + rate_with_mc);

    console.log("wast_wgt:" + wast_wgt);

    console.log("mc:" + curRow.find(".bill_mctype").val());

    console.log("mc_type:" + mc_type);

    console.log("retail_max_mc:" + retail_max_mc);

    console.log("inclusive_tax_rate:" + inclusive_tax_rate);

    console.log("total_tax:" + total_tax);

    console.log("tax_group:" + tax_group);

    console.log("bill_stone_price:" + stone_price);

    console.log("material_price:" + material_price);

    console.log("certification_price:" + certification_price);

    console.log("rate_per_grm:" + rate_per_grm);

    console.log("------------");
  });

  calculate_sales_details(); //Calculate Sales Details

  calculate_purchase_details(); //Calculate Purchase Details
}

function calculateChitSaleBillRowTotal() {
  var total_chit_paid_amt = 0;

  var chit_weight = 0;

  var total_chit_weight = 0;

  var total_weight = 0;

  var balance_weight = 0;

  var balance_pay_amt = 0;

  var average_rate = 0;

  console.log(chit_adj_details);

  $.each(chit_adj_details, function (key, items) {
    total_chit_paid_amt += parseFloat(items.utl_amount);

    if (items.scheme_type == 2 || items.scheme_type == 3) {
      chit_weight += parseFloat(items.closing_balance);
    }
  });

  total_chit_weight = parseFloat(chit_weight).toFixed(3);

  $("#billing_sale_details > tbody tr").each(function (idx, row) {
    curRow = $(this);

    var gross_wt =
      isNaN(curRow.find(".bill_gross_val").val()) ||
      curRow.find(".bill_gross_val").val() == ""
        ? 0
        : curRow.find(".bill_gross_val").val();

    var less_wt =
      isNaN(curRow.find(".bill_less_val").val()) ||
      curRow.find(".bill_less_val").val() == ""
        ? 0
        : curRow.find(".bill_less_val").val();

    var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

    var calculation_type =
      isNaN(curRow.find(".sale_cal_type").val()) ||
      curRow.find(".sale_cal_type").val() == ""
        ? 0
        : curRow.find(".sale_cal_type").val();

    var tot_wastage =
      isNaN(curRow.find(".bill_wastage").val()) ||
      curRow.find(".bill_wastage").val() == ""
        ? 0
        : curRow.find(".bill_wastage").val();

    if (calculation_type == 0) {
      total_weight += parseFloat(
        parseFloat(gross_wt) * parseFloat(tot_wastage / 100) +
          parseFloat(gross_wt)
      );
    } else if (calculation_type == 1) {
      total_weight += parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100) + parseFloat(net_wt)
      );
    } else if (calculation_type == 2) {
      total_weight += parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100) + parseFloat(net_wt)
      );
    }
  });

  balance_weight = parseFloat(
    parseFloat(total_weight) - parseFloat(total_chit_weight)
  ).toFixed(3);

  if (total_chit_weight < total_weight) {
    var balance_pay_amt = parseFloat(
      parseFloat($("#goldrate_22ct").val()) * parseFloat(balance_weight)
    ).toFixed(2);
  }

  average_rate = parseFloat(
    parseFloat(parseFloat(total_chit_paid_amt) + parseFloat(balance_pay_amt)) /
      parseFloat(total_weight)
  ).toFixed(2);

  console.log("total_chit_paid_amt:" + total_chit_paid_amt);

  console.log("total_chit_weight:" + total_chit_weight);

  console.log("total_weight:" + total_weight);

  console.log("balance_weight:" + balance_weight);

  console.log("average_rate:" + average_rate);

  console.log("balance_pay_amt:" + balance_pay_amt);

  $("#billing_sale_details > tbody tr").each(function (idx, row) {
    $("#gift_voucher_modal").attr("disabled", false);

    curRow = $(this);

    var gross_wt =
      isNaN(curRow.find(".bill_gross_val").val()) ||
      curRow.find(".bill_gross_val").val() == ""
        ? 0
        : curRow.find(".bill_gross_val").val();

    var less_wt =
      isNaN(curRow.find(".bill_less_val").val()) ||
      curRow.find(".bill_less_val").val() == ""
        ? 0
        : curRow.find(".bill_less_val").val();

    var net_wt = parseFloat(parseFloat(gross_wt) - parseFloat(less_wt)).toFixed(
      3
    );

    var calculation_type =
      isNaN(curRow.find(".sale_cal_type").val()) ||
      curRow.find(".sale_cal_type").val() == ""
        ? 0
        : curRow.find(".sale_cal_type").val();

    var stone_price =
      isNaN(curRow.find(".bill_stone_price").val()) ||
      curRow.find(".bill_stone_price").val() == ""
        ? 0
        : curRow.find(".bill_stone_price").val();

    var tax_type = calculation_type == 3 ? 1 : 2;

    var certification_price =
      isNaN(curRow.find(".certification_cost").val()) ||
      curRow.find(".certification_cost").val() == ""
        ? 0
        : curRow.find(".certification_cost").val();

    var material_price =
      isNaN(curRow.find(".bill_material_price").val()) ||
      curRow.find(".bill_material_price").val() == ""
        ? 0
        : curRow.find(".bill_material_price").val();

    var total_price = 0;

    var rate_per_grm = 0;

    var base_value_amt = 0;

    var arrived_value_amt = 0;

    var arrived_value_tax = 0;

    var base_value_tax = 0;

    var total_tax_rate = 0;

    var cus_state = $("#cus_state").val();

    var cmp_state = $("#cmp_state").val();

    var cgst = 0;

    var igst = 0;

    var sgst = 0;

    /*if(curRow.find('.sale_metal_type').val() == 1){

		  rate_per_grm = (isNaN($('.per-grm-sale-value').html()) || $('.per-grm-sale-value').html() == '')  ? 0 : parseFloat($('.per-grm-sale-value').html());

		}else{

			 rate_per_grm = (isNaN($('.silver_per-grm-sale-value').html()) || $('.silver_per-grm-sale-value').html() == '')  ? 0 : parseFloat($('.silver_per-grm-sale-value').html());

		}*/

    //rate_field=curRow.find('.rate_field').val();

    //var rate_per_grm = (isNaN($('#'+rate_field).val()) ||$('#'+rate_field).val() == '')  ? 0 : parseFloat($('#'+rate_field).val());

    var rate_per_grm = average_rate;

    var inclusive_tax_rate = 0;

    var total_tax = 0;

    var discount = 0;

    var disc_type = curRow.find(".disc_type").val();

    var disc_amt = $("#summary_discount_amt").val();

    var total_sales_amt = $(".sale_amt_with_tax").html();

    var tax_group = curRow.find(".sale_tax_group").val();

    var retail_max_mc =
      isNaN(curRow.find(".bill_mc").val()) ||
      curRow.find(".bill_mc").val() == ""
        ? 0
        : curRow.find(".bill_mc").val();

    var tot_wastage =
      isNaN(curRow.find(".bill_wastage").val()) ||
      curRow.find(".bill_wastage").val() == ""
        ? 0
        : curRow.find(".bill_wastage").val();

    if (calculation_type == 0) {
      var wast_wgt = parseFloat(
        parseFloat(gross_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * curRow.find(".sale_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      } else {
        var mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) *
            (retail_max_mc / 100)
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 1) {
      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * net_wt)
            : parseFloat(retail_max_mc * curRow.find(".sale_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      } else {
        var mc_type = parseFloat(
          parseFloat(retail_max_mc * net_wt) * curRow.find(".sale_pcs").val()
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 2) {
      //var wast_wgt      = parseFloat(parseFloat(net_wt) * parseFloat(tot_wastage/100)).toFixed(3);

      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * curRow.find(".sale_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(rate_per_grm) *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price)
        ).toFixed(2);
      } else {
        var mc_type = parseFloat(
          parseFloat(retail_max_mc * gross_wt) * curRow.find(".sale_pcs").val()
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(rate_per_grm) *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price)
        ).toFixed(2);
      }
    } else if (calculation_type == 3 || calculation_type == 4) {
      rate_with_mc = parseFloat(
        isNaN(curRow.find(".tag_sales_value").val()) ||
          curRow.find(".tag_sales_value").val() == ""
          ? 0
          : curRow.find(".tag_sales_value").val()
      );
    }

    let charge_value = isNaN(parseFloat(curRow.find(".charge_value").val()))
      ? 0
      : curRow.find(".charge_value").val();

    rate_with_mc = parseFloat(rate_with_mc) + parseFloat(charge_value);

    if (disc_amt > 0) {
      var disc_per = parseFloat(
        (disc_amt / parseFloat(total_sales_amt + adv_paid_amt)) * 100
      );

      var discount = parseFloat((rate_with_mc * disc_per) / 100);

      rate_with_mc = parseFloat(rate_with_mc - discount).toFixed(2);

      if (disc_type == 2) {
        var wastage_amt = parseFloat(wast_wgt * rate_per_grm);

        var mc_wast_amt = parseFloat(wastage_amt + mc_type);

        var disc_per = parseFloat((discount / mc_wast_amt) * 100);

        var wast_disc = parseFloat(wastage_amt * disc_per * 100);

        var mc_disc = parseFloat(mc_type * disc_per * 100);
      }
    }

    console.log("disc_per:" + disc_per);

    console.log("wast_disc:" + wast_disc);

    console.log("mc_disc:" + mc_disc);

    console.log("discount:" + discount);

    if (tax_type == 1) {
      // GST Inclusive

      curRow.find(".bill_amount").val(parseFloat(rate_with_mc).toFixed(2));

      var total_tax_rate = 0;

      var total_tax_rate = parseFloat(
        calculate_inclusiveGST(rate_with_mc, tax_group)
      ).toFixed(2);

      if (cus_state == cmp_state) {
        cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);

        sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);
      } else {
        igst = total_tax_rate;
      }

      console.log(total_tax_rate);

      curRow.find(".tax_amt").html(parseFloat(total_tax_rate).toFixed(2));

      curRow.find(".total_tax").val(parseFloat(total_tax_rate).toFixed(2));

      curRow.find(".bill_amount").val(parseFloat(rate_with_mc).toFixed(2));

      curRow.find(".sale_cgst").val(cgst);

      curRow.find(".sale_sgst").val(sgst);

      curRow.find(".sale_igst").val(igst);
    } else {
      var total_tax_rate = 0;

      var base_value_tax = parseFloat(
        calculate_base_value_tax(rate_with_mc, tax_group)
      ).toFixed(2);

      var base_value_amt = parseFloat(
        parseFloat(rate_with_mc) + parseFloat(base_value_tax)
      ).toFixed(2);

      var arrived_value_tax = parseFloat(
        calculate_arrived_value_tax(base_value_amt, tax_group)
      ).toFixed(2);

      var arrived_value_amt = parseFloat(
        parseFloat(base_value_amt) + parseFloat(arrived_value_tax)
      ).toFixed(2);

      var total_tax_rate = parseFloat(
        parseFloat(base_value_tax) + parseFloat(arrived_value_tax)
      ).toFixed(2);

      //total_tax = getTaxValueForItem(rate_with_mc, tax_group);

      inclusive_tax_rate = arrived_value_amt;

      if (cus_state == cmp_state) {
        cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);

        sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);
      } else {
        igst = total_tax_rate;
      }

      curRow.find(".tax_amt").html(parseFloat(total_tax_rate).toFixed(2));

      curRow.find(".total_tax").val(parseFloat(total_tax_rate).toFixed(2));

      curRow.find(".bill_amount").val(inclusive_tax_rate);

      curRow.find(".sale_cgst").val(cgst);

      curRow.find(".sale_sgst").val(sgst);

      curRow.find(".sale_igst").val(igst);
    }

    curRow.find(".tax_type").val(tax_type);

    curRow.find(".bill_taxable_amt").html(parseFloat(rate_with_mc).toFixed(2));

    curRow.find(".bill_discount").val(parseFloat(discount).toFixed(2));

    curRow.find(".per_grm_amount").val(rate_per_grm);

    curRow.find(".bill_wastage_wt").val(wast_wgt);

    curRow.find(".est_wastage_wt").html(wast_wgt);

    console.log("calculation_type:" + calculation_type);

    console.log("rate_with_mc:" + rate_with_mc);

    console.log("wast_wgt:" + wast_wgt);

    console.log("mc:" + curRow.find(".bill_mctype").val());

    console.log("mc_type:" + mc_type);

    console.log("retail_max_mc:" + retail_max_mc);

    console.log("inclusive_tax_rate:" + inclusive_tax_rate);

    console.log("total_tax:" + total_tax);

    console.log("tax_group:" + tax_group);

    console.log("bill_stone_price:" + stone_price);

    console.log("material_price:" + material_price);

    console.log("certification_price:" + certification_price);

    console.log("rate_per_grm:" + rate_per_grm);

    console.log("------------");
  });

  calculate_sales_details(); //Calculate Sales Details

  calculate_purchase_details(); //Calculate Purchase Details
}

$("#apply_disc").on("click", function (e) {
  e.preventDefault();

  var discount =
    $("#summary_discount_amt").val() != ""
      ? $("#summary_discount_amt").val()
      : 0;

  // Reset bill_mc with actual value before calculation

  $("#billing_sale_details > tbody  > tr").each(function (idx, tr) {
    var curRow = $(this);

    var bill_mc_value = curRow.find(".bill_mc_value").val();

    curRow.find(".discount").val(0);

    curRow.find(".bill_discount").val(0);

    var bill_wastage_per = curRow.find(".bill_wastage_per").val();

    var bill_wastage_wt = curRow.find(".bill_wastage_wt").val();

    curRow.find(".est_wastage_wt").html(bill_wastage_wt);

    curRow.find(".bill_wastage").val(bill_wastage_per);

    curRow.find(".est_wastage").html(bill_wastage_per);

    curRow.find(".bill_mc").val(bill_mc_value);

    var mc_type = curRow.find(".bill_mctype").val();

    curRow.find(".mc_dis").val(0);

    curRow
      .find(".making_charge")
      .html(
        mc_type == 1
          ? bill_mc_value + "" + "Per Gram"
          : bill_mc_value + "" + "Per Piece"
      );
  });

  $("#billing_sale_details > tbody  > tr").each(function (index, tr) {
    var curRow = $(this);

    var gross_wt =
      isNaN(curRow.find(".bill_gross_val").val()) ||
      curRow.find(".bill_gross_val").val() == ""
        ? 0
        : curRow.find(".bill_gross_val").val();

    var less_wt =
      isNaN(curRow.find(".bill_less_val").val()) ||
      curRow.find(".bill_less_val").val() == ""
        ? 0
        : curRow.find(".bill_less_val").val();

    var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

    var retail_mc = curRow.find(".bill_mc").val();

    var bill_mc_value = parseFloat(curRow.find(".bill_mc_value").val()).toFixed(
      2
    );

    var mc_type = curRow.find(".bill_mctype").val();

    var mc_dis = curRow.find(".mc_dis").val();

    var sale_est_itm_id = curRow.find(".sale_est_itm_id").val();

    var calculation_type =
      isNaN(curRow.find(".sale_cal_type").val()) ||
      curRow.find(".sale_cal_type").val() == ""
        ? 0
        : curRow.find(".sale_cal_type").val();

    var discount_used = 0;

    discount_used = checkDiscount();

    if (discount > 0 && discount_used < discount) {
      if (curRow.find(".bill_mc").val() > 0) {
        // Having Balance in MC Value

        retail_mc = parseFloat(
          discount_used > 0
            ? parseFloat(discount) - parseFloat(discount_used)
            : discount
        );

        if (calculation_type == 0) {
          var retail_max_mc = parseFloat(
            curRow.find(".bill_mctype").val() == 1
              ? (parseFloat(bill_mc_value * gross_wt) - parseFloat(retail_mc)) /
                  gross_wt
              : parseFloat(bill_mc_value - retail_mc)
          ).toFixed(2);
        } else if (calculation_type == 1) {
          var retail_max_mc = parseFloat(
            curRow.find(".bill_mctype").val() == 1
              ? (parseFloat(bill_mc_value * net_wt) - parseFloat(retail_mc)) /
                  net_wt
              : parseFloat(bill_mc_value - retail_mc)
          ).toFixed(2);
        } else if (calculation_type == 2) {
          var retail_max_mc = parseFloat(
            curRow.find(".bill_mctype").val() == 1
              ? (parseFloat(bill_mc_value * gross_wt) - parseFloat(retail_mc)) /
                  gross_wt
              : parseFloat(bill_mc_value - retail_mc)
          ).toFixed(2);
        }

        if (retail_mc < bill_mc_value) {
          // Discount value less than Available MC

          curRow.find(".bill_mc").val(retail_max_mc);

          curRow
            .find(".making_charge")
            .html(
              mc_type == 1
                ? retail_max_mc + "" + "Per Gram"
                : retail_max_mc + "" + "Per Piece"
            );

          curRow.find(".mc_dis").val(1);

          curRow.find(".discount").val(parseFloat(retail_mc));

          curRow.find(".bill_discount").val(parseFloat(retail_mc));

          return false;
        } else {
          // Discount value greater than Available MC

          discount_used =
            parseFloat(discount_used) +
            parseFloat(curRow.find(".bill_mc").val()); // Update Discount Used

          curRow.find(".bill_mc").val(0);

          var new_mc = curRow.find(".bill_mc").val();

          curRow
            .find(".making_charge")
            .html(
              mc_type == 1
                ? new_mc + "" + "Per Gram"
                : new_mc + "" + "Per Piece"
            );

          curRow.find(".discount").val(bill_mc_value);

          curRow.find(".bill_discount").val(bill_mc_value);

          curRow.find(".mc_dis").val(1);

          //return false;
        }
      } else {
        curRow
          .find(".making_charge")
          .html(mc_type == 1 ? 0 + "" + "Per Gram" : 0 + "" + "Per Piece");

        curRow.find(".bal_mc").val(0);

        console.log("No Blc MC " + sale_est_itm_id + " :");

        //return false;
      }
    } else {
      curRow.find(".bill_mc").val(bill_mc_value);

      curRow.find(".mc_dis").val(0);

      curRow.find(".bal_mc").val(0);

      curRow
        .find(".making_charge")
        .html(
          mc_type == 1
            ? bill_mc_value + "" + "Per Gram"
            : bill_mc_value + "" + "Per Piece"
        );
    }
  });

  var discount_used = checkDiscount();

  var discount_wastage = parseFloat(discount) - parseFloat(discount_used);

  console.log(discount_used);

  console.log(discount_wastage);

  if (discount_wastage > 0) {
    $("#billing_sale_details > tbody  > tr").each(function (idx, tr) {
      if (discount_used > 0) {
        var curRow = $(this);

        var mc_dis = curRow.find(".mc_dis").val();

        var discount = curRow.find(".discount").val();

        var gross_wt =
          isNaN(curRow.find(".bill_gross_val").val()) ||
          curRow.find(".bill_gross_val").val() == ""
            ? 0
            : curRow.find(".bill_gross_val").val();

        var less_wt =
          isNaN(curRow.find(".bill_less_val").val()) ||
          curRow.find(".bill_less_val").val() == ""
            ? 0
            : curRow.find(".bill_less_val").val();

        var net_wt =
          isNaN(curRow.find(".bill_net_val").val()) ||
          curRow.find(".bill_net_val").val() == ""
            ? 0
            : curRow.find(".bill_net_val").val();

        var retail_mc = curRow.find(".bill_mc").val();

        var calculation_type =
          isNaN(curRow.find(".sale_cal_type").val()) ||
          curRow.find(".sale_cal_type").val() == ""
            ? 0
            : curRow.find(".sale_cal_type").val();

        var tot_wastage =
          isNaN(curRow.find(".bill_wastage").val()) ||
          curRow.find(".bill_wastage").val() == ""
            ? 0
            : curRow.find(".bill_wastage").val();

        var wastage_wt =
          isNaN(curRow.find(".est_wastage_wt").html()) ||
          curRow.find(".est_wastage_wt").html() == ""
            ? 0
            : curRow.find(".est_wastage_wt").html();

        if (curRow.find("td:eq(0) .sale_metal_type").val() == 1) {
          var rate_per_grm =
            isNaN($(".per-grm-sale-value").html()) ||
            $(".per-grm-sale-value").html() == ""
              ? 0
              : parseFloat($(".per-grm-sale-value").html());
        } else {
          var rate_per_grm =
            isNaN($(".silver_per-grm-sale-value").html()) ||
            $(".silver_per-grm-sale-value").html() == ""
              ? 0
              : parseFloat($(".silver_per-grm-sale-value").html());
        }

        var wastage_amount = parseFloat(
          parseFloat(wastage_wt * rate_per_grm) - discount_wastage
        );

        var wast_wgt = parseFloat(wastage_amount / rate_per_grm);

        if (calculation_type == 0) {
          var wast_per = parseFloat((wast_wgt / gross_wt) * 100);
        } else if (calculation_type == 1) {
          var wast_per = parseFloat((wast_wgt / net_wt) * 100);
        } else if (calculation_type == 2) {
          var wast_per = parseFloat((wast_wgt / net_wt) * 100);
        }

        discount_used = discount_wastage - wast_per;

        console.log("discount_used" + discount_used);

        curRow.find(".bill_wastage").val(wast_per);

        curRow.find(".est_wastage").html(wast_per);

        curRow.find(".est_wastage_wt").html(wast_wgt);

        curRow
          .find(".discount")
          .val(parseFloat(discount) + parseFloat(discount_wastage));

        curRow
          .find(".bill_discount")
          .val(parseFloat(discount) + parseFloat(discount_wastage));

        console.log("Discount Wastage" + discount_wastage);

        console.log("wastage_amount" + wastage_amount);

        console.log("wast_wgt" + wast_wgt);

        console.log("wast_per" + wast_per);
      }
    });
  }

  calculateSaleBillRowTotal();
});

function checkDiscount() {
  var discount = 0;

  var bill_mc = 0;

  var bal_mc = 0;

  var total_mc_value = 0;

  $("#billing_sale_details > tbody  > tr").each(function (index, tr) {
    var curRow = $(this);

    bill_mc += parseFloat(parseFloat(curRow.find(".discount").val()));

    total_mc_value += parseFloat(curRow.find(".bill_mc_value").val());
  });

  discount = parseFloat(total_mc_value) - parseFloat(bill_mc);

  return bill_mc;
}

function calculatePurchaseBillRowTotal() {
  $("#purchase_item_details > tbody tr").each(function (idx, row) {
    curRow = $(this);

    curRow = $(this);

    var gross_wt =
      isNaN(curRow.find(".pur_gross_val").val()) ||
      curRow.find(".pur_gross_val").val() == ""
        ? 0
        : curRow.find(".pur_gross_val").val();

    var less_wt =
      isNaN(curRow.find(".pur_less_val").val()) ||
      curRow.find(".pur_less_val").val() == ""
        ? 0
        : curRow.find(".pur_less_val").val();

    var dust_wt =
      isNaN(curRow.find(".est_old_dust_val").val()) ||
      curRow.find(".est_old_dust_val").val() == ""
        ? 0
        : curRow.find(".est_old_dust_val").val();

    var stone_wt =
      isNaN(curRow.find(".est_old_stone_val").val()) ||
      curRow.find(".est_old_stone_val").val() == ""
        ? 0
        : curRow.find(".est_old_stone_val").val();

    var other_stone_wt =
      isNaN(curRow.find(".other_stone_wt").val()) ||
      curRow.find(".other_stone_wt").val() == ""
        ? 0
        : curRow.find(".other_stone_wt").val();

    var other_stone_price =
      isNaN(curRow.find(".other_stone_price").val()) ||
      curRow.find(".other_stone_price").val() == ""
        ? 0
        : curRow.find(".other_stone_price").val();

    var rate_per_grm =
      isNaN(curRow.find(".bill_rate_per_grm").val()) ||
      curRow.find(".bill_rate_per_grm").val() == ""
        ? 0
        : curRow.find(".bill_rate_per_grm").val();

    var net_wt = (
      parseFloat(gross_wt) -
      (parseFloat(dust_wt) + parseFloat(stone_wt) + parseFloat(other_stone_wt))
    ).toFixed(3);

    var total_price = 0;

    //var rate_per_grm = 0;

    /*	if(curRow.find('.pur_metal_type').val() == 1){

			  rate_per_grm = (isNaN($('.per-grm-sale-value').html()) || $('.per-grm-sale-value').html() == '')  ? 0 : parseFloat($('.per-grm-sale-value').html());

			}else{

				 rate_per_grm = (isNaN($('.silver_per-grm-sale-value').html()) || $('.silver_per-grm-sale-value').html() == '')  ? 0 : parseFloat($('.silver_per-grm-sale-value').html());

			}	*/

    var discount =
      isNaN(curRow.find(".pur_discount").val()) ||
      curRow.find(".pur_discount").val() == ""
        ? 0
        : curRow.find(".pur_discount").val();

    var tot_wastage =
      isNaN(curRow.find(".pur_wastage").val()) ||
      curRow.find(".pur_wastage").val() == ""
        ? 0
        : curRow.find(".pur_wastage").val();

    cal_weight = parseFloat(net_wt * (tot_wastage / 100)).toFixed(3);

    total_price = parseFloat(
      Math.round(
        parseFloat(rate_per_grm) *
          (parseFloat(net_wt) - parseFloat(cal_weight)) +
          parseFloat(discount)
      )
    );

    total_price = parseFloat(
      parseFloat(total_price) + parseFloat(other_stone_price)
    ).toFixed(2);

    curRow.find(".bill_amount").val(total_price);

    curRow.find(".wastage_wt").html(cal_weight);

    curRow.find(".pur_wastage_wt").val(cal_weight);

    curRow.find(".bill_rate_per_grm").val(rate_per_grm);

    console.log("Purchase Bill Items");

    console.log("total_price:" + total_price);

    console.log("rate_per_grm:" + rate_per_grm);

    console.log("discount:" + discount);

    console.log("tot_wastage:" + tot_wastage);

    console.log("cal_weight:" + cal_weight);

    console.log("net_wt:" + net_wt);

    console.log("other_stone_wt:" + other_stone_wt);

    console.log("--------------");
  });

  calculate_order_adv_purchase_details();

  calculate_purchase_details();

  //calculate_sales_details();
}

function calculate_base_value_tax(taxcallrate, taxgroup) {
  var totaltax = 0;

  console.log(tax_details);

  $.each(tax_details, function (idx, taxitem) {
    if (taxitem.tgi_tgrpcode == taxgroup) {
      if (taxitem.tgi_calculation == 1) {
        if (taxitem.tgi_type == 1) {
          totaltax +=
            parseFloat(taxcallrate) *
            (parseFloat(taxitem.tax_percentage) / 100);
        } else {
          totaltax -=
            parseFloat(taxcallrate) *
            (parseFloat(taxitem.tax_percentage) / 100);
        }
      }
    }
  });

  return totaltax;
}

function calculate_inclusiveGST(taxcallrate, taxgroup) {
  var totaltax = 0;

  console.log(tax_details);

  $.each(tax_details, function (idx, taxitem) {
    if (taxitem.tgi_tgrpcode == taxgroup) {
      //	Remove GST = 490*100/(100+3) = 475.7281553398058

      //	GST 3% = 490 - 475.7281553398058 = 14.2718446601942

      amt_without_gst =
        (parseFloat(taxcallrate) * 100) /
        (100 + parseFloat(taxitem.tax_percentage));

      totaltax += parseFloat(taxcallrate) - parseFloat(amt_without_gst);
    }
  });

  return totaltax;
}

function calculate_arrived_value_tax(taxcallrate, taxgroup) {
  var totaltax = 0;

  console.log(tax_details);

  $.each(tax_details, function (idx, taxitem) {
    if (taxitem.tgi_tgrpcode == taxgroup) {
      if (taxitem.tgi_calculation == 2) {
        if (taxitem.tgi_type == 1) {
          totaltax +=
            parseFloat(taxcallrate) *
            (parseFloat(taxitem.tax_percentage) / 100);
        } else {
          totaltax -=
            parseFloat(taxcallrate) *
            (parseFloat(taxitem.tax_percentage) / 100);
        }
      }
    }
  });

  return totaltax;
}

function getTaxValueForItem(taxcallrate, taxgroup) {
  var totaltax = 0;

  console.log(tax_details);

  $.each(tax_details, function (idx, taxitem) {
    if (taxitem.tgi_tgrpcode == taxgroup) {
      if (taxitem.tgi_calculation == 1) {
        if (taxitem.tgi_type == 1) {
          totaltax +=
            parseFloat(taxcallrate) *
            (parseFloat(taxitem.tax_percentage) / 100);
        } else {
          totaltax -=
            parseFloat(taxcallrate) *
            (parseFloat(taxitem.tax_percentage) / 100);
        }
      }

      if (taxitem.tgi_calculation == 2) {
        if (taxitem.tgi_type == 1) {
          totaltax +=
            parseFloat(taxcallrate) *
            (parseFloat(taxitem.tax_percentage) / 100);
        } else {
          totaltax -=
            parseFloat(taxcallrate) *
            (parseFloat(taxitem.tax_percentage) / 100);
        }
      }
    }
  });

  return totaltax;
}

function deleteEstimation(id) {
  my_Date = new Date();

  $("div.overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/estimation/delete/" +
      id +
      "?nocache=" +
      my_Date.getUTCSeconds(),

    type: "POST",

    success: function (data) {
      //	window.location.reload();

      $("div.overlay").css("display", "none");
    },

    error: function (error) {
      alert("error");

      $("div.overlay").css("display", "none");
    },
  });
}

function add_customer_25_12_2023() {
  //replace the function

  var billing_for = $("input[name='billing[billing_for]']:checked").val();

  var gender = $("input[name='customer[gender]']:checked").val();

  var form_data = new FormData();

  form_data.append("cusName", $("#cus_first_name").val());

  form_data.append("cusMobile", $("#cus_mobile").val());

  form_data.append("cusBranch", $("#id_branch").val());

  form_data.append("id_village", $("#sel_village").val());

  form_data.append("gst_no", $("#gst_no").val());

  form_data.append("cus_type", billing_for == 2 ? 2 : 1);

  form_data.append("id_country", $("#country").val());

  form_data.append("id_state", $("#state").val());

  form_data.append("id_city", $("#city").val());

  form_data.append("address1", $("#address1").val());

  form_data.append("address2", $("#address2").val());

  form_data.append("address3", $("#address3").val());

  form_data.append("pincode", $("#pin_code_add").val());

  form_data.append("mail", $("#cus_email").val());

  form_data.append("cust_img", $("#cus_image")[0].files[0]);

  form_data.append("pan_no", $("#pan").val());

  form_data.append("aadharid", $("#aadharid").val());

  form_data.append("title", $("#title").val());

  form_data.append("gender", gender);

  form_data.append("id_profession", $("#professionval").val());

  form_data.append("date_of_birth", $("#date_of_birth").val());

  form_data.append("date_of_wed", $("#date_of_wed").val());

  form_data.append("dl_no", $("#dl").val());

  form_data.append("pp_no", $("#pp").val());

  //	data= {'cus_type':(billing_for==2 ? 2:1),'pan_no':$('#pan').val(),'aadharid':$('#aadharid').val(),'cusName': $('#cus_first_name').val(), 'cusMobile' : $('#cus_mobile').val(), 'cusBranch' : $('#id_branch').val(),'id_village':$('#sel_village').val(),'id_country':$('#country').val(),'id_state':$('#state').val(),'id_city':$('#city').val(),'address1':$('#address1').val(),'address2':$('#address2').val(),'address3':$('#address3').val(),'pincode':$('#pin_code_add').val(),'mail':$('#cus_email').val(),'gst_no':$('#gst_no').val()}, //Need to update login branch id here from session

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/createNewCustomer/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    // data: {'cus_type':(billing_for==2 ? 2:1),'pan_no':$('#pan').val(),'aadharid':$('#aadharid').val(),'cusName': $('#cus_first_name').val(), 'cusMobile' : $('#cus_mobile').val(), 'cusBranch' : $('#id_branch').val(),'id_village':$('#sel_village').val(),'id_country':$('#country').val(),'id_state':$('#state').val(),'id_city':$('#city').val(),'address1':$('#address1').val(),'address2':$('#address2').val(),'address3':$('#address3').val(),'pincode':$('#pin_code_add').val(),'mail':$('#cus_email').val(),'gst_no':$('#gst_no').val()}, //Need to update login branch id here from session

    data: form_data,

    cache: false,

    enctype: "multipart/form-data",

    contentType: false,

    processData: false,

    success: function (data) {
      if (data.success == true) {
        $("#confirm-add").modal("toggle");

        if (ctrl_page[1] == "receipt") {
          $("#id_customer").val(data.response.id_customer);

          $("#name").val(
            data.response.firstname + " - " + data.response.username
          );

          var receipt_type = $(
            "input:radio[name='receipt[receipt_type]']:checked"
          ).val();

          if (receipt_type == 1) {
            get_customer_credit_details(data.response.id_customer);
          }
        } else if (ctrl_page[1] == "service_bill") {
          $("#bill_cus_id").val(data.response.id_customer);

          $("#cus_search").val(
            data.response.firstname + " - " + data.response.username
          );
        } else if (ctrl_page[1] == "billing") {
          $("#bill_cus_name").val(
            data.response.firstname + " - " + data.response.username
          );

          $("#bill_cus_id").val(data.response.id_customer);

          $("#cus_first_name").val("");

          $("#cus_mobile").val("");

          customer_detail_modal(data.response.id_customer);

          get_customer_address_det();
        } else if (ctrl_page[1] == "bill_split") {
          var catRow = $("#row_active_id").val();

          $("#" + catRow)
            .find(".id_customer")
            .val(data.response.id_customer);

          $("#" + catRow)
            .find(".cus_name")
            .val(data.response.firstname + " - " + data.response.username);
        }
      } else {
        alert(data.message);
      }
    },
  });
}

function update_customer_25_12_2023() {
  ////replace the function

  var billing_for = $("input[name='billing[billing_for]']:checked").val();

  var gender = $("input[name='customer[gender]']:checked").val();

  var form_data = new FormData();

  form_data.append("cusName", $("#cus_first_name").val());

  form_data.append("cusMobile", $("#cus_mobile").val());

  form_data.append("cusBranch", $("#id_branch").val());

  form_data.append("id_village", $("#sel_village").val());

  form_data.append("gst_no", $("#gst_no").val());

  form_data.append("cus_type", billing_for == 2 ? 2 : 1);

  form_data.append("id_country", $("#country").val());

  form_data.append("id_state", $("#state").val());

  form_data.append("id_city", $("#city").val());

  form_data.append("address1", $("#address1").val());

  form_data.append("address2", $("#address2").val());

  form_data.append("address3", $("#address3").val());

  form_data.append("pincode", $("#pin_code_add").val());

  form_data.append("mail", $("#cus_email").val());

  form_data.append("cust_img", $("#cus_image")[0].files[0]);

  form_data.append("pan_no", $("#pan").val());

  form_data.append("aadharid", $("#aadharid").val());

  form_data.append("id_customer", $("#id_customer").val());

  form_data.append("title", $("#title").val());

  form_data.append("gender", gender);

  form_data.append("id_profession", $("#professionval").val());

  form_data.append("date_of_birth", $("#date_of_birth").val());

  form_data.append("date_of_wed", $("#date_of_wed").val());

  form_data.append("dl_no", $("#dl").val());

  form_data.append("pp_no", $("#pp").val());

  //data: {'cus_type':(billing_for==2 ? 2 :1),'id_customer':$('#id_customer').val(),'pan_no':$('#pan').val(),'aadharid':$('#aadharid').val(),'cusName': $('#cus_first_name').val(), 'cusMobile' : $('#cus_mobile').val(), 'cusBranch' : $('#id_branch').val(),'id_village':$('#sel_village').val(),'id_country':$('#country').val(),'id_state':$('#state').val(),'id_city':$('#city').val(),'address1':$('#address1').val(),'address2':$('#address2').val(),'address3':$('#address3').val(),'pincode':$('#pin_code_add').val(),'mail':$('#cus_email').val(),'gst_no':$('#gst_no').val()},

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/updateNewCustomer/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: form_data,

    cache: false,

    enctype: "multipart/form-data",

    contentType: false,

    processData: false,

    //Need to update login branch id here from session

    success: function (data) {
      if (data.success == true) {
        $("#cus_state").val($("#state").val());

        $("#cus_country").val($("#country").val());

        $("#confirm-add").modal("toggle");

        $("#bill_cus_name").val(
          data.response.firstname + " - " + data.response.mobile
        );

        $("#from_cus_mobile").val(data.response.mobile);

        $("#bill_cus_id").val(data.response.id_customer);

        calculateSaleBillRowTotal();

        //calculatePurchaseBillRowTotal();

        calculate_salesReturn_details();

        $.toaster({
          priority: "success",
          title: "Success!",
          message: "" + "</br>" + "Customer Updated SuccessFully.",
        });

        get_customer_address_det();
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>" + data.message,
        });
      }
    },
  });
}

function getSearchCustomers(searchTxt) {
  var billing_for = $("input[name='billing[billing_for]']:checked").val();

  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/getCustomersBySearch/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      searchTxt: searchTxt,
      billing_for: billing_for,
      esti_for: billing_for == 1 ? 1 : 3,
    },

    success: function (data) {
      var bill_type = $("input[name='billing[bill_type]']:checked").val();

      $("#bill_cus_name").autocomplete({
        source: data,

        select: function (e, i) {
          e.preventDefault();

          $("#cus_info").html("");

          $("#bill_cus_name").val(i.item.label);

          $("#bill_cus_id").val(i.item.value);

          $("#from_cus_mobile").val(i.item.mobile);

          $("#cus_village").html(i.item.village_name);

          $("#cus_info").append(
            i.item.vip == "Yes"
              ? "<span class='label bg-orange'><i class='fa fa-fw fa-star'></i> V I P</span>"
              : ""
          );

          $("#cus_info").append(
            i.item.accounts > 0
              ? "&nbsp;<span class='label label-info'>Chit Customer</span>"
              : ""
          );

          $("#cus_state").val(i.item.cus_state);

          //$("#cmp_state").val(i.item.cmp_state);

          $("#cus_del_state").val(i.item.id_state);

          $("#cus_del_country").val(i.item.id_country);

          get_customer_address_det();

          if (bill_type == 7 || bill_type == 3) {
            getCustomerSalesDetails(i.item.value);
          }

          //TCS Calculation

          if (billing_for == 2) {
            getCompanyPurchaseAmount(i.item.value);
          }

          customer_detail_modal(i.item.value);
          // Customer Purchase and Account Details
          get_tcs_percent(i.item.value);

          if (bill_type == 8) {
            getCreditPending(i.item.value);
          }
        },

        change: function (event, ui) {
          if (ui.item === null) {
            $(this).val("");

            $("#bill_cus_name").val("");

            $("#bill_cus_id").val("");

            $("#cus_village").html("");

            $("#cus_info").html("");

            $("#from_cus_mobile").val("");

            /*$("#chit_cus").html("");

							$("#vip_cus").html("");*/
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (searchTxt != "") {
            if (i.content.length === 0) {
              var mobile = $("#bill_cus_name").val();
              if (mobile.length == 10) {
                create_customer(mobile);
                $("#customerAlert").html("");
              } else {
                $.toaster({
                  priority: "danger",
                  title: "Warning!",
                  message:
                    "" + "</br>" + "Enter a valid customer name / mobile",
                  settings: { timeout: 1500 },
                });
              }
            } else {
              $("#customerAlert").html("");
            }
          } else {
          }
        },

        minLength: 3,
      });
    },
  });
}

function getSearchTags(tagId) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getTaggingBySearch/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { tagId: tagId, id_branch: $("#id_branch").val() },

    success: function (data) {
      $("#searchTagAlert span").remove();

      if (data.length == 0) {
        $("#searchTagAlert").append(
          "<span>No record found for given Tag no</span>"
        );

        $("#searchTagAlert span").delay(10000).fadeOut(500);
      } else if (data[0].tag_status != 0) {
        if (data[0].tag_status == 1) {
          $("#searchTagAlert").append("<span>Tag Already sold.</span>");

          $("#searchTagAlert span").delay(10000).fadeOut(500);
        } else {
          $("#searchTagAlert").append("<span>Tag was deleted.</span>");

          $("#searchTagAlert span").delay(10000).fadeOut(500);
        }
      } else {
        var rowExist = false;

        //$('#bill_type_sales').prop('checked', true);

        $(".sale_details").show();

        $("#billing_sale_details > tbody tr").each(function (bidx, brow) {
          bill_sale_row = $(this);

          if (data[0].tag_id == bill_sale_row.find(".sale_tag_id").val()) {
            rowExist = true;

            $("#searchTagAlert").append(
              "<span>TagNo already added in this bill.</span>"
            );

            $("#searchTagAlert span").delay(10000).fadeOut(500);
          }
        });

        if (!rowExist) {
          var stone_details = [];

          var stone_price = 0;

          var certification_cost = 0;

          var tot_length = $("#billing_sale_details tbody tr").length;

          var rate_per_grm =
            isNaN($(".per-grm-sale-value").html()) ||
            $(".per-grm-sale-value").html() == ""
              ? 0
              : parseFloat($(".per-grm-sale-value").html());

          /*if(data[0].advance_details.length>0)

					{

							var paid_advance=0;

							var paid_weight=0;



						$.each(data[0].advance_details,function(key,item){



								if(item.store_as==1)

								{

									paid_advance +=parseFloat(item.paid_advance);

								}

								else

								{

									paid_weight +=parseFloat(item.paid_weight);



									paid_advance +=parseFloat(item.paid_weight*rate_per_grm);

								}



						});

						$('.summary_adv_paid_wt').html(paid_weight);

						$('.summary_adv_paid_amt').html(parseFloat(paid_advance).toFixed(2));



					}*/

          $.each(data[0].stone_details, function (key, item) {
            stone_price += parseFloat(item.amount);

            certification_cost += parseFloat(item.certification_cost);

            stone_details.push({
              stone_id: item.stone_id,
              stone_pcs: item.pieces,
              stone_wt: item.wt,
              stone_price: item.amount,
              certification_cost: item.certification_cost,
            });
          });

          var row =
            '<tr id="' +
            tot_length +
            '">' +
            "<td><span>" +
            data[0].hsn_code +
            '</span><input type="hidden" class="sale_pro_hsn" name="sale[hsn]" value="' +
            data[0].hsn_code +
            '" /><input type="hidden" class="sale_type" name="sale[sourcetype][]" value="1" /><input type="hidden" class="sale_item_type itemtype" name="sale[itemtype][]" value="0" /><input type="hidden" class="is_est_details" name="sale[is_est_details][]" value="2" /><input type="hidden" class="est_itm_id" value="' +
            data[0].tag_id +
            '" /><input type="hidden" class="sale_cal_type" value="' +
            data[0].calculation_based_on +
            '" name="sale[calltype][]" /><input type="hidden" class="sale_metal_type" value="' +
            data[0].metal_type +
            '" /><input type="hidden" class="sale_purity" value="' +
            data[0].purname +
            '"  name="sale[purity][]" /><input type="hidden" class="sale_size" value="' +
            data[0].size +
            '"  name="sale[size][]" /><input type="hidden" class="sale_uom" value="' +
            data[0].uom +
            '"  name="sale[uom][]" /><input type="hidden" class="total_tax" name="sale[total_tax][]"><input type="hidden" class="stock_type" value=""  /><input type="hidden" class="is_non_tag" name="sale[is_non_tag][]" value="" /></td>' +
            "<td><span>" +
            data[0].product_short_code +
            '</span><input class="sale_product_id" type="hidden" name="sale[product][]" value="' +
            data[0].lot_product +
            '" /><input type="hidden" class="disc_type" value="' +
            data[0].disc_type +
            '"></td>' +
            "<td><span>" +
            data[0].design_code +
            '</span><input type="hidden" class="sale_design_id" name="sale[design][]" value="' +
            data[0].design_id +
            '" /></td>' +
            "<td><span>" +
            data[0].piece +
            '</span><input type="hidden" class="sale_pcs" name="sale[pcs][]" value="' +
            data[0].piece +
            '" /></td>' +
            "<td><span>" +
            data[0].gross_wt +
            '</span><input type="hidden" class="bill_gross_val" name="sale[gross][]" value="' +
            data[0].gross_wt +
            '" /></td>' +
            "<td><span>" +
            data[0].less_wt +
            '</span><input type="hidden" class="bill_less_val" name="sale[less][]" value="' +
            data[0].less_wt +
            '" /></td>' +
            "<td><span>" +
            data[0].net_wt +
            '</span><input type="hidden" class="bill_net_val" name="sale[net][]" value="' +
            data[0].net_wt +
            '" /></td>' +
            '<td><span class="est_wastage">' +
            data[0].retail_max_wastage_percent +
            '</span><input type="hidden" class="bill_wastage" name="sale[wastage][]" value="' +
            data[0].retail_max_wastage_percent +
            '" /><input type="hidden" class="bill_wastage_per" name="sale[wastage][]" value="' +
            data[0].retail_max_wastage_percent +
            '" /></td>' +
            '<td><span class="est_wastage_wt"></span><input type="hidden" class="bill_wastage_wt" value=""><input type="hidden" name="sale[wastage_discount][]" class="wastage_discount" value=""><input type="hidden" name="sale[mc_discount][]" class="mc_discount" value=""><input type="hidden" name="sale[item_blc_discount][]" class="item_blc_discount" value=""></td>' +
            '<td><span class="making_charge">' +
            data[0].tag_mc_value +
            " " +
            (data[0].tag_mc_type == 1 ? " per gm" : " per pc") +
            '</span><input type="hidden" class="bill_mc" name="sale[mc][]" value="' +
            data[0].tag_mc_value +
            '" /><input type="hidden" class="bill_mctype" value="' +
            data[0].tag_mc_type +
            '" name="sale[bill_mctype][]"/><input type="hidden" class="discount" name="sale[adjusted_dis][]" value="" /><input type="hidden" class="bill_mc_value" value="' +
            data[0].tag_mc_value +
            '" /></td>' +
            '<td><input type="number" class="bill_discount" name="sale[discount][]" value="0" step="any" /></td>' +
            '<td><span class="bill_taxable_amt"></span></td>' +
            "<td><span>" +
            data[0].tgrp_name +
            '</span><input type="hidden" class="sale_tax_group" name="sale[taxgroup][]" value="' +
            data[0].tgrp_id +
            '" /><input type="hidden" name="sale[total_cgst][]" class="sale_cgst"/><input type="hidden" class="sale_sgst" name="sale[total_sgst][]"/><input type="hidden" class="sale_igst" name="sale[total_igst][]"/></td>' +
            "<td></td>" +
            '<td><a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" value="' +
            stone_price +
            '" class="bill_stone_price" /><input type="hidden" value="' +
            certification_cost +
            '" class="certification_cost" /><input type="hidden" value="" class="bill_material_price" /><input type="hidden" value=\'' +
            JSON.stringify(stone_details) +
            '\' name="sale[stone_details][]" class="stone_details" /><input type="hidden" class="total_tax" name="sale[item_total_tax][]"></td>' +
            '<td><input type="number" class="bill_amount" name="sale[billamount][]" value="" step="any" readonly /><input type="hidden" class="per_grm_amount" name="sale[per_grm][]" value="' +
            data[0].est_rate_per_grm +
            '" step="any" /><input type="hidden" class="tag_sales_value" value="' +
            data[0].sales_value +
            '" step="any" /></td>' +
            "<td>No</td>" +
            "<td><span>" +
            data[0].tag_id +
            '</span><input type="hidden" class="sale_tag_id" name="sale[tag][]" value="' +
            data[0].tag_id +
            '" /></td>' +
            "<td>" +
            data[0].order_no +
            '<input type="hidden" class="sale_order_no" name="sale[order_no][]" value="' +
            data[0].order_no +
            '" /></td>' +
            "<td>-</td>" +
            '<td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
            "</tr>";

          $("#billing_sale_details tbody").append(row);

          calculateSaleBillRowTotal();
        }
      }
    },
  });
}

function getSearchProducts(searchTxt, curRow) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/getProductBySearch/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { searchTxt: searchTxt },

    success: function (data) {
      $(".cat_product").autocomplete({
        source: data,

        select: function (e, i) {
          e.preventDefault();

          curRow.find("td:eq(0) .cat_product").val(i.item.label);

          curRow.find("td:eq(0) .cat_pro_id").val(i.item.value);

          curRow.find("td:eq(5) .cat_pcs").val(i.item.no_of_pieces);

          curRow
            .find("td:eq(11) .cat_calculation_based_on")
            .val(i.item.calculation_based_on);

          var curRowItem = i.item;

          $("#purchase_purchase_details > tbody")
            .find("tr:last td:eq(1) .cat_design")
            .focus();
        },

        change: function (event, ui) {
          if (ui.item === null) {
          } else {
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (searchTxt != "") {
            if (i.content.length !== 0) {
              //console.log("content : ", i.content);
            }
          } else {
            curRow.find("td:eq(0) .cat_product").val("");

            curRow.find("td:eq(0) .cat_pro_id").val("");
          }
        },

        minLength: 1,
      });
    },
  });
}

function getSearchCustomProducts(searchTxt, curRow) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/getProductBySearch/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { searchTxt: searchTxt },

    success: function (data) {
      $(".cus_product").autocomplete({
        source: data,

        select: function (e, i) {
          e.preventDefault();

          curRow.find("td:eq(0) .cus_product").val(i.item.label);

          curRow.find("td:eq(0) .cus_product_id").val(i.item.value);

          curRow.find("td:eq(4) .cus_pcs").val(i.item.no_of_pieces);

          curRow
            .find("td:eq(10) .cus_calculation_based_on")
            .val(i.item.calculation_based_on);

          var curRowItem = i.item;

          $("#estimation_custom_details > tbody")
            .find("tr:last td:eq(1) .cus_qty")
            .focus();
        },

        change: function (event, ui) {
          if (ui.item === null) {
          } else {
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (searchTxt != "") {
            if (i.content.length !== 0) {
              //console.log("content : ", i.content);
            }
          } else {
            curRow.find("td:eq(0) .cus_product").val("");

            curRow.find("td:eq(0) .cus_product_id").val("");
          }
        },

        minLength: 1,
      });
    },
  });
}

function getSearchDesign(searchTxt, curRow) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/getProductDesignBySearch/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      searchTxt: searchTxt,
      ProCode: curRow.find("td:eq(0) .cat_pro_id").val(),
    },

    success: function (data) {
      $(".cat_design").autocomplete({
        source: data,

        select: function (e, i) {
          e.preventDefault();

          curRow.find("td:eq(1) .cat_design").val(i.item.label);

          curRow.find("td:eq(1) .cat_des_id").val(i.item.value);

          var curRowItem = i.item;

          $("#purchase_purchase_details > tbody")
            .find("tr:last td:eq(2) .cat_qty")
            .focus();
        },

        change: function (event, ui) {
          if (ui.item === null) {
          } else {
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (searchTxt != "") {
            if (i.content.length !== 0) {
              //console.log("content : ", i.content);
            }
          } else {
            curRow.find("td:eq(0) .cat_product").val("");

            curRow.find("td:eq(0) .cat_pro_id").val("");
          }
        },

        minLength: 1,
      });
    },
  });
}

function hide_page_open_details() {
  $(".sale_details").hide();

  $(".purchase_details").hide();

  $(".order_adv_details").hide();

  $(".custom_details").hide();

  $(".old_matel_details").hide();

  $(".stone_details").hide();

  $(".material_details").hide();

  $(".search_bill").css("display", "none");

  $(".search_order").css("display", "none");

  $(".search_esti").css("display", "none");

  $(".search_tag").css("display", "none");

  $(".advance_amt").css("display", "none");

  $(".return_details").css("display", "none");

  $(".date_filter").css("display", "none");

  $(".credit_col").css("display", "none");
}

function create_new_empty_bill_sale_row() {
  var row = "";

  row +=
    "<tr>" +
    '<td><input class="est_tag_name" type="text" name="est_tag[tag_name][]" value="" placeholder="Enter tag no" required /><input class="est_tag_id" type="hidden" name="est_tag[tag_id][]" value="" placeholder="Enter tag no" required /></td>' +
    '<td><div class="prodct_name"></div><input type="hidden" class="pro_id" name="est_tag[pro_id][]" value="" /></td>' +
    '<td><div class="qty"></div><input type="hidden" name="est_tag[qty][]" value="" /></td>' +
    '<td><div class="purity"></div><input type="hidden" name="est_tag[purity][]" value="" /></td>' +
    '<td><div class="size"></div><input type="hidden" name="est_tag[size][]" value="" /></td>' +
    '<td><div class="piece"></div><input type="hidden" name="est_tag[piece][]" value="" /></td>' +
    '<td><div class="gwt"></div><input type="hidden" name="est_tag[gwt][]" value="" /></td>' +
    '<td><div class="lwt"></div><input type="hidden" name="est_tag[lwt][]" value="" /></td>' +
    '<td><div class="nwt"></div><input type="hidden" name="est_tag[nwt][]" value="" /></td>' +
    '<td><div class="wastage"></div><input type="hidden" name="est_tag[wastage][]" value="" /></td>' +
    '<td><div class="mc"></div><input type="hidden" name="est_tag[mc][]" value="" class="mc_id" /></td>' +
    '<td><div class="cost"></div><input class="sales_value" type="hidden" name="est_tag[cost][]" value="" /><input class="caltype" type="hidden" name="est_tag[caltype][]" value="" /></td>' +
    '<td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
    "</tr>";

  $("#estimation_sale_details tbody").append(row);

  //$('#estimation_sale_details > tbody').find('tr:last td:eq(0) .est_tag_name').focus();
}

function create_new_empty_est_catalog_row() {
  var purity = "<option value=''>-Select Purity-</option>";

  $.each(purities, function (pkey, pitem) {
    purity +=
      "<option value='" + pitem.id_purity + "'>" + pitem.purity + "</option>";
  });

  var row = "";

  row +=
    '<tr><td><input type="text" class="cat_product" name="est_catalog[product][]" value="" required /><input type="hidden" class="cat_pro_id" name="est_catalog[pro_id][]" value="" /></td><td><input type="text" class="cat_design" name="est_catalog[design][]" value="" required /><input type="hidden" class="cat_des_id" name="est_catalog[des_id][]" value="" /></td><td><input type="number" class="cat_qty" name="est_catalog[qty][]" value="" /></td><td><select class="cat_purity" name="est_catalog[purity][]">' +
    purity +
    '</select></td><td><input type="number" class="cat_size" name="est_catalog[size][]" value="" /></td><td><input type="number" class="cat_pcs" name="est_catalog[pcs][]" value="" readonly /></td><td><input type="number"  class="cat_gwt" name="est_catalog[gwt][]" value="" /></td><td><input type="number" class="cat_lwt" name="est_catalog[lwt][]" value="" /></td><td><input type="number" class="cat_nwt" name="est_catalog[nwt][]" value="" readonly /></td><td><input type="number" class="cat_wastage" name="est_catalog[wastage][]" value="" /></td><td><input type="number"  class="cat_mc" name="est_catalog[mc][]" value="" /></td><td><input type="number" class="cat_amt" name="est_catalog[amount][]" value="" readonly /><input type="hidden" class="cat_calculation_based_on" name="est_catalog[calculation_based_on][]" value="" /></td><td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';

  $("#purchase_purchase_details tbody").append(row);

  $("#purchase_purchase_details > tbody")
    .find("tr:last td:eq(0) .cat_product")
    .focus();
}

function create_new_empty_est_custom_row() {
  var purity = "<option value=''>-Select Purity-</option>";

  $.each(purities, function (pkey, pitem) {
    purity +=
      "<option value='" + pitem.id_purity + "'>" + pitem.purity + "</option>";
  });

  var row = "";

  row +=
    '<tr><td><input type="text" name="est_custom[product][]" value="" class="cus_product" required /><input class="cus_product_id" type="hidden" name="est_custom[pro_id][]" value="" /></td><td><input class="cus_qty" type="number" name="est_custom[qty][]" value="" /></td><td><select class="cus_purity" name="est_custom[purity][]">' +
    purity +
    '</select></td><td><input type="number" class="cus_size" name="est_custom[size][]" value="" /></td><td><input class="cus_pcs" type="number" name="est_custom[pcs][]" value="" /></td><td><input type="number" class="cus_gwt" name="est_custom[gwt][]" value="" /></td><td><input class="cus_lwt" type="number" name="est_custom[lwt][]" value="" /></td><td><input type="number" class="cus_nwt" name="est_custom[nwt][]" value="" readonly /></td><td><input class="cus_wastage" type="number" name="est_custom[wastage][]" value="" /></td><td><input type="number" class="cus_mc" name="est_custom[mc][]" value="" /></td><td><input class="cus_amount" type="number" name="est_custom[amount][]" value="" readonly /><input type="hidden" class="cus_calculation_based_on" name="est_custom[calculation_based_on][]" value="" /></td><td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';

  $("#estimation_custom_details tbody").append(row);

  $("#estimation_custom_details > tbody")
    .find("tr:last td:eq(0) .cus_product")
    .focus();
}

function create_new_empty_est_oldmatel_row() {
  var purity = "<option value=''>-Select Purity-</option>";

  $.each(purities, function (pkey, pitem) {
    purity +=
      "<option value='" + pitem.id_purity + "'>" + pitem.purity + "</option>";
  });

  var matelTupes = "<option value=''>- Select Matel-</option>";

  $.each(matel_types, function (mkey, mitem) {
    matelTupes +=
      "<option value='" + mitem.id_metal + "'>" + mitem.metal + "</option>";
  });

  var row = "";

  row +=
    '<tr><td><select class="old_item_type" name="est_oldmatel[item_type][]"><option value=""> -Select Type- </option><option value="1"> Ornament </option><option value="2">Coin </option><option value="3"> Bar </option></select></td><td><select class="old_id_category"  name="est_oldmatel[id_category][]">' +
    matelTupes +
    '</select></td><td><select class="old_purity"  name="est_oldmatel[purity][]">' +
    purity +
    '</select></td><td><input type="number" class="old_gwt" name="est_oldmatel[gwt][]" value="" /></td><td><input class="old_lwt" type="number" name="est_oldmatel[lwt][]" value="" /></td><td><input type="number" class="old_nwt" name="est_oldmatel[nwt][]" value="" readonly /></td><td><input class="old_wastage" type="number" name="est_oldmatel[wastage][]" value="" /></td><td><input type="number" class="old_rate" name="est_oldmatel[rate][]" value="" /></td><td><input class="old_amount" type="number" name="est_oldmatel[amount][]" value="" /></td><td><select class="old_use_type" name="est_oldmatel[use_type][]"><option value="1"> Melting </option><option value="2"> Re-Tag</option></select></td><td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';

  $("#estimation_old_matel_details tbody").append(row);

  $("#estimation_old_matel_details > tbody")
    .find("tr:last td:eq(0) .old_item_type")
    .focus();
}

function create_new_empty_est_stone_row() {
  var stones_list = "<option value=''>-Select Stone-</option>";

  $.each(stones, function (pkey, pitem) {
    stones_list +=
      "<option value='" +
      pitem.stone_id +
      "'>" +
      pitem.stone_name +
      "</option>";
  });

  var row = "";

  row +=
    '<tr><td><select class="stone_id" name="est_stones[stone_id][]">' +
    stones_list +
    '</select></td><td><input type="number" class="stone_pcs" name="est_stones[stone_pcs][]" value="" /></td><td><input class="stone_wt" type="number" name="est_stones[stone_wt][]" value="" /></td><td><input type="number" class="stone_price" name="est_stones[stone_price][]" value=""  /></td><td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';

  $("#estimation_stone_details tbody").append(row);

  $("#estimation_stone_details > tbody")
    .find("tr:last td:eq(0) .stone_id")
    .focus();
}

function create_new_empty_est_material_row() {
  var material_list = "<option value=''> - Select Material - </option>";

  $.each(materials, function (pkey, pitem) {
    material_list +=
      "<option value='" +
      pitem.material_id +
      "'>" +
      pitem.material_name +
      "</option>";
  });

  var row = "";

  row +=
    '<tr><td><select class="material_id" name="est_materials[material_id][]">' +
    material_list +
    '</select></td><td><input class="material_wt" type="number" name="est_materials[material_wt][]" value="" /></td><td><input type="number" class="material_price" name="est_materials[material_price][]" value=""  /></td><td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';

  $("#estimation_material_details tbody").append(row);

  $("#estimation_material_details > tbody")
    .find("tr:last td:eq(0) .material_id")
    .focus();
}

function validateSaleDetailRow() {
  var row_validate = true;

  $("#estimation_sale_details > tbody  > tr").each(function (index, tr) {
    if ($(this).find("td:first .est_tag_name").val() == "") {
      row_validate = false;
    }
  });

  return row_validate;
}

function validateCatalogDetailRow() {
  var row_validate = true;

  $("#purchase_purchase_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find("td:first .cat_product").val() == "" ||
      $(this).find("td:eq(1) .cat_design").val() == "" ||
      $(this).find("td:eq(2) .cat_qty").val() == "" ||
      $(this).find("td:eq(5) .cat_size").val() == "" ||
      $(this).find("td:eq(6) .cat_gwt").val() == "" ||
      $(this).find("td:eq(3) .cat_purity").val() == ""
    ) {
      row_validate = false;
    }
  });

  return row_validate;
}

function validateCustomDetailRow() {
  var row_validate = true;

  $("#estimation_custom_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find("td:first .cus_product").val() == "" ||
      $(this).find("td:eq(1) .cus_qty").val() == "" ||
      $(this).find("td:eq(4) .cus_size").val() == "" ||
      $(this).find("td:eq(5) .cus_gwt").val() == "" ||
      $(this).find("td:eq(2) .cus_purity").val() == ""
    ) {
      row_validate = false;
    }
  });

  return row_validate;
}

function validateOldMatelDetailRow() {
  var row_validate = true;

  $("#estimation_old_matel_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find("td:first .old_item_type").val() == "" ||
      $(this).find("td:eq(1) .old_id_category").val() == "" ||
      $(this).find("td:eq(3) .old_gwt").val() == ""
    ) {
      row_validate = false;
    }
  });

  return row_validate;
}

function validateStoneDetailRow() {
  var row_validate = true;

  $("#estimation_stone_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find("td:first .stone_id").val() == "" ||
      $(this).find("td:eq(1) .stone_pcs").val() == "" ||
      $(this).find("td:eq(2) .stone_wt").val() == ""
    ) {
      row_validate = false;
    }
  });

  return row_validate;
}

function validateMaterialDetailRow() {
  var row_validate = true;

  $("#estimation_material_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find("td:first .material_id").val() == "" ||
      $(this).find("td:eq(1) .material_wt").val() == ""
    ) {
      row_validate = false;
    }
  });

  return row_validate;
}

function calculateSaleValue(curRow) {
  //curRow.find('td:eq(1) .cat_design').val(i.item.label);

  //(isNaN(row.find('td:eq(6) .cat_gwt').val()) || row.find('td:eq(6) .cat_gwt').val() == '')  ? 0 : row.find('td:eq(6) .cat_gwt').val();

  var gross_wt =
    isNaN(curRow.find("td:eq(6) .cat_gwt").val()) ||
    curRow.find("td:eq(6) .cat_gwt").val() == ""
      ? 0
      : curRow.find("td:eq(6) .cat_gwt").val();

  var less_wt =
    isNaN(curRow.find("td:eq(7) .cat_lwt").val()) ||
    curRow.find("td:eq(7) .cat_lwt").val() == ""
      ? 0
      : curRow.find("td:eq(7) .cat_lwt").val();

  var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

  var calculation_type =
    isNaN(curRow.find("td:eq(11) .cat_calculation_based_on").val()) ||
    curRow.find("td:eq(11) .cat_calculation_based_on").val() == ""
      ? 0
      : curRow.find("td:eq(11) .cat_calculation_based_on").val();

  var total_price = 0;

  var rate_per_grm =
    isNaN($(".per-grm-sale-value").html()) ||
    $(".per-grm-sale-value").html() == ""
      ? 0
      : parseFloat($(".per-grm-sale-value").html());

  var tax_rate = 0;

  /* if(tax_details.length > 0){

		tax_rate = tax_details[0].tax_percentage;

	} */

  var retail_max_mc =
    isNaN(curRow.find("td:eq(10) .cat_mc").val()) ||
    curRow.find("td:eq(10) .cat_mc").val() == ""
      ? 0
      : curRow.find("td:eq(10) .cat_mc").val();

  var tot_wastage =
    isNaN(curRow.find("td:eq(9) .cat_wastage").val()) ||
    curRow.find("td:eq(9) .cat_wastage").val() == ""
      ? 0
      : curRow.find("td:eq(9) .cat_wastage").val();

  if (calculation_type == 0) {
    rate_with_mc = parseFloat(
      parseFloat(rate_per_grm * gross_wt) + parseFloat(retail_max_mc * gross_wt)
    );

    total_price = parseFloat(
      rate_with_mc + rate_with_mc * parseFloat(tax_rate / 100)
    ).toFixed(2);
  } else if (calculation_type == 1) {
    rate_with_mc = parseFloat(
      parseFloat(rate_per_grm * net_wt) + parseFloat(retail_max_mc * net_wt)
    );

    rate_tax = parseFloat(rate_with_mc * parseFloat(tax_rate / 100));

    total_price = parseFloat(rate_with_mc + rate_tax).toFixed(2);
  } else if (calculation_type == 2) {
    rate_with_mc = parseFloat(
      parseFloat(rate_per_grm) * parseFloat(net_wt) +
        parseFloat(tot_wastage * net_wt) +
        parseFloat(retail_max_mc * net_wt)
    );

    total_price = parseFloat(
      rate_with_mc + rate_with_mc * parseFloat(tax_rate / 100)
    ).toFixed(2);
  }

  //$(".tag-sale-value").html(total_price);

  curRow.find("td:eq(11) .cat_amt").val(total_price);

  calculate_purchase_details();

  calculate_sales_details();
}

function calculateCustomItemSaleValue(curRow) {
  //curRow.find('td:eq(1) .cat_design').val(i.item.label);

  //(isNaN(row.find('td:eq(6) .cat_gwt').val()) || row.find('td:eq(6) .cat_gwt').val() == '')  ? 0 : row.find('td:eq(6) .cat_gwt').val();

  var gross_wt =
    isNaN(curRow.find(".cus_gwt").val()) || curRow.find(".cus_gwt").val() == ""
      ? 0
      : curRow.find(".cus_gwt").val();

  var less_wt =
    isNaN(curRow.find(".cus_lwt").val()) || curRow.find(".cus_lwt").val() == ""
      ? 0
      : curRow.find(".cus_lwt").val();

  var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

  var calculation_type =
    isNaN(curRow.find(".cus_calculation_based_on").val()) ||
    curRow.find(".cus_calculation_based_on").val() == ""
      ? 0
      : curRow.find(".cus_calculation_based_on").val();

  var total_price = 0;

  var rate_per_grm =
    isNaN($(".per-grm-sale-value").html()) ||
    $(".per-grm-sale-value").html() == ""
      ? 0
      : parseFloat($(".per-grm-sale-value").html());

  var tax_rate = 0;

  /* if(tax_details.length > 0){

		tax_rate = tax_details[0].tax_percentage;

	} */

  var retail_max_mc =
    isNaN(curRow.find(".cus_mc").val()) || curRow.find(".cus_mc").val() == ""
      ? 0
      : curRow.find(".cus_mc").val();

  var tot_wastage =
    isNaN(curRow.find(".cus_wastage").val()) ||
    curRow.find(".cus_wastage").val() == ""
      ? 0
      : curRow.find(".cus_wastage").val();

  if (calculation_type == 0) {
    rate_with_mc = parseFloat(
      parseFloat(rate_per_grm * gross_wt) + parseFloat(retail_max_mc * gross_wt)
    );

    total_price = parseFloat(
      rate_with_mc + rate_with_mc * parseFloat(tax_rate / 100)
    ).toFixed(2);
  } else if (calculation_type == 1) {
    rate_with_mc = parseFloat(
      parseFloat(rate_per_grm * net_wt) + parseFloat(retail_max_mc * net_wt)
    );

    rate_tax = parseFloat(rate_with_mc * parseFloat(tax_rate / 100));

    total_price = parseFloat(rate_with_mc + rate_tax).toFixed(2);
  } else if (calculation_type == 2) {
    rate_with_mc = parseFloat(
      parseFloat(rate_per_grm) * parseFloat(net_wt) +
        parseFloat(tot_wastage * net_wt) +
        parseFloat(retail_max_mc * net_wt)
    );

    total_price = parseFloat(
      rate_with_mc + rate_with_mc * parseFloat(tax_rate / 100)
    ).toFixed(2);
  }

  //$(".tag-sale-value").html(total_price);

  curRow.find(".cus_amount").val(total_price);

  calculate_purchase_details();

  calculate_sales_details();
}

function calculateOldMatelItemSaleValue_03_11_2023(curRow) {
  //curRow.find('td:eq(1) .cat_design').val(i.item.label);

  //(isNaN(row.find('td:eq(6) .cat_gwt').val()) || row.find('td:eq(6) .cat_gwt').val() == '')  ? 0 : row.find('td:eq(6) .cat_gwt').val();

  var gross_wt =
    isNaN(curRow.find("td:eq(3) .old_gwt").val()) ||
    curRow.find("td:eq(3) .old_gwt").val() == ""
      ? 0
      : curRow.find("td:eq(3) .old_gwt").val();

  var less_wt =
    isNaN(curRow.find("td:eq(4) .old_lwt").val()) ||
    curRow.find("td:eq(4) .old_lwt").val() == ""
      ? 0
      : curRow.find("td:eq(4) .old_lwt").val();

  var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

  var total_price = 0;

  //var rate_per_grm = (isNaN($('.per-grm-sale-value').html()) || $('.per-grm-sale-value').html() == '')  ? 0 : parseFloat($('.per-grm-sale-value').html());

  var rate_per_grm =
    isNaN(curRow.find("td:eq(7) .old_rate").val()) ||
    curRow.find("td:eq(7) .old_rate").val() == ""
      ? 0
      : curRow.find("td:eq(7) .old_rate").val();

  var tax_rate = 0;

  /* if(tax_details.length > 0){

		tax_rate = tax_details[0].tax_percentage;

	} */

  var wastage =
    isNaN(curRow.find("td:eq(6) .old_wastage").val()) ||
    curRow.find("td:eq(6) .old_wastage").val() == ""
      ? 0
      : curRow.find("td:eq(6) .old_wastage").val();

  cal_weight = parseFloat(net_wt - net_wt * (wastage / 100));

  total_price = parseFloat(rate_per_grm) * parseFloat(cal_weight);

  //$(".tag-sale-value").html(total_price);

  curRow.find("td:eq(8) .old_amount").val(parseFloat(total_price).toFixed(2));
}

function get_stones() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_tagging/getStoneItems",

    dataType: "json",

    success: function (data) {
      stones = data;
    },
  });
}

function get_materials() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_tagging/getAvailableMaterials",

    dataType: "json",

    success: function (data) {
      materials = data;
    },
  });
}

function get_bank_details() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_billing/get_bank_acc_details",

    dataType: "json",

    success: function (data) {
      bank_details = data;
    },
  });
}

function get_payment_device_details() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_billing/get_payment_device_details",

    dataType: "json",

    success: function (data) {
      payment_device_details = data;
    },
  });
}

function remove_row(curRow) {
  curRow.remove();

  calculateSaleBillRowTotal();

  calculate_purchase_details();

  calculate_sales_details();

  calculate_salesReturn_details();

  if ($("#chit_details").val() != "") {
    calculate_est_chit_closing_balance();
  }

  if (ctrl_page[1] == "bill_split") {
    if ($("#ratio_per").val() != "") {
      $("#ratio_apply").trigger("click");
    }
  }

  updatePurchaseColumnTotal();
  updateSaleColumnTotal();
}

function remove_orderAdv_row(curRow) {
  curRow.remove();

  calculate_orderAdv_purchase_details();

  calculate_orderAdv_sales_details();
}

function calculate_sales_details() {
  var sales_weight = 0;

  var sales_amt = 0;

  var discount_amt = 0;

  var tax_group_id = "";

  var base_value_amt = 0;

  var arrived_value_amt = 0;

  var total_tax_rate = 0;

  var cgst = 0;

  var sgst = 0;

  var igst = 0;

  var cus_state = $("#cus_state").val();

  var cmp_state = $("#cmp_state").val();

  var tcs_tax_amt = 0;

  var tot_purchase_amt =
    $("#tot_purchase_amt").val() != "" ? $("#tot_purchase_amt").val() : 0;

  var tcs_min_bill_amt = $("#tcs_min_bill_amt").val();

  var tcs_tax_per = $("#tcs_tax_per").val();

  var is_tcs_required = $("#is_tcs_required").val();

  var cmp_state = $("#cmp_state").val();

  var cmp_country = $("#cmp_country").val();

  var cus_del_state = $("#cus_del_state").val();

  var cus_del_country = $("#cus_del_country").val();

  var item_taxable_amt = 0;

  var item_tax_cost = 0;

  var repair_percentage = $("#repair_order_per").val();

  var tot_repair_amount = 0;

  var cgst_per = $(".sale_cgst_per").val();

  var sgst_per = $(".sale_sgst_per").val();

  var total_sale_pcs = 0;

  var total_sale_gwt = 0;

  var total_sale_lwt = 0;

  var total_sale_nwt = 0;

  var total_sale_amt = 0;

  var bill_split_max_amount = $("#bill_split_max_amount").val();

  var bill_split_min_amount = $("#bill_split_min_amount").val();

  $("#billing_sale_details > tbody  > tr").each(function (index, tr) {
    if (
      ($(this).find(".bill_gross_val").val() != "" &&
        $(this).find(".gwt").html() != "" &&
        $(this).find(".sales_value").val() != "") ||
      $(this).find(".itemtype").val() == 2 ||
      $(this).find(".itemtype").val() == 1
    ) {
      sales_weight += parseFloat(
        isNaN($(this).find(".bill_net_val").val()) ||
          $(this).find(".bill_net_val").val() == ""
          ? 0
          : $(this).find(".bill_net_val").val()
      );

      if (
        $(this).find(".itemtype").val() == 2 ||
        $(this).find(".itemtype").val() == 1
      ) {
        sales_amt += parseFloat(
          isNaN($(this).find(".bill_taxable_amt").text()) ||
            $(this).find(".bill_taxable_amt").text() == ""
            ? 0
            : $(this).find(".bill_taxable_amt").text()
        );
      } else {
        sales_amt += parseFloat(
          isNaN($(this).find(".bill_taxable_amt").text()) ||
            $(this).find(".bill_taxable_amt").text() == ""
            ? 0
            : $(this).find(".bill_taxable_amt").text()
        );
      }

      discount_amt += parseFloat(
        isNaN($(this).find(".bill_discount").val()) ||
          $(this).find(".bill_discount").val() == ""
          ? 0
          : $(this).find(".bill_discount").val()
      );

      total_sale_pcs += parseFloat(
        isNaN($(this).find(".sale_pcs").val()) ||
          $(this).find(".sale_pcs").val() == ""
          ? 0
          : $(this).find(".sale_pcs").val()
      );

      total_sale_gwt += parseFloat(
        isNaN($(this).find(".bill_gross_val").val()) ||
          $(this).find(".bill_gross_val").val() == ""
          ? 0
          : $(this).find(".bill_gross_val").val()
      );

      total_sale_lwt += parseFloat(
        isNaN($(this).find(".bill_less_val").val()) ||
          $(this).find(".bill_less_val").val() == ""
          ? 0
          : $(this).find(".bill_less_val").val()
      );

      total_sale_nwt += parseFloat(
        isNaN($(this).find(".bill_net_val").val()) ||
          $(this).find(".bill_net_val").val() == ""
          ? 0
          : $(this).find(".bill_net_val").val()
      );

      total_sale_amt += parseFloat(
        isNaN($(this).find(".bill_amount").val()) ||
          $(this).find(".bill_amount").val() == ""
          ? 0
          : $(this).find(".bill_amount").val()
      );

      cgst += parseFloat(
        isNaN($(this).find(".sale_cgst").val()) ||
          $(this).find(".sale_cgst").val() == ""
          ? 0
          : $(this).find(".sale_cgst").val()
      );

      sgst += parseFloat(
        isNaN($(this).find(".sale_sgst").val()) ||
          $(this).find(".sale_sgst").val() == ""
          ? 0
          : $(this).find(".sale_sgst").val()
      );

      igst += parseFloat(
        isNaN($(this).find(".sale_igst").val()) ||
          $(this).find(".sale_igst").val() == ""
          ? 0
          : $(this).find(".sale_igst").val()
      );

      tax_group_id = $(this).find(".sale_tax_group").val();
    }
  });

  $(".total_pcs").html(parseFloat(total_sale_pcs));

  $(".total_gwt").html(parseFloat(total_sale_gwt).toFixed(3));

  $(".total_lwt").html(parseFloat(total_sale_lwt).toFixed(3));

  $(".total_nwt").html(parseFloat(total_sale_nwt).toFixed(3));

  $(".total_amount").html(parseFloat(total_sale_amt).toFixed(2));

  $("#return_item_detail > tbody  > tr").each(function (index, tr) {
    sales_amt += parseFloat(
      isNaN($(this).find(".returnitemcost").val()) ||
        $(this).find(".returnitemcost").val() == ""
        ? 0
        : $(this).find(".returnitemcost").val()
    );

    cgst += parseFloat(
      isNaN($(this).find(".return_item_tax_cgst_value").val()) ||
        $(this).find(".return_item_tax_cgst_value").val() == ""
        ? 0
        : $(this).find(".return_item_tax_cgst_value").val()
    );

    sgst += parseFloat(
      isNaN($(this).find(".return_item_tax_sgst_value").val()) ||
        $(this).find(".return_item_tax_sgst_value").val() == ""
        ? 0
        : $(this).find(".return_item_tax_sgst_value").val()
    );

    igst += parseFloat(
      isNaN($(this).find(".return_item_tax_igst_value").val()) ||
        $(this).find(".return_item_tax_igst_value").val() == ""
        ? 0
        : $(this).find(".return_item_tax_igst_value").val()
    );
  });

  $("#billing_supplier_sales_bill_details > tbody  > tr").each(function (
    index,
    tr
  ) {
    var item_cgst = 0;

    var item_sgst = 0;

    var item_igst = 0;

    item_cost = parseFloat(
      isNaN($(this).find(".item_cost").val()) ||
        $(this).find(".item_cost").val() == ""
        ? 0
        : $(this).find(".item_cost").val()
    );

    if (cus_del_country == cmp_country) {
      total_tax_rate = parseFloat(item_cost - (item_cost * 100) / 103);

      if (cus_del_state == cmp_state) {
        item_cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);

        item_sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);
      } else {
        item_cgst = 0;
        item_sgst = 0;

        item_igst = item_cost;
      }
    } // NO GST
    else {
      item_cgst = 0;
      item_sgst = 0;

      item_igst = item_cost;
    }

    $(this).find(".item_total_tax").val(parseFloat(total_tax_rate).toFixed(2));

    $(this).find(".item_total_sgst").val(parseFloat(item_sgst).toFixed(2));

    $(this).find(".item_total_cgst").val(parseFloat(item_cgst).toFixed(2));

    $(this).find(".item_total_igst").val(parseFloat(item_igst).toFixed(2));

    if (
      $(this).find(".weight").val() != "" &&
      $(this).find(".pur_weight").val() != "" &&
      $(this).find(".item_cost").val() != ""
    ) {
      sales_weight += parseFloat(
        isNaN($(this).find(".pur_weight").val()) ||
          $(this).find(".pur_weight").val() == ""
          ? 0
          : $(this).find(".pur_weight").val()
      );

      item_taxable_amt += parseFloat(
        isNaN($(this).find(".item_cost").val()) ||
          $(this).find(".item_cost").val() == ""
          ? 0
          : $(this).find(".item_cost").val()
      );

      item_tax_cost += parseFloat(
        isNaN($(this).find(".item_total_tax").val()) ||
          $(this).find(".item_total_tax").val() == ""
          ? 0
          : $(this).find(".item_total_tax").val()
      );

      sales_amt += parseFloat(
        $(this).find(".item_cost").val() - $(this).find(".item_total_tax").val()
      );

      cgst += parseFloat(
        isNaN($(this).find(".item_total_cgst").val()) ||
          $(this).find(".item_total_cgst").val() == ""
          ? 0
          : $(this).find(".item_total_cgst").val()
      );

      sgst += parseFloat(
        isNaN($(this).find(".item_total_sgst").val()) ||
          $(this).find(".item_total_sgst").val() == ""
          ? 0
          : $(this).find(".item_total_sgst").val()
      );

      igst += parseFloat(
        isNaN($(this).find(".item_total_igst").val()) ||
          $(this).find(".item_total_igst").val() == ""
          ? 0
          : $(this).find(".item_total_igst").val()
      );
    }
  });

  $("#billing_repair_order_other_details > tbody  > tr").each(function (
    index,
    tr
  ) {
    if ($(this).find(".rapair_amount").val() != "") {
      curRow = $(this);

      amount = parseFloat(
        isNaN(curRow.find(".rapair_amount").val()) ||
          curRow.find(".rapair_amount").val() == ""
          ? 0
          : curRow.find(".rapair_amount").val()
      );

      taxable_amount = amount / (repair_percentage / 100 + 1);

      total_tax = taxable_amount * (repair_percentage / 100);

      var total_other_item_amount = 0;

      item_cgst = (taxable_amount * cgst_per) / 100;

      item_sgst = (taxable_amount * sgst_per) / 100;

      curRow.find(".sale_cgst").val(parseFloat(item_cgst).toFixed(2));

      curRow.find(".sale_sgst").val(parseFloat(item_sgst).toFixed(2));

      curRow.find(".sale_igst").val(0);

      curRow.find(".repair_tot_tax").val(parseFloat(total_tax).toFixed(2));

      tot_repair_amount += parseFloat(
        parseFloat(amount) + parseFloat(total_other_item_amount)
      );

      curRow
        .find(".item_total_amount")
        .html(
          parseFloat(
            parseFloat(amount) + parseFloat(total_other_item_amount)
          ).toFixed(2)
        );
    }
  });

  $("#billing_repair_order_details > tbody > tr").each(function (index, tr) {
    if ($(this).find(".amount").val() != "") {
      curRow = $(this);

      amount = parseFloat(
        isNaN(curRow.find(".amount").val()) ||
          curRow.find(".amount").val() == ""
          ? 0
          : curRow.find(".amount").val()
      );

      taxable_amount = amount / (repair_percentage / 100 + 1);

      total_tax = taxable_amount * (repair_percentage / 100);

      var total_other_item_amount = 0;

      item_cgst = (taxable_amount * cgst_per) / 100;

      item_sgst = (taxable_amount * sgst_per) / 100;

      curRow.find(".sale_cgst").val(parseFloat(item_cgst).toFixed(2));

      curRow.find(".sale_sgst").val(parseFloat(item_sgst).toFixed(2));

      curRow.find(".sale_igst").val(0);

      curRow.find(".repair_tot_tax").val(parseFloat(total_tax).toFixed(2));

      tot_repair_amount += parseFloat(
        parseFloat(amount) + parseFloat(total_other_item_amount)
      );

      curRow
        .find(".item_total_amount")
        .html(
          parseFloat(
            parseFloat(amount) + parseFloat(total_other_item_amount)
          ).toFixed(2)
        );
    }
  });

  cgst = parseFloat(cgst).toFixed(2);

  sgst = parseFloat(sgst).toFixed(2);

  igst = parseFloat(igst).toFixed(2);

  $(".sales_cgst").html(cgst);

  $(".sales_sgst").html(sgst);

  $(".sales_igst").html(igst);

  var total_sales_amt = parseFloat(
    parseFloat(sales_amt) +
      parseFloat(cgst) +
      parseFloat(sgst) +
      parseFloat(igst)
  ).toFixed(2);

  if (
    parseFloat(tot_purchase_amt) + parseFloat(total_sales_amt) >=
      tcs_min_bill_amt &&
    is_tcs_required == 1
  ) {
    //tot_purchase_amt - Customer Total Purchase Amount ,tcs_min_bill_amt- Minimum Purchase Amount

    tcs_tax_amt = parseFloat(
      (parseFloat(parseFloat(total_sales_amt) - parseFloat(tcs_min_bill_amt)) *
        parseFloat(tcs_tax_per)) /
        100
    ).toFixed(2);
  }

  $(".tcs_tax_amt").html(tcs_tax_amt);

  $("#tcs_total_tax_amount").val(tcs_tax_amt);

  $(".sale_amt_with_tax").html(total_sales_amt);

  $(".summary_sale_weight").html(parseFloat(sales_weight).toFixed(3));

  $(".summary_sale_amt").html(parseFloat(sales_amt).toFixed(2));

  $(".summary_repair_amt").html(parseFloat(tot_repair_amount).toFixed(2));

  if (ctrl_page[1] == "bill_split") {
    if (parseFloat(bill_split_min_amount) <= parseFloat(total_sale_amt)) {
      $("#ratio_apply").attr("disabled", false);
    } else {
      $("#ratio_apply").attr("disabled", true);
    }
  }

  check_gift_vocuher_issue();

  calculateFinalCost();
}

function calculate_purchase_details() {
  var pur_weight = 0;

  var pur_rate = 0;

  var gift_voucher = 0;

  var chit_amt = 0;

  $("#purchase_item_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".pur_gross_val").val() != "" &&
      $(this).find(".bill_amount").val() != ""
    ) {
      pur_weight += parseFloat(
        isNaN($(this).find(".pur_net_val").val()) ||
          $(this).find(".pur_net_val").val() == ""
          ? 0
          : $(this).find(".pur_net_val").val()
      );

      pur_rate += parseFloat(
        isNaN($(this).find(".bill_amount").val()) ||
          $(this).find(".bill_amount").val() == ""
          ? 0
          : $(this).find(".bill_amount").val()
      );
    }
  });

  $(".summary_pur_weight").html(parseFloat(pur_weight).toFixed(3));

  $(".summary_pur_amt").html(parseFloat(pur_rate).toFixed(2));

  calculateFinalCost();
}

function calculate_order_adv_purchase_details() {
  var purchase_weight = 0;

  var purchase_rate = 0;

  var discount_amt = 0;

  var adv_paid_amt = 0;

  $("#purchase_item_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".pur_gross_val").val() != "" &&
      $(this).find(".bill_amount").val() != ""
    ) {
      purchase_weight += parseFloat(
        isNaN($(this).find(".pur_net_val").val()) ||
          $(this).find(".pur_net_val").val() == ""
          ? 0
          : $(this).find(".pur_net_val").val()
      );

      purchase_rate += parseFloat(
        isNaN($(this).find(".bill_amount").val()) ||
          $(this).find(".bill_amount").val() == ""
          ? 0
          : $(this).find(".bill_amount").val()
      );
    }
  });

  $(".summary_pur_weight").html(purchase_weight);

  $(".summary_pur_amt").html(purchase_rate);

  $(".summary_discount_amt").val(discount_amt);

  $(".adv_rcd_wt").html(purchase_weight);

  //calculateFinalCost();
}

function calculate_order_advance_sale_details() {
  var wast_wgt = 0;

  var net_wt = 0;

  var tot_adv_wt = 0;

  var max_amt = 0;

  var rate_per_grm = $(".per-grm-sale-value").html();

  var adv_paid_wt = isNaN($(".adv_paid_wt").html())
    ? 0
    : $(".adv_paid_wt").html();

  $("#billing_order_adv_details > tbody  > tr").each(function (index, tr) {
    if ($(this).find(".bill_net_val").val() != "") {
      console.log($(this).find(".bill_net_val").val());

      wast_wgt += parseFloat(
        isNaN($(this).find(".wast_wgt").val()) ||
          $(this).find(".wast_wgt").val() == ""
          ? 0
          : $(this).find(".wast_wgt").val()
      );

      net_wt += parseFloat(
        isNaN($(this).find(".bill_net_val").val()) ||
          $(this).find(".bill_net_val").val() == ""
          ? 0
          : $(this).find(".bill_net_val").val()
      );
    }
  });

  console.log("adv_paid_wt" + adv_paid_wt);

  console.log("net_wt" + net_wt);

  console.log("wast_wgt" + wast_wgt);

  tot_adv_wt = parseFloat(net_wt - adv_paid_wt).toFixed(3);

  $(".max_wt").val(tot_adv_wt);

  $(".adv_blc_wt").html(tot_adv_wt);
}

$(".adv_amt").on("keyup", function (e) {
  var adv_amt = isNaN(this.value) || this.value == "" ? 0 : this.value;

  /*var max_wt=$('.max_wt').val();

	var rate_per_grm=$('.per-grm-sale-value').html();

	var adv_amt=(isNaN(this.value) || this.value=='' ? 0 :this.value);

	max_amt=parseFloat(parseFloat(max_wt)*parseFloat(rate_per_grm));

	if(max_amt<adv_amt)

	{

		alert('Maximum Advance Exceed');

		$('.receive_amount').val('');

		$('.adv_amt').val('');

		$('.adv_amt').focus();

	}else{

			$('.receive_amount').val(adv_amt);

	}*/

  $(".receive_amount").val(adv_amt);

  calculatePaymentCost();
});

function calculate_orderAdv_sales_details() {
  var sales_weight = 0;

  var sales_amt = 0;

  var discount_amt = 0;

  var tax_group_id = "";

  var base_value_amt = 0;

  var arrived_value_amt = 0;

  var total_tax_rate = 0;

  var cgst = 0;

  var sgst = 0;

  var igst = 0;

  var cus_state = $("#cus_state").val();

  var cmp_state = $("#cmp_state").val();

  $("#billing_order_adv_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".bill_gross_val").val() != "" &&
      $(this).find(".bill_amount").val() != ""
    ) {
      sales_weight += parseFloat(
        isNaN($(this).find(".bill_net_val").val()) ||
          $(this).find(".bill_net_val").val() == ""
          ? 0
          : $(this).find(".bill_net_val").val()
      );

      sales_amt += parseFloat(
        isNaN($(this).find(".bill_taxable_amt").html()) ||
          $(this).find(".bill_taxable_amt").html() == ""
          ? 0
          : $(this).find(".bill_taxable_amt").html()
      );

      discount_amt += parseFloat(
        isNaN($(this).find(".bill_discount").val()) ||
          $(this).find(".bill_discount").val() == ""
          ? 0
          : $(this).find(".bill_discount").val()
      );

      cgst += parseFloat(
        isNaN($(this).find(".sale_cgst").val()) ||
          $(this).find(".sale_cgst").val() == ""
          ? 0
          : $(this).find(".sale_cgst").val()
      );

      sgst += parseFloat(
        isNaN($(this).find(".sale_sgst").val()) ||
          $(this).find(".sale_sgst").val() == ""
          ? 0
          : $(this).find(".sale_sgst").val()
      );

      igst += parseFloat(
        isNaN($(this).find(".sale_igst").val()) ||
          $(this).find(".sale_igst").val() == ""
          ? 0
          : $(this).find(".sale_igst").val()
      );
    }
  });

  cgst = parseFloat(cgst).toFixed(2);

  sgst = parseFloat(sgst).toFixed(2);

  igst = parseFloat(igst).toFixed(2);

  $(".sales_cgst").html(cgst);

  $(".sales_sgst").html(sgst);

  $(".sales_igst").html(igst);

  var total_sales_amt = parseFloat(
    parseFloat(sales_amt) +
      parseFloat(cgst) +
      parseFloat(sgst) +
      parseFloat(igst)
  ).toFixed(2);

  $(".sale_amt_with_tax").html(total_sales_amt);

  $(".sale_amt_with_tax").html(total_sales_amt);

  $(".summary_sale_weight").html(parseFloat(sales_weight).toFixed(3));

  $(".summary_sale_amt").html(parseFloat(sales_amt).toFixed(2));

  //	$(".summary_discount_amt").val(parseFloat(discount_amt).toFixed(2));

  console.log("total_sales_amt :" + total_sales_amt);

  calculateFinalCost();
}

function calculate_orderAdv_purchase_details() {
  var purchase_weight = 0;

  var purchase_rate = 0;

  var discount_amt = 0;

  var adv_paid_amt = 0;

  $("#purchase_item_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".pur_gross_val").val() != "" &&
      $(this).find(".bill_amount").val() != ""
    ) {
      purchase_weight += parseFloat(
        isNaN($(this).find(".pur_net_val").val()) ||
          $(this).find(".pur_net_val").val() == ""
          ? 0
          : $(this).find(".pur_net_val").val()
      );

      purchase_rate += parseFloat(
        isNaN($(this).find(".bill_amount").val()) ||
          $(this).find(".bill_amount").val() == ""
          ? 0
          : $(this).find(".bill_amount").val()
      );
    }
  });

  $(".summary_pur_weight").html(purchase_weight);

  $(".summary_pur_amt").html(purchase_rate);

  $(".summary_discount_amt").val(discount_amt);

  calculateFinalCost();
}

$(".handling_charges").on("change", function () {
  calculateFinalCost();
});

$(".credit_discount_amt").on("change", function () {
  if ($("#credit_collection_disc_otp").val() == 1) {
    if (
      parseFloat($(".credit_discount_amt").val()) <
      parseFloat($(".total_cost").val())
    ) {
      $(".disc_otp").css("display", "none");
      $(".otp_confirm").css("display", "block");
      $("#credit_disc_otp_modal").modal("show");
    } else {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Enter the Valid Discount Amount...",
      });
      $(".credit_discount_amt").val(0);
      calculateFinalCost();
    }
  } else {
    calculateFinalCost();
  }
});

function calculateFinalCost() {
  $("#advance_no").attr("disabled", true);

  $("#advance_yes").attr("disabled", true);

  $("#advance_amount").val(0);

  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  var purchase_amt = 0;

  var sales_amt = 0;

  var discount = 0;

  var adv_paid_amt = 0;

  var sale_return = 0;

  var handling_charges = 0;

  var credit_amt = 0;

  var credit_discount = 0;

  var tcs_tax_amt = 0;

  var tds_tax_value = 0;

  var taxable_amount = 0;

  var tcs_percent = 0;

  var total_chit_amt = 0;

  repair_charges = parseFloat(
    isNaN($(".summary_repair_amt").html()) ||
      $(".summary_repair_amt").html() == ""
      ? 0
      : $(".summary_repair_amt").html()
  ).toFixed(2);

  purchase_amt = parseFloat(
    isNaN($(".summary_pur_amt").html()) || $(".summary_pur_amt").html() == ""
      ? 0
      : $(".summary_pur_amt").html()
  ).toFixed(2);

  sales_amt = parseFloat(
    isNaN($(".sale_amt_with_tax").html()) ||
      $(".sale_amt_with_tax").html() == ""
      ? 0
      : $(".sale_amt_with_tax").html()
  ).toFixed(2);

  discount = parseFloat(
    isNaN($(".summary_discount_amt").val()) ||
      $(".summary_discount_amt").val() == ""
      ? 0
      : $(".summary_discount_amt").val()
  ).toFixed(2);

  adv_paid_amt = parseFloat(
    isNaN($(".summary_adv_paid_amt").html()) ||
      $(".summary_adv_paid_amt").html() == ""
      ? 0
      : $(".summary_adv_paid_amt").html()
  ).toFixed(2);

  total_chit_amt = parseFloat(
    isNaN($(".summary_chit_paid_amt").html()) ||
      $(".summary_chit_paid_amt").html() == ""
      ? 0
      : $(".summary_chit_paid_amt").html()
  ).toFixed(2);

  sale_return = parseFloat(
    isNaN($(".summary_sale_ret_amt").html()) ||
      $(".summary_sale_ret_amt").html() == ""
      ? 0
      : $(".summary_sale_ret_amt").html()
  ).toFixed(2);

  taxable_amount = parseFloat(
    isNaN($(".summary_sale_amt").html()) || $(".summary_sale_amt").html() == ""
      ? 0
      : $(".summary_sale_amt").html()
  ).toFixed(2);

  var tds_percent =
    $(".tds_percent ").val() != "" ? $(".tds_percent ").val() : 0;

  var tcs_percent =
    $(".tcs_percent ").val() != "" ? $(".tcs_percent ").val() : 0;

  var tcs_min_bill_amt =
    $("#tcs_min_bill_amt").val() != "" ? $("#tcs_min_bill_amt").val() : 0;

  var cus_tot_paid_amt =
    $("#cus_total_amt_for_tcs").val() != ""
      ? parseFloat(
          parseFloat($("#cus_total_amt_for_tcs").val()) - parseFloat(discount)
        )
      : 0;

  console.log(tcs_percent);

  handling_charges =
    $(".handling_charges").val() != "" ? $(".handling_charges").val() : 0;

  credit_amt = parseFloat(
    isNaN($(".summary_credit_amt").html()) ||
      $(".summary_credit_amt").html() == ""
      ? 0
      : $(".summary_credit_amt").html()
  ).toFixed(2);

  credit_discount = parseFloat(
    isNaN($(".credit_discount_amt").val()) ||
      $(".credit_discount_amt").val() == ""
      ? 0
      : $(".credit_discount_amt").val()
  ).toFixed(2);

  if (tds_percent > 0) {
    tds_tax_value = parseFloat(
      parseFloat(parseFloat(taxable_amount) * parseFloat(tds_percent)) / 100
    ).toFixed(2);

    $(".tds_tax_value").val(tds_tax_value);
  }

  /*var pan_no = $('#pan_no').val();

	var customer_sales_limit = $('#customer_sales_limit').val();

	var item_cost = $('#opening_balance').val();

	var item_amount = $('#total_payment_amount').val();

	var total_balance_amount = parseFloat(parseFloat(item_cost) + parseFloat(item_amount)).toFixed(2);

	console.log(customer_sales_limit >= total_balance_amount);

	if (pan_no != "") {

		if (customer_sales_limit >= total_balance_amount) {

			tcs_tax_amt = parseFloat(parseFloat(parseFloat(sales_amt) * parseFloat(tcs_percent)) / 100).toFixed(2);

			$('.tcs_tax_amt').val(tcs_tax_amt);

		}
		else {
			tcs_tax_amt = 0;

			$('.tcs_tax_amt').val(tcs_tax_amt);

		}
	}
	else {
		tcs_tax_amt = 0;

		$('.tcs_tax_amt').val(tcs_tax_amt);

	}*/
  if (tcs_percent > 0) {
    if (
      parseFloat($("#opening_balance").val()) > parseFloat(tcs_min_bill_amt)
    ) {
      tcs_tax_amt = parseFloat(
        (parseFloat(parseFloat(sales_amt)) * parseFloat(tcs_percent)) / 100
      ).toFixed(2);
    } else {
      tcs_tax_amt = parseFloat(
        (parseFloat(
          parseFloat(cus_tot_paid_amt) - parseFloat(tcs_min_bill_amt)
        ) *
          parseFloat(tcs_percent)) /
          100
      ).toFixed(2);
    }
    $(".tcs_tax_amt").val(tcs_tax_amt);
  }

  tot_cost = parseFloat(
    parseFloat(sales_amt) +
      parseFloat(repair_charges) +
      parseFloat(tcs_tax_amt) +
      parseFloat(credit_amt) -
      parseFloat(purchase_amt) -
      parseFloat(adv_paid_amt) -
      parseFloat(total_chit_amt) -
      parseFloat(sale_return) +
      parseFloat(handling_charges) -
      parseFloat(credit_discount) -
      parseFloat(tds_tax_value)
  ).toFixed(2);

  if (bill_type != 5) {
    round_of_val = tot_cost;

    tot_cost = parseFloat(Math.round(tot_cost));

    round_of_amt = parseFloat(tot_cost - round_of_val).toFixed(2);

    $("#round_off").val(round_of_amt < 0.5 ? round_of_amt : round_of_amt);

    $(".summary_round_off").html(
      tot_cost < round_of_val ? round_of_amt : round_of_amt
    );
  }

  $(".total_cost").val(isNaN(tot_cost) ? 0 : tot_cost);

  $("#total_payment_amount").val(isNaN(tot_cost) ? 0 : tot_cost);

  if (parseFloat(tot_cost) < 0) {
    if (bill_type != 5) {
      $(".pay_to_cus").val(tot_cost * -1); // Make positive and add
    }

    if (bill_type == 5) {
      var adv_amt = $(".adv_amt").val();

      if (adv_amt > tot_cost * -1) {
        $(".receive_amount").val(parseFloat(adv_amt) - tot_cost * -1);
      } else {
        $(".receive_amount").val(parseFloat(adv_amt));
      }
    } else {
      $(".receive_amount").val(0);
    }

    $(".receive_amount").prop("readonly", true);
  } else {
    $(".pay_to_cus").val(0);

    if (ctrl_page[1] == "bill_split") {
      var total_cost = 0;
      $("#billing_split_sale_details > tbody tr").each(function (idx, row) {
        curRow = $(this);
        total_cost += parseFloat(
          isNaN(curRow.find(".split_recd_amount").val()) ||
            curRow.find(".split_recd_amount").val() == ""
            ? 0
            : curRow.find(".split_recd_amount").val()
        );
      });
      $(".receive_amount").val(total_cost);
    } else {
      $(".receive_amount").val(tot_cost);
    }

    $(".receive_amount").prop("readonly", false);

    if (bill_type == 5) {
      var adv_amt = $(".adv_amt").val();

      $(".receive_amount").val(adv_amt);
    }
  }

  if ($(".pay_to_cus").val() >= 10000) {
    if (
      checkToasterDuplicate(
        `<br>The Total Return Amount is ${$(".pay_to_cus").val()}`
      )
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message:
          "" + "<br>The Total Return Amount is " + $(".pay_to_cus").val(),
      });
    }
  }

  if ($(".pay_to_cus").val() > 0) {
    $("#advance_no").attr("disabled", false);

    $("#advance_yes").attr("disabled", false);

    $("#chit_deposit").attr("disabled", false);

    $("#advance_amount").val(0);
  }

  var bill_amt = parseFloat($(".total_cost").val());

  bill_amt = bill_amt.toFixed(2);

  $(".billing_amount").html(money_format_india(bill_amt));

  var receive_amt =
    $(".receive_amount").val() != ""
      ? parseFloat($(".receive_amount").val())
      : 0;

  console.log(receive_amt);

  var due_amt = bill_amt - receive_amt;

  console.log(due_amt);

  $(".due_bill_amount").text(due_amt.toFixed(2));

  old_discount = discount;

  if (ctrl_page[1] == "bill_split") {
    calculateBillsplitPaymentCost();
  } else {
    calculatePaymentCost();
  }
}

$("#summary_discount_amt").on("change", function () {
  if (this.value != "") {
    $("#summary_discount_amt").prop("readonly", true);

    $("#total_cost").prop("readonly", true);

    $("#disc_apply").trigger("click");
  }
});

/*Discount Reset Function*/

$("#disc_reset").on("click", function () {
  $("#summary_discount_amt").prop("readonly", false);

  $("#total_cost").prop("readonly", false);

  $("#summary_discount_amt").val(0);

  calculateSaleBillRowTotal();

  updateSaleColumnTotal();
});

function checkGiftAvailability() {
  var sale_weight = 0;

  var eligible_weight = 0;

  var gift_amt = 0;

  var per_gram_amt = parseFloat($("#per_gram_amt").val());

  var min_wt_gram = parseFloat($("#min_wt_gram").val());

  var gold_rate = $(".per-grm-sale-value").html();

  var silverrate_1gm = $(".silver_per-grm-sale-value").html();

  var validate_date = $("#validate_date").val();

  var utilized_gift_amt =
    $("#tot_voucher_amt").html() != "" ? $("#tot_voucher_amt").html() : 0;

  var tot_chit_amt =
    $("#tot_chit_amt").html() != "" ? $("#tot_chit_amt").html() : 0;

  if (tot_chit_amt == 0) {
    $("#billing_sale_details > tbody  > tr").each(function (index, tr) {
      if (
        $(this).find(".bill_gross_val").val() != "" &&
        $(this).find(".bill_amount").val() != "" &&
        $(this).find(".gift_applicable").val() == 1 &&
        $(this).find(".sale_metal_type").val() == 1
      ) {
        sale_weight += parseFloat(
          isNaN($(this).find(".bill_net_val").val()) ||
            $(this).find(".bill_net_val").val() == ""
            ? 0
            : $(this).find(".bill_net_val").val()
        );
      }
    });

    eligible_weight = sale_weight;

    eligible_weight = parseFloat(eligible_weight);

    if (min_wt_gram <= eligible_weight) {
      $(".gift_details").css("display", "block");

      if (utilized_gift_amt > 0) {
        eligible_weight = parseFloat(
          parseFloat(eligible_weight) -
            parseFloat(utilized_gift_amt / gold_rate) -
            parseFloat(tot_chit_amt / gold_rate)
        ).toFixed(3);
      }

      //gift_amt=parseFloat(eligible_weight*silverrate_1gm);

      gift_amt = parseFloat(Math.round(eligible_weight * per_gram_amt));

      console.log(gift_amt);
    }

    $("#gift_voucher_amt").val(Math.round(gift_amt));

    $(".summary_gift_voucher").html(
      "Rs." + Math.round(gift_amt) + "  Valid Till " + validate_date
    );

    console.log("min_wt_gram :" + min_wt_gram);

    console.log("eligible_wt :" + eligible_weight);
  } else {
    $("#gift_voucher_amt").val(0);

    $(".summary_gift_voucher").html("");
  }
}

$("#total_cost").on("change", function () {
  var final_price = parseFloat($("#total_payment_amount").val()).toFixed(2);

  var total_cost = parseFloat($(".total_cost").val()).toFixed(2);

  var total_discount =
    $("#total_discount").val() != "" ? $("#total_discount").val() : 0;

  var total_sales_amount =
    $(".sale_amt_with_tax").html() != "" ? $(".sale_amt_with_tax").html() : 0;

  if (final_price < total_cost) {
    $("#paymentAlert").html("The Final Bill Amount is " + final_price);

    $(".total_cost").val(final_price);

    $(".summary_discount_amt").val(total_discount);
  } else {
    var discount = parseFloat(
      parseFloat(final_price) - parseFloat(total_cost)
    ).toFixed(2);

    $(".summary_discount_amt").val(discount);

    $("#paymentAlert").html("");
  }

  if (total_cost < 0) {
    $(".pay_to_cus").val($(".total_cost").val() * -1); // Make positive and add

    $(".receive_amount").val(0);
  } else {
    $(".pay_to_cus").val(0);

    $(".receive_amount").val($(".total_cost").val());
  }

  $(".bal_amount").html($(".total_cost").val());
  $("#summary_discount_amt").prop("readonly", true);
  $("#total_cost").prop("readonly", true);
  $("#disc_apply").trigger("click");
});

/*$('#summary_discount_amt').on('change',function(){

	var final_price=parseFloat($('#total_payment_amount').val()).toFixed(2);

	var total_cost=parseFloat($('.total_cost').val()).toFixed(2);

	var total_discount=($('#total_discount').val()!='' ? $('#total_discount').val():0);

	var total_sales_amount=($('.sale_amt_with_tax').html()!='' ? $('.sale_amt_with_tax').html():0);

	if(final_price<total_cost)

	{

		$('#paymentAlert').html('The Final Bill Amount is '+final_price);

		$('.total_cost').val(final_price);

		$('.summary_discount_amt').val(total_discount);

	}

	else

	{

		var discount=parseFloat(parseFloat(final_price)-parseFloat(total_cost)).toFixed(2);

		$('.summary_discount_amt').val(discount);

		$('#paymentAlert').html('');

	}

		if(total_cost < 0)

		{

			$(".pay_to_cus").val(($('.total_cost').val())* -1); // Make positive and add

			$(".receive_amount").val(0);

		}

		else

		{

			$(".pay_to_cus").val(0);

			$(".receive_amount").val($('.total_cost').val());

		}

		if(total_sales_amount>=200000)

		{

			$('#pan_no').prop('disabled',false);

		}

		$('.bal_amount').html(($('.total_cost').val()));

		$('#disc_apply').trigger('click');

});

*/

/*$('#summary_discount_amt').on('keyup',function(e){

	e.preventDefault();

	var total_discount=$('#total_discount').val();

	var summary_discount_amt=($('#summary_discount_amt').val()!='' ? $('#summary_discount_amt').val():0);

	var total_payment_amount=$('#total_payment_amount').val();

	var final_price=$('#total_payment_amount').val();

		if(total_payment_amount<summary_discount_amt)

		{

			$('#paymentAlert').html('The Final Bill Amount is '+total_payment_amount);

			$('#summary_discount_amt').val(summary_discount_amt);

			$('.total_cost').val(total_payment_amount);

		}

		else

		{

			var final_price=parseFloat(parseFloat(total_payment_amount)-parseFloat(summary_discount_amt)).toFixed(2);

			$('.total_cost').val(final_price);

			$('#paymentAlert').html('');

		}

		if(final_price < 0)

		{

			$(".pay_to_cus").val(final_price* -1); // Make positive and add

			$(".receive_amount").val(0);

		}

		else

		{

			$(".pay_to_cus").val(0);

			$(".receive_amount").val(final_price);

		}

		if(final_price>=200000)

		{

			$('#pan_no').prop('disabled',false);

		}

		$('.bal_amount').html(final_price);

});*/

/*$('#summary_discount_amt').on('keyup',function(e){

	e.preventDefault();



});*/

$(".receive_amount").on("change", function () {
  var is_credit = $("input[name='billing[is_credit]']:checked").val();

  if (
    parseFloat($("#total_cost").val()) != parseFloat($(".receive_amount").val())
  ) {
    $("#is_credit_yes").prop("checked", true);

    $("#credit_due_date").prop("disabled", false);
  } else {
    $("#credit_due_date").prop("disabled", true);

    $("#is_credit_no").prop("checked", true);
  }

  if ($("#credit_due_date").val() == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select Due Date",
    });
  }

  calculatePaymentCost();

  var bill_amt = parseFloat($(".total_cost").val()).toFixed(2);

  $(".billing_amount").html(
    money_format_india(parseFloat(bill_amt).toFixed(2))
  );

  var receive_amt = parseFloat($(".receive_amount").val()).toFixed(2);

  var due_amt = bill_amt - receive_amt;

  $(".due_bill_amount").text(due_amt);
});

$("#make_pay_cash,.receive_amount,#advance_amount,.benifit_amount").on(
  "keyup",
  function () {
    calculatePaymentCost();
  }
);

$(".NB_close_btn").on("click", function (event) {
  netBankingModalEvents();
});

function netBankingModalEvents() {
  if ($(".NB").html() != "" && Array.isArray(nb_payment) && ctrl_page[1] != 'paymentmode_edit') {
    canCloseNBModal = false;

    const totNBamount = Object.values(nb_payment).reduce(
      (sum, item) => sum + parseFloat(item.amount),
      0
    );

    const NBPayment = $("#nb_payment").val();

    const NB_Payment_row = $(".NB").html();

    const totNB_amount =
      NBPayment != ""
        ? Object.values(JSON.parse(NBPayment)).reduce(
            (sum, item) => sum + parseFloat(item.amount),
            0
          )
        : "";

    if (
      totNB_amount != totNBamount ||
      totNB_amount != parseFloat(NB_Payment_row) ||
      nb_payment.length == 0
    ) {
      $.toaster({
        priority: "danger",

        title: "Warning!",

        message: "" + "</br>Net Banking details not saved",

        settings: { timeout: 5000 },
      });
    } else {
      canCloseNBModal = true;
    }
  } else {
    canCloseNBModal = true;
  }
}

$("#net_banking_modal").on("hide.bs.modal", function (e) {
  if (!canCloseNBModal) {
    e.preventDefault();
  } else {
    console.log("Success");
  }
});

function calculatePaymentCost() {
  if (ctrl_page[1] == "billing" && $("#is_eda").val() == 1) {
    validate_max_cash();
  } else if (ctrl_page[1] == "receipt" && $("#is_eda").val() == 1) {
    validate_max_cash_for_receipt();
  }

  var chit_amt = 0;

  var voucher_amt = 0;

  var total_amount = 0;

  var bal_amount = 0;

  var wallet_blc = 0;

  var tot_chit_amt =
    $("#tot_chit_amt").html() != "" ? $("#tot_chit_amt").html() : 0;

  var receive_amount =
    $(".receive_amount").val() != "" ? $(".receive_amount").val() : 0;

  var pay_to_cus = $(".pay_to_cus").val() != "" ? $(".pay_to_cus").val() : 0;

  var make_pay_cash =
    $("#make_pay_cash").val() != "" ? $("#make_pay_cash").val() : 0;

  var cc =
    $(".CC").html() != "" && $(".CC").html() != undefined ? $(".CC").html() : 0;

  var dc =
    $(".DC").html() != "" && $(".DC").html() != undefined ? $(".DC").html() : 0;

  var chq =
    $(".CHQ").html() != "" && $(".CHQ").html() != undefined
      ? $(".CHQ").html()
      : 0;

  var NB =
    $(".NB").html() != "" && $(".NB").html() != undefined ? $(".NB").html() : 0;

  var tot_adv_adj =
    $("#tot_adv_adj").html() != "" ? $("#tot_adv_adj").html() : 0;

  var tot_voucher_amt =
    $("#tot_voucher_amt").html() != "" ? $("#tot_voucher_amt").html() : 0;

  var advance_amount =
    $("#advance_amount").val() != "" ? $("#advance_amount").val() : 0;

  var is_credit = $("input[name='billing[is_credit]']:checked").val();

  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  var make_as_advance = $(
    "input[name='billing[make_as_advance]']:checked"
  ).val();

  var sales_amount = $(".sale_amt_with_tax").html();

  var purchase_amt = $(".summary_pur_amt").html();

  var benifits =
    $(".benifit_amount").val() != "" ? $(".benifit_amount").val() : 0;

  var sale_return = parseFloat(
    isNaN($(".summary_sale_ret_amt").html()) ||
      $(".summary_sale_ret_amt").html() == ""
      ? 0
      : $(".summary_sale_ret_amt").html()
  ).toFixed(2);

  var order_advance_recd_amt = $(".adv_amt").val();

  var allowsubmit = true;

  /*if(parseFloat(tot_chit_amt) > parseFloat($('#total_cost').val()) && parseFloat(tot_chit_amt) > 0){

		receive_amount = 0;

		$('.receive_amount').val(receive_amount);

		$('.pay_to_cus').val(parseFloat(benifits).toFixed(2));

		pay_to_cus      = parseFloat($('.pay_to_cus').val()!='' ? $('.pay_to_cus').val():0);

	}*/

  if (tot_chit_amt > 0) {
    $("#gift_voucher_modal").attr("disabled", true);

    $("#giftVoucher_details").val("");

    $("#tot_voucher_amt").html("");

    $("#gift_voucher_amt").val(0);

    $(".summary_gift_voucher").html("");
  } else {
    $("#gift_voucher_modal").attr("disabled", false);
  }

  if (parseFloat(receive_amount) < parseFloat(tot_voucher_amt)) {
    $("#gift_voucher_modal").attr("disabled", true);

    $("#giftVoucher_details").val("");

    $("#tot_voucher_amt").html(0);

    tot_voucher_amt = 0;
  }

  if (bill_type != 10) {
    if (adv_adj_details.length > 0) {
      wallet_blc = adv_adj_details[0].wallet_blc;
    }

    if (receive_amount > 0) {
      total_amount = parseFloat(
        parseFloat(make_pay_cash) +
          parseFloat(tot_chit_amt) +
          parseFloat(tot_voucher_amt) +
          parseFloat(cc) +
          parseFloat(dc) +
          parseFloat(tot_adv_adj) +
          parseFloat(chq) +
          parseFloat(NB) +
          parseFloat(advance_amount)
      ).toFixed(2);
    } else if (pay_to_cus > 0) {
      if (benifits > receive_amount) {
        if (make_pay_cash > 0 || NB > 0 || chq > 0 || cc > 0 || dc > 0) {
          total_amount = parseFloat(
            parseFloat(make_pay_cash) +
              parseFloat(NB) +
              parseFloat(chq) +
              parseFloat(advance_amount)
          ).toFixed(2);
        } else {
          total_amount = benifits;

          allowsubmit = false;
        }
      } else {
        total_amount = parseFloat(
          parseFloat(make_pay_cash) +
            parseFloat(NB) +
            parseFloat(chq) +
            parseFloat(advance_amount)
        ).toFixed(2);
      }
    } else {
      total_amount = parseFloat(
        parseFloat(make_pay_cash) +
          parseFloat(tot_chit_amt) +
          parseFloat(tot_voucher_amt) +
          parseFloat(cc) +
          parseFloat(dc) +
          parseFloat(chq) +
          parseFloat(NB) +
          parseFloat(tot_adv_adj) +
          parseFloat(advance_amount)
      ).toFixed(2);
    }

    bal_amount = parseFloat(
      parseFloat(receive_amount) - parseFloat(total_amount)
    ).toFixed(2);

    //if(benifits > 0 && receive_amount < total_amount && bal_amount < 0 && ! (Math.abs(bal_amount) < benifits && ! (pay_to_cus > 0) )){

    if (benifits > 0 && receive_amount < total_amount && bal_amount < 0) {
      bal_amount = parseFloat(parseFloat(bal_amount) + parseFloat(benifits));
    } else {
      $(".benifit_amount").val(0);
    }

    // if(!netBankingModalEvents()){

    // 	allowsubmit = false;

    // }

    $(".sum_of_amt").html(isNaN(total_amount) ? 0 : total_amount);

    $(".bal_amount").html(isNaN(bal_amount) ? 0 : bal_amount);

    if (
      bal_amount == 0 &&
      (make_pay_cash > 0 ||
        NB > 0 ||
        chq > 0 ||
        tot_chit_amt > 0 ||
        tot_adv_adj > 0 ||
        tot_voucher_amt > 0 ||
        cc > 0 ||
        dc > 0)
    ) {
      //if(bal_amount==0)

      $("#pay_submit").prop("disabled", false);
    } else if ($("#total_cost").val() == 0 && bill_type != 5) {
      if (receive_amount == 0) {
        $("#pay_submit").prop("disabled", false);
      }
    } else if (pay_to_cus > 0) {
      if (
        (parseFloat(make_pay_cash) <= parseFloat($("#max_return_amt").val()) &&
          allowsubmit) ||
        $("#is_eda").val() == 2
      ) {
        $(".bal_amount").html(parseFloat(pay_to_cus - total_amount).toFixed(2));

        if (parseFloat(pay_to_cus) == parseFloat(total_amount) && allowsubmit) {
          $("#pay_submit").prop("disabled", false);
        } else {
          $("#pay_submit").prop("disabled", true);
        }
      } else {
        alert("Maximum Cash Return Amount is " + $("#max_return_amt").val());

        $("#make_pay_cash").val(0);

        $("#make_pay_cash").focus();

        $(".sum_of_amt").html(0);

        $(".bal_amount").html(0);
      }

      $("#giftVoucher_details").val("");

      $("#tot_voucher_amt").html("");

      if (bill_type == 5) {
        if ($(".adv_amt").val() > 0) {
          if ($(".receive_amount").val() == $(".sum_of_amt").html()) {
            $("#pay_submit").prop("disabled", false);
          } else {
            $("#pay_submit").prop("disabled", true);
          }
        } else {
          $("#pay_submit").prop("disabled", false);
        }
      }

      if ($(".bal_amount").html() != 0) {
        $("#pay_submit").prop("disabled", true);
      }
    } else if (is_credit == 1) {
      if (parseFloat(receive_amount) == parseFloat(total_amount)) {
        $("#pay_submit").prop("disabled", false);
      } else {
        $("#pay_submit").prop("disabled", true);
      }
    } else if (wallet_blc > 0) {
      $("#pay_submit").prop("disabled", false);
    } else {
      $("#pay_submit").prop("disabled", true);
    }

    if (bill_type == 1 || bill_type == 2 || bill_type == 3) {
      //check_gift_vocuher_issue();
    } else {
      $(".gift_details").css("display", "none");
    }
  } else if (bill_type == 10) {
    //$('.pay_to_cus').val(tot_chit_amt);

    total_amount = parseFloat(
      parseFloat(make_pay_cash) +
        parseFloat(NB) +
        parseFloat($("#advance_amount").val())
    ).toFixed(2);

    if (
      parseFloat(make_pay_cash) <= parseFloat($("#max_return_amt").val()) ||
      $("#is_eda").val() == 2
    ) {
      $(".bal_amount").html(parseFloat(pay_to_cus - total_amount).toFixed(2));

      if (parseFloat(pay_to_cus) == parseFloat(total_amount)) {
        $("#pay_submit").prop("disabled", false);
      } else {
        $("#pay_submit").prop("disabled", true);
      }
    } else {
      alert("Maximum Cash Return Amount is " + $("#max_return_amt").val());

      $("#make_pay_cash").val(0);

      $("#make_pay_cash").focus();

      $(".sum_of_amt").html(0);

      $(".bal_amount").html(0);
    }

    if (parseFloat(total_amount) == parseFloat($(".pay_to_cus").val())) {
      $("#pay_submit").prop("disabled", false);
    } else {
      $("#pay_submit").prop("disabled", true);
    }

    if ($(".pay_to_cus").val() > 0) {
      $("#advance_no").attr("disabled", false);

      $("#advance_yes").attr("disabled", false);

      $("#chit_deposit").attr("disabled", false);

      //$('#advance_amount').val(0);
    }
  }

  if (bill_type == 5 && purchase_amt > 0) {
    if (receive_amount == 0) {
      $("#pay_submit").prop("disabled", false);
    }
  }

  if (
    parseFloat(sales_amount) >= parseFloat($("#min_pan_amt").val()) &&
    $("#is_pan_required").val() == 1  && $('#is_eda').val() == 1
  ) {
    if ($("#cus_del_country").val() != "") {
      if ($("#cmp_country").val() == $("#cus_del_country").val()) {
        // For Normal Customer
        var pan_no_valid = checkPanNoValidation($("#pan_no").val());
        if (!pan_no_valid) {
          if (checkToasterDuplicate("Enter The PAN No")) {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: "" + "</br>Enter The PAN No",
              settings: { timeout: 2000 },
            });
            // if (!pan_no_valid) {
            // 	$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>Enter The PAN No" });
            // 	$('#pay_submit').prop('disabled', true);
          } 
          $('#pay_submit').prop('disabled',true);
      }
        $("#pan_no").prop("readonly", false);
        //$('#pan_images').prop('disabled',false);
      } // For NRI Customer
      else {
        if ($("#cmp_country").val() !== $("#cus_country").val())
        if ($("#pp_no").val() == "") {
            if (checkToasterDuplicate("Enter The Passport No")) {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>Enter The Passport No",
            settings: { timeout: 2000 },
          });
          $("#pay_submit").prop("disabled", true);
        } else {
          //$('#pay_submit').prop('disabled',false);
        }

        $("#dl_no").prop("readonly", false);
        $("#pp_no").prop("readonly", false);
          }
      }
    }
  }

  if (
    parseFloat(purchase_amt) >= parseFloat($("#min_pan_amt").val()) &&
    $("#is_pan_required").val() == 1  && $('#is_eda').val() == 1
  ) {
    if ($("#cus_del_country").val() != "") {
      if ($("#cmp_country").val() == $("#cus_del_country").val()) {
        // For Normal Customer
        var pan_no_valid = checkPanNoValidation($("#pan_no").val());
        if (!pan_no_valid) {

          if (checkToasterDuplicate("Enter The PAN No")) {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: "" + "</br>Enter The PAN No",
              settings: { timeout: 2000 },
            });
            // if (!pan_no_valid) {
            // 	$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>Enter The PAN No" });
            // 	$('#pay_submit').prop('disabled', true);
          } else {
          }
          $('#pay_submit').prop('disabled',true);
        }
        $("#pan_no").prop("readonly", false);
        //$('#pan_images').prop('disabled',false);
      } // For NRI Customer
      else {
        if ($("#cmp_country").val() !== $("#cus_country").val())
        if ($("#pp_no").val() == "") {
            if (checkToasterDuplicate("Enter The Passport No")) {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>Enter The Passport No",
            settings: { timeout: 2000 },
          });
          $("#pay_submit").prop("disabled", true);
        } else {
          //$('#pay_submit').prop('disabled',false);
        }

        $("#dl_no").prop("readonly", false);
        $("#pp_no").prop("readonly", false);
          }
      }
    }
  }

  if (
    parseFloat(sale_return) >= parseFloat($("#min_pan_amt").val()) &&
    $("#is_pan_required").val() == 1  && $('#is_eda').val() == 1
  ) {
    if ($("#cus_del_country").val() != "") {
      if ($("#cmp_country").val() == $("#cus_del_country").val()) {
        // For Normal Customer
        var pan_no_valid = checkPanNoValidation($("#pan_no").val());
        if (!pan_no_valid) {
          if (checkToasterDuplicate("Enter The PAN No")) {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: "" + "</br>Enter The PAN No",
              settings: { timeout: 2000 },
            });
            // if (!pan_no_valid) {
            // 	$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>Enter The PAN No" });
            // 	$('#pay_submit').prop('disabled', true);
          } else {
            //$('#pay_submit').prop('disabled',false);
          }
          $("#pay_submit").prop("disabled", true);
        }
        $("#pan_no").prop("readonly", false);
        //$('#pan_images').prop('disabled',false);
      } // For NRI Customer
      else {
        if ($("#cmp_country").val() !== $("#cus_country").val())
        if ($("#pp_no").val() == "") {
            if (checkToasterDuplicate("Enter The Passport No")) {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>Enter The Passport No",
            settings: { timeout: 2000 },
          });
          $("#pay_submit").prop("disabled", true);
        } else {
          //$('#pay_submit').prop('disabled',false);
        }

        $("#dl_no").prop("readonly", false);
        $("#pp_no").prop("readonly", false);
      }
    }
  }

  if (
    parseFloat(order_advance_recd_amt) >= parseFloat($("#min_pan_amt").val()) &&
    $("#is_pan_required").val() == 1  && $('#is_eda').val() == 1
  ) {
    if ($("#cus_del_country").val() != "") {
      if ($("#cmp_country").val() == $("#cus_del_country").val()) {
        // For Normal Customer
        var pan_no_valid = checkPanNoValidation($("#pan_no").val());
        if (!pan_no_valid) {
          if (checkToasterDuplicate("Enter The PAN No")) {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: "" + "</br>Enter The PAN No",
              settings: { timeout: 2000 },
            });
            // if (!pan_no_valid) {
            // 	$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>Enter The PAN No" });
            // 	$('#pay_submit').prop('disabled', true);
          } else {
            //$('#pay_submit').prop('disabled',false);
          }
          $("#pay_submit").prop("disabled", true);
        }
        $("#pan_no").prop("readonly", false);
        //$('#pan_images').prop('disabled',false);
      } // For NRI Customer
      else {
          if ($("#cmp_country").val() !== $("#cus_country").val())
        if ($("#pp_no").val() == "") {
              if (checkToasterDuplicate("Enter The Passport No")) {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>Enter The Passport No",
            settings: { timeout: 2000 },
          });
          $("#pay_submit").prop("disabled", true);
        } else {
          //$('#pay_submit').prop('disabled',false);
        }

        $("#dl_no").prop("readonly", false);
        $("#pp_no").prop("readonly", false);
            }
        }
      }
    }
  }
}

function get_billing_list() {
  my_Date = new Date();

  $("div.overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/billing/ajax?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "JSON",

    data: {
      dt_range: $("#dt_range").val(),
      bill_no: $("#filter_bill_no").val(),
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
    },

    type: "POST",

    success: function (data) {
      console.log("List", data);

      set_billing_list(data);

      $("div.overlay").css("display", "none");
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

function get_approval_billing_list() {
  my_Date = new Date();

  $("div.overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/billing/ajaxapprovallist?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "JSON",

    data: {
      dt_range: $("#dt_range").val(),
      bill_no: $("#filter_bill_no").val(),
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
      order_status: $("#order_status").val(),
    },

    type: "POST",

    success: function (data) {
      console.log("List", data);

      set_approval_billing_list(data);

      $("div.overlay").css("display", "none");
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

$(document).on("click", "a.cancell-bill", function (e) {
  e.preventDefault();

  var link = $(this).data("href");

  $("#confirm-billcancell").find(".btn-confirm").attr("href", link);
});

function set_billing_list(data) {
  $("div.overlay").css("display", "none");

  var billing = data.list;

  var access = data.access;

  var profile = data.profile;

  var oTable = $("#billing_list").DataTable();

  if (access.add == "0") {
    $("#add_billing").attr("disabled", "disabled");
  }

  oTable.clear().draw();

  if (billing != null && billing.length > 0) {
    $("#total_billing").text(billing.length);

    oTable = $("#billing_list").dataTable({
      bDestroy: true,

      bInfo: true,

      bFilter: true,

      bSort: true,

      order: [[0, "desc"]],

      dom: "lBfrtip",

      columnDefs: [
        {
          targets: [7, 8],
          className: "dt-body-right",
        },
      ],

      buttons: [
        {
          extend: "print",

          footer: true,

          title: "Billing",

          customize: function (win) {
            $(win.document.body)
              .find("table")

              .addClass("compact")

              .css("font-size", "inherit");
          },
        },

        {
          extend: "excel",

          footer: true,

          title: "Billing",
        },
      ],

      aaData: billing,

      aoColumns: [
        { mDataProp: "bill_id" },

        { mDataProp: "bill_date" },

        { mDataProp: "branch_name" },

        { mDataProp: "bill_no" },

        // {
        // 	"mDataProp": function (row, type, val, meta) {
        // 		var url = base_url + 'index.php/admin_ret_estimation/generate_invoice/' + row.estimation_id;

        // 		return '<a href=' + url + ' target="_blank">' + row.esti_no + '</a>';
        // 	},
        // },

        {
          mDataProp: function (row, type, val, meta) {
            if (row.billing_type == 12) {
              return row.karigar_name;
            } else {
              if (row.final_name) {
                return row.final_name;
              } else {
                return row.customer;
              }
            }
          },
        },

        {
          mDataProp: function (row, type, val, meta) {
            if (row.billing_type == 12) {
              return row.karigar_mobile;
            } else {
              return row.mobile;
            }
          },
        },

        { mDataProp: "bill_type" },

        {
          mDataProp: function (row, type, val, meta) {
            return money_format_india(parseFloat(row.tot_bill_amt).toFixed(2));
          },
        },
        {
          mDataProp: function (row, type, val, meta) {
            return money_format_india(parseFloat(row.return_amt).toFixed(2));
          },
        },

        { mDataProp: "bill_status" },

        { mDataProp: "emp_name" },

        {
          mDataProp: function (row, type, val, meta) {
            id = row.bill_id;

            edit_url =
              access.edit == "1"
                ? base_url + "index.php/admin_ret_billing/billing/edit/" + id
                : "#";

            if (row.billing_type == 11 && row.billdet_bill_id == "") {
              print_url =
                base_url +
                "index.php/admin_ret_billing/repair_order_thermal_print/" +
                id;
            } else {
              print_url =
                base_url + "index.php/admin_ret_billing/billing_invoice/" + id;
            }

            delete_url =
              access.delete == "1"
                ? base_url + "index.php/admin_ret_billing/billing/delete/" + id
                : "#";

            billcancel_url =
              access.edit == "1"
                ? base_url +
                  "index.php/admin_ret_billing/billing/cancell/" +
                  id +
                  "/" +
                  row.bill_no
                : "#";

            edit_url =
              access.edit == "1"
                ? base_url +
                  "index.php/admin_ret_billing/paymentmode_edit/list/" +
                  id
                : "#";

            /*<a href="'+edit_url+'" class="btn btn-primary btn-edit"><i class="fa fa-edit" ></i></a>

					<a href="#" class="btn btn-danger btn-del" data-href='+delete_url+' data-toggle="modal" data-target="#confirm-delete" ><i class="fa fa-trash"></i></a>*/

            action_content =
              '<a href="' +
              print_url +
              '" target="_blank" class="btn btn-info btn-print" data-toggle="tooltip" title="Billing Receipt"><i class="fa fa-print" ></i></a><a href="' +
              edit_url +
              '" class="btn btn-primary btn-edit"><i class="fa fa-edit" ></i></a>' +
              (((row.allow_cancel == 1 && profile.allow_bill_cancel == 1 || (profile.allow_bill_cancel == 1 && profile.previous_bill_cancel == 1)) && row.status == '1' && access.edit == '1')
                ? '<button class="btn btn-warning" onclick="confirm_delete(' +
                  id +
                  "," +
                  profile.bill_cancel_otp +
                  "," +
                  row.id_branch +
                  ')"><i class="fa fa-close" ></i></button>'
                : "");

            return action_content;
          },
        },
      ],
    });
  }
}

function set_approval_billing_list(data) {
  $("div.overlay").css("display", "none");

  var billing = data.list;

  var access = data.access;

  var profile = data.profile;

  var oTable = $("#approval_billing_list").DataTable();

  $("#total_billing").text(billing.length);

  oTable.clear().draw();

  if (billing != null && billing.length > 0) {
    oTable = $("#approval_billing_list").dataTable({
      bDestroy: true,

      bInfo: true,

      bFilter: true,

      bSort: true,

      order: [[0, "desc"]],

      dom: "lBfrtip",

      buttons: [
        {
          extend: "print",

          footer: true,

          title: "Billing",

          customize: function (win) {
            $(win.document.body)
              .find("table")

              .addClass("compact")

              .css("font-size", "inherit");
          },
        },

        {
          extend: "excel",

          footer: true,

          title: "Approval Bills",
        },
      ],

      aaData: billing,

      aoColumns: [
        {
          mDataProp: function (row, type, val, meta) {
            if (row.orderstatus == 3) {
              return row.id_issue_receipt;
            } else if (row.orderstatus == 5) {
              if (row.sale_billid == "" && row.tag_status == 11) {
                return (
                  '<input type="checkbox" class="approval_tags"  name="approva[tag_id][]" value="' +
                  row.tag_id +
                  '" /><input type="hidden"  class="id_karigar"  value="' +
                  row.id_karigar +
                  '" />' +
                  row.id_issue_receipt
                );
              } else {
                return row.id_issue_receipt;
              }
            } else {
              return (
                '<input type="checkbox" class="approval_tags"  name="approva[tag_id][]" value="' +
                row.tag_id +
                '" /><input type="hidden"  class="id_karigar"  value="' +
                row.id_karigar +
                '" />' +
                row.id_issue_receipt
              );
            }
          },
        },

        { mDataProp: "billdate" },

        { mDataProp: "branchname" },

        { mDataProp: "bill_no" },

        {
          mDataProp: function (row, type, val, meta) {
            return row.customer;
          },
        },

        { mDataProp: "tag_code" },

        { mDataProp: "gross_wt" },

        { mDataProp: "net_wt" },

        {
          mDataProp: function (row, type, val, meta) {
            return row.supplier;
          },
        },

        { mDataProp: "purchaseon" },

        { mDataProp: "po_ref_no" },

        { mDataProp: "emp_name" },

        { mDataProp: "order_no" },

        { mDataProp: "orderedon" },

        { mDataProp: "order_status_msg" },

        { mDataProp: "sale_billno" },

        { mDataProp: "sale_billdate" },
      ],
    });
  }
}

function get_metal() {
  $(".overlay").css("display", "block");

  $.ajax({
    type: "GET",

    url: base_url + "index.php/get/active_metals",

    dataType: "json",

    success: function (data) {
      var id_metal = $("#id_metal").val();

      $.each(data, function (key, item) {
        $("#metal_select").append(
          $("<option></option>")
            .attr("value", item.id_metal)

            .text(item.metal)
        );
      });

      $("#metal_select").select2({
        placeholder: "Select metal",

        allowClear: true,
      });

      $("#metal_select").select2(
        "val",
        id_metal != "" && id_metal > 0 ? id_metal : ""
      );

      $(".overlay").css("display", "none");
    },
  });
}

//on selecting subcategory

$("#metal_select")
  .select2()

  .on("change", function (e) {
    if (this.value != "") {
      $("#id_metal").val(this.value);
    }
  });

function get_received_lots() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_tagging/get_lot_ids",

    dataType: "json",

    success: function (data) {
      lot_details = data;

      var id = $("#tag_lot_id").val();

      $.each(data, function (key, item) {
        $("#tag_lot_received_id").append(
          $("<option></option>")
            .attr("value", item.lot_no)

            .text(item.lot_no)
        );
      });

      $("#tag_lot_received_id").select2("val", id != "" && id > 0 ? id : "");

      $(".overlay").css("display", "none");
    },
  });
}

function get_tag_types() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_tagging/get_tag_types",

    dataType: "json",

    success: function (data) {
      var id = $("#tag_type").val();

      $.each(data, function (key, item) {
        $("#select_tag_type").append(
          $("<option></option>")
            .attr("value", item.tag_id)

            .text(item.tag_name)
        );
      });

      $("#select_tag_type").select2("val", id != "" && id > 0 ? id : "");

      $(".overlay").css("display", "none");
    },
  });
}

function get_tag_purities() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_catalog/purity/active_purities",

    dataType: "json",

    success: function (data) {
      purities = data;
    },
  });
}

function get_metal_rates_by_branch() {
  var id_branch = $("#id_branch").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_tagging/get_metal_rates_by_branch?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    data: { id_branch: id_branch },

    type: "POST",

    dataType: "json",

    async: false,

    success: function (data) {
      metal_rates = data;

      $(".per-grm-sale-value").html(data.goldrate_22ct);

      $(".silver_per-grm-sale-value").html(data.silverrate_1gm);

      $("#goldrate_22ct").val(data.goldrate_22ct);

      $("#silverrate_1gm").val(data.silverrate_1gm);

      $("#goldrate_18ct").val(data.goldrate_18ct);

      $("#goldrate_24ct").val(data.goldrate_24ct);

      $("#platinum_1g").val(data.platinum_1g);
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

function get_branch_details() {
  var id_branch = $("#id_branch").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_branch_details?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    data: { id_branch: id_branch },

    type: "POST",

    dataType: "json",

    async: false,

    success: function (data) {
      if (data != "") {
        $(".gift_row").css("display", "block");

        $(".summary_gift_voucher").css("display", "block");

        $("#enable_gift_voucher").val(data.enable_gift_voucher);

        $("#gift_type").val(data.gift_type);

        $("#utilize_for").val(data.utilize_for);

        $("#utilize_for").val(data.utilize_for);

        $("#bill_value").val(data.sale_value);

        $("#credit_value").val(data.credit_value);

        $("#validate_date").val(data.validate_date);

        $("#validity_days").val(data.validity_days);

        $("#id_set_gift_voucher").val(data.id_set_gift_voucher);

        $("#issue_for").val(data.metal);

        $("#calc_type").val(data.calc_type);
      } else {
        $(".gift_row").css("display", "none");

        $(".summary_gift_voucher").css("display", "none");
      }
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

function get_taxgroup_items() {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getAllTaxgroupItems/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "GET",

    success: function (data) {
      tax_details = data;

      console.log("tax_details", tax_details);
    },
  });
}

function get_tag_matels() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_estimation/getMetalTypes",

    dataType: "json",

    success: function (data) {
      matel_types = data;
    },
  });
}

function get_tag_taxgroups() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_tagging/getAvailableTaxGroups",

    dataType: "json",

    success: function (data) {
      var id = $("#tax_group_id").val();

      $.each(data, function (key, item) {
        $("#select_tax_group_id").append(
          $("<option></option>")
            .attr("value", item.tgrp_id)

            .text(item.tgrp_name)
        );
      });

      $("#select_tax_group_id").select2("val", id != "" && id > 0 ? id : "");

      $(".overlay").css("display", "none");
    },
  });
}

function getDesignPurityDetails(designId) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_tagging/getDesignPurityByDesignId/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { designId: designId },

    success: function (data) {
      var id = $("#purity").val();

      if (data.length > 0) {
        $("#select_purity").html("");

        $.each(data, function (key, item) {
          $("#select_purity").append(
            $("<option></option>")
              .attr("value", item.des_pur_id)

              .text(item.purity)
          );
        });
      } else {
        $("#select_purity").html("");
      }

      $("#select_purity").select2("val", id != "" && id > 0 ? id : "");

      $(".overlay").css("display", "none");
    },
  });
}

function getDesignStoneDetails(designId) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_tagging/getDesignStonesByDesignId/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { designId: designId },

    success: function (data) {
      tag_design_stones = data;

      /* console.log(data);

			var html = '';

			$.each(data, function(key, item){

				html += '<tr><td><input type="hidden" name="tagstone[stone_id][]" value="'+item.stone_id+'" />'+item.stone_name+'</td><td><div class="input-group"> <input class="form-control" type="number" step="any" name="tagstone[pcs][]" value="'+item.stone_pcs+'" required /></div></td><td><div class="input-group"><input type="number" class="form-control" step="any" name="tagstone[weight][]" value="" required /></div></td><td><input type="hidden" name="tagstone[uom_id][]" value="'+item.uom_id+'" />'+item.uom_short_code+'</td><td><div class="input-group"> <input class="form-control" type="number" step="any" name="tagstone[amount][]" value="" required /></div></td></tr>';

			});

			$('#tagging_stone_details tbody').append(html); */
    },
  });
}

function getDesignMaterialsByDesignId(designId) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_tagging/getDesignMaterialsByDesignId/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { designId: designId },

    success: function (data) {
      tag_design_materials = data;

      /* console.log(data);

			var html = '';

			$.each(data, function(key, item){

				html += '<tr><td><input type="hidden" name="tagmaterials[material_id][]" value="'+item.material_id+'" required />'+item.material_name+'</td><td><div class="input-group"> <input class="form-control" type="number" step="any" name="tagmaterials[weight][]" value="" required /></div></td><td><input type="hidden" name="tagmaterials[uom_id][]" value="'+item.uom_id+'" />'+item.uom_short_code+'</td><td><div class="input-group"> <input class="form-control" type="number" step="any" name="tagmaterials[amount][]" value="" required /></div></td><td></td></tr>';

			});

			$('#tagging_material_details tbody').append(html); */
    },
  });
}

function load_tag_stone_list_on_edit() {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_tagging/getTagStoneByTagId/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { tagId: $("#tag_id").val() },

    success: function (data) {
      var html = "";

      $.each(data, function (key, item) {
        html +=
          '<tr><td><input type="hidden" name="tagmaterials[material_id][]" value="' +
          item.material_id +
          '" required />' +
          item.material_name +
          '</td><td><div class="input-group"> <input class="form-control" type="number" step="any" name="tagmaterials[weight][]" value="" required /></div></td><td><input type="hidden" name="tagmaterials[uom_id][]" value="' +
          item.uom_id +
          '" />' +
          item.uom_short_code +
          '</td><td><div class="input-group"> <input class="form-control" type="number" step="any" name="tagmaterials[amount][]" value="" required /></div></td><td></td></tr>';
      });

      $("#tagging_material_details tbody").append(html);
    },
  });
}

/**

* Order Advance functions

* Starts

*/

function updateEstiOrderdetailsInBill(est_order_row) {
  rowExist = false;

  $(".order_adv_details").show();

  $("#billing_order_adv_details > tbody tr").each(function (bidx, brow) {
    bill_sale_row = $(this);

    // CHECK DUPLICATES - ESTIMATION ITEM [ORDER]

    if (bill_sale_row.find("td:first .is_est_details").val() == 1) {
      if (
        est_order_row.find("td:first .est_itm_id").val() ==
        bill_sale_row.find("td:first .est_itm_id").val()
      ) {
        rowExist = true;
      }
    }
  });

  if (!rowExist) {
    if (est_order_row.find("td:last .select_est_partial").is(":checked")) {
      var row =
        "<tr><td><span>" +
        est_order_row.find("td:first .est_hsn").val() +
        '</span><input type="hidden" class="sale_pro_hsn" name="order[hsn]" value="' +
        est_order_row.find("td:first .est_hsn").val() +
        '" /><input type="hidden" class="sale_type" name="order[sourcetype][]" value="1" /><input type="hidden" class="sale_item_type" name="order[itemtype][]" value="' +
        est_order_row.find("td:first .est_item_type").val() +
        '" /><input type="hidden" class="is_est_details" value="1" name="order[is_est_details][]" /><input type="hidden" class="est_itm_id" name="order[est_itm_id][]" value="' +
        est_order_row.find("td:first .est_itm_id").val() +
        '" /><input type="hidden" class="sale_cal_type" name="order[calltype][]" value="' +
        est_order_row.find("td:first .est_cal_type").val() +
        '" /><input type="hidden" class="sale_metal_type" value="' +
        est_order_row.find("td:first .est_metal_type").val() +
        '" /><input type="hidden" class="sale_purity" value="' +
        est_order_row.find("td:eq(4) .est_purid").val() +
        '"  name="order[purity][]" /><input type="hidden" class="sale_size" value="' +
        est_order_row.find("td:eq(5) .est_size_val").val() +
        '"  name="order[size][]" /><input type="hidden" class="sale_uom" value="' +
        est_order_row.find("td:eq(0) .est_uom").val() +
        '"  name="order[uom][]" /><input type="hidden" class="total_tax" name="order[total_tax][]"></td><td><span>' +
        est_order_row.find("td:eq(1) .est_product_name").html() +
        '</span><input class="sale_product_id" type="hidden" name="order[product][]" value="' +
        est_order_row.find("td:eq(1) .est_product_id").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(2) .est_design_code").html() +
        '</span><input type="hidden" class="sale_design_id" name="order[design][]" value="' +
        est_order_row.find("td:eq(2) .est_design_id").val() +
        '" /></td><td><input type="number" class="sale_pcs" name="order[pcs][]" value="' +
        est_order_row.find("td:eq(3) .est_pcs").val() +
        '"  /></td><td><span>' +
        est_order_row.find("td:eq(6) .est_gross_wt").html() +
        '</span><input type="hidden" class="bill_gross_val" name="order[gross][]" value="' +
        est_order_row.find("td:eq(6) .est_gross_val").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(7) .est_less_wt").html() +
        '</span><input type="hidden" class="bill_less_val" name="order[less][]" value="' +
        est_order_row.find("td:eq(7) .est_less_val").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(8) .est_net_wt").html() +
        '</span><input type="hidden" class="bill_net_val" name="order[net][]" value="' +
        est_order_row.find("td:eq(8) .est_net_val").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(9) .est_wastage").html() +
        '</span><input type="hidden" class="bill_wastage" name="order[wastage][]" value="' +
        est_order_row.find("td:eq(9) .est_wastage_percent").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(10) .est_mc").html() +
        '</span><input type="hidden" class="bill_mctype" name="order[bill_mctype][]" value="' +
        est_order_row.find("td:eq(10) .est_mc_type").val() +
        '" /><input type="hidden" class="bill_mc" name="order[mc][]" value="' +
        est_order_row.find("td:eq(10) .est_mc_value").val() +
        '" /></td><input type="number" class="bill_discount" name="order[discount][]" value="' +
        est_order_row.find("td:eq(11) .est_discount").val() +
        '" step="any" /></td><td></td><td><span>' +
        est_order_row.find("td:eq(12) .est_tgrp_name").html() +
        '</span><input type="hidden" class="sale_tax_group" name="order[taxgroup][]" value="' +
        est_order_row.find("td:eq(12) .est_tax_id").val() +
        '" /></td><td></td><td><input type="hidden" class="bill_stone_price" value="' +
        est_order_row.find(".est_stone_price").val() +
        '" /><input type="hidden" class="bill_material_price" value="' +
        est_order_row.find(".est_material_price").val() +
        '"/><input type="number" class="bill_amount" name="order[billamount][]" value="" step="any" readonly /><input type="hidden" class="per_grm_amount" name="order[per_grm][]" value="" step="any" /></td><td>Yes</td><td><span>' +
        est_order_row.find("td:first .order_no").val() +
        '</span><input type="hidden" class="order_no" name="order[order_no][]" value="' +
        est_order_row.find("td:first .order_no").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:first .est_id").val() +
        '</span><input type="hidden" class="sale_est_itm_id" name="order[estid][]" value="' +
        est_order_row.find("td:first .est_itm_id").val() +
        '" /></td><td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
    } else {
      var row =
        "<tr><td><span>" +
        est_order_row.find("td:first .est_hsn").val() +
        '</span><input type="hidden" class="sale_pro_hsn" name="order[hsn]" value="' +
        est_order_row.find("td:first .est_hsn").val() +
        '" /><input type="hidden" class="sale_type" name="order[sourcetype][]" value="1" /><input type="hidden" class="sale_item_type" name="order[itemtype][]" value="' +
        est_order_row.find("td:first .est_item_type").val() +
        '" /><input type="hidden" class="is_est_details" value="1" name="order[is_est_details][]" /><input type="hidden" class="est_itm_id" name="order[est_itm_id][]" value="' +
        est_order_row.find("td:first .est_itm_id").val() +
        '" /><input type="hidden" class="sale_cal_type" name="order[calltype][]" value="' +
        est_order_row.find("td:first .est_cal_type").val() +
        '" /><input type="hidden" class="sale_metal_type" value="' +
        est_order_row.find("td:first .est_metal_type").val() +
        '" /><input type="hidden" class="sale_purity" value="' +
        est_order_row.find("td:eq(4) .est_purid").val() +
        '"  name="order[purity][]" /><input type="hidden" class="sale_size" value="' +
        est_order_row.find("td:eq(5) .est_size_val").val() +
        '"  name="order[size][]" /><input type="hidden" class="sale_uom" value="' +
        est_order_row.find("td:eq(0) .est_uom").val() +
        '"  name="order[uom][]" /><input type="hidden" class="total_tax" name="order[total_tax][]"></td><td><span>' +
        est_order_row.find("td:eq(1) .est_product_name").html() +
        '</span><input class="sale_product_id" type="hidden" name="order[product][]" value="' +
        est_order_row.find("td:eq(1) .est_product_id").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(2) .est_design_code").html() +
        '</span><input type="hidden" class="sale_design_id" name="order[design][]" value="' +
        est_order_row.find("td:eq(2) .est_design_id").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(3) .est_piece").html() +
        '</span><input type="hidden" class="sale_pcs" name="order[pcs][]" value="' +
        est_order_row.find("td:eq(3) .est_pcs").val() +
        '"  /></td><td><span>' +
        est_order_row.find("td:eq(6) .est_gross_wt").html() +
        '</span><input type="hidden" class="bill_gross_val" name="order[gross][]" value="' +
        est_order_row.find("td:eq(6) .est_gross_val").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(7) .est_less_wt").html() +
        '</span><input type="hidden" class="bill_less_val" name="order[less][]" value="' +
        est_order_row.find("td:eq(7) .est_less_val").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(8) .est_net_wt").html() +
        '</span><input type="hidden" class="bill_net_val" name="order[net][]" value="' +
        est_order_row.find("td:eq(8) .est_net_val").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(9) .est_wastage").html() +
        '</span><input type="hidden" class="bill_wastage" name="order[wastage][]" value="' +
        est_order_row.find("td:eq(9) .est_wastage_percent").val() +
        '" /></td><td><span>' +
        est_order_row.find("td:eq(10) .est_mc").html() +
        '</span><input type="hidden" class="bill_mctype" name="order[bill_mctype][]" value="' +
        est_order_row.find("td:eq(10) .est_mc_type").val() +
        '" /><input type="hidden" class="bill_mc" name="order[mc][]" value="' +
        est_order_row.find("td:eq(10) .est_mc_value").val() +
        '" /></td><td><input type="number" class="bill_discount" name="order[discount][]" value="' +
        est_order_row.find("td:eq(11) .est_discount").val() +
        '" step="any" /></td><td></td><td><span>' +
        est_order_row.find("td:eq(12) .est_tgrp_name").html() +
        '</span><input type="hidden" class="sale_tax_group" name="order[taxgroup][]" value="' +
        est_order_row.find("td:eq(12) .est_tax_id").val() +
        '" /></td><td></td><td><input type="hidden" class="bill_stone_price" value="' +
        est_order_row.find(".est_stone_price").val() +
        '" /><input type="hidden" class="bill_material_price" value="' +
        est_order_row.find(".est_material_price").val() +
        '"/><input type="number" class="bill_amount" name="order[billamount][]" value="" step="any" readonly /><input type="hidden" class="per_grm_amount" name="order[per_grm][]" value="" step="any" /></td><td><span>' +
        est_order_row.find("td:first .order_no").val() +
        '</span><input type="hidden" class="order_no" name="order[order_no][]" value="' +
        est_order_row.find("td:first .order_no").val() +
        '" /></td></td><td><span>' +
        est_order_row.find("td:first .est_id").val() +
        '</span><input type="hidden" class="sale_est_itm_id" name="order[estid][]" value="' +
        est_order_row.find("td:first .est_itm_id").val() +
        '" /></td><td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
    }

    $("#billing_order_adv_details tbody").append(row);
  }
}

function updateorderAdvance_sale_Bill(data) {
  console.log(data);

  rowExist = false;

  var row = "";

  $(".order_adv_details").show();

  $.each(data, function (key, item) {
    $("#id_customerorder").val(item.id_customerorder);

    $("#filter_order_no").val(item.order_no);

    row +=
      "<tr id=" +
      key +
      ">" +
      "<td><span>" +
      item.hsn_code +
      '</span><input type="hidden" class="sale_pro_hsn" name="order[hsn]" value="' +
      item.hsn_code +
      '" /><input type="hidden" class="sale_type" name="order[sourcetype][]" value="1" /><input type="hidden" class="is_est_details" value="1" name="order[is_est_details][]" /><input type="hidden" class="sale_cal_type" name="order[calltype][]" value="' +
      item.calculation_based_on +
      '" /><input type="hidden" class="sale_metal_type" value="' +
      item.metal_type +
      '" /><input type="hidden" class="sale_purity" value="' +
      item.id_purity +
      '"  name="order[purity][]" /><input type="hidden" class="sale_size" value="' +
      item.size +
      '"  name="order[size][]" /><input type="hidden" class="total_tax" name="order[total_tax][]" /></td>' +
      "<td><span>" +
      item.product_name +
      '</span><input class="sale_product_id" type="hidden" name="order[product][]" value="' +
      item.id_product +
      '" /></td>' +
      "<td><span>" +
      item.design_name +
      '</span><input type="hidden" class="sale_design_id" name="order[design][]" value="' +
      item.design_no +
      '" /></td>' +
      "<td><span>" +
      item.totalitems +
      '</span><input type="hidden" class="sale_pcs" name="order[pcs][]" value="' +
      item.totalitems +
      '"  /></td>' +
      "<td><span>" +
      item.gross_wt +
      '</span><input type="hidden" class="bill_gross_val" name="order[gross][]" value="' +
      item.gross_wt +
      '" /></td>' +
      "<td><span>" +
      item.less_wt +
      '</span><input type="hidden" class="bill_less_val" name="order[less][]" value="' +
      item.less_wt +
      '" /></td>' +
      "<td><span>" +
      item.net_wt +
      '</span><input type="hidden" class="bill_net_val" name="order[net][]" value="' +
      item.net_wt +
      '" /></td>' +
      "<td><span>" +
      item.wast_percent +
      '</span><input type="hidden" class="bill_wastage" name="order[wastage][]" value="' +
      item.wast_percent +
      '" /><input type="hidden" class="wast_wgt"></td>' +
      "<td><span>" +
      item.mc +
      '</span><input type="hidden" class="bill_mctype" name="order[bill_mctype][]" value="" /><input type="hidden" class="bill_mc" name="order[mc][]" value="' +
      item.mc +
      '" /></td>' +
      "<td><span>" +
      item.tgrp_name +
      '</span><input type="hidden" class="sale_tax_group" name="order[taxgroup][]" value="' +
      item.tax_group_id +
      '" /><input type="hidden" class="sale_cgst" name="order[cgst][]" value="" /><input type="hidden" class="sale_sgst" name="order[sgst][]" value="" /><input type="hidden" class="sale_igst" name="order[igst][]" value="" /></td>' +
      "<td><span>" +
      item.order_no +
      '</span><input type="hidden" class="order_no" name="order[order_no][]" value="' +
      item.order_no +
      '" /></td>' +
      '<td><a href="#" onClick="remove_orderAdv_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
      "</tr>";
  });

  $("#billing_order_adv_details tbody").append(row);

  calculateOrderAdvBillRowTotal();

  calculateOrderColumnTotal();
}

function updateorderAdvance_purchase_Bill(data) {
  var row = "";

  var rowExist = false;

  console.log(data);

  $(".purchase_details").show();

  $.each(data, function (key, old_est_sale_row) {
    var stone_details = [];

    var other_stone_wt = 0;

    var other_stone_price = 0;

    $.each(old_est_sale_row.stone_details, function (key, item) {
      stone_details.push({
        est_old_metal_stone_id: item.est_old_metal_stone_id,
        stone_id: item.stone_id,
        stone_pcs: item.pieces,
        stone_wt: item.wt,
        stone_price: item.price,
      });

      other_stone_wt += parseFloat(item.wt);

      other_stone_price += parseFloat(item.price);
    });

    $("#purchase_item_details > tbody tr").each(function (bidx, brow) {
      bill_pur_row = $(this);

      if (
        old_est_sale_row.old_metal_sale_id ==
        bill_pur_row.find(".est_itm_id").val()
      ) {
        rowExist = true;
      }
    });

    if (!rowExist) {
      row +=
        "<tr id=" +
        key +
        ">" +
        "<td><span>" +
        old_est_sale_row.metal +
        "</span></td>" +
        "<td><span>" +
        old_est_sale_row.old_metal_sale_id +
        " - " +
        (old_est_sale_row.purpose == 1 ? "Cash" : "Exchange") +
        '</span><input type="hidden" class="is_est_details" value="1" name="purchase[is_est_details][]" /><input type="hidden" name="purchase[est_old_itm_id][]" class="est_itm_id" value="' +
        old_est_sale_row.old_metal_sale_id +
        '" /><input type="hidden" class="item_type" name="purchase[itemtype][]" value="2" /><input type="hidden" class="pur_metal_type" value="' +
        old_est_sale_row.id_category +
        '" name="purchase[metal_type][]" /></td>' +
        "<td><span>" +
        old_est_sale_row.old_metal_cat +
        "</span></td>" +
        "<td><span>" +
        old_est_sale_row.purity +
        '</span><input type="hidden" class="purity" name="purchase[purity][]" value="' +
        old_est_sale_row.purity +
        '" /></td>' +
        '<td><input type="number" class="pur_pcs" name="purchase[pcs][]" value="1" /></td>' +
        "<td><span>" +
        old_est_sale_row.gross_wt +
        '</span><input type="hidden" class="pur_gross_val" name="purchase[gross][]" value="' +
        old_est_sale_row.gross_wt +
        '" /></td>' +
        "<td><span>" +
        old_est_sale_row.less_wt +
        '</span><input type="hidden" class="pur_less_val" name="purchase[less][]" value="' +
        old_est_sale_row.less_wt +
        '" /></td>' +
        "<td>" +
        old_est_sale_row.stone_wt +
        "</td>" +
        "<td><span>" +
        old_est_sale_row.wastage_percent +
        '</span><input type="hidden" class="pur_wastage" name="purchase[wastage][]" value="' +
        old_est_sale_row.wastage_percent +
        '" /></td>' +
        '<td><span class="wastage_wt">' +
        old_est_sale_row.wastage_wt +
        '</span><input type="hidden" class="pur_wastage_wt" name="purchase[wastage_wt][]" value="' +
        old_est_sale_row.wastage_wt +
        '" /></td>' +
        "<td><span>" +
        old_est_sale_row.net_wt +
        '</span><input type="hidden" class="pur_net_val" name="purchase[net][]" value="' +
        old_est_sale_row.net_wt +
        '" /><input type="hidden" class="pur_stone_wt_val" name="purchase[stone_wt][]" value="' +
        old_est_sale_row.stone_wt +
        '" /><input type="hidden" class="pur_dust_wt_val" name="purchase[dust_wt][]" value="' +
        old_est_sale_row.dust_wt +
        '" /></td>' +
        "<td>" +
        old_est_sale_row.rate_per_gram +
        "</td>" +
        '<td><input type="hidden" class="pur_discount" name="purchase[discount][]" value="" /></td>' +
        '<td><a href="#" onClick="create_new_empty_bill_purchase_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" class="stone_details" value=' +
        JSON.stringify(stone_details) +
        ' name="purchase[stone_details][]"/><input type="hidden" class="other_stone_price" value="' +
        other_stone_price +
        '" /><input type="hidden" class="other_stone_wt" value="' +
        other_stone_wt +
        '" /><input type="hidden" class="est_old_dust_val" value="' +
        old_est_sale_row.dust_wt +
        '" /><input type="hidden" class="est_old_stone_val" value="' +
        old_est_sale_row.stone_wt +
        '" /><input type="hidden" class="bill_material_price" value="0"/></td>' +
        "<td><span>" +
        (old_est_sale_row.purpose == 1 ? "Cash" : "Exchange") +
        "</span></td>" +
        "<td><span>" +
        old_est_sale_row.remark +
        '</span><input type="hidden" class="pur_est_id" name="purchase[estid]" value="' +
        old_est_sale_row.est_id +
        '" /></td>' +
        '<td><input type="number" class="bill_amount" name="purchase[billamount][]" value="' +
        old_est_sale_row.amount +
        '" step="any" readonly /><input type="hidden" class="bill_rate_per_grm" name="purchase[rate_per_grm][]" value="' +
        old_est_sale_row.rate_per_gram +
        '" step="any" readonly /></td>' +
        '<td><a href="#" onClick="remove_orderAdv_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
        "</tr>";
    }
  });

  $("#purchase_item_details tbody").append(row);

  //calculatePurchaseBillRowTotal();
}

function calculateOrderAdvBillRowTotal() {
  $("#billing_order_adv_details > tbody tr").each(function (idx, row) {
    curRow = $(this);

    var paid_wt =
      isNaN($(".summary_adv_paid_wt").html()) ||
      $(".summary_adv_paid_wt").html() == ""
        ? 0
        : $(".summary_adv_paid_wt").html();

    var gross_wt =
      isNaN(curRow.find("td:eq(4) .bill_gross_val").val()) ||
      curRow.find("td:eq(4) .bill_gross_val").val() == ""
        ? 0
        : curRow.find("td:eq(4) .bill_gross_val").val();

    var less_wt =
      isNaN(curRow.find("td:eq(5) .bill_less_val").val()) ||
      curRow.find("td:eq(5) .bill_less_val").val() == ""
        ? 0
        : curRow.find("td:eq(5) .bill_less_val").val();

    var net_wt =
      parseFloat(gross_wt) - parseFloat(less_wt) - parseFloat(paid_wt);

    var calculation_type =
      isNaN(curRow.find("td:eq(0) .sale_cal_type").val()) ||
      curRow.find("td:eq(0) .sale_cal_type").val() == ""
        ? 0
        : curRow.find("td:eq(0) .sale_cal_type").val();

    var stone_price =
      isNaN(curRow.find(".bill_stn_price").val()) ||
      curRow.find(".bill_stn_price").val() == ""
        ? 0
        : curRow.find(".bill_stn_price").val();

    var material_price =
      isNaN(curRow.find(".bill_material_price").val()) ||
      curRow.find(".bill_material_price").val() == ""
        ? 0
        : curRow.find(".bill_material_price").val();

    var total_price = 0;

    var rate_per_grm = 0;

    var base_value_amt = 0;

    var arrived_value_amt = 0;

    var arrived_value_tax = 0;

    var base_value_tax = 0;

    var total_tax_rate = 0;

    var cus_state = $("#cus_state").val();

    var cmp_state = $("#cmp_state").val();

    var cgst = 0;

    var igst = 0;

    if (curRow.find("td:eq(0) .sale_metal_type").val() == 1) {
      rate_per_grm =
        isNaN($(".per-grm-sale-value").html()) ||
        $(".per-grm-sale-value").html() == ""
          ? 0
          : parseFloat($(".per-grm-sale-value").html());
    } else {
      rate_per_grm =
        isNaN($(".silver_per-grm-sale-value").html()) ||
        $(".silver_per-grm-sale-value").html() == ""
          ? 0
          : parseFloat($(".silver_per-grm-sale-value").html());
    }

    var inclusive_tax_rate = 0;

    var total_tax = 0;

    var tax_group = curRow.find("td:eq(11) .sale_tax_group").val();

    var discount =
      isNaN(curRow.find("td:eq(9) .bill_discount").val()) ||
      curRow.find("td:eq(9) .bill_discount").val() == ""
        ? 0
        : curRow.find("td:eq(9) .bill_discount").val();

    var retail_max_mc =
      isNaN(curRow.find("td:eq(8) .bill_mc").val()) ||
      curRow.find("td:eq(8) .bill_mc").val() == ""
        ? 0
        : curRow.find("td:eq(8) .bill_mc").val();

    var tot_wastage =
      isNaN(curRow.find("td:eq(7) .bill_wastage").val()) ||
      curRow.find("td:eq(7) .bill_wastage").val() == ""
        ? 0
        : curRow.find("td:eq(7) .bill_wastage").val();

    if (calculation_type == 0) {
      var wast_wgt = parseFloat(
        parseFloat(gross_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * curRow.find(".sale_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price)
        );
      } else {
        var mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) *
            (retail_max_mc / 100)
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price)
        );
      }
    } else if (calculation_type == 1) {
      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * net_wt)
            : parseFloat(retail_max_mc * curRow.find(".sale_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price)
        );
      } else {
        var mc_type = parseFloat(
          parseFloat(retail_max_mc * net_wt) * curRow.find(".sale_pcs").val()
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price)
        );
      }
    } else if (calculation_type == 2) {
      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);

      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * curRow.find(".sale_pcs").val())
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc =
          parseFloat(
            parseFloat(rate_per_grm) *
              (parseFloat(wast_wgt) + parseFloat(net_wt)) +
              parseFloat(mc_type)
          ) +
          parseFloat(stone_price) +
          parseFloat(material_price);

        //console.log(rate_per_grm+' '+wast_wgt+' '+net_wt+' '+mc_type+' '+stone_price+' '+material_price);
      } else {
        var mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) *
            (retail_max_mc / 100)
        );

        // Metal Rate + Stone + OM + Wastage + MC

        rate_with_mc =
          parseFloat(
            parseFloat(rate_per_grm) *
              (parseFloat(wast_wgt) + parseFloat(net_wt)) +
              parseFloat(mc_type)
          ) +
          parseFloat(stone_price) +
          parseFloat(material_price);
      }
    } else if (calculation_type == 3 || calculation_type == 4) {
      rate_with_mc = parseFloat(
        isNaN(curRow.find(".bill_amount").val()) ||
          curRow.find(".bill_amount").val() == ""
          ? 0
          : curRow.find(".bill_amount").val()
      );
    }

    /*if(calculation_type == 0){

			rate_with_mc = parseFloat((parseFloat(rate_per_grm * gross_wt) + parseFloat(retail_max_mc * gross_wt)) - discount);

		}else if(calculation_type == 1){

			rate_with_mc = parseFloat((parseFloat(rate_per_grm * net_wt) + parseFloat(retail_max_mc * net_wt)) - discount );

		}else if(calculation_type == 2){

			rate_with_mc = parseFloat((((parseFloat(rate_per_grm) * parseFloat(net_wt) + parseFloat(tot_wastage * net_wt))) + parseFloat(retail_max_mc * net_wt)) - discount);

		}*/

    rate_with_mc = rate_with_mc - discount;

    //total_tax = getTaxValueForItem(rate_with_mc, tax_group);

    //inclusive_tax_rate = parseFloat(rate_with_mc + parseFloat(total_tax)).toFixed(2);

    var base_value_tax = parseFloat(
      calculate_base_value_tax(rate_with_mc, tax_group)
    ).toFixed(2);

    var base_value_amt = parseFloat(
      parseFloat(rate_with_mc) + parseFloat(base_value_tax)
    ).toFixed(2);

    var arrived_value_tax = parseFloat(
      calculate_arrived_value_tax(base_value_amt, tax_group)
    ).toFixed(2);

    var arrived_value_amt = parseFloat(
      parseFloat(base_value_amt) + parseFloat(arrived_value_tax)
    ).toFixed(2);

    var total_tax_rate = parseFloat(
      parseFloat(base_value_tax) + parseFloat(arrived_value_tax)
    ).toFixed(2);

    //total_tax = getTaxValueForItem(rate_with_mc, tax_group);

    inclusive_tax_rate = arrived_value_amt;

    if (cus_state == cmp_state) {
      cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);

      sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);
    } else {
      igst = total_tax_rate;
    }

    curRow.find(".wast_wgt").val(wast_wgt);

    console.log("calculation_type:" + calculation_type);

    console.log("rate_with_mc:" + rate_with_mc);

    console.log("wast_wgt:" + wast_wgt);

    console.log("mc_type:" + mc_type);

    console.log("retail_max_mc:" + retail_max_mc);

    console.log("inclusive_tax_rate:" + inclusive_tax_rate);

    console.log("total_tax:" + total_tax);

    console.log("tax_group:" + tax_group);

    console.log("rate_per_grm:" + rate_per_grm);

    console.log("------------");
  });

  calculate_order_advance_sale_details();

  //calculate_orderAdv_purchase_details();

  //calculate_orderAdv_sales_details();
}

//Chit Amount Starts

/*$(document).on('keyup','.scheme_account', function(e){

		var row = $(this).closest('tr');

		var acc_no = row.find(".scheme_account").val();

		getSearchAcc(acc_no, row);

});*/

$(document).on("click", "#scheme_search", function () {
  var row = $(this).closest("tr");

  var id_scheme_acc = row.find(".scheme_account").val();

  get_SchemeAcc_number("", row, id_scheme_acc);
});

function get_SchemeAcc_number(searchTxt, curRow, id_scheme_acc) {
  my_Date = new Date();

  var bill_cus_id = $("#bill_cus_id").val();

  var id_branch = $("#id_branch").val();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_scheme_accounts/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      searchTxt: searchTxt,
      id_customer: bill_cus_id,
      id_scheme_account: id_scheme_acc,
      id_branch: id_branch,
    },

    success: function (data) {
      console.log(data);

      if (data != "") {
        $.each(data, function (key, item) {
          $("#estimation_chit_details > tbody tr").each(function (idx, row) {
            if (item != undefined) {
              if ($(this).find(".scheme_account_id").val() == item.label) {
                data.splice(key, 1);
              }
            }
          });
        });

        var amount = 0;

        var rate_per_gram = $(".per-grm-sale-value").html();

        const index = chit_details.findIndex(
          (object) => object.value === data[0].value
        );

        var bill_type = $("input[name='billing[bill_type]']:checked").val();

        if (index === -1) {
          chit_details.push(data[0]);
        }

        console.log(data[0].closing_amount);

        amount = data[0].closing_amount;

        let cash_pay =
          isNaN(data[0].cash_pay) && $.trim(data[0].cash_pay) == ""
            ? 0
            : data[0].cash_pay;

        curRow.find(".scheme_account").val(data[0].label);

        curRow.find(".scheme_account_id").val(data[0].value);

        curRow.find(".sch").html(data[0].scheme_name);

        curRow.find(".total_installments").val(data[0].total_installments);

        curRow.find(".paid_installments").val(data[0].paid_installments);

        curRow.find(".chit_amount").html(amount);

        curRow.find(".chit_amt").val(amount);

        curRow.find(".chit_cash_pay").val(data[0].cash_pay);

        curRow.find(".scheme_type").val(data[0].scheme_type);

        curRow.find(".closing_amount").val(data[0].closing_amount);

        curRow.find(".closing_add_chgs").val(data[0].closing_add_chgs);

        curRow.find(".additional_benefits").val(data[0].additional_benefits);

        curRow
          .find(".is_wast_and_mc_benefit_apply")
          .val(data[0].is_wast_and_mc_benefit_apply);

        if (
          data[0].scheme_type != 0 &&
          data[0].total_installments == data[0].paid_installments
        ) {
          curRow.find(".closing_weight").val(data[0].closing_balance);
        }

        $("#mobile").val(data[0].mobile);

        if (bill_type != 10) {
          calculate_chit_closing_balance();
        }

        calculateChit_Amount();
      } else {
        curRow.find(".scheme_account").val("");

        curRow.find(".scheme_account_id").val("");

        curRow.find(".sch").html("");

        curRow.find(".total_installments").val("");

        curRow.find(".paid_installments").val("");

        curRow.find(".chit_amount").html("");

        curRow.find(".chit_amt").val("");

        curRow.find(".chit_cash_pay").val("");

        curRow.find(".scheme_type").val("");

        curRow.find(".closing_amount").val("");

        curRow.find(".closing_add_chgs").val("");

        curRow.find(".additional_benefits").val("");

        curRow.find(".is_wast_and_mc_benefit_apply").val("");

        $("#mobile").val("");

        calculate_chit_closing_balance();

        calculateChit_Amount();
      }
    },
  });
}

function getSearchAcc(searchTxt, curRow) {
  my_Date = new Date();

  var bill_cus_id = $("#bill_cus_id").val();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_scheme_accounts/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      searchTxt: searchTxt,
      id_customer: bill_cus_id,
      id_branch: id_branch,
    },

    success: function (data) {
      $.each(data, function (key, item) {
        $("#estimation_chit_details > tbody tr").each(function (idx, row) {
          if (item != undefined) {
            if ($(this).find(".scheme_account_id").val() == item.label) {
              data.splice(key, 1);
            }
          }
        });
      });

      $(".scheme_account").autocomplete({
        appendTo: "#chit-confirm-add",

        source: data,

        select: function (e, i) {
          e.preventDefault();

          var amount = 0;

          var rate_per_gram = $(".per-grm-sale-value").html();

          const index = chit_details.findIndex(
            (object) => object.value === i.item.value
          );

          var bill_type = $("input[name='billing[bill_type]']:checked").val();

          if (index === -1) {
            if (i.item.scheme_type != 0 && bill_type != 10) {
              i.item.closing_amount = parseFloat(
                i.item.closing_balance * parseFloat($("#goldrate_22ct").val())
              ).toFixed(2);
            }

            chit_details.push(i.item);
          }

          console.log(i.item.closing_amount);

          amount = i.item.closing_amount;

          let cash_pay =
            isNaN(i.item.cash_pay) && $.trim(i.item.cash_pay) == ""
              ? 0
              : i.item.cash_pay;

          curRow.find(".scheme_account").val(i.item.label);

          curRow.find(".scheme_account_id").val(i.item.value);

          curRow.find(".sch").html(i.item.scheme_name);

          curRow.find(".total_installments").val(i.item.total_installments);

          curRow.find(".paid_installments").val(i.item.paid_installments);

          curRow.find(".chit_amount").html(amount);

          curRow.find(".chit_amt").val(amount);

          curRow.find(".chit_cash_pay").val(i.item.cash_pay);

          curRow.find(".scheme_type").val(i.item.scheme_type);

          curRow.find(".closing_amount").val(i.item.closing_amount);

          curRow.find(".closing_add_chgs").val(i.item.closing_add_chgs);

          curRow.find(".additional_benefits").val(i.item.additional_benefits);

          curRow
            .find(".is_wast_and_mc_benefit_apply")
            .val(i.item.is_wast_and_mc_benefit_apply);

          if (i.item.scheme_type != 0) {
            curRow.find(".closing_weight").val(i.item.closing_balance);
          }

          $("#mobile").val(i.item.mobile);

          if (bill_type != 10) {
            calculate_chit_closing_balance();
          }

          //	calculateChit_Amount();
        },

        change: function (event, ui) {
          if (ui.item === null) {
            $(this).val("");

            curRow.find(".scheme_account").html("");

            curRow.find(".scheme_account_id").val("");

            curRow.find(".sch").html("");

            curRow.find(".chit_amount").html("");

            curRow.find(".chit_amt").val("");
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (searchTxt != "") {
            if (i.content.length === 0) {
              $("#customerAlert").html(
                '<p style="color:red">Enter a valid customer name / mobile</p>'
              );
            } else {
              $("#customerAlert").html("");
            }
          } else {
          }
        },

        minLength: 1,
      });
    },
  });
}

function calculate_chit_closing_balance() {
  var chit_amount = 0;

  var saving_weight = 0;

  var weight_scheme_closure_type = $("#weight_scheme_closure_type").val(); //1-General,2-Based on M.C & V.A

  var weightschemecaltype = $("#weightschemecaltype").val(); //1->Based On Manual Va & MC  2->Based on the Highest Va & MC 3->Based On the Lowest Va & MC

  console.log("weight_scheme_closure_type:" + weight_scheme_closure_type);

  console.log("weightschemecaltype:" + weightschemecaltype);

  if (weightschemecaltype == 1) {
    $("#wastage_per").attr("readonly", false);

    $("#mc_value").attr("readonly", false);
  } else {
    $("#wastage_per").attr("readonly", true);

    $("#mc_value").attr("readonly", true);

    $("#wastage_per").val("");

    $("#mc_value").attr("");
  }

  $("#estimation_chit_details > tbody  > tr").each(function (index, tr) {
    var curRow = $(this).closest("tr");

    var paid_installments = curRow.find(".paid_installments").val();

    var total_installments = curRow.find(".total_installments").val();

    var is_wast_and_mc_benefit_apply = curRow
      .find(".is_wast_and_mc_benefit_apply")
      .val();

    var scheme_type = curRow.find(".scheme_type").val();

    var additional_benefits = curRow.find(".additional_benefits").val();

    var closing_add_chgs = curRow.find(".closing_add_chgs").val();

    var goldrate_22ct =
      isNaN($("#goldrate_22ct").val()) || $("#goldrate_22ct").val() == ""
        ? 0
        : parseFloat($("#goldrate_22ct").val());

    var sales_details = [];

    $("#billing_sale_details > tbody tr").each(function (bidx, brow) {
      tagcurRow = $(this);

      goldrate_22ct = tagcurRow.find(".per_grm_amount").val();

      if (tagcurRow.find(".scheme_closure_benefit").val() == 1) {
        sales_details.push({
          wastage_per: tagcurRow.find(".bill_wastage_per").val(),
          mc_value: tagcurRow.find(".making_charge").html(),
          item_gross_wt: tagcurRow.find(".bill_gross_val").val(),
        });
      }
    });

    saving_weight = curRow.find(".closing_weight").val();

    /*if(is_wast_and_mc_benefit_apply==1 && scheme_type==0)

		{

			chit_amount = curRow.find('.closing_amount').val();

			saving_weight = parseFloat(chit_amount/goldrate_22ct).toFixed(3);

			curRow.find('.closing_weight').val(parseFloat(saving_weight).toFixed(3));

		}

		else

		{

			saving_weight = curRow.find('.closing_weight').val();

		}*/

    if (
      weight_scheme_closure_type == 2 &&
      saving_weight > 0 &&
      paid_installments == total_installments &&
      sales_details.length > 0
    ) {
      var savings_in_wast_amt = 0;

      var savings_in_wast_wt = 0;

      var savings_in_mcvalue = 0;

      var wastage_wt = 0;

      // var goldrate_22ct = (isNaN($('#goldrate_22ct').val()) || $('#goldrate_22ct').val() == '') ? 0 : parseFloat($('#goldrate_22ct').val());

      var wastage_per = 0;

      var mc_value = 0;

      var item_gross_wt = 0;

      console.log(sales_details);

      if (weightschemecaltype == 2) {
        // Taking Highest V.A & M.C

        if ($("#wastage_per").val() == "") {
          wastage_per = Math.max.apply(
            null,
            sales_details.map((item) => item.wastage_per)
          );
        } else {
          wastage_per =
            $("#wastage_per").val() != "" ? $("#wastage_per").val() : 0;
        }

        console.log($("#mc_value").val());

        if ($("#mc_value").val() == "") {
          $.each(sales_details, function (key, val) {
            if (parseFloat(val.mc_value) > parseFloat(mc_value)) {
              console.log(val.mc_value);

              mc_value = val.mc_value;

              item_gross_wt = val.item_gross_wt;
            }
          });
        } else {
          mc_value = $("#mc_value").val() != "" ? $("#mc_value").val() : 0;
        }
      } else if (weightschemecaltype == 3) {
        //Taking Lowest V.A & M.C

        if ($("#wastage_per").val() == "") {
          wastage_per = Math.min.apply(
            null,
            sales_details.map((item) => item.wastage_per)
          );
        } else {
          wastage_per =
            $("#wastage_per").val() != "" ? $("#wastage_per").val() : 0;
        }

        if ($("#mc_value").val() == "") {
          mc_value = sales_details[0].mc_value;
          for (let i = 0; i < sales_details.length; i++) {
            if (parseFloat(sales_details[i].mc_value) < parseFloat(mc_value)) {
              mc_value = sales_details[i].mc_value;
              item_gross_wt = sales_details[i].item_gross_wt;
            }
          }
        } else {
          mc_value = $("#mc_value").val() != "" ? $("#mc_value").val() : 0;
        }
      } else if (weightschemecaltype == 4) {
        //Taking Average V.A & M.C

        var sum_mc = 0;

        var sum_va_weight = 0;

        var total_sales_wt = 0;

        var total_mc_value = 0;

        $.each(sales_details, function (key, val) {
          total_sales_wt += parseFloat(val.item_gross_wt);

          total_mc_value += parseFloat(val.mc_value);
        });

        if ($("#wastage_per").val() == "") {
          // let sum_wastage_per = sales_details.reduce((acc, item) => acc + parseFloat(item.wastage_per) , 0);

          // wastage_per = sum_wastage_per / sales_details.length; //average wastege percentage

          sum_va_weight = sales_details.reduce(
            (acc, item) => acc + parseFloat(item.item_wastage_wt),
            0
          );

          wastage_per =
            (parseFloat(sum_va_weight) / parseFloat(total_sales_wt)) * 100;
        } else {
          wastage_per =
            $("#wastage_per").val() != "" ? $("#wastage_per").val() : 0;
        }

        if ($("#mc_value").val() == "") {
          /* $.each(sales_details, function (key, val) {

						if (val.mc_value < mc_value) {

							mc_value = val.mc_value;

							item_gross_wt = val.item_gross_wt;

						} else {
							mc_value = val.mc_value;
						}

					}); */

          /* let sum_mc = sales_details.reduce((acc, item) =>{
						item_gross_wt = item.item_gross_wt;
						return acc + item.mc_value;
						
					} , 0); */

          sales_details.forEach((item, index) => {
            sum_mc += parseFloat(item.mc_value);
            item_gross_wt += parseFloat(item.item_gross_wt);
          });

          mc_value = sum_mc / sales_details.length; //average mc
        } else {
          mc_value = $("#mc_value").val() != "" ? $("#mc_value").val() : 0;
        }
      } else {
        wastage_per =
          $("#wastage_per").val() != "" ? $("#wastage_per").val() : 0;

        mc_value = $("#mc_value").val() != "" ? $("#mc_value").val() : 0;
      }

      var total_sales_wt = 0;

      var total_mc_value = 0;

      $.each(sales_details, function (key, val) {
        total_sales_wt += parseFloat(val.item_gross_wt);

        total_mc_value += parseFloat(val.mc_value);
      });

      if (wastage_per > 0) {
        if (parseFloat(total_sales_wt) > parseFloat(saving_weight)) {
          var wastage_wt = parseFloat(
            (parseFloat(saving_weight) * parseFloat(wastage_per)) / 100
          ).toFixed(3);

          var savings_in_wast_wt = parseFloat(
            parseFloat(wastage_wt) + parseFloat(saving_weight)
          ).toFixed(3);
        } else {
          var wastage_wt = parseFloat(
            (parseFloat(total_sales_wt) * parseFloat(wastage_per)) / 100
          );

          var savings_in_wast_wt = parseFloat(
            (parseFloat(total_sales_wt) * parseFloat(wastage_per)) / 100 +
              parseFloat(saving_weight)
          ).toFixed(3);
        }
      } else {
        var savings_in_wast_wt = parseFloat(saving_weight).toFixed(3);
      }

      console.log(mc_value);

      console.log(savings_in_wast_wt);

      if (mc_value > 0 && item_gross_wt > 0) {
        if (parseFloat(total_sales_wt) > parseFloat(saving_weight)) {
          var savings_in_mcvalue = parseFloat(
            (parseFloat(mc_value) / parseFloat(item_gross_wt)) *
              parseFloat(saving_weight)
          ).toFixed(2);
        } else {
          var savings_in_mcvalue = parseFloat(total_mc_value).toFixed(2);
        }
      } else if (mc_value != "") {
        savings_in_mcvalue = mc_value;
      } else {
        var savings_in_mcvalue = 0;
      }

      savings_in_wast_amt = parseFloat(
        parseFloat(savings_in_wast_wt) * parseFloat(goldrate_22ct)
      ).toFixed(2);

      var amount =
        parseFloat(savings_in_wast_amt) +
        parseFloat(savings_in_mcvalue) +
        parseFloat(additional_benefits) -
        parseFloat(closing_add_chgs);

      console.log("savings_in_mcvalue:" + savings_in_mcvalue);

      console.log("savings_in_wast_amt:" + savings_in_wast_amt);

      console.log("amount:" + amount);

      console.log("saving_weight:" + saving_weight);

      if (parseFloat(amount) > 0) {
        chit_amount = amount;
      } else {
        chit_amount = curRow.find(".closing_amount").val();
      }

      curRow.find(".wastage_per").val(parseFloat(wastage_per).toFixed(2));

      curRow
        .find(".savings_in_wastage")
        .val(parseFloat(parseFloat(wastage_wt)).toFixed(3));

      curRow.find(".mc_value").val(parseFloat(mc_value).toFixed(2));

      curRow
        .find(".savings_in_mcvalue")
        .val(parseFloat(savings_in_mcvalue).toFixed(2));

      curRow.find(".closing_weight").val(parseFloat(saving_weight).toFixed(3));

      curRow.find(".saved_weight").html(parseFloat(saving_weight).toFixed(3));

      $(".applied_wast_per").html(parseFloat(wastage_per).toFixed(2));

      $(".applied_mc").html(parseFloat(mc_value).toFixed(2));
    } else {
      if (weight_scheme_closure_type == 3 && saving_weight > 0) {
        chit_amount = parseFloat(
          parseFloat(saving_weight) * parseFloat(goldrate_22ct)
        ).toFixed(2);
      } else {
        chit_amount = curRow.find(".closing_amount").val();
      }
    }

    chit_amount = parseFloat(Math.round(chit_amount)).toFixed(2);

    curRow
      .find(".chit_amount")
      .html(parseFloat(Math.round(chit_amount)).toFixed(2));

    curRow
      .find(".chit_amt")
      .val(parseFloat(Math.round(chit_amount)).toFixed(2));
  });

  /* calculate_purchase_details();

	 calculate_sales_details();*/
}

function calculate_est_chit_closing_balance() {
  var total_chit_amount = 0;

  var total_chit_wt = 0;

  var weight_scheme_closure_type = $("#weight_scheme_closure_type").val(); //1-General,2-Based on M.C & V.A

  var weightschemecaltype = $("#weightschemecaltype").val(); //1->Based On Manual Va & MC  2->Based on the Highest Va & MC 3->Based On the Lowest Va & MC

  if ($("#chit_details").val() != "") {
    chit_details = JSON.parse($("#chit_details").val());
  }

  $.each(chit_details, function (k, val) {
    var chit_amount = 0;

    var saving_weight = 0;

    var paid_installments = val.paid_installments;

    var total_installments = val.total_installments;

    var is_wast_and_mc_benefit_apply = val.is_wast_and_mc_benefit_apply;

    var scheme_type = val.scheme_type;

    var closing_add_chgs = val.closing_add_chgs;

    var additional_benefits = val.additional_benefits;

    var goldrate_22ct =
      isNaN($("#goldrate_22ct").val()) || $("#goldrate_22ct").val() == ""
        ? 0
        : parseFloat($("#goldrate_22ct").val());

    var sales_details = [];

    $("#wastage_per").val(val.wastage_per);

    $("#mc_value").val(val.savings_in_making_charge);

    $("#billing_sale_details > tbody tr").each(function (bidx, brow) {
      tagcurRow = $(this);

      goldrate_22ct = tagcurRow.find(".per_grm_amount").val();

      if (tagcurRow.find(".scheme_closure_benefit").val() == 1) {
        sales_details.push({
          wastage_per: tagcurRow.find(".bill_wastage_per").val(),
          mc_value: tagcurRow.find(".making_charge").html(),
          item_gross_wt: tagcurRow.find(".bill_gross_val").val(),
        });
      }
    });

    saving_weight = val.closing_weight;

    if (
      weight_scheme_closure_type == 2 &&
      saving_weight > 0 &&
      paid_installments == total_installments &&
      sales_details.length > 0
    ) {
      var savings_in_wast_amt = 0;

      var savings_in_wast_wt = 0;

      var savings_in_mcvalue = 0;

      var wastage_wt = 0;

      // var goldrate_22ct = (isNaN($('#goldrate_22ct').val()) || $('#goldrate_22ct').val() == '') ? 0 : parseFloat($('#goldrate_22ct').val());

      var wastage_per = 0;

      var mc_value = 0;

      var item_gross_wt = 0;

      console.log(sales_details);

      if (weightschemecaltype == 2) {
        // Taking Highest V.A & M.C

        if ($("#wastage_per").val() == "") {
          wastage_per = Math.max.apply(
            null,
            sales_details.map((item) => item.wastage_per)
          );
        } else {
          wastage_per =
            $("#wastage_per").val() != "" ? $("#wastage_per").val() : 0;
        }

        console.log($("#mc_value").val());

        if ($("#mc_value").val() == "") {
          $.each(sales_details, function (key, val) {
            if (parseFloat(val.mc_value) > parseFloat(mc_value)) {
              console.log(val.mc_value);

              mc_value = val.mc_value;

              item_gross_wt = val.item_gross_wt;
            }
          });
        } else {
          mc_value = $("#mc_value").val() != "" ? $("#mc_value").val() : 0;
        }
      } else if (weightschemecaltype == 3) {
        //Taking Lowest V.A & M.C

        if ($("#wastage_per").val() == "") {
          wastage_per = Math.min.apply(
            null,
            sales_details.map((item) => item.wastage_per)
          );
        } else {
          wastage_per =
            $("#wastage_per").val() != "" ? $("#wastage_per").val() : 0;
        }

        if ($("#mc_value").val() == "") {
          mc_value = sales_details[0].mc_value;
          for (let i = 0; i < sales_details.length; i++) {
            if (parseFloat(sales_details[i].mc_value) < parseFloat(mc_value)) {
              mc_value = sales_details[i].mc_value;
              item_gross_wt = sales_details[i].item_gross_wt;
            }
          }
        } else {
          mc_value = $("#mc_value").val() != "" ? $("#mc_value").val() : 0;
        }
      } else if (weightschemecaltype == 4) {
        //Taking Average V.A & M.C

        var sum_mc = 0;

        var sum_va_weight = 0;

        var total_sales_wt = 0;

        var total_mc_value = 0;

        $.each(sales_details, function (key, val) {
          total_sales_wt += parseFloat(val.item_gross_wt);

          total_mc_value += parseFloat(val.mc_value);
        });

        if ($("#wastage_per").val() == "") {
          // let sum_wastage_per = sales_details.reduce((acc, item) => acc + parseFloat(item.wastage_per) , 0);

          // wastage_per = sum_wastage_per / sales_details.length; //average wastege percentage

          sum_va_weight = sales_details.reduce(
            (acc, item) => acc + parseFloat(item.item_wastage_wt),
            0
          );

          wastage_per =
            (parseFloat(sum_va_weight) / parseFloat(total_sales_wt)) * 100;
        } else {
          wastage_per =
            $("#wastage_per").val() != "" ? $("#wastage_per").val() : 0;
        }

        if ($("#mc_value").val() == "") {
          sales_details.forEach((item, index) => {
            sum_mc += parseFloat(item.mc_value);
            item_gross_wt += parseFloat(item.item_gross_wt);
          });

          mc_value = sum_mc / sales_details.length; //average mc
        } else {
          mc_value = $("#mc_value").val() != "" ? $("#mc_value").val() : 0;
        }
      }

      var total_sales_wt = 0;

      var total_mc_value = 0;

      $.each(sales_details, function (key, val) {
        total_sales_wt += parseFloat(val.item_gross_wt);

        total_mc_value += parseFloat(val.mc_value);
      });

      if (wastage_per > 0) {
        if (parseFloat(total_sales_wt) > parseFloat(saving_weight)) {
          var wastage_wt = parseFloat(
            (parseFloat(saving_weight) * parseFloat(wastage_per)) / 100
          ).toFixed(3);

          var savings_in_wast_wt = parseFloat(
            parseFloat(wastage_wt) + parseFloat(saving_weight)
          ).toFixed(3);
        } else {
          var wastage_wt = parseFloat(
            (parseFloat(total_sales_wt) * parseFloat(wastage_per)) / 100
          );

          var savings_in_wast_wt = parseFloat(
            (parseFloat(total_sales_wt) * parseFloat(wastage_per)) / 100 +
              parseFloat(saving_weight)
          ).toFixed(3);
        }
      } else {
        var savings_in_wast_wt = parseFloat(saving_weight).toFixed(3);
      }

      if (mc_value > 0 && item_gross_wt > 0) {
        if (parseFloat(total_sales_wt) > parseFloat(saving_weight)) {
          var savings_in_mcvalue = parseFloat(
            (parseFloat(mc_value) / parseFloat(item_gross_wt)) *
              parseFloat(saving_weight)
          ).toFixed(2);
        } else {
          var savings_in_mcvalue = parseFloat(total_mc_value).toFixed(2);
        }
      } else if (mc_value != "") {
        savings_in_mcvalue = mc_value;
      } else {
        var savings_in_mcvalue = 0;
      }

      savings_in_wast_amt = parseFloat(
        parseFloat(savings_in_wast_wt) * parseFloat(goldrate_22ct)
      ).toFixed(2);

      var amount =
        parseFloat(savings_in_wast_amt) +
        parseFloat(savings_in_mcvalue) +
        parseFloat(additional_benefits) -
        parseFloat(closing_add_chgs);

      if (parseFloat(amount) > 0) {
        chit_amount = amount;
      } else {
        chit_amount = val.closing_amount;
      }
    } else {
      if (weight_scheme_closure_type == 3 && saving_weight > 0) {
        chit_amount = parseFloat(
          parseFloat(saving_weight) * parseFloat(goldrate_22ct)
        ).toFixed(2);
      } else {
        chit_amount = val.closing_amount;
      }
    }

    total_chit_amount += parseFloat(chit_amount);

    total_chit_wt += parseFloat(saving_weight);

    console.log("savings_in_wast_amt:" + savings_in_wast_amt);

    console.log("savings_in_wast_wt:" + savings_in_wast_wt);

    console.log("savings_in_mcvalue:" + savings_in_mcvalue);

    console.log("mc_value:" + mc_value);

    console.log("wastage_per:" + wastage_per);

    console.log("saving_weight:" + saving_weight);
  });

  $(".total_amount").html(parseFloat(Math.round(total_chit_amount)).toFixed(2));

  $(".summary_chit_paid_amt").html(
    parseFloat(Math.round(total_chit_amount)).toFixed(2)
  );

  $(".summary_chit_paid_wt").html(parseFloat(total_chit_wt).toFixed(3));
}

$("#add_newchit_util").on("click", function () {
  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  $("#chit_total_cash_amt").val($(".chit_cash_amt").val());

  let max_cash_valid = validate_max_cash();

  if (max_cash_valid == true) {
    if (validateChitDetailRow()) {
      chit_details = [];

      var total_amount = 0;

      var chit_cash_amt = 0;

      $(
        "#chit-confirm-add .modal-body #estimation_chit_details > tbody  > tr"
      ).each(function (index, tr) {
        if ($(this).find(".chit_amt").val() != "") {
          total_amount += parseFloat($(this).find(".chit_amt").val());

          chit_cash_amt += parseFloat($(this).find(".chit_cash_pay").val());

          chit_details.push({
            scheme_account_id: $(this).find(".scheme_account_id").val(),

            utl_amount: $(this).find(".chit_amt").val(),

            scheme_type: $(this).find(".scheme_type").val(),

            closing_amount: $(this).find(".closing_amount").val(),

            closing_weight: $(this).find(".closing_weight").val(),

            wastage_per: $(this).find(".wastage_per").val(),

            savings_in_wastage: $(this).find(".savings_in_wastage").val(),

            mc_value: $(this).find(".mc_value").val(),

            savings_in_making_charge: $(this).find(".savings_in_mcvalue").val(),

            is_wast_and_mc_benefit_apply: $(this)
              .find(".is_wast_and_mc_benefit_apply")
              .val(),
          });
        }
      });

      $(".total_amount").html(parseFloat(Math.round(total_amount)).toFixed(2));

      $(".chit_cash_amt").val(parseFloat(chit_cash_amt).toFixed(2));

      $(".summary_chit_paid_amt").html(parseFloat(total_amount).toFixed(2));

      $("#payment_modes > tbody >tr").each(function (bidx, brow) {
        bill_chit_row = $(this);

        //bill_chit_row.find('#tot_chit_amt').html($('.total_amount').html());

        bill_chit_row
          .find("#chit_details")
          .val(chit_details.length > 0 ? JSON.stringify(chit_details) : "");

        /*	if(parseFloat($('.total_amount').html()) > parseFloat($('#total_cost').val())){

						$('.benifit_amount').val(parseFloat(parseFloat($('.total_amount').html()) - parseFloat($('#total_cost').val())).toFixed(2));

					}*/
      });

      $("#chit-confirm-add").modal("toggle");

      if (bill_type == 10) {
        $(".pay_to_cus").val($(".total_amount").html());
      }

      calculateFinalCost();

      //calculatePaymentCost();
    } else {
      alert("Please fill required fields");
    }
  } else {
    $("#chit_total_cash_amt").val(0);
  }
});

$("#chit_util_modal").on("click", function () {
  var bill_cus_id = $("#bill_cus_id").val();

  var existingBalance = parseFloat($(".bal_amount").text().trim());

  $(".balance_amount").text(isNaN(existingBalance) ? 0 : existingBalance);

  if (bill_cus_id != "") {
    $("#estimation_chit_details tbody").empty();

    if ($("#chit_details").val() != "") {
      chit_details = JSON.parse($("#chit_details").val());
    }

    console.log(chit_details.length);

    if (chit_details.length > 0) {
      var row = "";

      var closing_weight = 0;

      $.each(chit_details, function (key, items) {
        if (items.is_wast_and_mc_benefit_apply == 1 && items.scheme_type == 0) {
          chit_amount = items.closing_amount;

          closing_weight = parseFloat(
            chit_amount / $("#goldrate_22ct").val()
          ).toFixed(2);
        } else {
          closing_weight = items.closing_weight;
        }

        row +=
          "<tr>" +
          '<td><div><input class="scheme_account" type="number" value="' +
          items.scheme_account_id +
          '" style="width: 100px;height:35px;"/><span ><button type="button" id="scheme_search" class="btn btn-default btn-flat"><i class="fa fa-search"></i></button></span></div><input type="hidden" class="scheme_account_id" name="chit_uti[scheme_account_id][]" value="' +
          items.scheme_account_id +
          '" ><input type="hidden" name="chit_uti[scheme_type][]" class="form-control scheme_type" id="scheme_type"  value="' +
          items.scheme_type +
          '" ><input type="hidden" name="chit_uti[paid_installments][]" class="form-control paid_installments" value="' +
          items.paid_installments +
          '"><input type="hidden" name="chit_uti[total_installments][]" class="form-control total_installments" value="' +
          items.total_installments +
          '" ><input type="hidden" name="chit_uti[is_wast_and_mc_benefit_apply][]" class="form-control is_wast_and_mc_benefit_apply" value="' +
          items.is_wast_and_mc_benefit_apply +
          '" ></td>' +
          '<td><span class="chit_amount">' +
          items.utl_amount +
          '</span><input type="hidden" class="form-control closing_amount" value="' +
          items.closing_amount +
          '"><input type="hidden" class="chit_amt" name="chit_uti[chit_amt][]" value="' +
          items.utl_amount +
          '"><input type="hidden" class="chit_cash_pay" name="chit_uti[chit_cash_pay][]"><input type="hidden" name="chit_uti[wastage_per][]" class="form-control wastage_per"><input type="hidden" name="chit_uti[mc_value][]" class="form-control mc_value"><input type="hidden" name="chit_uti[savings_in_wastage][]" class="form-control savings_in_wastage"><input type="hidden" name="chit_uti[savings_in_mcvalue][]" class="form-control savings_in_mcvalue"><input type="hidden" name="chit_uti[closing_weight][]" class="form-control closing_weight" value="' +
          closing_weight +
          '"></td>' +
          '<td><span class="saved_weight">' +
          closing_weight +
          "</span></td>" +
          '<td><a href="#" onClick="removeChit_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
      });

      console.log(row);

      $("#estimation_chit_details tbody").append(row);

      $("#estimation_chit_details > tbody")
        .find("tr:last td:eq(0) .scheme_account_id")
        .focus();
    } else {
      create_new_empty_est_chit_row();
    }

    $("#chit-confirm-add").modal("toggle");

    calculate_chit_closing_balance();
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Select The Customer..",
    });
  }
});

$("#create_chit_details").on("click", function () {
  $("#chitUtilAlert span").remove();

  if (validateChitDetailRow()) {
    create_new_empty_est_chit_row();
  } else {
    $("#chitUtilAlert").append(
      "<span>Please fill all fields in current row.</span>"
    );

    $("#chitUtilAlert span").delay(20000).fadeOut(500);
  }
});

function validateChitDetailRow() {
  var row_validate = true;

  $(
    "#chit-confirm-add .modal-body #estimation_chit_details > tbody  > tr"
  ).each(function (index, tr) {
    if (
      $(this).find(".scheme_account_id").val() == "" ||
      $(this).find(".chit_amt").val() == ""
    ) {
      row_validate = false;
    }
  });

  return row_validate;
}

function create_new_empty_est_chit_row() {
  var row = "";

  row +=
    "<tr>" +
    '<td><div><input class="scheme_account" type="text" style="width: 100px; height:35px;" /><span><button type="button" id="scheme_search" class="btn btn-default btn-flat"><i class="fa fa-search"></i></button></span></div><input type="hidden" class="scheme_account_id"  name="chit_uti[scheme_account_id][]"><input type="hidden" name="chit_uti[paid_installments][]" class="form-control paid_installments"><input type="hidden" name="chit_uti[total_installments][]" class="form-control total_installments"><input type="hidden" name="chit_uti[additional_benefits][]" class="form-control additional_benefits"><input type="hidden" name="chit_uti[closing_add_chgs][]" class="form-control closing_add_chgs"></td>' +
    '<td><span class="chit_amount"></span><input type="hidden" class="form-control closing_amount" ><input type="hidden" class="chit_amt" name="chit_uti[chit_amt][]" /><input type="hidden" class="chit_cash_pay" name="chit_uti[chit_cash_pay][]" /><input type="hidden" name="chit_uti[scheme_type][]" class="form-control scheme_type" id="scheme_type" ></td>' +
    '<td><span class="saved_weight"></span><input type="hidden" class="form-control closing_weight"><input type="hidden" name="chit_uti[wastage_per][]" class="form-control wastage_per"><input type="hidden" name="chit_uti[mc_value][]" class="form-control mc_value"><input type="hidden" name="chit_uti[savings_in_wastage][]" class="form-control savings_in_wastage"><input type="hidden" name="chit_uti[savings_in_mcvalue][]" class="form-control savings_in_mcvalue"><input type="hidden" name="chit_uti[closing_weight][]" class="form-control closing_weight"></td>' +
    '<td><a href="#" onClick="removeChit_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';

  +"</tr>";

  $("#estimation_chit_details tbody").append(row);

  $("#estimation_chit_details > tbody")
    .find("tr:last td:eq(0) .scheme_account_id")
    .focus();
}

function removeChit_row(curRow) {
  curRow.remove();

  calculateChit_Amount();
}

function calculateChit_Amount() {
  var total_amount = 0;

  var chit_cash_amt = 0;

  chit_details = [];

  $(
    "#chit-confirm-add .modal-body #estimation_chit_details > tbody  > tr"
  ).each(function (index, tr) {
    if ($(this).find(".chit_amt").val() != "") {
      total_amount += parseFloat($(this).find(".chit_amt").val());

      chit_cash_amt += parseFloat($(this).find(".chit_cash_pay").val());

      //chit_details.push({'scheme_account_id':$(this).find('.scheme_account_id').val(),'utl_amount':$(this).find('.chit_amt').val()});
    }
  });

  var existingBalance = parseFloat($(".bal_amount").text().trim());

  var newBalance = existingBalance - parseFloat(total_amount).toFixed(2);

  $(".balance_amount").text(isNaN(newBalance) ? 0 : newBalance.toFixed(2));

  $(".total_amount").html(parseFloat(total_amount).toFixed(2));

  $(".chit_cash_amt").val(parseFloat(chit_cash_amt).toFixed(2));
}

$("#send_otp").on("click", function () {
  my_Date = new Date();

  var mobile = $("#mobile").val();

  var send_resend = $("#send_resend").val();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/sendotp?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    type: "POST",

    data: { mobile: mobile, send_resend: send_resend },

    dataType: "json",

    async: false,

    success: function (data) {
      if (data.status) {
        $("#send_otp").prop("disabled", true);

        $("#user_otp").prop("disabled", false);

        $("#otp_alert").html('<p style="color:green">' + data.msg + "</p>");
      } else {
        $("#send_otp").prop("disabled", false);

        $("#user_otp").prop("disabled", true);

        $("#otp_alert").html('<p style="color:red">' + data.msg + "</p>");
      }

      setTimeout(function () {
        $("#send_otp").prop("disabled", false);

        $("#send_otp").attr("value", "Resend OTP");

        $("#send_otp").html("Resend OTP");

        $("#send_resend").val(1);
      }, 60000);

      setTimeout(function () {
        $("#otp_alert").html("");
      }, 3000);
    },
  });
});

$("#user_otp").on("keyup", function () {
  var user_otp = $("#user_otp").val();

  if (user_otp.length == 6) {
    $("#user_otp").prop("disabled", true);

    my_Date = new Date();

    var mobile = $("#mobile").val();

    $.ajax({
      url:
        base_url +
        "index.php/admin_ret_billing/update_otp?nocache=" +
        my_Date.getUTCSeconds() +
        "" +
        my_Date.getUTCMinutes() +
        "" +
        my_Date.getUTCHours(),

      type: "POST",

      data: { user_otp: user_otp },

      dataType: "json",

      async: false,

      success: function (data) {
        if (data.status) {
          $("#send_otp").prop("disabled", true);

          $(".modal-footer").css("display", "block");

          $("#otp_alert").html('<p style="color:green">' + data.msg + "</p>");

          setTimeout(function () {
            $("#send_otp").prop("disabled", false);

            $("#send_otp").attr("value", "Send OTP");

            $("#send_otp").html("Send OTP");

            $("#send_resend").val(0);
          }, 60000);
        } else {
          $("#user_otp").val("");

          $("#send_otp").prop("disabled", false);

          $("#user_otp").prop("disabled", false);

          $("#otp_alert").html('<p style="color:red">' + data.msg + "</p>");
        }

        setTimeout(function () {
          $("#otp_alert").html("");
        }, 3000);
      },
    });
  } else {
    $("#user_otp").prop(false);
  }
});

//Chit Amount Ends

//gift voucher Starts

$(document).on("keypress", ".voucher_no", function (e) {
  var row = $(this).closest("tr");

  var voucher_no = row.find(".voucher_no").val();

  if (voucher_no.length >= 3) {
    getVoucherDetails(voucher_no, row);
  }
});

function getVoucherDetails(searchTxt, curRow) {
  my_Date = new Date();

  var bill_cus_id = $("#bill_cus_id").val();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getVoucherDetails/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      searchTxt: searchTxt,
      bill_cus_id: bill_cus_id,
      id_branch: $("#id_branch").val(),
    },

    success: function (data) {
      if (data.status) {
        $.each(data.responseData, function (key, item) {
          $("#gift_voucher_details > tbody tr").each(function (idx, row) {
            if (item != undefined) {
              if ($(this).find(".voucher_no").val() == item.label) {
                data.responseData.splice(key, 1);
              }
            }
          });
        });

        $(".voucher_no").autocomplete({
          appendTo: "#gv-confirm-add",

          source: data.responseData,

          select: function (e, i) {
            e.preventDefault();

            var allow_redeem = false;

            if (i.item.status == 3) {
              alert("Voucher Expired..");

              allow_redeem = false;
            } else if (i.item.status == 2) {
              alert("Already Voucher Redeemed..");

              allow_redeem = false;
            } else if (i.item.status == 5) {
              alert("Voucher Cancelled..");

              allow_redeem = false;
            } else if (i.item.id_branch != "") {
              if (i.item.id_branch != $("#id_branch").val()) {
                alert("Invalid Branch..");

                allow_redeem = false;
              } else {
                allow_redeem = true;
              }
            } else {
              allow_redeem = true;
            }

            if (allow_redeem) {
              var gift_voucher_amt = 0;

              var redeem_details = i.item.gift_redeem_det;

              if (i.item.free_card == 3) {
                redeem_status = gift_voucher_redeem(
                  i.item.bill_id,
                  redeem_details.utilize_for,
                  redeem_details.gift_type,
                  redeem_details.sale_value,
                  i.item.amount,
                  redeem_details.voucher_type,
                  redeem_details.id_set_gift_voucher,
                  redeem_details.id_gift_voucher
                );
              } else {
                redeem_status = true;
              }

              if (redeem_status) {
                curRow.find(".voucher_no").val(i.item.label);

                curRow.find(".id_gift_card").val(i.item.id_gift_card);

                if (redeem_details.voucher_type == 2) {
                  if (
                    redeem_details.utilize_for == 0 ||
                    redeem_details.utilize_for == 1
                  ) {
                    gift_voucher_amt = parseFloat(
                      i.item.amount * $(".per-grm-sale-value").html()
                    ).toFixed(3);
                  } else {
                    gift_voucher_amt = parseFloat(
                      i.item.amount * $(".silver_per-grm-sale-value").html()
                    ).toFixed(3);
                  }
                } else if (i.item.id_set_gift_voucher != "") {
                  if (
                    redeem_details.gift_type == 2 ||
                    redeem_details.gift_type == 4
                  ) {
                    if (redeem_details.utilize_for == 1) {
                      gift_voucher_amt = parseFloat(
                        i.item.weight * $(".per-grm-sale-value").html()
                      ).toFixed(3);
                    } else {
                      gift_voucher_amt = parseFloat(
                        i.item.weight * $(".silver_per-grm-sale-value").html()
                      ).toFixed(3);
                    }
                  } else {
                    gift_voucher_amt = i.item.amount;
                  }

                  if (
                    parseFloat(gift_voucher_amt) > parseFloat(redeem_sales_amt)
                  ) {
                    curRow.find(".voucher_no").val("");

                    curRow.find(".gift_voucher_amt").val("");

                    alert(
                      "Your Purchase Amount is Less Than the Voucher Amount.."
                    );

                    redeem_sales_amt = 0;
                  } else {
                    curRow.find(".gift_voucher_amt").val(gift_voucher_amt);

                    redeem_sales_amt = 0;
                  }
                } else {
                  gift_voucher_amt = i.item.amount;

                  gift_voucher_percentage = i.item.percentage;

                  credit_type = i.item.credit_type;

                  if (
                    parseFloat(redeem_details.sale_value) >
                    parseFloat($(".receive_amount").val())
                  ) {
                    curRow.find(".voucher_no").val("");

                    curRow.find(".gift_voucher_amt").val("");

                    alert(
                      "Your Purchase Amount is Less Than the Voucher Amount.."
                    );
                  } else {
                    let sale_amt = $(".sale_amt_with_tax").html();

                    if (credit_type == 2) {
                      let gift_vou_amt =
                        (sale_amt * gift_voucher_percentage) / 100;
                      curRow.find(".gift_voucher_amt").val(gift_vou_amt);
                    } else {
                      curRow.find(".gift_voucher_amt").val(gift_voucher_amt);
                    }
                  }
                }
              } else {
                curRow.find(".voucher_no").val("");

                curRow.find(".gift_voucher_amt").val("");
              }
            } else {
              curRow.find(".voucher_no").val("");

              curRow.find(".gift_voucher_amt").val("");
            }

            calculateGiftVoucher_Amount();
          },

          change: function (event, ui) {
            if (ui.item === null) {
              $(this).val("");

              curRow.find(".voucher_no").val("");

              curRow.find(".id_gift_card").val("");

              curRow.find(".gift_voucher_amt").val("");
            }
          },

          response: function (e, i) {
            // ui.content is the array that's about to be sent to the response callback.

            if (searchTxt != "") {
              if (i.content.length === 0) {
                $("#customerAlert").html(
                  '<p style="color:red">Enter a valid Voucher No</p>'
                );
              } else {
                $("#customerAlert").html("");
              }
            } else {
            }
          },

          minLength: 3,
        });
      } else {
        curRow.find(".voucher_no").val("");

        curRow.find(".id_gift_card").val("");

        curRow.find(".gift_voucher_amt").val("");

        alert(data.message);
      }
    },
  });
}

function validateVoucherDetailRow() {
  var row_validate = true;

  $("#gift_voucher_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find("td:first .voucher_no").val() == "" ||
      $(this).find("td:eq(2) .gift_voucher_amt").val() == ""
    ) {
      row_validate = false;
    }
  });

  return row_validate;
}

function create_new_empty_est_voucher_row() {
  var row = "";

  row +=
    '<tr><td><input class="voucher_no" type="text" style="width: 100px;" name="gift_voucher[voucher_no][]" value="" /><input type="hidden" class="id_gift_card"></td><td><input type="number" style="width: 100px;" class="gift_voucher_amt" name="gift_voucher[gift_voucher_amt][]" value=""  readonly/></td><td><a href="#" onClick="removeGift_voucher($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';

  $("#gift_voucher_details tbody").append(row);

  $("#gift_voucher_details > tbody")
    .find("tr:last td:eq(0) .voucher_no")
    .focus();
}

$("#create_gift_voucher_details").on("click", function () {
  $("#voucherAlert span").remove();

  if (validateVoucherDetailRow()) {
    create_new_empty_est_voucher_row();
  } else {
    $("#voucherAlert").append(
      "<span>Please fill all fields in current row.</span>"
    );

    $("#voucherAlert span").delay(20000).fadeOut(500);
  }
});

$("#add_newvoucher").on("click", function () {
  if (validateVoucherDetailRow()) {
    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_gift_voucher = $(this);

      bill_gift_voucher
        .find("#tot_voucher_amt")
        .html($(".gift_total_amount").html());

      bill_gift_voucher
        .find("#giftVoucher_details")
        .val(
          giftVoucher_details.length > 0
            ? JSON.stringify(giftVoucher_details)
            : ""
        );
    });

    $("#gv-confirm-add").modal("toggle");

    calculatePaymentCost();
  } else {
    alert("Please fill required fields");
  }
});

$(document).on("keyup", ".gift_voucher_amt", function (e) {
  if (e.which === 13) {
    e.preventDefault();

    if (validateVoucherDetailRow()) {
      create_new_empty_est_voucher_row();
    } else {
      alert("Please fill required fields");
    }
  }

  calculateGiftVoucher_Amount();
});

function removeGift_voucher(curRow) {
  curRow.remove();

  calculateGiftVoucher_Amount();
}

function calculateGiftVoucher_Amount() {
  var total_amount = 0;

  giftVoucher_details = [];

  $("#gv-confirm-add .modal-body #gift_voucher_details > tbody  > tr").each(
    function (index, tr) {
      if ($(this).find(".gift_voucher_amt").val() != "") {
        total_amount += parseFloat($(this).find(".gift_voucher_amt").val());

        giftVoucher_details.push({
          voucher_no: $(this).find(".voucher_no").val(),
          gift_voucher_amt: $(this).find(".gift_voucher_amt").val(),
          id_gift_card: $(this).find(".id_gift_card").val(),
        });
      }
    }
  );

  $(".gift_total_amount").html(parseFloat(total_amount).toFixed(2));

  var existingBalance = parseFloat($(".bal_amount").text().trim());

  var newBalance = existingBalance - parseFloat(total_amount).toFixed(2);

  $(".balance_amount").text(isNaN(newBalance) ? 0 : newBalance.toFixed(2));
}

//gift voucher Ends

//Credit card starts

$("#new_card").on("click", function () {
  $("#cardPayAlert span").remove();

  if (validateCardDetailRow()) {
    create_new_empty_cardpay_row();
  } else {
    $("#cardPayAlert").append(
      "<span>Please fill all fields in current row.</span>"
    );

    $("#cardPayAlert span").delay(20000).fadeOut(500);
  }
});

function addCardRow() {
  $("#cardPayAlert span").remove();

  if (validateCardDetailRow()) {
    create_new_empty_cardpay_row();
  } else {
    $("#cardPayAlert").append(
      "<span>Please fill all fields in current row.</span>"
    );

    $("#cardPayAlert span").delay(20000).fadeOut(500);
  }
}

function validateCardDetailRow() {
  var row_validate = true;

  $("#card_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".card_name").val() == "" ||
      $(this).find(".card_type").val() == "" ||
      $(this).find(".card_no").val() == "" ||
      $(this).find(".ref_no").val() == "" ||
      $(this).find(".card_amt").val() == "" ||
      $(this).find(".id_device").val() == ""
    ) {
      row_validate = false;
    }
  });

  return row_validate;
}

function create_new_empty_cardpay_row() {
  var device_list = '<option value="">Select Type</option>';

  $.each(payment_device_details, function (pkey, item) {
    device_list +=
      "<option value='" +
      item.id_device +
      "'>" +
      item.device_name +
      "</option>";
  });

  var row = "";

  row +=
    '<tr id="' +
    $("#card_details tbody tr").length +
    '">' +
    // Kanaga Sundar
    // + '<td><select name="card_details[card_name][]" class="card_name"><option value="1">RuPay</option><option value="2">VISA</option><option value="3">Mastro</option><option value="4">Master</option></select></td>'

    // + '<td><select name="card_details[card_type][]" class="card_type"><option value="1">CC</option><option value="2">DC</option></select></td>'

    // + '<td><select class="form-control id_device" name="card_details[id_device][]" style="width: 100px !important;">' + device_list + '</select></td> '

    // + '<td><input type="number" step="any" class="card_no" name="card_details[card_no][]"/></td>'

    // + '<td><input type="number" step="any" class="card_amt" name="card_details[card_amt][]"/></td>'

    // + '<td><input type="text" step="any" class="ref_no" name="card_details[ref_no][]"/></td>'
    // + '<td><a href="#" onClick="removeCC_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>'

    '<td><select name="card_details[card_name][]" class="form-control card_name" style="width:100%;"><option value="1">RuPay</option><option value="2">VISA</option><option value="3">Mastro</option><option value="4">Master</option><option value="5">DINERS</option></select></td>' +
    '<td><select name="card_details[card_type][]" class="form-control card_type"><option value="1" style="width:100%;">CC</option><option value="2">DC</option></select></td>' +
    '<td><select class="form-control id_device" name="card_details[id_device][]">' +
    device_list +
    "</select></td> " +
    '<td><input type="number" step="any" class="form-control card_no" name="card_details[card_no][]" style="width:100%;"/></td>' +
    '<td><input type="number" step="any" class="form-control card_amt" name="card_details[card_amt][]" style="width:100%;"/></td>' +
    '<td><input type="text" step="any" class="form-control ref_no" name="card_details[ref_no][]" style="width:100%;"/></td>' +
    '<td><div class="modal_btns"><button type="button" class="btn bg-olive btn-sm" id="new_card" onClick="addCardRow()"><i class="fa fa-plus"></i></button><a href="#" onClick="removeCC_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del btn-sm"><i class="fa fa-trash"></i></a></div></td>' +
    "</tr>";

  $("#card_details tbody").append(row);
}

$(document).on("keyup", ".card_amt", function (e) {
  if (e.which === 13) {
    e.preventDefault();

    if (validateCardDetailRow()) {
      create_new_empty_cardpay_row();
    } else {
      alert("Please fill required fields");
    }
  }

  calculate_creditCard_Amount();
});

function removeCC_row(curRow) {
  if (curRow.length > 0 && Array.isArray(card_payment)) {
    if (card_payment.length - 1 >= curRow.index()) {
      card_payment.splice(curRow.index(), 1);
    }
    console.log(card_payment.length - 1 >= curRow.index());
  }
  console.log(card_payment);

  curRow.remove();

  calculate_creditCard_Amount();
}

function calculate_creditCard_Amount() {
  var total_amount = 0;

  var cc_amount = 0;

  var dc_amount = 0;

  card_payment = [];

  $("#card-detail-modal .modal-body #card_details > tbody  > tr").each(
    function (index, tr) {
      if ($(this).find(".card_amt").val() != "") {
        if ($(this).find(".card_type").val() == 1) {
          cc_amount += parseFloat($(this).find(".card_amt").val());
        } else if ($(this).find(".card_type").val() == 2) {
          dc_amount += parseFloat($(this).find(".card_amt").val());
        }

        //card_payment.push({'card_name':$(this).find('.card_name').val(),'id_device':$('.id_device').val(),'card_type':$(this).find('.card_type').val(),'card_no':$(this).find('.card_no').val(),'card_amt':$(this).find('.card_amt').val()});
      }
    }
  );

  $(".cc_total_amt").html(parseFloat(cc_amount).toFixed(2));

  $(".dc_total_amt").html(parseFloat(dc_amount).toFixed(2));

  var existingBalance = parseFloat($(".bal_amount").text().trim());

  var newBalance =
    existingBalance -
    parseFloat(parseFloat(cc_amount) + parseFloat(dc_amount)).toFixed(2);

  $(".balance_amount").text(isNaN(newBalance) ? 0 : newBalance.toFixed(2));

  var issueexistingBalance = parseFloat($(".issue_bal_amount").text().trim());

  var issuenewBalance =
    issueexistingBalance -
    parseFloat(parseFloat(cc_amount) + parseFloat(dc_amount)).toFixed(2);

  $(".issue_balance_amount").text(
    isNaN(issuenewBalance) ? 0 : issuenewBalance.toFixed(2)
  );

  var receiptexistingBalance = parseFloat(
    $(".receipt_bal_amount").text().trim()
  );

  var receiptnewBalance =
    receiptexistingBalance -
    parseFloat(parseFloat(cc_amount) + parseFloat(dc_amount)).toFixed(2);

  $(".receipt_balance_amount").text(
    isNaN(receiptnewBalance) ? 0 : receiptnewBalance.toFixed(2)
  );

  $(".cc_total_amount").html(
    parseFloat(parseFloat(cc_amount) + parseFloat(dc_amount)).toFixed(2)
  );

  $("#cc_billed_cash").val(
    parseFloat(parseFloat(cc_amount) + parseFloat(dc_amount)).toFixed(2)
  );
}

$(".card_close_btn").on("click", function () {
  cardModalEvents();
});

function cardModalEvents() {
  if (
    $(".CC").html() != "" &&
    $(".CC").html() != undefined &&
    $(".DC").html() != "" &&
    $(".DC").html() != undefined &&
    Array.isArray(card_payment) && ctrl_page[1] != 'paymentmode_edit'
  ) {
    canCloseCardModal = false;

    const totCardAmount = Object.values(card_payment).reduce(
      (sum, item) => sum + parseFloat(item.card_amt),
      0
    );

    const CardPayment = $("#card_payment").val();

    const CCRow = $(".CC").html() != "" ? parseFloat($(".CC").html()) : "";

    const DCRow = $(".DC").html() != "" ? parseFloat($(".DC").html()) : "";

    const Card_Payment_row = CCRow + DCRow;

    const totCard_amount =
      CardPayment != ""
        ? Object.values(JSON.parse(CardPayment)).reduce(
            (sum, item) => sum + parseFloat(item.card_amt),
            0
          )
        : "";

    if (
      totCard_amount != totCardAmount ||
      totCard_amount != Card_Payment_row ||
      card_payment.length == 0
    ) {
      $.toaster({
        priority: "danger",

        title: "Warning!",

        message: "" + "</br>Card details not saved",

        settings: { timeout: 5000 },
      });
    } else {
      canCloseCardModal = true;
    }
  } else {
    canCloseCardModal = true;
  }
}

$("#card-detail-modal").on("hide.bs.modal", function (e) {
  if (!canCloseCardModal) {
    e.preventDefault();
  } else {
    console.log("Success");
  }
});

$("#add_newcc").on("click", function () {
  if (validateCardDetailRow()) {
    canCloseCardModal = true;

    card_payment = [];

    $("#card-detail-modal .modal-body #card_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".card_amt").val() != "") {
          card_payment.push({
            card_name: $(this).find(".card_name").val(),
            id_device: $(".id_device").val(),
            card_type: $(this).find(".card_type").val(),
            card_no: $(this).find(".card_no").val(),
            card_amt: $(this).find(".card_amt").val(),
            ref_no: $(this).find(".ref_no").val(),
          });
        }
      }
    );

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".CC").html($(".cc_total_amt").html());

      bill_card_pay_row.find(".DC").html($(".dc_total_amt").html());

      bill_card_pay_row
        .find("#card_payment")
        .val(card_payment.length > 0 ? JSON.stringify(card_payment) : "");
    });

    $("#card-detail-modal").modal("hide");

    calculatePaymentCost();
  } else {
    alert("Please fill required fields");
  }
});

//Credit card ends

//Chque starts

$("#cheque_modal").on("click", function () {
  var existingBalance = parseFloat($(".bal_amount").text().trim());

  $(".balance_amount").text(isNaN(existingBalance) ? 0 : existingBalance);

  var issueexistingBalance = parseFloat($(".issue_bal_amount").text().trim());

  $(".issue_balance_amount").text(
    isNaN(issueexistingBalance) ? 0 : issueexistingBalance
  );

  var receiptexistingBalance = parseFloat(
    $(".receipt_bal_amount").text().trim()
  );

  $(".receipt_balance_amount").text(
    isNaN(receiptexistingBalance) ? 0 : receiptexistingBalance
  );
  if (validateChqDetailRow()) {
    if ($("#chq_details > tbody > tr").length == 0) {
      create_new_empty_chqpay_row();
    }
  }
});

$("#new_chq").on("click", function () {
  $("#chqPayAlert span").remove();

  if (validateChqDetailRow()) {
    create_new_empty_chqpay_row();
  } else {
    $("#chqPayAlert").append(
      "<span>Please fill all fields in current row.</span>"
    );

    $("#chqPayAlert span").delay(20000).fadeOut(500);
  }
});

function newChq() {
  $("#chqPayAlert span").remove();

  if (validateChqDetailRow()) {
    create_new_empty_chqpay_row();
  } else {
    $("#chqPayAlert").append(
      "<span>Please fill all fields in current row.</span>"
    );

    $("#chqPayAlert span").delay(20000).fadeOut(500);
  }
}

function validateChqDetailRow() {
  var row_validate = true;

  $("#chq_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".bank_name").val() == "" ||
      $(this).find(".bank_branch").val() == "" ||
      $(this).find(".cheque_no").val() == "" ||
      $(this).find(".payment_amount").val() == ""
    ) {
      row_validate = false;
    }
  });

  return row_validate;
}

function create_new_empty_chqpay_row() {
  var current_date = moment().format("dd-mm-yyyy");
  var row = "";

  var bank_list = "";

  $.each(bank_details, function (pkey, item) {
    bank_list +=
      "<option value='" + item.id_bank + "'>" + item.acc_number + "</option>";
  });

  row +=
    "<tr>" +
    // Kanaga Sundar
    // + '<td><input class="form-control  datemask date cheque_deposit_date" data-date-format="dd-mm-yyyy" name="cheque_details[cheque_date][]" type="text" placeholder="Cheque Date" /></td>'
    // + '<td><select class="form-control id_bank" name="cheque_details[id_bank][]">' + bank_list + '</select></td> '
    // + '<td><input type="number" step="any" class="cheque_no" name="cheque_details[cheque_no][]"/></td>'
    // + '<td><input type="number" step="any" class="payment_amount" name="cheque_details[payment_amount][]"/></td>'
    // + '<td><a href="#" onClick="removeChq_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>'
    '<td><input class="form-control datemask date cheque_deposit_date" data-date-format="dd-mm-yyyy" name="cheque_details[cheque_date][]" type="text" placeholder="Cheque Date" value="' +
    current_date +
    '" style="width:100%;" /></td>' +
    '<td><select class="form-control id_bank" name="cheque_details[id_bank][]" style="width:100%;">' +
    bank_list +
    "</select></td> " +
    '<td><input type="number" step="any" class="form-control cheque_no" name="cheque_details[cheque_no][]" style="width:100%;"/></td>' +
    '<td><input type="number" step="any" class="form-control payment_amount" name="cheque_details[payment_amount][]" style="width:100%;"/></td>' +
    '<td><div class="modal_btns"><button type="button" class="btn bg-olive btn-sm" id="new_chq" onClick="newChq()"><i class="fa fa-plus"></i></button><a href="#" onClick="removeChq_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del btn-sm"><i class="fa fa-trash"></i></a></div></td>' +
    "</tr>";

  $("#chq_details tbody").append(row);

  var date = new Date();

  var today = new Date(date.getFullYear(), date.getMonth(), date.getDate());

  $(".cheque_deposit_date")
    .datepicker({
      dateFormat: "dd-mm-yyyy",
      endDate: today,
      autoclose: "true",
    })
    .datepicker("setDate", today);
}

$(document).on("keyup", ".payment_amount", function (e) {
  if (e.which === 13) {
    e.preventDefault();

    if (validateChqDetailRow()) {
      create_new_empty_chqpay_row();
    } else {
      alert("Please fill required fields");
    }
  }

  calculate_chq_Amount();
});

function removeChq_row(curRow) {
  if (curRow.length > 0 && Array.isArray(chq_payment)) {
    if (chq_payment.length - 1 >= curRow.index()) {
      chq_payment.splice(curRow.index(), 1);
    }
  }
  console.log(chq_payment);

  curRow.remove();

  calculate_chq_Amount();
}

function calculate_chq_Amount() {
  var total_amount = 0;

  var chq_amount = 0;

  chq_payment = [];

  $("#cheque-detail-modal .modal-body #chq_details > tbody  > tr").each(
    function (index, tr) {
      if ($(this).find(".payment_amount").val() != "") {
        chq_amount += parseFloat($(this).find(".payment_amount").val());

        chq_payment.push({
          cheque_date: $(this).find(".cheque_date").val(),
          cheque_no: $(this).find(".cheque_no").val(),
          bank_branch: $(this).find(".bank_branch").val(),
          bank_name: $(this).find(".bank_name").val(),
          payment_amount: $(this).find(".payment_amount").val(),
        });
      }
    }
  );

  var existingBalance = parseFloat($(".bal_amount").text().trim());

  var newBalance = existingBalance - parseFloat(chq_amount).toFixed(2);

  $(".balance_amount").text(isNaN(newBalance) ? 0 : newBalance.toFixed(2));

  var issueexistingBalance = parseFloat($(".issue_bal_amount").text().trim());

  var issuenewBalance =
    issueexistingBalance - parseFloat(chq_amount).toFixed(2);

  $(".issue_balance_amount").text(
    isNaN(issuenewBalance) ? 0 : issuenewBalance.toFixed(2)
  );

  var receiptexistingBalance = parseFloat(
    $(".receipt_bal_amount").text().trim()
  );

  var receiptnewBalance =
    receiptexistingBalance - parseFloat(chq_amount).toFixed(2);

  $(".receipt_balance_amount").text(receiptnewBalance.toFixed(2));

  $(".chq_total_amount").html(parseFloat(chq_amount).toFixed(2));

  $("#chq_billed_cash").val(parseFloat(chq_amount).toFixed(2));
}

$(".chq_close_btn").on("click", function () {
  chqModalEvents();
});

function chqModalEvents() {
  if ($(".CHQ").html() != "" && Array.isArray(chq_payment) && ctrl_page[1] != 'paymentmode_edit') {
    canCloseChqModal = false;

    const totChqAmount = Object.values(chq_payment).reduce(
      (sum, item) => sum + parseFloat(item.payment_amount),
      0
    );

    const ChqPayment = $("#chq_payment").val();

    const ChqRow = $(".CHQ").html() == "" ? 0 : parseFloat($(".CHQ").html());

    const totChq_amount =
      ChqPayment != ""
        ? Object.values(JSON.parse(ChqPayment)).reduce(
            (sum, item) => sum + parseFloat(item.payment_amount),
            0
          )
        : "";

    if (
      totChq_amount != totChqAmount ||
      totChq_amount != ChqRow ||
      chq_payment.length == 0
    ) {
      $.toaster({
        priority: "danger",

        title: "Warning!",

        message: "" + "</br>Cheque details not saved",

        settings: { timeout: 5000 },
      });
    } else {
      canCloseChqModal = true;
    }
  } else {
    canCloseChqModal = true;
  }
}

$("#cheque-detail-modal").on("hide.bs.modal", function (e) {
  if (!canCloseChqModal) {
    e.preventDefault();
  } else {
    console.log("Success");
  }
});

$("#add_newchq").on("click", function () {
  var chq_payment = [];

  if (validateChqDetailRow()) {
    canCloseChqModal = true;

    $("#cheque-detail-modal .modal-body #chq_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".payment_amount").val() != "") {
          chq_payment.push({
            cheque_date: $(this).find(".cheque_deposit_date").val(),
            cheque_no: $(this).find(".cheque_no").val(),
            id_bank: $(this).find(".id_bank").val(),
            bank_branch: $(this).find(".bank_branch").val(),
            bank_name: $(this).find(".bank_name").val(),
            payment_amount: $(this).find(".payment_amount").val(),
          });
        }
      }
    );

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".CHQ").html($(".chq_total_amount").html());

      bill_card_pay_row
        .find("#chq_payment")
        .val(chq_payment.length > 0 ? JSON.stringify(chq_payment) : "");
    });

    $("#cheque-detail-modal").modal("hide");

    calculatePaymentCost();
  } else {
    alert("Please fill required fields");
  }
});

$(document).on('click','.btn-close,.close',function (){

	if (ctrl_page[1] != 'issue'){
		$('#cheque-detail-modal').modal('hide');
	}

  $("#card-detail-modal").modal("hide");

  $("#net_banking_modal").modal("hide");
});
$("#net_banking_modal")
  .on("show.bs.modal", function () {
    $(document).on("keydown.netBanking", function (event) {
      if (event.key === "Escape") {
        netBankingModalEvents();

        $("#net_banking_modal").modal("hide");
      }
    });
  })
  .on("hide.bs.modal", function () {
    $(document).off("keydown.netBanking");
  });

$("#card-detail-modal")
  .on("show.bs.modal", function () {
    $(document).on("keydown.cardDetail", function (event) {
      if (event.key === "Escape") {
        cardModalEvents();

        $("#card-detail-modal").modal("hide");
      }
    });
  })
  .on("hide.bs.modal", function () {
    $(document).off("keydown.cardDetail");
  });

$("#cheque-detail-modal")
  .on("show.bs.modal", function () {
    $(document).on("keydown.chequeDetail", function (event) {
      if (event.key === "Escape") {
        chqModalEvents();

        $("#cheque-detail-modal").modal("hide");
      }
    });
  })
  .on("hide.bs.modal", function () {
    $(document).off("keydown.chequeDetail");
  });

$(document).on("focus", ".cheque_date", function (e) {
  var row = $(this).closest("tr");

  row.find(".cheque_date").datetimepicker({
    format: "dd-mm-yyyy H:m:s",
  });
});

//Cheque ends

$("#card_detail_modal").on("click", function () {
  // $('#card-detail-modal').modal('show');

  // var existingBalance = parseFloat($('.bal_amount').text().trim());

  // $('.balance_amount').text(isNaN(existingBalance)?0:existingBalance);

  // var issueexistingBalance = parseFloat($('.issue_bal_amount').text().trim());

  // $('.issue_balance_amount').text(issueexistingBalance);

  // var receiptexistingBalance = parseFloat($('.receipt_bal_amount').text().trim());

  // $('.receipt_balance_amount').text(receiptexistingBalance);

  if ($("#card_details > tbody > tr").length == 0) {
    create_new_empty_cardpay_row();
  }
});

$("#gift_voucher_modal").on("click", function () {
  // $('#card-detail-modal').modal('show');

  var existingBalance = parseFloat($(".bal_amount").text().trim());

  $(".balance_amount").text(isNaN(existingBalance) ? 0 : existingBalance);

  if ($("#gift_voucher_details > tbody > tr").length == 0) {
    create_new_empty_est_voucher_row();
  }
});

// $('#cheque_modal').on('click', function () {

// 	// $('#cheque-detail-modal').modal('show');

// 	var existingBalance = parseFloat($('.bal_amount').text().trim());

// 	$('.balance_amount').text(isNaN(existingBalance)?0:existingBalance);

// 	var issueexistingBalance = parseFloat($('.issue_bal_amount').text().trim());

// 	$('.issue_balance_amount').text(issueexistingBalance);

// 	var receiptexistingBalance = parseFloat($('.receipt_bal_amount').text().trim());

// 	$('.receipt_balance_amount').text(receiptexistingBalance);

// 	if ($('#chq_details > tbody > tr').length == 0) {

// 		create_new_empty_chqpay_row();

// 	}

// });

//Net banking starts

$("#net_bank_modal").on("click", function () {
  // $('#net_banking_modal').modal('show');

  var existingBalance = parseFloat($(".bal_amount").text().trim());

  $(".balance_amount").text(
    isNaN(existingBalance) ? 0 : existingBalance.toFixed(2)
  );

  var issueexistingBalance = parseFloat($(".issue_bal_amount").text().trim());

  $(".issue_balance_amount").text(
    isNaN(issueexistingBalance) ? 0 : issueexistingBalance.toFixed(2)
  );

  var receiptexistingBalance = parseFloat(
    $(".receipt_bal_amount").text().trim()
  );

  $(".receipt_balance_amount").text(
    isNaN(receiptexistingBalance) ? 0 : receiptexistingBalance.toFixed(2)
  );

  if (validateNBDetailRow()) {
    if ($("#net_bank_details > tbody > tr").length == 0) {
      create_new_empty_net_banking_row();
    }
  }
});

$("#new_net_bank").on("click", function () {
  $("#NetBankAlert span").remove();

  if (validateNBDetailRow()) {
    create_new_empty_net_banking_row();
  } else {
    $("#NetBankAlert").append(
      "<span>Please fill all fields in current row.</span>"
    );

    $("#NetBankAlert span").delay(20000).fadeOut(500);
  }
});

function addNetBank() {
  $("#NetBankAlert span").remove();

  if (validateNBDetailRow()) {
    create_new_empty_net_banking_row();
  } else {
    $("#NetBankAlert").append(
      "<span>Please fill all fields in current row.</span>"
    );

    $("#NetBankAlert span").delay(20000).fadeOut(500);
  }
}

function validateNBDetailRow() {
  var row_validate = true;

  $("#net_bank_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".nb_type").val() == "" ||
      $(this).find(".ref_no").val() == "" ||
      $(this).find(".amount").val() == ""
    ) {
      $.toaster({
        priority: "danger",

        title: "Warning!",

        message: "" + "</br>" + "Please Fill The Required Fields..",

        settings: { timeout: 5000 },
      });

      row_validate = false;

      return true;
    }

    if ($(this).find(".nb_type").val() == 3) {
      if ($(this).find(".id_device").val() == "") {
        $.toaster({
          priority: "danger",

          title: "Warning!",

          message: "" + "</br>" + "Select Device Type..",

          settings: { timeout: 5000 },
        });

        row_validate = false;

        return true;
      }
    } else if (
      $(this).find(".nb_type").val() == 1 ||
      $(this).find(".nb_type").val() == 2
    ) {
      if ($(this).find(".id_bank").val() == "") {
        $.toaster({
          priority: "danger",

          title: "Warning!",

          message: "" + "</br>" + "Select The Bank",

          settings: { timeout: 5000 },
        });

        row_validate = false;

        return true;
      }
    }
  });

  return row_validate;
}

function create_new_empty_net_banking_row() {
  var bank_list = "";

  // var device_list = '<option value="">Select Type</option>';
  var device_list = "";
  rows_added = $("#net_bank_details tbody tr").length;
  var nb_row_count = rows_added++;

  $.each(bank_details, function (pkey, item) {
    bank_list +=
      "<option value='" + item.id_bank + "'>" + item.acc_number + "</option>";
  });

  $.each(payment_device_details, function (pkey, item) {
    device_list +=
      "<option value='" +
      item.id_device +
      "'>" +
      item.device_name +
      "</option>";
  });

  var row = "";

  row +=
    "<tr>" +
    //Kanaga Sundar
    // + '<td><select name="nb_details[nb_type][]" class="form-control nb_type"><option value=1>RTGS</option><option value=2>IMPS</option><option value=3 selected>UPI</option><option value=4>NEFT</option></select></td>'

    // + '<td class="upi_type" ><select class="form-control id_bank" name="nb_details[id_bank][]" >' + bank_list + '</select></td> '

    // + '<td><input class="form-control  datemask date nb_date" data-date-format="dd-mm-yyyy" name="nb_details[nb_date][]" type="text" placeholder="NB Date" /></td>'

    // + '<td class="device" style="display:none"><select class="form-control id_device" name="card_details[id_device][]" style="width: 100px !important;">' + device_list + '</select></td> '

    // + '<td><input type="text" step="any" class="form-control ref_no" name="nb_details[ref_no][]"/></td>'

    // + '<td><input type="number" step="any" class="form-control amount" name="nb_details[amount][]"/></td>'

    // + '<td><a href="#" onClick="removeNb_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>'

    // + '</tr>';
    '<td><select name="nb_details[nb_type][]" class="form-control nb_type" id="nb_type_' +
    nb_row_count +
    '" onchange="setdevice(this.value,' +
    nb_row_count +
    ')" style="width:100%;"><option value="">Select Type</option><option value=1>RTGS</option><option value=2>IMPS</option><option value=3>UPI</option></select></td>' +
    '<td class="form-control upi_type" id="upi_type_' +
    nb_row_count +
    '"><select name="nb_details[nb_bank][]"  class="form-control id_bank"" style="width:100%;"><option value="">Select Bank</option>' +
    bank_list +
    "</select></td>" +
    '<td class="form-control device" id="device_' +
    nb_row_count +
    '"  style="display:none;"><select name="nb_details[nb_device][]" class="form-control id_device"" style="width:100%;"><option value="">Select Device</option>' +
    device_list +
    "</select></td>" +
    '<td><input class="form-control  datemask date nb_date" data-date-format="dd-mm-yyyy" name="nb_details[nb_date][]" type="text" placeholder="NB Date"" /></td>' +
    '<td><input type="number" step="any" class="form-control ref_no" name="nb_details[ref_no][]" style="width:100%;"/></td>' +
    '<td><input type="number" step="any" class="form-control amount" name="nb_details[amount][]" style="width:100%;"/></td>' +
    '<td><div class="modal_btns"><button type="button" class="btn bg-olive btn-sm" id="new_net_bank" onClick="addNetBank()"><i class="fa fa-plus"></i></button><a href="#" onClick="removeNb_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del btn-sm"><i class="fa fa-trash"></i></a></div></td>' +
    "</tr>";

  $("#net_bank_details tbody").append(row);

  $("#net_bank_details > tbody").find("tr:last .cheque_date").focus();

  var date = new Date();

  var today = new Date(date.getFullYear(), date.getMonth(), date.getDate());

  // $('.nb_date').datepicker({ dateFormat: 'dd-mm-yyyy', endDate: today });

  $(".nb_date")
    .datepicker({
      dateFormat: "dd-mm-yyyy",
      endDate: today,
    })
    .datepicker("setDate", today);

  $(".nb_type").trigger("change");
}

// $(document).on('change', '.nb_type', function (e) {

// 	$('.device').hide();

// 	$('.upi_type').hide();

// 	if (this.value == 3) {

// 		$('.device').show();

// 	}

// 	else if (this.value == 2 || this.value == 1 || this.value == 4) {

// 		$('.upi_type').show();

// 	}

// });

$(document).on("keyup", ".amount", function (e) {
  if (e.which === 13) {
    // e.preventDefault();

    if (validateNBDetailRow()) {
      create_new_empty_net_banking_row();
    } else {
      e.preventDefault();
      // alert("Please fill required fields");
    }
  }

  calculate_NB_Amount();
});

function removeNb_row(curRow) {
  if (curRow.length > 0 && Array.isArray(nb_payment)) {
    if (nb_payment.length - 1 >= curRow.index()) {
      nb_payment.splice(curRow.index(), 1);
    }
    console.log(nb_payment.length - 1 >= curRow.index());
  }
  console.log(nb_payment);

  curRow.remove();

  calculate_NB_Amount();
}

function calculate_NB_Amount() {
  var total_amount = 0;

  var nb_amount = 0;
  nb_payment = [];
  $("#net_banking_modal .modal-body #net_bank_details > tbody  > tr").each(
    function (index, tr) {
      if ($(this).find(".amount").val() != "") {
        nb_amount += parseFloat($(this).find(".amount").val());

        nb_payment.push({
          nb_type: $(this)
            .find(".nb_type" + count)
            .val(),
          ref_no: $(this).find(".ref_no").val(),
          amount: $(this).find(".amount").val(),
          bank: $(this)
            .find(".nb_bank" + count)
            .val(),
          device: $(this)
            .find(".nb_device" + count)
            .val(),
          acc_no: $(".nb_bank" + count)
            .find(":selected")
            .text(),
        });
      }
      console.log(nb_payment);
    }
  );

  var existingBalance = parseFloat($(".bal_amount").text().trim());

  var newBalance = existingBalance - parseFloat(nb_amount).toFixed(2);

  $(".balance_amount").text(isNaN(newBalance) ? 0 : newBalance.toFixed(2));

  var issueexistingBalance = parseFloat($(".issue_bal_amount").text().trim());

  var issuenewBalance = issueexistingBalance - parseFloat(nb_amount).toFixed(2);

  $(".issue_balance_amount").text(
    isNaN(issuenewBalance) ? 0 : issuenewBalance.toFixed(2)
  );

  var receiptexistingBalance = parseFloat(
    $(".receipt_bal_amount").text().trim()
  );

  var receiptnewBalance =
    receiptexistingBalance - parseFloat(nb_amount).toFixed(2);

  $(".receipt_balance_amount").text(
    isNaN(receiptnewBalance) ? 0 : receiptnewBalance.toFixed(2)
  );

  $(".nb_total_amount").html(parseFloat(nb_amount).toFixed(2));

  $("#nb_billed_cash").val(parseFloat(nb_amount).toFixed(2));
}

$("#add_newnb").on("click", function () {
  var nb_payment = [];

  if (validateNBDetailRow()) {
    canCloseNBModal = true;

    $("#net_banking_modal .modal-body #net_bank_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".amount").val() != "") {
          console.log(nb_payment);
          nb_payment.push({
            nb_type: $(this).find(".nb_type").val(),

            id_bank: $(this).find(".id_bank").val(),

            nb_date: $(this).find(".nb_date").val(),

            id_device: $(this).find(".id_device").val(),

            amount: $(this).find(".amount").val(),

            ref_no: $(this).find(".ref_no").val(),
          });
        }
      }
    );

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".NB").html($(".nb_total_amount").html());

      bill_card_pay_row.find("#nb_payment").val("");

      bill_card_pay_row
        .find("#nb_payment")
        .val(nb_payment.length > 0 ? JSON.stringify(nb_payment) : "");

      nb_values = [];
    });

    $("#net_banking_modal").modal("hide");

    calculatePaymentCost();
  }

  // else {

  // 	// alert("Please fill required fields");

  // }
});

function setdevice(value, index) {
  if (value == 3) {
    $("#device_" + index).css("display", "block");
    $("#upi_type_" + index).css("display", "none");
  } else if (value == 2 || value == 1) {
    $("#upi_type_" + index).css("display", "block");
    $("#device_" + index).css("display", "none");
  }
}
$(".net_banking_modal").on("click", function () {
  if ($(".nb_type" + count).val() == 1 || $(".nb_type" + count).val() == 2) {
    $(".nb_bank" + count).show();
    $(".nb_device" + count).hide();
  } else if ($("#nb_type" + count).val() == 3) {
    $(".nb_device" + count).show();
    $(".nb_bank" + count).hide();
  }
});
$(".nb_type" + count).on("change", function () {
  if (this.value == 1 || this.value == 2) {
    $(".nb_bank" + count).show();
    $(".nb_device" + count).hide();
  } else if (this.value == 3) {
    $(".nb_device" + count).show();
    $(".nb_bank" + count).hide();
  }
});
function showhide(event, count) {
  if (event.target.value == 1 || event.target.value == 2) {
    $(".nb_bank" + count).show();
    $(".nb_device" + count).hide();
  } else if (event.target.value == 3) {
    $(".nb_device" + count).show();
    $(".nb_bank" + count).hide();
  }
}
//Net banking ends
//Kanaga Sundar
//Advance starts

function get_advance_details() {
  if ($("#bill_adv_adj > tbody > tr").length == 0) {
    $("#bill_adv_adj > tbody").empty();

    var bill_cus_id = $("#bill_cus_id").val();

    var bill_type = $("input[name='billing[bill_type]']:checked").val();

    my_Date = new Date();

    $.ajax({
      url:
        base_url +
        "index.php/admin_ret_billing/get_advance_details/?nocache=" +
        my_Date.getUTCSeconds(),

      dataType: "json",

      method: "POST",

      data: {
        bill_cus_id: bill_cus_id,
        is_eda: $("#is_eda").val(),
        id_branch: $("#id_branch").val(),
      },

      success: function (data) {
        console.log(data);
        rec_id_ret_wallet = data[0].id_ret_wallet;

        total_sum_adjusted_bill_amount = 0;

        let tot_available_amt = 0;

        $.each(data, function (key, items) {
          total_sum_adjusted_bill_amount += parseInt(
            parseFloat(items.amount).toFixed(2)
          );
        });

        if (total_sum_adjusted_bill_amount) {
          $("#adv-adj-confirm-add").modal("show");

          var row = "";

          var html = "";

          var metal_rate = $(".per-grm-sale-value").html();

          var weight_amt = parseFloat(data.weight * data.rate_per_gram);

          $("#id_ret_wallet").val(data.id_ret_wallet);

          $.each(data, function (key, items) {
            let amt_of_weight = 0;

            if (items.weight) {
              if (items.rate_calc == 1) {
                amt_of_weight = items.weight * $("#goldrate_22ct").val();
              } else if (items.rate_calc == 2) {
                amt_of_weight = items.weight * $("#silverrate_1gm").val();
              }
            }

            tot_available_amt =
              tot_available_amt +
              parseFloat(items.amount > 0 ? items.amount : amt_of_weight);

            html +=
              "<tr>" +
              '<td><input type="checkbox" class="bill_id_issue_receipt"  name="adv_adj[id_issue_receipt]" value="' +
              items.id_issue_receipt +
              '"><input type="hidden" class="id_ret_wallet" value="' +
              items.id_ret_wallet +
              '"><input type="hidden" class="adv_cash_paid" value="' +
              items.cash_pay +
              '"><input type="hidden" class="is_currentday_adv" value="' +
              items.is_currentday_adv +
              '"><input type="hidden" class="rate_calc" value=' +
              items.rate_calc +
              "></td>" +
              '<td><div class="adv_bill_no" value="' +
              items.bill_no +
              '">' +
              items.bill_no +
              "</div></td>" +
              '<td><div class="advance_amount" >' +
              (items.amount > 0
                ? items.amount
                : parseFloat(amt_of_weight).toFixed(2)) +
              "</div></td>" +
              '<td><input type="number" class="form-control advance_weight" name="adv_adj[adj_weight]" value=' +
              items.weight +
              ' readonly><input type="hidden" class="actual_wt" value=' +
              items.weight +
              "></td>" +
              '<td><input type="number" class="form-control adj_amount" name="adv_adj[adj_amount]" readonly></td>' +
              '<td><input type="number" class="form-control blc_amount" name="adv_adj[blc_amount]" readonly></td>' +
              '<td><input type="number" class="form-control refund_amount" name="adv_adj[refund_amount]" readonly></td>' +
              '<td><select class="form-control select_pay_mode" readonly><option value="CSH">CSH</option><option value="CHQ">CHQ</option></td>' +
              "</tr>";
          });

          // $('.total_adv_amt').html(parseFloat(total_sum_adjusted_bill_amount).toFixed(2));
          $(".total_adv_amt").html(parseFloat(tot_available_amt).toFixed(2));

          if (bill_type != 5) {
            $(".total_bill_amt").html(
              parseFloat($(".total_cost").val()).toFixed(2)
            );
          } else if (bill_type == 5) {
            $(".total_bill_amt").html(
              parseFloat($(".adv_amt").val()).toFixed(2)
            );
          }

          $("#bill_adv_adj > tbody").append(html);
        }

        // else

        // {

        //     $.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>"+"Your Wallet Amount is 0"});

        // }
      },
    });
  } else {
    $("#adv-adj-confirm-add").modal("show");
  }
}

function oldget_advance_details() {
  if ($("#bill_adv_adj > tbody > tr").length == 0) {
    $("#bill_adv_adj > tbody").empty();

    var bill_cus_id = $("#bill_cus_id").val();

    var bill_type = $("input[name='billing[bill_type]']:checked").val();

    my_Date = new Date();

    $.ajax({
      url:
        base_url +
        "index.php/admin_ret_billing/get_advance_details/?nocache=" +
        my_Date.getUTCSeconds(),

      dataType: "json",

      method: "POST",

      data: {
        bill_cus_id: bill_cus_id,
        is_eda: $("#is_eda").val(),
        id_branch: $("#id_branch").val(),
      },

      success: function (data) {
        rec_id_ret_wallet = data[0].id_ret_wallet;

        total_sum_adjusted_bill_amount = 0;

        $.each(data, function (key, items) {
          total_sum_adjusted_bill_amount += parseInt(
            parseFloat(items.amount).toFixed(2)
          );
        });

        if (total_sum_adjusted_bill_amount > 0) {
          $("#adv-adj-confirm-add").modal("show");

          var row = "";

          var html = "";

          var metal_rate = $(".per-grm-sale-value").html();

          var weight_amt = parseFloat(data.weight * data.rate_per_gram);

          $("#id_ret_wallet").val(data.id_ret_wallet);

          $.each(data, function (key, items) {
            html +=
              "<tr>" +
              '<td><input type="checkbox" class="bill_id_issue_receipt"  name="adv_adj[id_issue_receipt]" value="' +
              items.id_issue_receipt +
              '"><input type="hidden" class="id_ret_wallet" value="' +
              items.id_ret_wallet +
              '"><input type="hidden" class="adv_cash_paid" value="' +
              items.cash_pay +
              '"></td>' +
              '<td><div class="adv_bill_no" value="' +
              items.bill_no +
              '">' +
              items.bill_no +
              "</div></td>" +
              '<td><div class="advance_amount" >' +
              items.amount +
              "</div></td>" +
              '<td><input type="number" class="form-control adj_amount" name="adv_adj[adj_amount]" readonly></td>' +
              '<td><input type="number" class="form-control blc_amount" name="adv_adj[blc_amount]" readonly></td>' +
              '<td><input type="number" class="form-control refund_amount" name="adv_adj[refund_amount]" readonly></td>' +
              '<td><select class="form-control select_pay_mode" readonly><option value="CSH">CSH</option><option value="CHQ">CHQ</option></td>' +
              "</tr>";
          });

          $(".total_adv_amt").html(
            parseFloat(total_sum_adjusted_bill_amount).toFixed(2)
          );

          if (bill_type != 5) {
            $(".total_bill_amt").html(
              parseFloat($(".total_cost").val()).toFixed(2)
            );
          } else if (bill_type == 5) {
            $(".total_bill_amt").html(
              parseFloat($(".adv_amt").val()).toFixed(2)
            );
          }

          $("#bill_adv_adj > tbody").append(html);
        } else {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>" + "Your Wallet Amount is 0",
          });
        }
      },
    });
  } else {
    $("#adv-adj-confirm-add").modal("show");
  }
}

/*$(document).on('change',".bill_id_issue_receipt", function(e){

		  var row = $(this).closest('tr');

		  var advance_amount=row.find('.advance_amount').html();

		  if(row.find('.bill_id_issue_receipt').is(':checked'))

		  {

			  row.find('.adj_amount').attr('readonly',false);

		  }else{

			  row.find('.adj_amount').val(0);

			  row.find('.blc_amount').val(0);

			  row.find('.refund_amount').val(0);

			  row.find('.adj_amount').attr('readonly',true);

		  }

		calculate_advance_adjust_amount();

});*/

function calculate_advance_adjust_amount() {
  adjusted_amt = 0;

  balance_amt = 0;

  $("#adv-adj-confirm-add .modal-body #bill_adv_adj > tbody  > tr").each(
    function (index, tr) {
      var row = $(this).closest("tr");

      if (row.find(".bill_id_issue_receipt").is(":checked")) {
        adjusted_amt +=
          isNaN(row.find(".adj_amount").val()) ||
          row.find(".adj_amount").val() == ""
            ? 0
            : parseFloat(row.find(".adj_amount").val());

        balance_amt +=
          isNaN(row.find(".blc_amount").val()) ||
          row.find(".blc_amount").val() == ""
            ? 0
            : parseFloat(row.find(".blc_amount").val());
      }
    }
  );

  $(".total_adj_adv_amt").html(parseFloat(adjusted_amt).toFixed(2));

  $(".total_blc_amt").html(parseFloat(balance_amt).toFixed(2));
}

$(document).on("keyup", ".refund_amount", function (e) {
  var row = $(this).closest("tr");

  var balance_amount = row.find(".blc_amount").val();

  var refund_amount = row.find(".refund_amount").val();

  if (parseFloat(refund_amount) > parseFloat(balance_amount)) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message:
        "" +
        "</br>" +
        "The Entered Refund Amount Is more than the Balance Amount",
    });

    row.find(".refund_amount").val(0);
  }
});

$(document).on("keyup", ".adj_amount", function (e) {
  var row = $(this).closest("tr");

  var advance_amount = parseFloat(row.find(".advance_amount").html());

  var total_adjusted_amt = 0;

  var balance_amount = 0;

  var total_bill_amt = $(".total_bill_amt").html();

  $("#adv-adj-confirm-add .modal-body #bill_adv_adj > tbody  > tr").each(
    function (index, tr) {
      var row = $(this).closest("tr");

      if (row.find(".bill_id_issue_receipt").is(":checked")) {
        total_adjusted_amt +=
          isNaN(row.find(".adj_amount").val()) ||
          row.find(".adj_amount").val() == ""
            ? 0
            : parseFloat(row.find(".adj_amount").val());
      }
    }
  );

  if (
    row.find(".adj_amount").val() != "" &&
    row.find(".adj_amount").val() > 0
  ) {
    row.find(".bill_id_issue_receipt").prop("checked", true);

    if (parseFloat(total_adjusted_amt) > parseFloat(total_bill_amt)) {
      row.find(".adj_amount").val(0);

      row.find(".blc_amount").val(0);

      row.find(".bill_id_issue_receipt").prop("checked", false);

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message:
          "" + "</br>" + "The Entered Amount Is more than the bill value",
      });
    } else if (
      parseFloat(advance_amount) < parseFloat(row.find(".adj_amount").val())
    ) {
      row.find(".bill_id_issue_receipt").prop("checked", false);

      row.find(".adj_amount").val(0);

      row.find(".blc_amount").val(0);

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Your Receipt Amount Exceed",
      });
    } else {
      balance_amount =
        parseFloat(advance_amount) - parseFloat(row.find(".adj_amount").val());

      row.find(".bill_id_issue_receipt").prop("checked", true);

      row.find(".blc_amount").val(parseFloat(balance_amount).toFixed(2));

      if (balance_amount > 0) {
        row.find(".refund_amount").attr("readonly", false);

        row.find(".select_pay_mode").attr("readonly", false);
      } else {
        row.find(".refund_amount").attr("readonly", true);

        row.find(".select_pay_mode").attr("readonly", true);
      }
    }
  } else {
    row.find(".bill_id_issue_receipt").prop("checked", false);

    row.find(".adj_amount").val(0);

    row.find(".blc_amount").val(0);
  }

  if (ctrl_page[1] == "bill_split") {
    calculate_split_payment_amount();
  } else {
    calculate_advance_adjust_amount();
  }
});

$('input[type=radio][name="receipt[receipt_as]"]').change(function () {
  if (this.value == 1) {
    $("#esti_no").prop("disabled", true);
  } else {
    $("#esti_no").prop("disabled", false);
  }
});

$('input[type=radio][name="store_receipt_as"]').change(function () {
  var metal_rate = $(".per-grm-sale-value").html();

  if (adv_adj_details.length > 0) {
    adv_adj_details[0].store_receipt_as = this.value;

    if (this.value == 1) {
      adv_adj_details[0].wallet_blc = $(".excess_amt").html();
    } else {
      adv_adj_details[0].wallet_blc = parseFloat(
        $(".excess_amt").html() / metal_rate
      ).toFixed(4);
    }
  }

  console.log(adv_adj_details);
});

$("#add_adv_adj").on("click", function (e) {
  var total_adj_adv_amt = $(".total_adj_adv_amt").html();

  var total_bill_amt = $(".total_bill_amt").html();

  let gold_rate = $("#goldrate_22ct").val();
  let silver_rate = $("#silverrate_1gm").val();

  var adv_cash_paid = 0;

  var adj_amount = 0;

  if ($("input[name='adv_adj[id_issue_receipt]']:checked").val()) {
    if (total_adj_adv_amt > 0) {
      if (parseFloat(total_bill_amt) < parseFloat(total_adj_adv_amt)) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message:
            "" +
            "</br>" +
            "The Selected Amount should be more than the bill value.",
        });
      } else {
        var advance_adj = [];

        var adj_amount = 0;

        $("#adv-adj-confirm-add .modal-body #bill_adv_adj > tbody  > tr").each(
          function (index, tr) {
            if ($(this).find(".bill_id_issue_receipt").is(":checked")) {
              adj_amount += parseFloat($(this).find(".adj_amount").val());

              var adjusted =
                isNaN($(this).find(".adj_amount").val()) ||
                $(this).find(".adj_amount").val() == ""
                  ? 0
                  : $(this).find(".adj_amount").val();

              var cash_pay =
                isNaN($(this).find(".adv_cash_paid").val()) ||
                $(this).find(".adv_cash_paid").val() == ""
                  ? 0
                  : $(this).find(".adv_cash_paid").val();

              cash_pay =
                parseFloat(adjusted) <= parseFloat(cash_pay)
                  ? adjusted
                  : cash_pay;

              if (parseFloat($(this).find(".is_currentday_adv").val()) == 0) {
                adv_cash_paid = adv_cash_paid + parseFloat(cash_pay);
              }

              advance_adj.push({
                id_issue_receipt: $(this).find(".bill_id_issue_receipt").val(),

                id_ret_wallet: $(this).find(".id_ret_wallet").val(),

                adj_amount: $(this).find(".adj_amount").val(),

                blc_amount: $(this).find(".blc_amount").val(),

                refund_amount: $(this).find(".refund_amount").val(),

                pay_mode: $(this).find(".select_pay_mode").val(),

                rate_calc: $(this).find(".rate_calc").val(),

                advance_weight: $(this).find(".advance_weight").val(),

                rate_per_gram:
                  $(this).find(".rate_calc").val() == 1
                    ? gold_rate
                    : $(this).find(".rate_calc").val() == 2
                    ? silver_rate
                    : 0,

                cash_pay: cash_pay,
              });
            }
          }
        );

        $("#adv_total_cash_amt").val(adv_cash_paid);

        if ($("#is_eda").val() == 1) {
          var max_cash_valid = validate_max_cash();
        } else {
          var max_cash_valid = true;
        }

        if (max_cash_valid == true) {
          $("#payment_modes > tbody >tr").each(function (bidx, brow) {
            bill_card_pay_row = $(this);

            bill_card_pay_row
              .find("#tot_adv_adj")
              .html(parseFloat(adj_amount).toFixed(2));

            //bill_card_pay_row.find('#tot_adv_adj').html($('.total_adj_adv_amt').html());

            $("#advance_muliple_receipt").val(
              advance_adj.length > 0 ? JSON.stringify(advance_adj) : ""
            );

            bal_excss_amt = parseInt(
              parseInt(total_sum_adjusted_bill_amount).toFixed(2) -
                parseInt(adjusted_amt).toFixed(2)
            ).toFixed(2);

            $("#excess_adv_amt").val(bal_excss_amt);
          });

          //	$('#adv-adj-confirm-add').modal('toggle');

          $("#adv-adj-confirm-add .btn-close").trigger("click");

          calculatePaymentCost();
        } else {
          $("#adv_total_cash_amt").val(0);
        }
      }
    } else {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Please Enter The Adjusted Amount..",
      });
    }
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Select The Receipt Details",
    });
  }
});

$("#close_add_adj").on("click", function (e) {
  $("#adv-adj-confirm-add .modal-body").find("#bill_adv_adj tbody").empty();

  $(".tot_bill_amt").html("");

  $(".adjusted_amt").html("");

  $(".excess_amt").html("");
});

function getCreditBillDetails(billNo, billType) {
  $("#ret_bill_id").val("");

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getCreditBillDetails/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      billNo: billNo,
      billType: billType,
      id_branch: $("#id_branch").val(),
      fin_year: $("#bill_fin_year_select").val(),
      is_eda: $("#is_eda").val(),
    },

    success: function (data) {
      if (data.success == true) {
        var bill_details = data.responsedata.bill_details;

        var blc_amt =
          parseFloat(bill_details.tot_bill_amount) -
          (parseFloat(bill_details.tot_amt_received) +
            parseFloat(bill_details.credit_pay_amount));

        $(".summary_credit_amt").html(blc_amt);

        //$('.receive_amount').val(blc_amt);

        //$('#total_cost').val(blc_amt)

        $("#bill_cus_name").val(bill_details.cus_name);

        $("#bill_cus_name").attr("readonly", true);

        $("#bill_cus_id").val(bill_details.id_customer);

        $("#cus_village").html(bill_details.village_name);

        $("#pan_no").val(bill_details.pan_no);

        if ($("#bill_cus_id").val() != "") {
          get_customer_address_det();
        }

        /*$('#chit_cus').html(bill_details.accounts>0 ? 'Yes':'No');

				$('#vip_cus').html(bill_details.vip);*/

        $("#cus_info").html("");

        $("#cus_info").append(
          bill_details.vip == "Yes"
            ? "<span class='label bg-orange'><i class='fa fa-fw fa-star'></i> V I P</span>"
            : ""
        );

        $("#cus_info").append(
          bill_details.accounts > 0
            ? "&nbsp;<span class='label label-info'>Chit Customer</span>"
            : ""
        );

        $("#ret_bill_id").val(bill_details.bill_id);

        calculateFinalCost();

        //showPendingDeliveryDetails(data.responsedata.delivery_details);

        var next = $(".nav-tabs > .active").next("li");

        next.find("a").trigger("click");

        $("#total_cost").focus();
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>" + data.message,
        });
      }
    },
  });
}

//Advance ends

function getBillDetails(billNo, billType) {
  $("#ret_bill_id").val("");

  //var metal_type = $("input[name='billing[metal_type]']:checked").val();

  var metal_type = $("#select_metal_type").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getBillDetails/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      billNo: billNo,
      billType: billType,
      id_branch: $("#id_branch").val(),
      fin_year: $("#bill_fin_year_select").val(),
      metal_type: metal_type,
      is_eda: $("#is_eda").val(),
    },

    success: function (data) {
      if (data.success == true) {
        $("#bill-detail-popup").modal("toggle");

        // BILL SOLD ITEMS

        if (data.responsedata.item_details.length > 0) {
          $("#bill_items_tbl_for_return tbody").empty();

          $("#ret_bill_id").val(data.responsedata.item_details[0].bill_id);

          $("#from_cus_mobile").val(data.responsedata.item_details[0].mobile);

          $("#bill_cus_name").val(data.responsedata.item_details[0].cus_name);

          $("#bill_cus_id").val(data.responsedata.item_details[0].id_customer);

          if (data.responsedata.due_amount > 0) {
            $(".summary_credit_due_ret_amt").html(
              parseFloat(data.responsedata.due_amount).toFixed(2)
            );

            $("#summary_credit_due_amt").val(
              parseFloat(data.responsedata.due_amount).toFixed(2)
            );

            $("#return_paid_amount").val(
              parseFloat(data.responsedata.paid_amount).toFixed(2)
            );
          }

          $("#bill_cus_name").attr("readonly", true);

          $.each(data.responsedata.item_details, function (estkey, estval) {
            var row =
              "<tr>" +
              "<td>" +
              (estval.status == 2
                ? '<span style="color:red">Returned</span>'
                : '<input type="checkbox" class="select_est_details" value="1" />') +
              '<input type="hidden" class="bill_id" value="' +
              estval.bill_id +
              '" /><input type="hidden" class="bill_det_id" value="' +
              estval.bill_det_id +
              '" /><input type="hidden" class="bill_det_id" value="' +
              estval.bill_det_id +
              '" /><input type="hidden" class="est_id" value="' +
              estval.esti_id +
              '" /><input type="hidden" class="order_no" value="' +
              estval.order_no +
              '" /><input type="hidden" class="est_itm_id" value="' +
              estval.esti_item_id +
              '" /><input type="hidden" class="est_tag_id" value="' +
              estval.tag_id +
              '" /><input type="hidden" class="est_hsn" value="' +
              estval.hsn_code +
              '" /><input type="hidden" class="est_item_type" value="' +
              estval.item_type +
              '" /><input type="hidden" class="est_cal_type" value="' +
              estval.calculation_based_on +
              '" /><input type="hidden" class="est_metal_type" value="' +
              estval.metal_type +
              '" /><input type="hidden" class="est_uom" value="' +
              estval.uom +
              '"  /><input type="hidden" class="ret_bill_cash_paid" value="' +
              data.responsedata.cash_paid_amount +
              '"  /></td>' +
              '<td><span class="est_product_name">' +
              estval.product_name +
              '</span><input class="est_product_id" type="hidden" value="' +
              estval.product_id +
              '" /></td>' +
              '<td><span class="est_design_code">' +
              estval.design_name +
              '</span><input type="hidden" class="est_design_id" value="' +
              estval.design_id +
              '"  /></td>' +
              '<td><span class="est_piece">' +
              estval.piece +
              '</span><input type="hidden" class="est_pcs" value="' +
              estval.piece +
              '"  /></td>' +
              '<td><span class="est_purname">' +
              estval.purname +
              '</span><input type="hidden" class="est_purid" value="' +
              estval.purname +
              '"  /></td>' +
              '<td><span class="est_size">' +
              estval.size +
              '</span><input type="hidden" class="est_size_val" value="' +
              estval.size +
              '"  /></td>' +
              '<td><span class="est_gross_wt">' +
              estval.gross_wt +
              '</span><input type="hidden" class="est_gross_val" value="' +
              estval.gross_wt +
              '"  /></td>' +
              '<td><span class="est_less_wt">' +
              estval.less_wt +
              '</span><input type="hidden" class="est_less_val" value="' +
              estval.less_wt +
              '"  /></td>' +
              '<td><span class="est_net_wt">' +
              estval.net_wt +
              '</span><input type="hidden" class="est_net_val" value="' +
              estval.net_wt +
              '"  /></td>' +
              '<td><span class="est_wastage">' +
              estval.wastage_percent +
              '</span><input type="hidden" class="est_wastage_percent" value="' +
              estval.wastage_percent +
              '"  /></td>' +
              '<td><span class="est_mc">' +
              estval.mc_value +
              " " +
              (estval.mc_type == 1 ? " per gm" : " per pc") +
              '</span><input type="hidden" class="est_mc_value" value="' +
              estval.mc_value +
              '"  /><input type="hidden" class="est_mc_type" value="' +
              estval.mc_type +
              '"  /></td>' +
              '<td><input type="hidden" class="est_discount" value="' +
              estval.discount +
              '"/>' +
              estval.discount +
              "</td>" +
              '<td><span class="est_tgrp_name">' +
              estval.tgrp_name +
              '</span><input type="hidden" class="est_tax_id" value="' +
              estval.tax_group_id +
              '" /><input type="hidden" class="est_tax_val" value="' +
              estval.item_total_tax +
              '" /></td><td>' +
              estval.item_total_tax +
              "</td>" +
              '<td><span class="est_item_cost">' +
              estval.item_cost +
              '</span><input type="hidden" class="est_material_price" value="' +
              estval.othermat_amount +
              '"  /><input type="hidden" class="est_stone_price" value="' +
              estval.stone_price +
              '"  /><input type="hidden" class="est_item_cost_val" value="' +
              estval.item_cost +
              '"  /></td>' +
              "<td>" +
              (estval.is_partial == 1
                ? "<input type='checkbox' class='select_est_partial' value='1' />"
                : "-") +
              "</td>" +
              '<td><span class="est_tag_no">' +
              estval.tag_id +
              "</span></td>" +
              "</tr>";

            $("#bill_items_tbl_for_return tbody").append(row);
          });

          $("#bill_items_for_return").show();

          calculateEsttoSaleConvertion();
        } else {
          $("#bill_items_tbl_for_return tbody").empty();

          if (billType != 4 && billType != 6) {
            $("#bill_items_for_return").show();
          } else {
            $("#bill_items_for_return").hide();
          }
        }

        // BILL PURCHASED ITEMS

        if (data.responsedata.old_matel_details.length > 0) {
          $("#bill_old_items_purchased_tbl tbody").empty();

          $.each(
            data.responsedata.old_matel_details,
            function (estkey, estval) {
              /*<td><span class="est_old_item_pur">'+estval.purname+'</span><input type="hidden" class="est_old_item_purid" value="'+estval.purid+'"  /></td>*/

              var row =
                "<tr>" +
                "<td>" +
                estval.est_id +
                "/td>" +
                "<td><span>" +
                (estval.purpose == 1 ? "Cash" : "Exchange") +
                '</span><input type="hidden" class="est_purpose" value="' +
                estval.purpose +
                '" /></td>' +
                '<td><span class="est_old_item_metal">' +
                estval.metal +
                '</span><input type="hidden" class="est_old_item_cat_id" value="' +
                estval.id_category +
                '"  /></td>' +
                '<td><span class="est_old_itm_gross_wt">' +
                estval.gross_wt +
                '</span><input type="hidden" class="est_old_gross_val" value="' +
                estval.gross_wt +
                '"  /></td>' +
                '<td><span class="esti_old_dust_wt">' +
                estval.dust_wt +
                '</span><input type="hidden" class="est_old_dust_val" value="' +
                estval.dust_wt +
                '"  /><input type="hidden" class="est_old_item_less_wt" value="' +
                estval.less_wt +
                '"  /></td>' +
                '<td><span class="esti_old_stn_wt">' +
                estval.stone_wt +
                '</span><input type="hidden" class="est_old_stone_val" value="' +
                estval.stone_wt +
                '"  /></td>' +
                '<td><span class="est_old_net_wt"></span></td>' +
                '<td><span class="est_old_wastage">' +
                parseFloat(estval.wastage_percent) +
                '</span><input type="hidden" class="est_old_wastage_percent" value="' +
                parseFloat(estval.wastage_percent) +
                '"  /></td>' +
                '<td><span class="est_old_rate_per_gram">' +
                parseFloat(estval.rate_per_gram) +
                '</span><input type="hidden" class="est_old_rate_per_gram_val" value="' +
                parseFloat(estval.rate_per_gram) +
                '"  /></td>' +
                '<td><input type="number" class="est_old_discount" value="" step="any" /></td>' +
                '<td><span class="est_old_amount">' +
                estval.amount +
                '</span><input type="hidden" class="est_old_item_amount_val" value="' +
                estval.amount +
                '"  /></td>' +
                "</tr>";

              $("#bill_old_items_purchased_tbl tbody").append(row);
            }
          );

          $("#bill_old_items_purchased").show();

          calculateOldEsttoSaleConvertion();
        } else {
          $("#bill_old_items_purchased_tbl tbody").empty();

          $("#bill_old_items_purchased").hide();
        }

        if ($("#bill_cus_id").val() != "") {
          get_customer_address_det();
        }
      } else {
        alert(data.message);
      }
    },
  });
}

function calculate_salesReturn_details() {
  var saleRet_weight = 0;

  var saleRet_rate = 0;

  var credit_due_ret_amt = parseFloat(
    isNaN($(".summary_credit_due_ret_amt").html()) ||
      $(".summary_credit_due_ret_amt").html() == ""
      ? 0
      : $(".summary_credit_due_ret_amt").html()
  ).toFixed(2);

  var summary_credit_due_amt =
    $("#summary_credit_due_amt").val() == ""
      ? 0
      : $("#summary_credit_due_amt").val();

  var return_paid_amount =
    $("#return_paid_amount").val() == "" ? 0 : $("#return_paid_amount").val();

  $("#sale_return_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find("td:eq(4) .bill_gross_val").val() != "" &&
      $(this).find("td:eq(6) .gwt").html() != "" &&
      $(this).find("td:eq(11) .sales_value").val() != ""
    ) {
      saleRet_weight += parseFloat(
        isNaN($(this).find('td:eq(6) input[type="hidden"]').val()) ||
          $(this).find('td:eq(6) input[type="hidden"]').val() == ""
          ? 0
          : $(this).find('td:eq(6) input[type="hidden"]').val()
      );

      saleRet_rate += parseFloat(
        isNaN($(this).find("td:eq(15) .sale_ret_amt").val()) ||
          $(this).find("td:eq(15) .sale_ret_amt").val() == ""
          ? 0
          : $(this).find("td:eq(15) .sale_ret_amt").val()
      );

      cgst += parseFloat(
        isNaN($(this).find(".sale_tax_cgst").val()) ||
          $(this).find(".sale_tax_cgst").val() == ""
          ? 0
          : $(this).find(".sale_tax_cgst").val()
      );

      sgst += parseFloat(
        isNaN($(this).find(".sale_tax_sgst").val()) ||
          $(this).find(".sale_tax_sgst").val() == ""
          ? 0
          : $(this).find(".sale_tax_sgst").val()
      );

      igst += parseFloat(
        isNaN($(this).find(".sale_tax_igst").val()) ||
          $(this).find(".sale_tax_igst").val() == ""
          ? 0
          : $(this).find(".sale_tax_igst").val()
      );
    }
  });

  $(".summary_sale_ret_weight").html(saleRet_weight);

  $(".summary_sale_ret_amt").html(
    parseFloat(parseFloat(saleRet_rate)).toFixed(2)
  );

  if (summary_credit_due_amt > 0) {
    // $(".summary_sale_ret_amt").html(parseFloat(parseFloat(return_paid_amount)).toFixed(2));

    var tot_sold_amt = 0;

    $("#bill_items_tbl_for_return > tbody  > tr").each(function (index, tr) {
      tot_sold_amt += parseFloat($(this).find(".est_item_cost_val").val());
    });

    var due_amount = parseFloat(
      parseFloat(tot_sold_amt) - parseFloat(return_paid_amount)
    );

    console.log(due_amount);

    if (due_amount > saleRet_rate) {
      $(".summary_sale_ret_amt").html(0);
    } else if (due_amount < saleRet_rate) {
      $(".summary_sale_ret_amt").html(
        parseFloat(parseFloat(saleRet_rate) - parseFloat(due_amount)).toFixed(2)
      );
    }
  }

  calculateFinalCost();

  calc_salesreturn_cash_amt();
}

function create_new_empty_bill_sales_stone_item(curRow, id) {
  if (curRow != undefined) {
    $("#active_id").val(curRow.closest("tr").attr("id"));
  }

  var row = "";

  var catRow = $("#active_id").val();

  var row_st_details = $(curRow).find(".stone_details").val();

  var is_partial = $(curRow).find(".is_partial").val();

  var stone_details = JSON.parse(row_st_details);

  if (row_st_details != "") {
    var stone_details = JSON.parse(row_st_details);

    if (stone_details.length > 0) {
      $.each(stone_details, function (pkey, pitem) {
        create_new_empty_stone_item(pitem);
      });
    }
  }

  $("#stoneModal").modal("show");
}

$("#stoneModal .modal-body #create_stone_item_details").on(
  "click",
  function () {
    if (validateStoneItemDetailRow()) {
      create_new_empty_stone_item();
    } else {
      alert("Please fill required fields");
    }
  }
);

function addNewStoneRow() {
  if (validateStoneItemDetailRow()) {
    create_new_empty_stone_item();
  } else {
    alert("Please fill required fields");
  }
}

function get_ActiveUOM() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_tagging/get_ActiveUOM",

    dataType: "json",

    success: function (data) {
      uom_details = data;

      console.log("uom details : " + uom_details);
    },

    complete: function (data) {},
  });
}

function get_payModes() {
  console.log("PayModes");

  $.ajax({
    type: "POST",

    url: base_url + "index.php/admin_ret_billing/get_payModes",

    dataType: "json",

    success: function (data) {
      payment_mode_details = data;
    },

    complete: function (data) {},
  });
}

function get_stone_types() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_tagging/getStoneTypes",

    dataType: "json",

    success: function (data) {
      stone_types = data;
    },
  });
}

function create_new_empty_stone_item(stn_data = []) {
  var row = "";

  var stones_list = "<option value=''> -Select Stone- </option>";

  var stones_type = "<option value=''>-Stone Type-</option>";

  var uom_list = "<option value=''>-UOM-</option>";

  $.each(stones, function (pkey, pitem) {
    stones_list +=
      "<option value='" +
      pitem.stone_id +
      "' " +
      (stn_data
        ? pitem.stone_id == stn_data.stone_id
          ? "selected"
          : ""
        : "") +
      ">" +
      pitem.stone_name +
      "</option>";
  });

  $.each(uom_details, function (pkey, pitem) {
    uom_list +=
      "<option value='" +
      pitem.uom_id +
      "' " +
      (stn_data
        ? pitem.uom_id == (stn_data.uom_id || stn_data.stone_uom_id)
          ? "selected"
          : ""
        : "") +
      ">" +
      pitem.uom_name +
      "</option>";
  });

  $.each(stone_types, function (pkey, pitem) {
    stones_type +=
      "<option value='" +
      pitem.id_stone_type +
      "' " +
      (stn_data
        ? pitem.id_stone_type == stn_data.stones_type
          ? "selected"
          : ""
        : "") +
      ">" +
      pitem.stone_type +
      "</option>";
  });

  var is_apply_in_lwt = stn_data
    ? stn_data.is_apply_in_lwt == undefined
      ? ""
      : stn_data.is_apply_in_lwt
    : "";

  var stone_pcs = stn_data
    ? stn_data.stone_pcs == undefined
      ? ""
      : stn_data.stone_pcs
    : "";

  var stone_wt = stn_data
    ? stn_data.stone_wt == undefined
      ? ""
      : stn_data.stone_wt
    : "";

  var rate = stn_data
    ? stn_data.rate_per_gram == undefined
      ? 0
      : stn_data.rate_per_gram
    : 0;

  var price = stn_data
    ? stn_data.stone_price == undefined
      ? 0
      : stn_data.stone_price
    : 0;

  var stone_id = stn_data
    ? stn_data.stone_id == undefined
      ? 0
      : stn_data.stone_id
    : 0;

  var cal_type = stn_data
    ? stn_data.stone_cal_type == undefined
      ? 1
      : stn_data.stone_cal_type
    : 1;

  var quality_id = stn_data
    ? stn_data.quality_id == undefined
      ? ""
      : stn_data.quality_id
    : "";

  var stone_type = stn_data
    ? stn_data.stone_type == undefined
      ? ""
      : stn_data.stone_type
    : "";

  var row_cls = $("#estimation_stone_item_details tbody tr").length;

  row =
    '<tr id="' +
    $("#estimation_stone_item_details tbody tr").length +
    '" class="st_' +
    $("#estimation_stone_item_details tbody tr").length +
    '">' +
    "<td><select " +
    (is_apply_in_lwt != "" ? "disabled !important" : "") +
    ' class="is_apply_in_lwt form-control" name="est_stones_item[is_apply_in_lwt][]" style="width:100px;"><option value="">-Select-</option><option value=1 ' +
    (is_apply_in_lwt == 1 ? "selected" : "") +
    ">Yes</option><option value=0 " +
    (is_apply_in_lwt == 0 ? "selected" : "") +
    ">No</option> </select></td>" +
    "<td><select " +
    (stone_id != "" ? "disabled !important" : "") +
    ' class="stone_id form-control" name="est_stones_item[stone_id][]" style="width:100%;">' +
    stones_list +
    '</select><input type="hidden" class="stone_type" value="' +
    stone_type +
    '"><input type="hidden" class="quality_id" value="' +
    quality_id +
    '"></td>' +
    "<td><input " +
    (stone_pcs != "" ? "disabled !important" : "") +
    'type="number" class="stone_pcs form-control" name="est_stones_item[stone_pcs][]" value="' +
    stone_pcs +
    '" style="width: 60px;"/></td>' +
    '<td><div class="input-group test" style="width:100%;" ><input ' +
    (stone_wt != "" ? "disabled !important" : "") +
    ' class="stone_wt form-control" type="number" name="est_stones_item[stone_wt][]" value="' +
    stone_wt +
    '" style="width: 78px;"/><span class="input-group-btn" style="width: 138px;"><select  ' +
    (stone_wt != "" ? "disabled !important" : "") +
    '  class="stone_uom_id form-control" name="est_stones_item[uom_id][]">' +
    uom_list +
    "</select></span></div></td>" +
    '<td ><div class="form-group" style="width: 100px;">	<input   class="stone_cal_type" type="radio" name="est_stones_item[cal_type][' +
    row_cls +
    ']" value="1" ' +
    (cal_type == 1 ? "checked" : "") +
    '>Wt&nbsp;<input    type="radio" name="est_stones_item[cal_type][' +
    row_cls +
    ']" class="stone_cal_type" value="2" ' +
    (cal_type == 2 ? "checked" : "") +
    ">Pcs</div></td>" +
    '<td><input type="number" class="rate_per_gram form-control" name="est_stones_item[rate_per_gram][]" value="' +
    rate +
    '" /></td>' +
    '<td><input type="number" class="stone_price form-control" name="est_stones_item[stone_price][]" value="' +
    price +
    '" "/></td>' +
    '<td style="width: 100px;"><div class="modal_btns"><button type="button" onClick="addNewStoneRow()" class="btn btn-success btn-SM"><i class="fa fa-plus"></i></button><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-SM btn-del"><i class="fa fa-trash"></i></a></div></td></tr>';

  $("#stoneModal .modal-body")
    .find("#estimation_stone_item_details tbody")
    .append(row);

  $("#stoneModal").on("shown.bs.modal", function () {
    $(this).find(".is_apply_in_lwt").focus();
  });

  //$('#custom_active_id').val("st_" + row_cls);
}

$("#stoneModal").on("hidden.bs.modal", function () {
  $("#stoneModal .modal-body")
    .find("#estimation_stone_item_details tbody")
    .empty();
});

$("#cus_other_charges_modal  #close_charge_details").on("click", function () {
  $("#cus_other_charges_modal .modal-body")
    .find("#estimation_other_charge_cus_item_details tbody")
    .empty();
});
/*$('#stoneModal  #update_stone_details').on('click', function(){

	var stone_details=[];

	var stone_price=0;

	$('#stoneModal .modal-body #estimation_stone_item_details> tbody  > tr').each(function(index, tr) {

		stone_price+=parseFloat($(this).find('td:eq(3) .stone_price').val());

		stone_details.push({'stone_id' : $(this).find('td:first .stone_id').val(),'stone_pcs' :$(this).find('td:eq(1) .stone_pcs').val(),'stone_wt':$(this).find('td:eq(2) .stone_wt').val(),'stone_price':$(this).find('td:eq(3) .stone_price').val()});

	});

	$('#stoneModal').modal('toggle');

	var catRow=$('#active_id').val();

	$('#'+catRow).find('.stone_details').val(stone_details.length>0 ? JSON.stringify(stone_details):'');

		  $('#'+catRow).find('.bill_stone_price').val(stone_price);

		  var row = $('#'+catRow).closest('tr');

	calculateSaleBillRowTotal();

	$('#stoneModal .modal-body').find('#estimation_stone_item_details tbody').empty();

});*/

$("#stoneModal  #update_stone_details").on("click", function () {
  if (validateStoneItemDetailRow()) {
    var stone_details = [];

    var stone_price = 0;

    $(
      "#stoneModal .modal-body #estimation_stone_item_details> tbody  > tr"
    ).each(function (index, tr) {
      stone_price += parseFloat($(this).find(".stone_price").val());

      stone_details.push({
        stone_id: $(this).find(".stone_id").val(),
        is_apply_in_lwt: $(this).find(".is_apply_in_lwt ").val(),
        stone_pcs: $(this).find(".stone_pcs").val(),
        stone_wt: $(this).find(".stone_wt").val(),
        uom_id: $(this).find(".stone_uom_id").val(),
        stone_cal_type: $(this).find("input[type=radio]:checked").val(),
        rate_per_gram: $(this).find(".rate_per_gram").val(),
        stone_price: $(this).find(".stone_price").val(),
        quality_id: $(this).find(".quality_id").val(),
        "ston e_type": $(this).find(".stone_type").val(),
      });
    });

    $("#stoneModal").modal("toggle");

    var catRow = $("#active_id").val();

    $("#" + catRow)
      .find(".stone_details")
      .val(stone_details.length > 0 ? JSON.stringify(stone_details) : "");

    $("#" + catRow)
      .find(".bill_stone_price")
      .val(stone_price);

    var row = $("#" + catRow).closest("tr");

    calculateSaleBillRowTotal();

    $("#stoneModal .modal-body")
      .find("#estimation_stone_item_details tbody")
      .empty();
  }
});

function validateStoneItemDetailRow() {
  var row_validate = true;

  $("#stoneModal .modal-body #estimation_stone_item_details> tbody  > tr").each(
    function (index, tr) {
      let is_apply_in_lwt = $(this).find(".is_apply_in_lwt").val();

      let stone_id = $(this).find(".stone_id").val();

      let stone_pcs = $.trim($(this).find(".stone_pcs").val());

      let stone_wt = $.trim($(this).find(".stone_wt").val());

      let stone_uom_id = $(this).find(".stone_uom_id").val();

      let stone_cal_type = $(this).find("input[type=radio]:checked").val();

      let rate_per_gram = $.isNumeric(
        $.trim($(this).find(".rate_per_gram").val())
      )
        ? $.trim($(this).find(".rate_per_gram").val())
        : 0;

      let stone_price = $.isNumeric($.trim($(this).find(".stone_price").val()))
        ? $.trim($(this).find(".stone_price").val())
        : 0;

      if (is_apply_in_lwt == "") {
        row_validate = false;

        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Please select LWT for stone",
        });
      } else if (!(stone_id > 0)) {
        row_validate = false;

        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Stone required",
        });
      } else if (!(stone_pcs > 0)) {
        row_validate = false;

        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Stone pieces required",
        });
      } else if (stone_wt > 0) {
        if (!(stone_uom_id > 0)) {
          row_validate = false;

          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>Unit for stone weight required",
          });
        }
      } else if (!(stone_cal_type == 1 || stone_cal_type == 2)) {
        row_validate = false;

        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Stone calc type required",
        });
      } else if (stone_price == 0) {
        row_validate = false;

        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Stone price should be greater than zero",
        });
      }
    }
  );

  return row_validate;
}

//Purchase Stone

function create_new_empty_bill_purchase_stone_item(curRow, id) {
  if (curRow != undefined) {
    $("#pur_active_id").val(curRow.closest("tr").attr("id"));
  }

  var row = "";

  var catRow = $("#pur_active_id").val();

  var row_st_details = $(curRow).find(".stone_details").val();

  var stone_details = JSON.parse(row_st_details);

  if (stone_details.length > 0) {
    $.each(stone_details, function (pkey, pitem) {
      var stones_list = "";

      $.each(stones, function (pkey, item) {
        var selected = "";

        if (item.stone_id == pitem.stone_id) {
          selected = "selected='selected'";

          disabled = "disabled='disabled'";
        }

        stones_list +=
          "<option value='" +
          pitem.stone_id +
          "'>" +
          item.stone_name +
          "</option>";
      });

      row +=
        '<tr><td><select class="stone_id" name="est_stones_item[stone_id][]" ' +
        disabled +
        ">" +
        stones_list +
        '</select><input type="hidden" class="stone_id" name="est_stones[stone_id][]" value="' +
        pitem["stone_id"] +
        '" disabled/></td><td><input type="number" class="stone_pcs" name="est_stones[stone_pcs][]" value="' +
        pitem["stone_pcs"] +
        '" disabled/></td><td><input class="stone_wt" type="number" name="est_stones[stone_wt][]" value="' +
        pitem["stone_wt"] +
        '" disabled/></td><td><input type="number" class="stone_price" name="est_stones[stone_price][]" value="' +
        pitem["stone_price"] +
        '" disabled></td><td>-</td></tr>';
    });
  }

  $("#PurstoneModal .modal-body")
    .find("#estimation_pur_stone_item_details tbody")
    .append(row);

  $("#PurstoneModal").modal("show");
}

$("#PurstoneModal  #close_pur_stone_details").on("click", function () {
  $("#PurstoneModal .modal-body")
    .find("#estimation_pur_stone_item_details tbody")
    .empty();
});

//Purchase Stone

//PAN Card Image

$("#pan_images").on("change", function () {
  item_validateImage();
});

function item_validateImage() {
  var files = event.target.files;

  //var a = $('#cur_id').val();

  var preview = $("#pan_preview");

  var html_1 = "";

  for (var i = 0; i < files.length; i++) {
    var file = files[i];

    total_files.push(file);

    if (file.size > 1048576) {
      alert("File size cannot be greater than 1 MB");

      files[i] = "";

      return false;
    } else {
      var fileName = file.name;

      var ext = fileName.substring(fileName.lastIndexOf(".") + 1);

      ext = ext.toLowerCase();

      if (ext != "jpg" && ext != "png" && ext != "jpeg") {
        alert("Upload JPG or PNG Images only");

        files[i] = "";
      } else {
        var reader = new FileReader();

        var id = i;

        reader.onload = function (event) {
          img_resource.push({ src: event.target.result, name: fileName });
        };

        if (file) {
          reader.readAsDataURL(file);
        } else {
          preview.prop("src", "");
        }
      }
    }
  }

  setTimeout(function () {
    console.log(img_resource);

    var pan_img = [];

    $.each(img_resource, function (key, item) {
      if (item) {
        var div = document.createElement("div");

        div.setAttribute("class", "col-md-4");

        div.setAttribute("id", "img_" + key);

        div.innerHTML +=
          "<a onclick='img_remove(" +
          key +
          ")'><i class='fa fa-trash'></i></a><img class='thumbnail' src='" +
          item.src +
          "'" +
          "style='width: 100px;height: 100px;'/>";

        preview.append(div);

        pan_img.push(item);
      }

      $("#lot_img_upload").css("display", "");
    });

    $("#panimg").val(JSON.stringify(pan_img));
  }, 3000);
}

function img_remove(id) {
  var pan_img = [];

  $("#img_" + id).remove();

  const index = total_files.indexOf(img_resource[id]);

  total_files.splice(index, 1);

  img_resource.splice(index, 1);

  $.each(img_resource, function (key, item) {
    pan_img.push(item);
  });

  $("#panimg").val(JSON.stringify(pan_img));
}

//PAN Card Image

function getBillDetails_DateFilter(from_date, to_date) {
  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getBillingDetails/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      from_date: from_date,
      to_date: to_date,
      id_branch: $("#id_branch").val(),
      bill_cus_id: $("#bill_cus_id").val(),
      bill_type: bill_type,
    },

    success: function (data) {
      if (data.success == true) {
        $("#billno_select option").remove();

        $("#billno-detail-popup").modal("toggle");

        var html = "";

        var bill_no = [];

        var filter_billno = $("#filter_Billno").val();

        $.each(data.responsedata, function (estkey, bill) {
          bill_no.push({ bill_no: bill.bill_no });

          $("#billno_select").append(
            $("<option></option>")
              .attr("value", bill.bill_no)

              .text(bill.bill_no)
          );

          //html+='<div class="col-md-3"><input type="radio" name="bill_no" id="bill_no'+estkey+'" class="bill_no" value="'+bill.bill_no+'"/> '+bill.bill_no+'-Rs.'+bill.tot_bill_amount+'</div>';
        });

        $("#billno_select").select2({
          placeholder: "Enter Bill No",

          allowClear: true,
        });

        $("#billno_select").select2(
          "val",
          filter_billno != "" ? filter_billno : ""
        );
      } else {
        alert(data.message);
      }
    },
  });
}

$("#billno_select").change(function () {
  if (this.value != "") {
    var bill_type = $("input[name='billing[bill_type]']:checked").val();

    var data = $("#billno_select").select2("data");

    selectedValue = $(this).val();

    $("#filter_Billno").val(selectedValue);

    var bill_type = $("input[name='billing[bill_type]']:checked").val();

    if (bill_type == 7) {
      get_return_Bill_details($("#filter_Billno").val(), bill_type);
    }
  } else {
    $("#filter_Billno").val("");
  }
});

function get_return_Bill_details(billNo, billType) {
  $("#ret_bill_id").val("");

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_return_Bill_details/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      billNo: billNo,
      billType: billType,
      id_branch: $("#id_branch").val(),
    },

    success: function (data) {
      if (data.success == true) {
        // BILL SOLD ITEMS

        //$('#billno-detail-popup').modal('toggle');

        if (data.responsedata.item_details.length > 0) {
          $("#bill_items_for_return tbody").empty();

          //$("#ret_bill_id").val(data.responsedata.item_details[0].bill_id);

          $.each(data.responsedata.item_details, function (estkey, estval) {
            var row =
              "<tr>" +
              "<td>" +
              (estval.status == 2
                ? '<span style="color:red">Returned</span>'
                : '<input type="checkbox" class="select_est_details" value="1" />') +
              '<input type="hidden" class="bill_id" value="' +
              estval.bill_id +
              '" /><input type="hidden" class="bill_det_id" value="' +
              estval.bill_det_id +
              '" /><input type="hidden" class="est_id" value="' +
              estval.esti_id +
              '" /><input type="hidden" class="order_no" value="' +
              estval.order_no +
              '" /><input type="hidden" class="est_itm_id" value="' +
              estval.esti_item_id +
              '" /><input type="hidden" class="est_tag_id" value="' +
              estval.tag_id +
              '" /><input type="hidden" class="est_hsn" value="' +
              estval.hsn_code +
              '" /><input type="hidden" class="est_item_type" value="' +
              estval.item_type +
              '" /><input type="hidden" class="est_cal_type" value="' +
              estval.calculation_based_on +
              '" /><input type="hidden" class="est_metal_type" value="' +
              estval.metal_type +
              '" /><input type="hidden" class="est_uom" value="' +
              estval.uom +
              '"  /></td>' +
              '<td><span class="est_product_name">' +
              estval.product_short_code +
              '</span><input class="est_product_id" type="hidden" value="' +
              estval.product_id +
              '" /></td>' +
              '<td><span class="est_design_code">' +
              estval.design_code +
              '</span><input type="hidden" class="est_design_id" value="' +
              estval.design_id +
              '"  /></td>' +
              '<td><span class="est_piece">' +
              estval.piece +
              '</span><input type="hidden" class="est_pcs" value="' +
              estval.piece +
              '"  /></td>' +
              '<td><span class="est_purname">' +
              estval.purname +
              '</span><input type="hidden" class="est_purid" value="' +
              estval.purname +
              '"  /></td>' +
              '<td><span class="est_size">' +
              estval.size +
              '</span><input type="hidden" class="est_size_val" value="' +
              estval.size +
              '"  /></td>' +
              '<td><span class="est_gross_wt">' +
              estval.gross_wt +
              '</span><input type="hidden" class="est_gross_val" value="' +
              estval.gross_wt +
              '"  /></td>' +
              '<td><span class="est_less_wt">' +
              estval.less_wt +
              '</span><input type="hidden" class="est_less_val" value="' +
              estval.less_wt +
              '"  /></td>' +
              '<td><span class="est_net_wt">' +
              estval.net_wt +
              '</span><input type="hidden" class="est_net_val" value="' +
              estval.net_wt +
              '"  /></td>' +
              '<td><span class="est_wastage">' +
              estval.wastage_percent +
              '</span><input type="hidden" class="est_wastage_percent" value="' +
              estval.wastage_percent +
              '"  /></td>' +
              '<td><span class="est_mc">' +
              estval.mc_value +
              " " +
              (estval.mc_type == 1 ? " per gm" : " per pc") +
              '</span><input type="hidden" class="est_mc_value" value="' +
              estval.mc_value +
              '"  /><input type="hidden" class="est_mc_type" value="' +
              estval.mc_type +
              '"  /></td>' +
              '<td><input type="hidden" class="est_discount" value="' +
              estval.discount +
              '"/>' +
              estval.discount +
              "</td>" +
              '<td><span class="est_tgrp_name">' +
              estval.tgrp_name +
              '</span><input type="hidden" class="est_tax_id" value="' +
              estval.tax_group_id +
              '" /><input type="hidden" class="est_tax_val" value="' +
              estval.item_total_tax +
              '" /><input type="hidden" class="est_tax_cgst" value="' +
              estval.total_cgst +
              '" /><input type="hidden" class="est_tax_igst" value="' +
              estval.total_igst +
              '" /><input type="hidden" class="est_tax_sgst" value="' +
              estval.total_sgst +
              '" /></td>' +
              "<td>" +
              estval.item_total_tax +
              "</td>" +
              '<td><span class="est_item_cost">' +
              estval.item_cost +
              '</span><input type="hidden" class="est_material_price" value="' +
              estval.othermat_amount +
              '"  /><input type="hidden" class="est_stone_price" value="' +
              estval.stone_price +
              '"  /><input type="hidden" class="est_item_cost_val" value="' +
              estval.item_cost +
              '"  /><input type="hidden" class="bill_amt_without_tax" value="' +
              parseFloat(estval.item_cost - estval.item_total_tax).toFixed(2) +
              '"  /></td>' +
              "<td>" +
              (estval.is_partial == 1
                ? "<input type='checkbox' class='select_est_partial' value='1' />"
                : "-") +
              "</td>" +
              '<td><span class="est_tag_no">' +
              estval.tag_id +
              "</span></td>" +
              "</tr>";

            $("#bill_items_for_return tbody").append(row);
          });

          $("#bill_items_return").show();

          calculateEsttoSaleConvertion();
        } else {
          $("#bill_items_tbl_for_return tbody").empty();

          if (billType != 4 && billType != 6) {
            $("#bill_items_return").show();
          } else {
            $("#bill_items_return").hide();
          }
        }

        // BILL PURCHASED ITEMS

        if (data.responsedata.old_matel_details.length > 0) {
          $("#bill_old_items_purchased_tbl tbody").empty();

          $.each(
            data.responsedata.old_matel_details,
            function (estkey, estval) {
              /*<td><span class="est_old_item_pur">'+estval.purname+'</span><input type="hidden" class="est_old_item_purid" value="'+estval.purid+'"  /></td>*/

              var row =
                "<tr>" +
                "<td>" +
                estval.est_id +
                "/td>" +
                "<td><span>" +
                (estval.purpose == 1 ? "Cash" : "Exchange") +
                '</span><input type="hidden" class="est_purpose" value="' +
                estval.purpose +
                '" /></td>' +
                '<td><span class="est_old_item_metal">' +
                estval.metal +
                '</span><input type="hidden" class="est_old_item_cat_id" value="' +
                estval.id_category +
                '"  /></td>' +
                '<td><span class="est_old_itm_gross_wt">' +
                estval.gross_wt +
                '</span><input type="hidden" class="est_old_gross_val" value="' +
                estval.gross_wt +
                '"  /></td>' +
                '<td><span class="esti_old_dust_wt">' +
                estval.dust_wt +
                '</span><input type="hidden" class="est_old_dust_val" value="' +
                estval.dust_wt +
                '"  /><input type="hidden" class="est_old_item_less_wt" value="' +
                estval.less_wt +
                '"  /></td>' +
                '<td><span class="esti_old_stn_wt">' +
                estval.stone_wt +
                '</span><input type="hidden" class="est_old_stone_val" value="' +
                estval.stone_wt +
                '"  /></td>' +
                '<td><span class="est_old_net_wt"></span></td>' +
                '<td><span class="est_old_wastage">' +
                parseFloat(estval.wastage_percent) +
                '</span><input type="hidden" class="est_old_wastage_percent" value="' +
                parseFloat(estval.wastage_percent) +
                '"  /></td>' +
                '<td><span class="est_old_rate_per_gram">' +
                parseFloat(estval.rate_per_gram) +
                '</span><input type="hidden" class="est_old_rate_per_gram_val" value="' +
                parseFloat(estval.rate_per_gram) +
                '"  /></td>' +
                '<td><input type="number" class="est_old_discount" value="" step="any" /></td>' +
                '<td><span class="est_old_amount">' +
                estval.amount +
                '</span><input type="hidden" class="est_old_item_amount_val" value="' +
                estval.amount +
                '"  /></td>' +
                "</tr>";

              $("#bill_old_items_purchased_tbl tbody").append(row);
            }
          );

          $("#bill_old_items_purchased").show();

          calculateOldEsttoSaleConvertion();
        } else {
          $("#bill_old_items_purchased_tbl tbody").empty();

          $("#bill_old_items_purchased").hide();
        }
      } else {
        alert(data.message);
      }
    },
  });
}

$("#update_billreturn").on("click", function () {
  var bill_type = $("input[name='billing[bill_type]']:checked").val();

  if (bill_type == 8) {
    getCreditBillDetails($("#filter_Billno").val(), bill_type);
  } else {
    $("#bill_items_for_return > tbody tr").each(function (idx, row) {
      sold_items_row = $(this);

      var rowExist = false;

      if (sold_items_row.find("td:first .select_est_details").is(":checked")) {
        $(".return_details").show();

        $("#sale_return_details > tbody tr").each(function (bidx, brow) {
          return_items_row = $(this);

          // CHECK DUPLICATES - TAG

          if (sold_items_row.find(".est_tag_id").val() != "") {
            if (
              sold_items_row.find(".est_tag_id").val() ==
              return_items_row.find(".sale_tag_id").val()
            ) {
              rowExist = true;

              /*console.log("Tag ID - "+bidx+" : From Modal"+sold_items_row.find('td:first .est_tag_id').val()+" From Bill"+return_items_row.find('td:eq(15) .sale_tag_id').val());

							console.log(rowExist);*/
            }
          }

          // CHECK DUPLICATES - ESTIMATION ITEM

          if (return_items_row.find("td:first .is_est_details").val() == 1) {
            if (
              sold_items_row.find(".est_itm_id").val() != "" &&
              sold_items_row.find(".est_itm_id").val() != null
            ) {
              if (
                sold_items_row.find(".est_itm_id").val() ==
                return_items_row.find(".est_itm_id").val()
              ) {
                rowExist = true;

                /*console.log("Esti ID - "+bidx+" : From Modal"+sold_items_row.find('td:first .est_itm_id').val()+" From Bill"+sold_items_row.find('td:first .est_itm_id').val());

								console.log(rowExist);*/
              }
            }
          }
        });

        console.log(rowExist);

        if (!rowExist) {
          if (
            sold_items_row.find("td:last .select_est_partial").is(":checked")
          ) {
            var row =
              "<tr>" +
              "<td><span>" +
              sold_items_row.find("td:first .est_hsn").val() +
              '</span><input type="hidden" class="bill_id" name="sales_return[' +
              idx +
              '][bill_id]" value="' +
              sold_items_row.find("td:first .bill_id").val() +
              '" /><input type="hidden" class="bill_det_id" name="sales_return[' +
              idx +
              '][bill_det_id]" value="' +
              sold_items_row.find("td:first .bill_det_id").val() +
              '" /><input type="hidden" class="sale_pro_hsn" name="sales_return[' +
              idx +
              '][hsn]" value="' +
              sold_items_row.find("td:first .est_hsn").val() +
              '" /><input type="hidden" class="sale_type" name="sales_return[' +
              idx +
              '][sourcetype]" value="1" /><input type="hidden" class="sale_item_type" name="sales_return[' +
              idx +
              '][itemtype]" value="' +
              sold_items_row.find("td:first .est_item_type").val() +
              '" /><input type="hidden" class="is_est_details" value="1" name="sales_return[' +
              idx +
              '][is_est_details]" /><input type="hidden" class="est_itm_id" name="sales_return[' +
              idx +
              '][est_itm_id]" value="' +
              sold_items_row.find("td:first .est_itm_id").val() +
              '" /><input type="hidden" class="sale_cal_type" name="sales_return[' +
              idx +
              '][calltype]" value="' +
              sold_items_row.find("td:first .est_cal_type").val() +
              '" /><input type="hidden" class="sale_metal_type" value="' +
              sold_items_row.find("td:first .est_metal_type").val() +
              '" /><input type="hidden" class="sale_purity" value="' +
              sold_items_row.find("td:eq(4) .est_purid").val() +
              '"  name="sales_return[' +
              idx +
              '][purity]" /><input type="hidden" class="sale_size" value="' +
              sold_items_row.find("td:eq(5) .est_size_val").val() +
              '"  name="sales_return[' +
              idx +
              '][size]" /><input type="hidden" class="sale_uom" value="' +
              sold_items_row.find("td:eq(0) .est_uom").val() +
              '"  name="sales_return[' +
              idx +
              '][uom]" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(1) .est_product_name").html() +
              '</span><input class="sale_product_id" type="hidden" name="sales_return[' +
              idx +
              '][product]" value="' +
              sold_items_row.find("td:eq(1) .est_product_id").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(2) .est_design_code").html() +
              '</span><input type="hidden" class="sale_design_id" name="sales_return[' +
              idx +
              '][design]" value="' +
              sold_items_row.find("td:eq(2) .est_design_id").val() +
              '" /></td>' +
              '<td><input type="number" class="sale_pcs" name="sales_return[' +
              idx +
              '][pcs]" value="' +
              sold_items_row.find("td:eq(3) .est_pcs").val() +
              '"  /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(6) .est_gross_wt").html() +
              '</span><input type="hidden" class="bill_gross_val" name="sales_return[' +
              idx +
              '][gross]" value="' +
              sold_items_row.find("td:eq(6) .est_gross_val").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(7) .est_less_wt").html() +
              '</span><input type="hidden" class="bill_less_val" name="sales_return[' +
              idx +
              '][less]" value="' +
              sold_items_row.find("td:eq(7) .est_less_val").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(8) .est_net_wt").html() +
              '</span><input type="hidden" class="bill_net_val" name="sales_return[' +
              idx +
              '][net]" value="' +
              sold_items_row.find("td:eq(8) .est_net_val").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(9) .est_wastage").html() +
              '</span><input type="hidden" class="bill_wastage" name="sales_return[' +
              idx +
              '][wastage]" value="' +
              sold_items_row.find("td:eq(9) .est_wastage_percent").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(10) .est_mc").html() +
              '</span><input type="hidden" class="bill_mctype" name="sales_return[' +
              idx +
              '][bill_mctype]" value="' +
              sold_items_row.find("td:eq(10) .est_mc_type").val() +
              '" /><input type="hidden" class="bill_mc" name="sales_return[' +
              idx +
              '][mc]" value="' +
              sold_items_row.find("td:eq(10) .est_mc_value").val() +
              '" /></td>' +
              '<td><input type="hidden" class="bill_discount" name="sales_return[' +
              idx +
              '][discount]" value="' +
              sold_items_row.find("td:eq(11) .est_discount").val() +
              '"  />' +
              sold_items_row.find("td:eq(11) .est_discount").val() +
              "</td>" +
              '<td><span class="ret_bill_amount">' +
              sold_items_row.find(".bill_amt_without_tax").val() +
              "</span></td>" +
              "<td><span>" +
              sold_items_row.find("td:eq(12) .est_tgrp_name").html() +
              '</span><input type="hidden" class="sale_tax_group" name="sales_return[' +
              idx +
              '][taxgroup]" value="' +
              sold_items_row.find("td:eq(12) .est_tax_id").val() +
              '" /><input type="hidden" class="sale_tax_cgst" name="sales_return[' +
              idx +
              '][cgst]" value="' +
              sold_items_row.find(".est_tax_cgst").val() +
              '" /><input type="hidden" class="sale_tax_sgst" name="sales_return[' +
              idx +
              '][sgst]" value="' +
              sold_items_row.find(".est_tax_sgst").val() +
              '" /><input type="hidden" class="sale_tax_igst" name="sales_return[' +
              idx +
              '][igst]" value="' +
              sold_items_row.find(".est_tax_igst").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(12) .est_tax_val").val() +
              "</span></td>" +
              '<td><input type="hidden" class="bill_stone_price" value="' +
              sold_items_row.find(".est_stone_price").val() +
              '" /><input type="hidden" class="bill_material_price" value="' +
              sold_items_row.find(".est_material_price").val() +
              '"/><input type="number" class="bill_amount" name="sales_return[' +
              idx +
              '][billamount]" value="' +
              sold_items_row.find(".est_item_cost_val").val() +
              '" step="any" readonly style="width: 100px;"/><input type="hidden" class="per_grm_amount" name="sales_return[' +
              idx +
              '][per_grm]" value="" step="any" /></td>' +
              '<td><input type="number" class="sale_ret_disc_amt" name="sales_return[' +
              idx +
              '][sale_ret_disc_amt]" value="" step="any" style="width: 100px;"/></td>' +
              '<td><input type="number" class="sale_ret_amt" name="sales_return[' +
              idx +
              '][sale_ret_amt]" value="' +
              sold_items_row.find(".est_item_cost_val").val() +
              '" step="any" readonly style="width: 100px;" readonly/></td>' +
              "<td>Yes</td>" +
              "<td><span>" +
              sold_items_row.find("td:first .est_tag_id").val() +
              '</span><input type="hidden" class="sale_tag_id" name="sales_return[' +
              idx +
              '][tag]" value="' +
              sold_items_row.find("td:first .est_tag_id").val() +
              '" /></td>' +
              "<td>-</td>" +
              "<td><span>" +
              sold_items_row.find("td:first .est_id").val() +
              '</span><input type="hidden" class="sale_est_itm_id" name="sales_return[' +
              idx +
              '][estid]" value="' +
              sold_items_row.find("td:first .est_itm_id").val() +
              '" /></td>' +
              '<td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
              "</tr>";
          } else {
            var row =
              "<tr>" +
              "<td><span>" +
              sold_items_row.find("td:first .est_hsn").val() +
              '</span><input type="hidden" class="bill_id" name="sales_return[' +
              idx +
              '][bill_id]" value="' +
              sold_items_row.find("td:first .bill_id").val() +
              '" /><input type="hidden" class="bill_det_id" name="sales_return[' +
              idx +
              '][bill_det_id]" value="' +
              sold_items_row.find("td:first .bill_det_id").val() +
              '" /><input type="hidden" class="sale_pro_hsn" name="sales_return[' +
              idx +
              '][hsn]" value="' +
              sold_items_row.find("td:first .est_hsn").val() +
              '" /><input type="hidden" class="sale_type" name="sales_return[' +
              idx +
              '][sourcetype]" value="1" /><input type="hidden" class="sale_item_type" name="sales_return[' +
              idx +
              '][itemtype]" value="' +
              sold_items_row.find("td:first .est_item_type").val() +
              '" /><input type="hidden" class="is_est_details" value="1" name="sales_return[' +
              idx +
              '][is_est_details]" /><input type="hidden" class="est_itm_id" name="sales_return[' +
              idx +
              '][est_itm_id]" value="' +
              sold_items_row.find("td:first .est_itm_id").val() +
              '" /><input type="hidden" class="sale_cal_type" name="sales_return[' +
              idx +
              '][calltype]" value="' +
              sold_items_row.find("td:first .est_cal_type").val() +
              '" /><input type="hidden" class="sale_metal_type" value="' +
              sold_items_row.find("td:first .est_metal_type").val() +
              '" /><input type="hidden" class="sale_purity" value="' +
              sold_items_row.find("td:eq(4) .est_purid").val() +
              '"  name="sales_return[' +
              idx +
              '][purity]" /><input type="hidden" class="sale_size" value="' +
              sold_items_row.find("td:eq(5) .est_size_val").val() +
              '"  name="sales_return[' +
              idx +
              '][size]" /><input type="hidden" class="sale_uom" value="' +
              sold_items_row.find("td:eq(0) .est_uom").val() +
              '"  name="sales_return[' +
              idx +
              '][uom]" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(1) .est_product_name").html() +
              '</span><input class="sale_product_id" type="hidden" name="sales_return[' +
              idx +
              '][product]" value="' +
              sold_items_row.find("td:eq(1) .est_product_id").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(2) .est_design_code").html() +
              '</span><input type="hidden" class="sale_design_id" name="sales_return[' +
              idx +
              '][design]" value="' +
              sold_items_row.find("td:eq(2) .est_design_id").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(3) .est_piece").html() +
              '</span><input type="hidden" class="sale_pcs" name="sales_return[' +
              idx +
              '][pcs]" value="' +
              sold_items_row.find("td:eq(3) .est_pcs").val() +
              '"  /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(6) .est_gross_wt").html() +
              '</span><input type="hidden" class="bill_gross_val" name="sales_return[' +
              idx +
              '][gross]" value="' +
              sold_items_row.find("td:eq(6) .est_gross_val").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(7) .est_less_wt").html() +
              '</span><input type="hidden" class="bill_less_val" name="sales_return[' +
              idx +
              '][less]" value="' +
              sold_items_row.find("td:eq(7) .est_less_val").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(8) .est_net_wt").html() +
              '</span><input type="hidden" class="bill_net_val" name="sales_return[' +
              idx +
              '][net]" value="' +
              sold_items_row.find("td:eq(8) .est_net_val").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(9) .est_wastage").html() +
              '</span><input type="hidden" class="bill_wastage" name="sales_return[' +
              idx +
              '][wastage]" value="' +
              sold_items_row.find("td:eq(9) .est_wastage_percent").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(10) .est_mc").html() +
              '</span><input type="hidden" class="bill_mctype" name="sales_return[' +
              idx +
              '][bill_mctype]" value="' +
              sold_items_row.find("td:eq(10) .est_mc_type").val() +
              '" /><input type="hidden" class="bill_mc" name="sales_return[' +
              idx +
              '][mc]" value="' +
              sold_items_row.find("td:eq(10) .est_mc_value").val() +
              '" /></td>' +
              '<td><input type="hidden" class="bill_discount" name="sales_return[' +
              idx +
              '][discount]" value="' +
              sold_items_row.find("td:eq(11) .est_discount").val() +
              '"  />' +
              sold_items_row.find("td:eq(11) .est_discount").val() +
              "</td>" +
              '<td><span class="ret_bill_amount">' +
              sold_items_row.find(".bill_amt_without_tax").val() +
              "</span></td>" +
              "<td><span>" +
              sold_items_row.find("td:eq(12) .est_tgrp_name").html() +
              '</span><input type="hidden" class="sale_tax_group" name="sales_return[' +
              idx +
              '][taxgroup]" value="' +
              sold_items_row.find("td:eq(12) .est_tax_id").val() +
              '" /><input type="hidden" class="sale_tax_cgst" name="sales_return[' +
              idx +
              '][cgst]" value="' +
              sold_items_row.find(".est_tax_cgst").val() +
              '" /><input type="hidden" class="sale_tax_sgst" name="sales_return[' +
              idx +
              '][sgst]" value="' +
              sold_items_row.find(".est_tax_sgst").val() +
              '" /><input type="hidden" class="sale_tax_igst" name="sales_return[' +
              idx +
              '][igst]" value="' +
              sold_items_row.find(".est_tax_igst").val() +
              '" /></td>' +
              "<td><span>" +
              sold_items_row.find("td:eq(12) .est_tax_val").val() +
              "</span></td>" +
              '<td><input type="hidden" class="bill_stone_price" value="' +
              sold_items_row.find(".est_stone_price").val() +
              '" /><input type="hidden" class="bill_material_price" value="' +
              sold_items_row.find(".est_material_price").val() +
              '"/><input type="number" class="bill_amount" name="sales_return[' +
              idx +
              '][billamount]" value="' +
              sold_items_row.find(".est_item_cost_val").val() +
              '" step="any" readonly style="width: 100px;"/><input type="hidden" class="per_grm_amount" name="sales_return[' +
              idx +
              '][per_grm]" value="" step="any" /></td>' +
              '<td><input type="number" class="sale_ret_disc_amt" name="sales_return[' +
              idx +
              '][sale_ret_disc_amt]" value="" step="any" style="width: 100px;"/></td>' +
              '<td><input type="number" class="sale_ret_amt" name="sales_return[' +
              idx +
              '][sale_ret_amt]" value="' +
              sold_items_row.find(".est_item_cost_val").val() +
              '" step="any" readonly style="width: 100px;"/></td>' +
              "<td>No</td>" +
              "<td><span>" +
              sold_items_row.find("td:first .est_tag_id").val() +
              '</span><input type="hidden" class="sale_tag_id" name="sales_return[' +
              idx +
              '][tag]" value="' +
              sold_items_row.find("td:first .est_tag_id").val() +
              '" /></td>' +
              "<td>-</td>" +
              "<td><span>" +
              sold_items_row.find("td:first .est_itm_id").val() +
              '</span><input type="hidden" class="sale_est_itm_id" name="sales_return[' +
              idx +
              '][estid]" value="' +
              sold_items_row.find("td:first .est_itm_id").val() +
              '" /></td>' +
              '<td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
              "</tr>";
          }

          $("#sale_return_details tbody").append(row);
        }
      }
    });

    calculate_salesReturn_details();
  }

  $("#billno-detail-popup").modal("toggle");
});

$("#issue_search").click(function (event) {
  set_issue_list();
});
/*
function set_issue_list() {

	my_Date = new Date();

	$("div.overlay").css("display", "block");

	$.ajax({

		url: base_url + "index.php/admin_ret_billing/issue/ajax?nocache=" + my_Date.getUTCSeconds(),

		dataType: "JSON",

		data: { 'dt_range': $("#dt_range").val(), 'id_branch': ($('#branch_filter').val() != '' && $('#branch_filter').val() != undefined ? $('#branch_filter').val() : $("#branch_select").val()) },

		type: "POST",

		success: function (data) {

			console.log("List", data);

			$("div.overlay").css("display", "none");

			var list = data.list;

			var oTable = $('#receipt_list').DataTable();

			oTable.clear().draw();

			if (list != null && list.length > 0) {

				oTable = $('#receipt_list').dataTable({

					"bDestroy": true,

					"bInfo": true,

					"bFilter": true,

					"order": [[0, "desc"]],

					"scrollX": '100%',

					"bSort": true,

					"dom": 'lBfrtip',

					"aaData": list,

					"aoColumns": [{ "mDataProp": "id_issue_receipt" },

					{ "mDataProp": "date_add" },

					{ "mDataProp": "bill_no" },

					{ "mDataProp": "issue_type" },

					{ "mDataProp": "mobile" },

					{ "mDataProp": "emp_name" },

					{ "mDataProp": "barrower_name" },

					{ "mDataProp": "amount" },

					{ "mDataProp": "name" },

					{ "mDataProp": "narration" },



					{
						"mDataProp": function (row, type, val, meta) {

							id = row.id_issue_receipt;

							print_url = base_url + 'index.php/admin_ret_billing/issue/issue_print/' + id;

							action_content = '<a href="' + print_url + '" target="_blank" class="btn btn-info btn-print" data-toggle="tooltip" title="Billing Receipt"><i class="fa fa-print" ></i></a>' + (row.allow_cancel == 1 && row.bill_status == 1 ? '<button class="btn btn-warning" onclick="cancel_issue_bill(' + id + ')"><i class="fa fa-close" ></i></button>' : '');

							return action_content;

						}

					}

					],

				});

			}

		},

		error: function (error) {

			$("div.overlay").css("display", "none");

		}

	});

}*/

function set_issue_list() {
  my_Date = new Date();

  $("div.overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/issue/ajax?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "JSON",

    data: {
      dt_range: $("#dt_range").val(),
      id_employee: $("#emp_select").val(),
      id_karigar: $("#select_karigar").val(),
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
    },

    type: "POST",

    success: function (data) {
      console.log("List", data);

      $("div.overlay").css("display", "none");

      var list = data.list;

      var oTable = $("#receipt_list").DataTable();

      oTable.clear().draw();

      if (list != null && list.length > 0) {
        oTable = $("#receipt_list").dataTable({
          bDestroy: true,

          bInfo: true,

          bFilter: true,

          order: [[0, "desc"]],

          scrollX: "100%",

          bSort: true,

          dom: "lBfrtip",

          aaData: list,

          aoColumns: [
            {
              mDataProp: function (row, type, val, meta) {
                id = row.id_issue_receipt;

                is_close = row.is_closed;

                // print_url=base_url+'index.php/admin_ret_billing/issue/issue_print/'+id;

                content =
                  (is_close == 1
                    ? ""
                    : '<input type="checkbox" class ="close_issue" value ="1" >') +
                  '<span class="id_issue_receipt">' +
                  id +
                  "</span>";

                return content;
              },
            },

            { mDataProp: "date_add" },

            { mDataProp: "bill_no" },

            { mDataProp: "issue_to" },

            { mDataProp: "issue_type" },

            { mDataProp: "account_head" },

            { mDataProp: "barrower_name" },

            { mDataProp: "employee_name" },

            { mDataProp: "karigar_name" },

            { mDataProp: "mobile" },

            { mDataProp: "refno" },

            { mDataProp: "amount" },

            { mDataProp: "name" },

            { mDataProp: "narration" },

            {
              mDataProp: function (row, type, val, meta) {
                id = row.id_issue_receipt;

                print_url =
                  base_url +
                  "index.php/admin_ret_billing/issue/issue_print/" +
                  id;

                action_content =
                  '<a href="' +
                  print_url +
                  '" target="_blank" class="btn btn-info btn-print" data-toggle="tooltip" title="Billing Receipt"><i class="fa fa-print" ></i></a>' +
                  (row.allow_cancel == 1 && row.bill_status == 1
                    ? '<button class="btn btn-warning" onclick="cancel_issue_bill(' +
                      id +
                      ')"><i class="fa fa-close" ></i></button>'
                    : "");

                return action_content;
              },
            },
          ],
          footerCallback: function (row, data, start, end, display) {
            if (data.length > 0) {
              var api = this.api(),
                data;
              for (var i = 0; i <= data.length - 1; i++) {
                var intVal = function (i) {
                  return typeof i === "string"
                    ? i.replace(/[\$,]/g, "") * 1
                    : typeof i === "number"
                    ? i
                    : 0;
                };
                $(api.column(0).footer()).html("Total");
                total_amount = api
                  .column(11)
                  .data()
                  .reduce(function (a, b) {
                    return intVal(a) + intVal(b);
                  }, 0);
                $(api.column(11).footer()).html(
                  parseFloat(total_amount).toFixed(2)
                );
              }
            } else {
              var api = this.api(),
                data;
              $(api.column(11).footer()).html("");
            }
          },
        });
      }
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

function cancel_issue_bill(bill_id) {
  $("#id_issue_receipt").val(bill_id);

  $("#confirm-delete").modal("show");
}

$("#cancel_payment").on("click", function () {
  $("#cancel_payment").prop("disabled", true);

  my_Date = new Date();

  $.ajax({
    type: "POST",

    url:
      base_url +
      "index.php/admin_ret_billing/issue/cancel?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    data: { id_issue_receipt: $("#id_issue_receipt").val() },

    success: function (data) {
      $("#confirm-delete").modal("toggle");

      $.toaster({
        priority: "success",
        title: "Success!",
        message: "" + "</br> Payment Cancelled SuccessFully...",
      });

      window.location.reload();
    },
  });
});

// issue

$("#name").on("keyup", function (e) {
  var customer = $("#name").val();

  if (customer.length >= 2) {
    getSearchCustomer(customer);
  }
});

// $('input[type=radio][name="issue[issue_type]"]').change(function () {

// 	$("#acc_head").prop('disabled', true);

// 	$('#issue_amount').prop('readonly', false);

// 	$//('#issue_type1').prop('disabled',true);

// 	var issue_to = $("input:radio[name='issue[issue_to]']:checked").val();

// 	if (issue_to == 1 || issue_to == 3) {

// 		$("#acc_head").select2("val", "");

// 		get_account_head();

// 		$("#acc_head").prop('disabled', false);

// 	}

// 	if (this.value == 3) {

// 		$('#issue_amount').prop('readonly', true);

// 		$('#issue_amount').val(0);

// 		if ($("#id_customer").val() != '') {

// 			get_customer_advance_details($("#id_customer").val());

// 		}

// 	}

// 	calculateIssueAmount();

// });

$('input[type=radio][name="issue[issue_type]"]').change(function () {
  $("#acc_head").prop("disabled", true);

  $("#issue_amount").prop("readonly", false);

  //$('#issue_type1').prop('disabled',true);

  var issue_to = $("input:radio[name='issue[issue_to]']:checked").val();

  if (this.value == 1 && issue_to == 1) {
    // alert(1);

    $("#issue_amount").prop("readonly", true);

    $(".acc_head").css("display", "block");

    $("#issue_amount").val(0);

    $(".pay_to_cus").val(0);
  }

  if (this.value == 2) {
    $(".acc_head").css("display", "none");

    $("#issue_amount").val(0);

    $(".pay_to_cus").val(0);
  }

  if (this.value == 3) {
    $(".acc_head").css("display", "none");

    $("#issue_amount").prop("readonly", true);

    $("#issue_amount").val(0);

    $(".pay_to_cus").val(0);

    if ($("#id_customer").val() != "") {
      get_customer_advance_details($("#id_customer").val());
    }
  }

  if (this.value == 1 && issue_to == 2) {
    // alert(2);
    $("#issue_amount").prop("readonly", true);

    $(".acc_head").css("display", "block");
  }

  if (this.value == 1 && issue_to == 3) {
    // alert(3);

    $("#issue_amount").prop("readonly", true);

    $(".acc_head").css("display", "block");
  }

  if (issue_to == 3 || issue_to == 2) {
    $("#acc_head").select2("val", "");

    get_account_head();

    $("#acc_head").prop("disabled", false);

    // $("#account_head").prop('disabled',true);

    $("#issue_amount").prop("readonly", false);
  }
  if (issue_to == 1) {
    $("#issue_amount").prop("readonly", true);

    $("#account_head").prop("disabled", false);
  }

  calculateIssueAmount();
});

// $('input[type=radio][name="issue[issue_to]"]').change(function () {

// 	$("#name").val('');

// 	$("#mobile").val('');

// 	$("#id_employee").val('');

// 	$("#id_customer").val('');

// 	$("#id_karigar").val('');

// 	$('#issue_type1').prop('disabled', false);

// 	$('#issue_type2').prop('disabled', false);

// 	$('#issue_type3').prop('disabled', false);

// 	var issue_type = $("input:radio[name='issue[issue_type]']:checked").val();

// 	if (this.value == 1) {

// 		$('#issue_type2').prop('disabled', true);

// 		$('#issue_type3').prop('disabled', true);

// 		$('#issue_type1').prop('disabled', false);

// 		$('#issue_type1').prop('checked', true);

// 		//$("#name").prop('disabled',true);

// 		//$("#mobile").prop('readonly',false);

// 		$("#acc_head").prop('disabled', false);

// 		get_account_head();

// 	}	else if (this.value == 4) {

// 		$('#issue_type2').prop('disabled', true);

// 		$('#issue_type3').prop('disabled', true);

// 		$('#issue_type1').prop('disabled', false);

// 		$('#issue_type1').prop('checked', true);

// 		//$("#name").prop('disabled',false);

// 		//$("#mobile").prop('readonly',true);

// 		$("#acc_head").prop('disabled', true);

// 	} else {

// 		$('#issue_type2').prop('checked', true);

// 		//$("#name").prop('disabled',false);

// 		//$("#mobile").prop('readonly',true);

// 		$("#acc_head").prop('disabled', true);

// 	}

// });

$('input[type=radio][name="issue[issue_to]"]').change(function () {
  $("#name").val("");

  $("#mobile").val("");

  $("#id_employee").val("");

  $("#id_customer").val("");

  $("#issue_type1").prop("disabled", false);

  var issue_type = $("input:radio[name='issue[issue_type]']:checked").val();

  if (this.value == 1) {
    $("#issue_type1").prop("disabled", false);

    //$("#name").prop('disabled',true);

    //$("#mobile").prop('readonly',false);

    $("#acc_head").prop("disabled", false);

    get_account_head();
  } else if (this.value == 4) {
    $("#issue_type2").prop("disabled", true);

    $("#issue_type3").prop("disabled", true);

    $("#issue_type1").prop("disabled", false);

    $("#issue_type1").prop("checked", true);

    //$("#name").prop('disabled',false);

    //$("#mobile").prop('readonly',true);

    $("#acc_head").prop("disabled", true);
  } else if (this.value == 2) {
    $("#issue_type1").prop("disabled", true);

    $("#issue_type2").prop("disabled", false);

    $("#issue_type2").prop("disabled", false);

    $("#issue_type3").prop("disabled", false);

    $("#issue_type2").prop("checked", true);

    $(".acc_head").css("display", "none");

    $("#issue_amount").prop("readonly", false);
  } else {
    $("#issue_type2").prop("checked", true);

    //$("#name").prop('disabled',false);

    //$("#mobile").prop('readonly',true);

    $("#acc_head").prop("disabled", true);
  }
});
function getSearchCustomer(searchTxt) {
  $("#customerAlert").html("");

  var issue_to = $("input:radio[name='issue[issue_to]']:checked").val();

  var issue_type = $("input:radio[name='issue[issue_type]']:checked").val();

  var receipt_type = $(
    "input:radio[name='receipt[receipt_type]']:checked"
  ).val();

  var receipt_to = $("input:radio[name='receipt[receipt_to]']:checked").val();

  var id_branch = $("#branch_select").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_borrower/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      searchTxt: searchTxt,
      id_branch: id_branch,
      issue_to: issue_to,
      issue_type: issue_type,
      is_eda: $("#is_eda").val(),
      receipt_to: receipt_to,
      receipt_type: receipt_type,
    },

    success: function (data) {
      $("#name").autocomplete({
        source: data,

        select: function (e, i) {
          e.preventDefault();

          $("#name").val(i.item.label);

          $("#mobile").val(i.item.mobile);

          $("#barrower_name").val(i.item.barrower_name);

          $("#pan_no").val(i.item.pan);

          //$("#id_customer").val(i.item.value);

          if (ctrl_page[1] == "issue") {
            if (issue_to == 1) {
              $("#id_employee").val(i.item.value);
            } else if (issue_to == 4) {
              $("#id_karigar").val(i.item.value);
            } else {
              $("#id_customer").val(i.item.value);

              $("#id_ret_wallet").val(i.item.id_ret_wallet);

              if (issue_type == 3) {
                get_customer_advance_details(i.item.value);
              } else if (issue_type == 2) {
                $("#issue_amount").prop("disabled", false);

                $("#issue_amount").prop("readonly", false);

                //$('#issue_amount').val(i.item.wallet_det['amount']);

                //$('.pay_to_cus').val(i.item.wallet_det['amount']);
              } else {
                $("#issue_amount").val("");

                $(".pay_to_cus").val("");
              }
            }
          } else {
            if (receipt_type == 8) {
              if (receipt_to == 1) {
                $("#id_employee").val(i.item.value);
              } else {
                $("#id_karigar").val(i.item.value);
              }
            } else {
              $("#id_customer").val(i.item.value);
            }
          }

          if (
            ctrl_page[1] == "receipt" &&
            (receipt_type == 1 || receipt_type == 8) &&
            ($("#id_customer").val() != "" ||
              $("#id_employee").val() != "" ||
              $("#id_karigar").val() != "")
          ) {
            get_customer_credit_details($("#id_customer").val());
          }

          get_check_customer_payment_det();
        },

        change: function (event, ui) {
          if (ui.item === null) {
            $(this).val("");

            $("#name").val("");

            $("#id_employee").val("");

            $("#id_customer").html("");

            $("#id_karigar").html("");
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (searchTxt != "") {
            if (i.content.length === 0) {
              $("#customerAlert").html(
                '<p style="color:red">Enter a valid  name / mobile</p>'
              );
            } else {
              $("#customerAlert").html("");
            }
          } else {
          }
        },

        minLength: 3,
      });
    },
  });
}

//credit collection

function get_customer_credit_details(id_customer) {
  my_Date = new Date();

  var receipt_type = $(
    "input:radio[name='receipt[receipt_type]']:checked"
  ).val();

  var receipt_to = $("input:radio[name='receipt[receipt_to]']:checked").val();

  var id_customer = $("#id_customer").val();

  var id_employee = $("#id_employee").val();

  var id_karigar = $("#id_karigar").val();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_customer_credit_details/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      id_customer: id_customer,
      id_employee: id_employee,
      id_karigar: id_karigar,
      receipt_type: receipt_type,
      receipt_to: receipt_to,
    },

    success: function (data) {
      if (data.length > 0) {
        set_issue_details(data);
      } else {
        $.toaster({
          priority: "danger",
          title: "Success!",
          message: "" + "</br> No Records Found...",
        });
      }
    },
  });
}

function set_issue_details(issue_details) {
  $("#credit_collection").modal("toggle");

  $("#credit_collection .modal-body").find("#issue_list tbody").empty();

  var receipt_type = $(
    "input:radio[name='receipt[receipt_type]']:checked"
  ).val();

  html = "";

  $.each(issue_details, function (key, items) {
    html +=
      "<tr>" +
      '<td><input type="checkbox" class="id_issue_receipt"  name="refund[id_issue_receipt]" value="' +
      items.id_issue_receipt +
      '">' +
      '<td><div value="' +
      items.bill_no +
      '">' +
      items.bill_no +
      "</div></td>" +
      '<td><input type="hidden" class="issue_amt" value="' +
      items.issue_amt +
      '" >' +
      items.issue_amt +
      "</td>" +
      '<td><input type="hidden" class="paid_amt" value="' +
      items.paid_amt +
      '" >' +
      items.paid_amt +
      "</td>" +
      '<td><span class="receipt_blc_amt">' +
      parseFloat(items.issue_amt - items.paid_amt - items.discount_amt) +
      "</span></td>" +
      '<td class="credit_discount" ><input type="number" class="form-control discount_amt" value=""></td>' +
      '<td><input type="number" class="form-control balance_amount" value=""></td>' +
      "</tr>";
  });

  $("#issue_list > tbody").append(html);

  if (receipt_type == 8) {
    $(".credit_discount").css("display", "none");
  } else {
    $(".credit_discount").css("display", "block");
  }
}

$(document).on("change", ".id_issue_receipt", function () {
  var row = $(this).closest("tr");

  var balance_amount = 0;

  var discount_amount = 0;

  if ($(this).is(":checked")) {
    discount_amount =
      row.find(".discount_amt").val() != ""
        ? row.find(".discount_amt").val()
        : 0;

    balance_amount =
      parseFloat(row.find(".issue_amt").val()) -
      parseFloat(row.find(".paid_amt").val()) -
      parseFloat(discount_amount);

    row.find(".balance_amount").val(parseFloat(balance_amount).toFixed(2));
  } else {
    row.find(".balance_amount").val(0);
  }
});

$(document).on("change", ".discount_amt", function () {
  var row = $(this).closest("tr");

  var discount_amt = parseFloat(
    row.find(".discount_amt").val() != "" ? row.find(".discount_amt").val() : 0
  ).toFixed(2);

  var receipt_blc_amt = parseFloat(
    row.find(".receipt_blc_amt").html() != ""
      ? row.find(".receipt_blc_amt").html()
      : 0
  ).toFixed(2);

  var act_recd_amt =
    parseFloat(row.find(".receipt_blc_amt").html()) -
    parseFloat(row.find(".discount_amt").val());

  if (parseFloat(receipt_blc_amt) < parseFloat(discount_amt)) {
    $.toaster({
      priority: "danger",
      title: "Success!",
      message: "" + "</br> Please Enter The Valid Amount",
    });

    row.find(".balance_amount").val(0);

    row.find(".discount_amt").val(0);
  } else if (act_recd_amt < 0) {
    $.toaster({
      priority: "danger",
      title: "Success!",
      message: "" + "</br> Please Enter The Valid Amount",
    });

    row.find(".balance_amount").val(0);

    row.find(".discount_amt").val(0);
  } else {
    row.find(".balance_amount").val(parseFloat(act_recd_amt));
  }
});

$(document).on("change", ".balance_amount", function () {
  var row = $(this).closest("tr");

  var discount_amt = parseFloat(
    row.find(".discount_amt").val() != "" ? row.find(".discount_amt").val() : 0
  ).toFixed(2);

  var receipt_blc_amt = parseFloat(
    row.find(".receipt_blc_amt").html() != ""
      ? row.find(".receipt_blc_amt").html()
      : 0
  ).toFixed(2);

  var act_recd_amt =
    parseFloat(row.find(".receipt_blc_amt").html()) -
    parseFloat(row.find(".discount_amt").val());

  var recd_amt = parseFloat(row.find(".balance_amount").val());

  if (parseFloat(recd_amt) > parseFloat(receipt_blc_amt)) {
    $.toaster({
      priority: "danger",
      title: "Success!",
      message: "" + "</br> Please Enter The Valid Amount",
    });

    row.find(".balance_amount").val(0);

    row.find(".discount_amt").val(0);
  }
});

$("#save_credit_collection").on("click", function (e) {
  var payable_amount = 0;

  $("#credit_collection").modal("hide");

  var credit_details = [];

  $("#credit_collection .modal-body #issue_list > tbody  > tr").each(function (
    index,
    tr
  ) {
    if ($(this).find(".id_issue_receipt").is(":checked")) {
      payable_amount += parseFloat($(this).find(".balance_amount").val());

      credit_details.push({
        id_issue_receipt: $(this).find(".id_issue_receipt").val(),

        issue_amt: $(this).find(".issue_amt").val(),

        paid_amt: $(this).find(".paid_amt").val(),

        payable_amount: $(this).find(".balance_amount").val(),

        discount_amt: $(this).find(".discount_amt").val(),
      });
    }
  });

  $("#amount").val(parseFloat(payable_amount).toFixed(2));

  $(".receive_amount").val(parseFloat(payable_amount).toFixed(2));

  $("#multiple_receipt_id").val(
    credit_details.length > 0 ? JSON.stringify(credit_details) : ""
  );

  calculate_ReceiptAmount();
});

//credit collection

//advance refund

function get_customer_advance_details(id_customer) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_customer_advance_details/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { id_customer: id_customer, is_eda: $("#is_eda").val() },

    success: function (data) {
      if (data.length > 0) {
        set_advance_refund_details(data);
      } else {
        $.toaster({
          priority: "danger",
          title: "Success!",
          message: "" + "</br> No Records Found...",
        });
      }
    },
  });
}

function set_advance_refund_details(advance_details) {
  $("#receipt_refund").modal("toggle");

  $("#receipt_refund .modal-body").find("#refund_list tbody").empty();

  html = "";

  $.each(advance_details, function (key, items) {
    html +=
      "<tr>" +
      '<td><input type="checkbox" class="id_issue_receipt"  name="refund[id_issue_receipt]" value="' +
      items.id_issue_receipt +
      '">' +
      '<td><div value="' +
      items.bill_no +
      '">' +
      items.bill_no +
      "</div></td>" +
      '<td><div class="advance_amount" >' +
      items.amount +
      "</div></td>" +
      '<td><input type="number" class="form-control issue_amount"  readonly></td>' +
      "</tr>";
  });

  $("#refund_list > tbody").append(html);
}

$("#close_receipt_refund").on("click", function (e) {
  $("#receipt_refund .modal-body").find("#refund_list tbody").empty();

  $(".total_refund_amt").html("");
});

$(document).on("change", ".id_issue_receipt", function (e) {
  var row = $(this).closest("tr");

  var advance_amount = row.find(".advance_amount").html();

  if (row.find(".id_issue_receipt").is(":checked")) {
    row.find(".issue_amount").prop("readonly", false);

    row.find(".issue_amount").val(advance_amount);
  } else {
    row.find(".issue_amount").prop("readonly", true);

    row.find(".issue_amount").val(0);
  }

  calculate_advance_refund_amount();
});

$(document).on("keyup", ".issue_amount", function (e) {
  var row = $(this).closest("tr");

  var advance_amount = row.find(".advance_amount").html();

  var issue_amount = row.find(".issue_amount").val();

  if (parseFloat(advance_amount) < parseFloat(issue_amount)) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Enter The Valid Adjusted Amount..",
    });

    row.find(".issue_amount").val(0);
  } else {
    calculate_advance_refund_amount();
  }
});

function calculate_advance_refund_amount() {
  refund_amt = 0;

  $("#receipt_refund .modal-body #refund_list > tbody  > tr").each(function (
    index,
    tr
  ) {
    var row = $(this).closest("tr");

    if (row.find(".id_issue_receipt").is(":checked")) {
      refund_amt +=
        isNaN(row.find(".issue_amount").val()) ||
        row.find(".issue_amount").val() == ""
          ? 0
          : parseFloat(row.find(".issue_amount").val());
    }
  });

  $(".total_refund_amt").html(parseFloat(refund_amt).toFixed(2));
}

$("#add_receipt_refund").on("click", function (e) {
  var final_refund_amt = parseInt($(".total_refund_amt").html());

  $("#issue_amount").val(final_refund_amt);

  $(".pay_to_cus").val(final_refund_amt);

  $("#receipt_refund").modal("hide");

  var advance_refund = [];

  $("#receipt_refund .modal-body #refund_list > tbody  > tr").each(function (
    index,
    tr
  ) {
    if ($(this).find(".id_issue_receipt").is(":checked")) {
      advance_refund.push({
        id_issue_receipt: $(this).find(".id_issue_receipt").val(),

        amount: $(this).find(".issue_amount").val(),
      });
    }
  });

  console.log(advance_refund);

  $("#multiple_receipt_id").val(
    advance_refund.length > 0 ? JSON.stringify(advance_refund) : ""
  );

  calculateIssueAmount();
});

//advance refund

function get_account_head() {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_account_head?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    type: "GET",

    dataType: "JSON",

    success: function (data) {
      account_details = data;

      $("#acc_head option").remove();

      var id_acc_head = $("#id_acc_head").val();

      $.each(data, function (key, item) {
        $("#acc_head").append(
          $("<option></option>")
            .attr("value", item.id_acc_head)

            .text(item.name)
        );
      });

      $("#acc_head").select2({
        placeholder: "Select Account Head",

        allowClear: true,
      });

      $("#acc_head").select2(
        "val",
        id_acc_head != "" && id_acc_head > 0 ? id_acc_head : ""
      );

      $(".overlay").css("display", "none");
    },

    error: function (error) {},
  });
}

$("#acc_head").on("change", function () {
  if (this.value != "") {
    $("#id_acc_head").val(this.value);
  } else {
    $("#id_acc_head").val("");
  }
});

$("#issue_amount").on("keyup", function (e) {
  $(".pay_to_cus").val(parseFloat(this.value).toFixed(2));

  calculateIssueAmount();
});

$("#cash_pay").on("keyup", function (e) {
  if (
    parseFloat($("#cash_pay").val()) >=
      parseFloat($("#max_return_amt").val()) &&
    $("#is_eda").val() == 1
  ) {
    alert("Maximum Cash Return Amount is " + $("#max_return_amt").val());

    $("#cash_pay").val(0);
  }

  calculateIssueAmount();
});

function calculateIssueAmount() {
  var issue_amount = $(".pay_to_cus").val();

  var cash_pay = $("#cash_pay").val() == "" ? 0 : $("#cash_pay").val();

  var cc = $(".CC").html() != "" ? $(".CC").html() : 0;

  var dc = $(".DC").html() != "" ? $(".DC").html() : 0;

  var chq = $(".CHQ").html() != "" ? $(".CHQ").html() : 0;

  var NB = $(".NB").html() != "" ? $(".NB").html() : 0;

  var final_price = 0;

  var balance_amount = 0;

  final_price = parseFloat(
    parseFloat(cash_pay) +
      parseFloat(NB) +
      parseFloat(cc) +
      parseFloat(dc) +
      parseFloat(chq)
  ).toFixed(2);

  balance_amount = parseFloat(
    isNaN(parseFloat(issue_amount) - parseFloat(final_price))
      ? 0
      : parseFloat(issue_amount) - parseFloat(final_price)
  ).toFixed(2);

  $(".total_issue_amt").html(parseFloat(final_price).toFixed(2));

  if (parseFloat(final_price) == parseFloat(issue_amount).toFixed(2)) {
    $("#save_issue").prop("disabled", false);
  } else {
    $("#save_issue").prop("disabled", true);
  }

  $(".issue_bal_amount").html(balance_amount);
}

// issue

$("#add_issue_card").on("click", function () {
  var card_payment = [];

  if (validateCardDetailRow()) {
    $("#card-detail-modal .modal-body #card_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".card_amt").val() != "") {
          card_payment.push({
            card_name: $(this).find(".card_name").val(),
            card_type: $(this).find(".card_type").val(),
            card_no: $(this).find(".card_no").val(),
            card_amt: $(this).find(".card_amt").val(),
            ref_no: $(this).find(".ref_no").val(),
          });
        }
      }
    );

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".CC").html($(".cc_total_amt").html());

      bill_card_pay_row.find(".DC").html($(".dc_total_amt").html());

      bill_card_pay_row
        .find("#card_payment")
        .val(card_payment.length > 0 ? JSON.stringify(card_payment) : "");
    });

    $("#card-detail-modal").modal("toggle");

    calculateIssueAmount();
  } else {
    alert("Please fill required fields");
  }
});

$("#save_issue_chq").on("click", function () {
  var chq_payment = [];

  if (validateChqDetailRow()) {
    canCloseChqModal = true;

    $("#cheque-detail-modal .modal-body #chq_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".payment_amount").val() != "") {
          chq_payment.push({
            cheque_date: $(this).find(".cheque_deposit_date").val(),
            cheque_no: $(this).find(".cheque_no").val(),
            id_bank: $(this).find(".id_bank").val(),
            bank_branch: $(this).find(".bank_branch").val(),
            bank_name: $(this).find(".bank_name").val(),
            payment_amount: $(this).find(".payment_amount").val(),
          });
        }
      }
    );

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".CHQ").html($(".chq_total_amount").html());

      bill_card_pay_row
        .find("#chq_payment")
        .val(chq_payment.length > 0 ? JSON.stringify(chq_payment) : "");
    });

    $('#cheque-detail-modal').modal('hide');

    // $("#cheque-detail-modal").modal("toggle");

    calculateIssueAmount();
  } else {
    alert("Please fill required fields");
  }
});

$("#save_issue_net_banking").on("click", function () {
  var nb_payment = [];

  if (validateNBDetailRow()) {
    canCloseNBModal = true;

    $("#net_banking_modal .modal-body #net_bank_details > tbody  > tr").each(
      function (index, tr) {
        if (
          $(this).find(".amount").val() != "" &&
          $(this).find(".amount").val() != undefined
        ) {
          nb_payment.push({
            nb_type: $(this).find(".nb_type").val(),
            nb_date: $(this).find(".nb_date").val(),
            id_bank: $(this).find(".id_bank").val(),
            amount: $(this).find(".amount").val(),
            ref_no: $(this).find(".ref_no").val(),
            payment_date: $(this).find(".nb_payment_date").val(),
          });
        }
      }
    );

    console.log(nb_payment);

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".NB").html($(".nb_total_amount").html());

      bill_card_pay_row.find("#nb_payment").val("");

      bill_card_pay_row
        .find("#nb_payment")
        .val(nb_payment.length > 0 ? JSON.stringify(nb_payment) : "");
    });

    // $('#net_banking_modal').modal('toggle');

		$('#net_banking_modal').modal('hide');

    calculateIssueAmount();
  } else {
    alert("Please fill required fields");
  }
});

//receipt
/*
$("input[name='receipt[receipt_type]']:radio").on('change', function () {

	$('#amount').val(0);

	$('#esti_no').prop('disabled', true);

	$('.is_aganist_est').prop('disabled', true);

	$('#is_aganist_est_no').prop('checked', true);

	$('#amount').prop('readonly', false);

	$('.receive_amount').val(0);

	if ($(this).val() == 1) {

		$('#receipt_for').prop('disabled', false);

		$('.advance_adj').css('display', "block");

		$('#amount').prop('readonly', true);

		if ($('#id_customer').val() != '') {

			get_customer_credit_details($('#id_customer').val());

		}

	}

	else if ($(this).val() == 2) {

		$('.is_aganist_est').prop('disabled', false);

	}

	else {

		$('#receipt_for').prop('disabled', true);

		$('.advance_adj').css('display', "none");

		$('#amount').prop('readonly', false);

	}

	calculate_ReceiptAmount();

});*/

$("input[name='receipt[receipt_type]']:radio").on("change", function () {
  $("#amount").val(0);

  $("#esti_no").prop("disabled", true);

  $(".is_aganist_est").prop("disabled", true);

  $("#is_aganist_est_no").prop("checked", true);

  $("#amount").prop("readonly", false);

  $(".receive_amount").val(0);

  $("#receipt_to_block").css("display", "none");

  if ($(this).val() == 1) {
    $("#receipt_for").prop("disabled", false);

    $(".advance_adj").css("display", "block");

    $("#amount").prop("readonly", true);

    if ($("#id_customer").val() != "") {
      get_customer_credit_details($("#id_customer").val());
    }
  } else if ($(this).val() == 2) {
    $(".is_aganist_est").prop("disabled", false);
  } else if ($(this).val() == 8) {
    $("#receipt_for").prop("disabled", false);

    $(".advance_adj").css("display", "block");

    $("#amount").prop("readonly", true);

    $("#receipt_to_block").css("display", "block");

    $("#id_customer").val("");

    if (
      $("#id_customer").val() != "" ||
      $("#id_employee").val() != "" ||
      $("#id_karigar").val() != ""
    ) {
      get_customer_credit_details($("#id_customer").val());
    }

    if ($("#id_employee").val() == "" && $("#id_karigar").val() == "") {
      $("#name").val("");
    }
  } else {
    $("#receipt_for").prop("disabled", true);

    $(".advance_adj").css("display", "none");

    $("#amount").prop("readonly", false);
  }

  calculate_ReceiptAmount();
});

$("input[name='receipt[is_aganist_est]']:radio").on("change", function () {
  $("#esti_no").prop("disabled", true);

  if ($(this).val() == 1) {
    $("#esti_no").prop("disabled", false);
  }

  calculate_ReceiptAmount();
});

$("#receipt_search").click(function (event) {
  set_receipt_list();
});

/*
function set_receipt_list() {

	my_Date = new Date();

	$("div.overlay").css("display", "block");

	$.ajax({

		url: base_url + "index.php/admin_ret_billing/receipt/ajax?nocache=" + my_Date.getUTCSeconds(),

		dataType: "JSON",

		data: { 'dt_range': $("#dt_range").val(), 'id_branch': ($('#branch_filter').val() != '' && $('#branch_filter').val() != undefined ? $('#branch_filter').val() : $("#branch_select").val()) },

		type: "POST",

		success: function (data) {

			console.log("List", data);

			$("div.overlay").css("display", "none");

			var list = data.list;

			var oTable = $('#receipt_list').DataTable();

			oTable.clear().draw();

			if (list != null && list.length > 0) {

				oTable = $('#receipt_list').dataTable({

					"bDestroy": true,

					"bInfo": true,

					"bFilter": true,

					"order": [[0, "desc"]],

					"scrollX": '100%',

					"bSort": true,

					"dom": 'lBfrtip',

					"aaData": list,

					"aoColumns": [{ "mDataProp": "id_issue_receipt" },

					{ "mDataProp": "type" },

					{ "mDataProp": "name" },

					{ "mDataProp": "date_add" },

					{ "mDataProp": "bill_no" },

					{ "mDataProp": "mobile" },

					{ "mDataProp": "receipt_type" },

					{ "mDataProp": "emp_name" },

					{ "mDataProp": "cus_name" },

					{ "mDataProp": "amount" },

					{ "mDataProp": "weight" },

					{
						"mDataProp": function (row, type, val, meta) {

							if (row.current_status == 1) {

								return 'Used';

							}

							else {

								return row.bill_status;

							}

						}

					},

					{
						"mDataProp": function (row, type, val, meta) {

							id = row.id_issue_receipt;

							var balance_amount = parseFloat(parseFloat(row.amount) - parseFloat(row.utilized_amt) - parseFloat(row.refund_amount)).toFixed(2);

							console.log(balance_amount);

							print_url = base_url + 'index.php/admin_ret_billing/receipt/receipt_print/' + id;

							action_content = '<a href="' + print_url + '" target="_blank" class="btn btn-info btn-print" data-toggle="tooltip" ><i class="fa fa-print" ></i></a>' + (row.allow_cancel == 1 && balance_amount > 0 && row.status == 1 && row.receipt_type != 3 ? '<button class="btn btn-warning" onclick="confirm_cancel(' + id + ')"><i class="fa fa-close" ></i></button>' : '');

							return action_content;

						}

					}

					],

				});

			}

		},

		error: function (error) {

			$("div.overlay").css("display", "none");

		}

	});

}*/

function set_receipt_list() {
  my_Date = new Date();

  $("div.overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/receipt/ajax?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "JSON",

    data: {
      dt_range: $("#dt_range").val(),
      id_employee: $("#emp_select").val(),
      id_karigar: $("#select_karigar").val(),
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
    },

    type: "POST",

    success: function (data) {
      console.log("List", data);

      $("div.overlay").css("display", "none");

      var list = data.list;

      var oTable = $("#receipt_list").DataTable();

      oTable.clear().draw();

      if (list != null && list.length > 0) {
        oTable = $("#receipt_list").dataTable({
          bDestroy: true,

          bInfo: true,

          bFilter: true,

          order: [[0, "desc"]],

          scrollX: "100%",

          bSort: true,

          dom: "lBfrtip",

          aaData: list,

          aoColumns: [
            { mDataProp: "id_issue_receipt" },

            { mDataProp: "date_add" },

            { mDataProp: "bill_no" },

            { mDataProp: "receipt_to" },

            { mDataProp: "r_type" },

            { mDataProp: "name" },

            { mDataProp: "cus_name" },

            { mDataProp: "employee_name" },

            { mDataProp: "karigar_name" },

            { mDataProp: "mobile" },

            { mDataProp: "amount" },

            { mDataProp: "weight" },

            {
              mDataProp: function (row, type, val, meta) {
                if (row.current_status == 1) {
                  return "Used";
                } else {
                  return row.bill_status;
                }
              },
            },

            { mDataProp: "narration" },

            {
              mDataProp: function (row, type, val, meta) {
                id = row.id_issue_receipt;

                var balance_amount = parseFloat(
                  parseFloat(row.amount) -
                    parseFloat(row.utilized_amt) -
                    parseFloat(row.refund_amount)
                ).toFixed(2);

                console.log(balance_amount);

                print_url =
                  base_url +
                  "index.php/admin_ret_billing/receipt/receipt_print/" +
                  id;

                action_content =
                  '<a href="' +
                  print_url +
                  '" target="_blank" class="btn btn-info btn-print" data-toggle="tooltip" ><i class="fa fa-print" ></i></a>' +
                  (row.allow_cancel == 1 &&
                  balance_amount > 0 &&
                  row.status == 1 &&
                  row.receipt_type != 3
                    ? '<button class="btn btn-warning" onclick="confirm_cancel(' +
                      id +
                      ')"><i class="fa fa-close" ></i></button>'
                    : "");

                return action_content;
              },
            },
          ],

          footerCallback: function (row, data, start, end, display) {
            if (data.length > 0) {
              var api = this.api(),
                data;
              for (var i = 0; i <= data.length - 1; i++) {
                var intVal = function (i) {
                  return typeof i === "string"
                    ? i.replace(/[\$,]/g, "") * 1
                    : typeof i === "number"
                    ? i
                    : 0;
                };
                $(api.column(0).footer()).html("Total");
                total_amount = api
                  .column(10)
                  .data()
                  .reduce(function (a, b) {
                    return intVal(a) + intVal(b);
                  }, 0);
                $(api.column(10).footer()).html(
                  parseFloat(total_amount).toFixed(2)
                );

                total_wt = api
                  .column(11)
                  .data()
                  .reduce(function (a, b) {
                    return intVal(a) + intVal(b);
                  }, 0);
                $(api.column(11).footer()).html(
                  parseFloat(total_wt).toFixed(2)
                );
              }
            } else {
              var api = this.api(),
                data;
              $(api.column(11).footer()).html("");
              $(api.column(10).footer()).html("");
            }
          },
        });
      }
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

function confirm_cancel(bill_id) {
  $("#receipt_bill_id").val(bill_id);

  console.log($("#receipt_bill_id").val());

  $("#confirm_receipt").modal("show");
}

$("#cancel_receipt").on("click", function () {
  $("#cancel_receipt").prop("disabled", true);

  my_Date = new Date();

  $.ajax({
    type: "POST",

    url:
      base_url +
      "index.php/admin_ret_billing/receipt/cancel?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    data: { id_issue_receipt: $("#receipt_bill_id").val() },

    success: function (data) {
      $("#confirm_receipt").modal("toggle");

      $.toaster({
        priority: "success",
        title: "Success!",
        message: "" + "</br> Receipt Cancelled SuccessFully...",
      });

      window.location.reload();
    },
  });
});

$("#receipt_for").on("keyup", function (e) {
  var credit_no = $("#receipt_for").val();

  $("#creditAlert").html("");

  if (credit_no.length >= 1) {
    get_creditBill(credit_no);
  }
});

function get_creditBill(searchTxt) {
  var id_branch = $("#branch_select").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/receipt/credit_bill/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { searchTxt: searchTxt, id_branch: id_branch },

    success: function (data) {
      $("#receipt_for").autocomplete({
        source: data,

        select: function (e, i) {
          e.preventDefault();

          $("#receipt_for").val(i.item.label);

          $("#receipt_ref_id").val(i.item.value);

          $(".receive_amount").val(
            parseFloat(i.item.amount) - parseFloat(i.item.paid_amount)
          );

          $("#due_amount").val(i.item.amount);

          $("#paid_amount").val(i.item.paid_amount);
        },

        change: function (event, ui) {
          if (ui.item === null) {
            $(this).val("");

            $("#name").val("");

            $("#id_employee").val("");

            $("#id_customer").html("");
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (searchTxt != "") {
            if (i.content.length === 0) {
              $("#creditAlert").html(
                '<p style="color:red">Enter a Valid Credit No</p>'
              );
            } else {
              $("#creditAlert").html("");
            }
          } else {
          }
        },

        minLength: 1,
      });
    },
  });
}

$("#est_search").on("click", function () {
  $("#searchEstiAlert").html("");

  $("#branchAlert").html("");

  if ($("#branch_select").val() == null) {
    $.toaster({
      priority: "danger",
      title: "Success!",
      message: "" + "</br> Please Select Branch...",
    });
  } else if ($("#esti_no").val() != "") {
    getEstDetailsTags($("#esti_no").val());
  }
});

function getEstDetails(esti_no) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getEstimationDetails/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      estId: esti_no,
      billType: 4,
      id_branch: $("#branch_select").val(),
      order_no: "",
    }, //Need to update login branch id here from session

    success: function (data) {
      if (data.success == true) {
        // ESTIMATION PURCHASE ITEMS

        if (data.responsedata.old_matel_details.length > 0) {
          var rowExist = false;

          $("#purchase_item_details tbody").empty();

          $("#name").val(data.responsedata.old_matel_details[0].cus_name);

          $("#id_customer").val(
            data.responsedata.old_matel_details[0].id_customer
          );

          $.each(
            data.responsedata.old_matel_details,
            function (estkey, estval) {
              $("#purchase_item_details > tbody tr").each(function (
                bidx,
                brow
              ) {
                bill_pur_row = $(this);

                if (
                  estval.old_metal_sale_id ==
                  bill_pur_row.find(".old_metal_sale_id").val()
                ) {
                  rowExist = true;
                }
              });

              if (!rowExist) {
                var stone_details = [];

                var other_stone_wt = 0;

                var other_stone_price = 0;

                $.each(estval.stone_details, function (key, item) {
                  stone_details.push({
                    est_old_metal_stone_id: item.est_old_metal_stone_id,
                    stone_id: item.stone_id,
                    stone_pcs: item.pieces,
                    stone_wt: item.wt,
                    stone_price: item.price,
                  });

                  other_stone_wt += parseFloat(item.wt);

                  other_stone_price += parseFloat(item.price);
                });

                var row =
                  "<tr>" +
                  "<td><span>" +
                  (estval.purpose == 1 ? "Cash" : "Exchange") +
                  '</span><input type="hidden" class="est_purpose" name="purchase[purpose][]" value="' +
                  estval.purpose +
                  '" /><input type="hidden" class="esti_detail_id" name="purchase[old_metal_sale_id][]" value="' +
                  estval.old_metal_sale_id +
                  '" /><input type="hidden" class="est_id_metal" name="purchase[id_metal][]" value="' +
                  estval.id_metal +
                  '" /><input type="hidden" class="est_item_type" name="purchase[item_type][]" value="' +
                  estval.item_type +
                  '" /></td>' +
                  '<td><span class="est_old_item_metal">' +
                  estval.metal +
                  '</span><input type="hidden" class="est_old_item_cat_id" name="purchase[id_category][]" value="' +
                  estval.id_category +
                  '"  /></td>' +
                  '<td><span class="est_old_itm_gross_wt">' +
                  estval.gross_wt +
                  '</span><input type="hidden" class="est_old_gross_val" name="purchase[gross_wt][]" value="' +
                  estval.gross_wt +
                  '"  /></td>' +
                  '<td><span class="esti_old_dust_wt">' +
                  estval.dust_wt +
                  '</span><input type="hidden" class="est_old_dust_val" value="' +
                  estval.dust_wt +
                  '" name="purchase[dust_wt][]" /><input type="hidden" class="est_old_item_less_wt" value="' +
                  estval.less_wt +
                  '"  name="purchase[less_wt][]" /></td>' +
                  '<td><span class="esti_old_stn_wt">' +
                  estval.stone_wt +
                  '</span><input type="hidden" class="est_old_stone_val" name="purchase[stone_wt][]" value="' +
                  estval.stone_wt +
                  '"  /><input type="hidden" class="other_stone_wt" value="' +
                  other_stone_wt +
                  '"  name="purchase[other_stone_wt][]"/><input type="hidden" class="other_stone_price" value="' +
                  other_stone_price +
                  '"   name="purchase[other_stone_price][]" /></td>' +
                  '<td><span class="est_old_net_wt">' +
                  estval.net_wt +
                  '</span><input type="hidden" class="est_old_net_val" value="' +
                  estval.net_wt +
                  '"   name="purchase[net_wt][]"/></td>' +
                  '<td><span class="est_old_wastage">' +
                  parseFloat(estval.wastage_percent) +
                  '</span><input type="hidden" class="est_old_wastage_percent" name="purchase[wastage_percent][]" value="' +
                  parseFloat(estval.wastage_percent) +
                  '"  /></td>' +
                  '<td><span class="est_old_wastage_wt">' +
                  parseFloat(estval.wastage_wt) +
                  '</span><input type="hidden" class="est_old_wastage_val" value="' +
                  parseFloat(estval.wastage_wt) +
                  '" name="purchase[wastage_wt][]" /></td>' +
                  '<td><span class="est_old_rate_per_gram">' +
                  parseFloat(estval.rate_per_gram) +
                  '</span><input type="hidden" class="est_old_rate_per_gram_val" value="' +
                  parseFloat(estval.rate_per_gram) +
                  '"  name="purchase[rate_per_gram][]" /></td>' +
                  '<td><span class="est_old_amount">' +
                  estval.amount +
                  '</span><input type="hidden" class="est_old_item_amount_val" value="' +
                  estval.amount +
                  '" name="purchase[amount][]" /><input type="hidden" value=' +
                  JSON.stringify(stone_details) +
                  ' class="est_item_stone_dt" /><input type="hidden" class="est_stone_price" value="' +
                  estval.stone_price +
                  '"  /></td>' +
                  '<td><span class="est_old_est_id">' +
                  parseFloat(estval.est_id) +
                  '</span><input type="hidden" class="est_old_est_id_val" value="' +
                  parseFloat(estval.est_id) +
                  '"  /></td>' +
                  '<td><a href="#" onClick="remove_receipt($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
                  "</tr>";

                $("#purchase_item_details tbody").append(row);
              }
            }
          );

          calculate_receipt_item_price();
        } else {
          $("#purchase_item_details tbody").empty();
        }
      } else {
        //$("div.overlay").css("display", "none");

        $("#searchEstiAlert").html(data.message);
      }
    },
  });
}

function getEstDetailsTags(esti_no) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getEstimationDetailsTags/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      estId: esti_no,
      billType: 5,
      id_branch: $("#branch_select").val(),
      order_no: "",
    }, //Need to update login branch id here from session

    success: function (data) {
      if (data.success == true) {
        // ESTIMATION PURCHASE ITEMS

        if (data.responsedata.item_details.length > 0) {
          var rowExist = false;

          $("#sales_item_details tbody").empty();

          $("#name").val(data.responsedata.item_details[0].cus_name);

          $("#id_customer").val(data.responsedata.item_details[0].id_customer);

          $.each(data.responsedata.item_details, function (estkey, estval) {
            $("#sales_item_details > tbody tr").each(function (bidx, brow) {
              bill_pur_row = $(this);

              if (estval.esti_id == bill_pur_row.find(".esti_id").val()) {
                rowExist = true;
              }
            });

            if (!rowExist) {
              var stone_details = [];

              var other_stone_wt = 0;

              var other_stone_price = 0;

              $.each(estval.stone_details, function (key, item) {
                stone_details.push({
                  est_old_metal_stone_id: item.est_old_metal_stone_id,
                  stone_id: item.stone_id,
                  stone_pcs: item.pieces,
                  stone_wt: item.wt,
                  stone_price: item.price,
                });

                other_stone_wt += parseFloat(item.wt);

                other_stone_price += parseFloat(item.price);
              });

              var row =
                "<tr>" +
                '<td><input type="hidden" class="esti_sale_id" name="estsales[esti_detail_id][]" value="' +
                estval.esti_id +
                '" /><input type="hidden" class="est_item_type" name="estsales[item_type][]" value="' +
                estval.item_type +
                '" />' +
                estval.tag_code +
                "</td>" +
                '<td><input type="hidden" class="esti_sale_tag_id" name="estsales[tag_id][]" value="' +
                estval.tag_id +
                '"  />' +
                estval.product_name +
                "</td>" +
                '<td><span class="esti_sale_grs_wt">' +
                estval.gross_wt +
                '</span><input type="hidden" class="esti_sale_gross_val" name="estsales[gross_wt][]" value="' +
                estval.gross_wt +
                '"  /></td>' +
                '<td><span class="esti_sale_ls_wt">' +
                estval.less_wt +
                '</span><input type="hidden" class="esti_sale_less_wt_val" value="' +
                estval.less_wt +
                '" name="estsales[less_wt][]" /></td>' +
                '<td><span class="esti_sale_net_wt">' +
                estval.net_wt +
                '</span><input type="hidden" class="esti_sale_net_val" value="' +
                estval.net_wt +
                '"  name="estsales[net_wt][]"/></td>' +
                '<td><span class="est_old_wastage">' +
                parseFloat(estval.wastage_percent) +
                '</span><input type="hidden" class="est_old_wastage_percent" name="estsales[wastage_percent][]" value="' +
                parseFloat(estval.wastage_percent) +
                '"  /></td>' +
                '<td><span class="est_cost">' +
                estval.est_cost +
                '</span><input type="hidden" class="est_old_item_amount_val" value="' +
                estval.est_cost +
                '" name="estsales[amount][]" /><input type="hidden" value=' +
                JSON.stringify(stone_details) +
                ' class="est_item_stone_dt" /><input type="hidden" class="est_stone_price" value="' +
                estval.stone_price +
                '"  /></td>' +
                '<td><a href="#" onClick="remove_receipt($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
                "</tr>";

              $("#sales_item_details tbody").append(row);
            }
          });

          calculate_receipt_item_price();
        } else {
          $("#sales_item_details tbody").empty();
        }
      } else {
        //$("div.overlay").css("display", "none");

        $("#searchEstiAlert").html(data.message);
      }
    },
  });
}

function remove_receipt(curRow) {
  curRow.remove();

  calculate_receipt_item_price();
}

$(".cash_pay ,.receive_amount").on("keyup", function () {
  calculate_ReceiptAmount();
});

$("#amount").on("keyup", function () {
  $(".receive_amount").val(this.value);

  calculate_ReceiptAmount();
});

function calculate_receipt_item_price() {
  var item_price = 0;

  $("#sales_item_details > tbody tr").each(function (idx, row) {
    curRow = $(this);

    if (curRow.find(".esti_sale_tag_id").val() != "") {
      item_price += parseFloat(curRow.find(".est_cost").html());
    }
  });

  $("#amount").val(parseFloat(Math.round(item_price)).toFixed(2));

  $(".receive_amount").val(parseFloat(Math.round(item_price)).toFixed(2));

  calculate_ReceiptAmount();
}

function calculate_ReceiptAmount() {
  var receipt_type = $(
    "input:radio[name='receipt[receipt_type]']:checked"
  ).val();

  var receive_amount = parseFloat($(".receive_amount").val());

  var cc = $(".CC").html() != "" ? $(".CC").html() : 0;

  var dc = $(".DC").html() != "" ? $(".DC").html() : 0;

  var chq = $(".CHQ").html() != "" ? $(".CHQ").html() : 0;

  var NB = $(".NB").html() != "" ? $(".NB").html() : 0;

  var advance_adj_amt =
    $("#tot_adv_adj").html() != "" ? $("#tot_adv_adj").html() : 0;

  var cash = $("#make_pay_cash").val() != "" ? $("#make_pay_cash").val() : 0;

  var pay_amount =
    parseFloat(cash) +
    parseFloat(cc) +
    parseFloat(dc) +
    parseFloat(chq) +
    parseFloat(NB) +
    parseFloat(advance_adj_amt);

  $(".receipt_total_amount").html(pay_amount.toFixed(2));

  $(".receipt_bal_amount").html(
    parseFloat(
      isNaN(parseFloat(receive_amount) - parseFloat(pay_amount))
        ? 0
        : parseFloat(receive_amount) - parseFloat(pay_amount).toFixed(2)
    )
  );

  if (
    $("#is_pan_required").val() == 1 &&
    parseFloat($("#min_pan_amt").val()) <= parseFloat(receive_amount)
  ) {
    //$('#pan_no').prop('readonly',false);
    //$('#pan_images').prop('disabled',false);
  } else {
    /*	$('#pan_no').prop('readonly',true);

			$('#pan_images').prop('disabled',true);*/
  }

  if ($(".receipt_bal_amount").html() == 0) {
    if ($("#min_pan_amt").val() <= receive_amount && $("#is_eda").val() != 2) {
      if ($("#is_pan_required").val() == 1 && $("#pan_no").val() == "") {
        $("#save_receipt").prop("disabled", true);
      } else {
        $("#save_receipt").prop("disabled", false);
      }
    } else {
      $("#save_receipt").prop("disabled", false);
    }
  } else {
    $("#save_receipt").prop("disabled", true);
  }
}

$("#save_receipt").on("click", function () {
  var form_data = $("#receipt_billing").serialize();

  var receipt_type = $(
    "input:radio[name='receipt[receipt_type]']:checked"
  ).val();

  var allow_submit = true;

  /*	if($('#amount').val()=='' || $('#amount').val()==0)

		{

			$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>"+"Please Select The Credit Details.."});

			allow_submit=false;

		}

		else */

  if (
    $("#id_customer").val() == "" &&
    $("#id_karigar").val() == "" &&
    $("#id_employee").val() == ""
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Select Customer..",
    });

    allow_submit = false;
  } else if (
    $("#id_branch").val() == "" ||
    $("#id_branch").val() == 0 ||
    $("#id_branch").val() == null
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Invalid Branch..",
    });

    allow_submit = false;
  }

  if (ctrl_page[1] == "receipt" && $("#is_eda").val() == 1) {
    let max_cash_valid = validate_max_cash_for_receipt();

    if (max_cash_valid == false) {
      allow_submit = false;
    }
  }

  if (allow_submit) {
    $("#save_receipt").prop("disabled", true);

    var url =
      base_url +
      "index.php/admin_ret_billing/receipt/save?nocache=" +
      my_Date.getUTCSeconds();

    $.ajax({
      url: url,

      data: form_data,

      type: "POST",

      dataType: "JSON",

      success: function (data) {
        if (data.status) {
          window.open(
            base_url +
              "index.php/admin_ret_billing/receipt/receipt_print/" +
              data["id"],
            "_blank"
          );
        }

        window.location.reload();

        $("div.overlay").css("display", "none");
      },

      error: function (error) {
        $("div.overlay").css("display", "none");
      },
    });
  }
});

$("#add_card").on("click", function () {
  var card_payment = [];

  if (validateCardDetailRow()) {

    canCloseCardModal = true;

    var cc_total_amt = 0;

    var dc_total_amt = 0;

    $("#card-detail-modal .modal-body #card_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".card_amt").val() != "") {
          if ($(this).find(".card_type").val() == 1) {
            cc_total_amt += parseFloat($(this).find(".card_amt").val());
          } else if ($(this).find(".card_type").val() == 2) {
            dc_total_amt += parseFloat($(this).find(".card_amt").val());
          }

          card_payment.push({
            card_name: $(this).find(".card_name").val(),
            card_type: $(this).find(".card_type").val(),
            id_device: $(this).find(".id_device").val(),
            card_no: $(this).find(".card_no").val(),
            card_amt: $(this).find(".card_amt").val(),
            ref_no: $(this).find(".ref_no").val(),
          });
        }
      }
    );

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".CC").html(parseFloat(cc_total_amt).toFixed(2));

      bill_card_pay_row.find(".DC").html(parseFloat(dc_total_amt).toFixed(2));

      bill_card_pay_row
        .find("#card_payment")
        .val(card_payment.length > 0 ? JSON.stringify(card_payment) : "");
    });

    $('#card-detail-modal').modal('hide');

    calculate_ReceiptAmount();
  } else {
    alert("Please fill required fields");
  }
});

$("#save_chq").on("click", function () {
  var chq_payment = [];
  if (validateChqDetailRow()) {
    $("#cheque-detail-modal .modal-body #chq_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".payment_amount").val() != "") {
          chq_payment.push({
            cheque_date: $(this).find(".cheque_date").val(),
            cheque_no: $(this).find(".cheque_no").val(),
            id_bank: $(this).find(".id_bank").val(),
            bank_branch: $(this).find(".bank_branch").val(),
            bank_name: $(this).find(".bank_name").val(),
            payment_amount: $(this).find(".payment_amount").val(),
          });
        }
      }
    );

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".CHQ").html($(".chq_total_amount").html());

      bill_card_pay_row
        .find("#chq_payment")
        .val(chq_payment.length > 0 ? JSON.stringify(chq_payment) : "");
    });

    $("#cheque-detail-modal").modal("toggle");

    $("#cheque-detail-modal .btn-close").trigger("click");

    calculate_ReceiptAmount();
  } else {
    alert("Please fill required fields");
  }
});

$("#save_net_banking").on("click", function () {
  var nb_payment = [];

  if (validateNBDetailRow()) {

    canCloseNBModal = true;

    $("#net_banking_modal .modal-body #net_bank_details > tbody  > tr").each(
      function (index, tr) {
        if (
          $(this).find(".amount").val() != "" &&
          $(this).find(".amount").val() != undefined
        ) {
          nb_payment.push({
            nb_type: $(this).find(".nb_type").val(),
            nb_date: $(this).find(".nb_date").val(),
            id_bank: $(this).find(".id_bank").val(),
            id_device: $(this).find(".id_device").val(),
            amount: $(this).find(".amount").val(),
            ref_no: $(this).find(".ref_no").val(),
            payment_date: $(this).find(".nb_payment_date").val(),
          });
        }
      }
    );

    console.log(nb_payment);

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".NB").html($(".nb_total_amount").html());

      bill_card_pay_row.find("#nb_payment").val("");

      bill_card_pay_row
        .find("#nb_payment")
        .val(nb_payment.length > 0 ? JSON.stringify(nb_payment) : "");
    });

    $("#net_banking_modal").modal("hide");

    calculate_ReceiptAmount();
  } else {
    alert("Please fill required fields");
    return;
  }
});

//Net banking

//advance adj

function get_receipt_advance_details() {
  $("#bill_adv_adj > tbody").empty();

  var bill_cus_id = $("#id_customer").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_advance_details/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      bill_cus_id: bill_cus_id,
      is_eda: $("#is_eda").val(),
      id_branch: $("#id_branch").val(),
    },

    success: function (data) {
      rec_id_ret_wallet = data[0].id_ret_wallet;

      total_sum_adjusted_bill_amount = 0;

      $.each(data, function (key, items) {
        total_sum_adjusted_bill_amount += parseInt(
          parseFloat(items.amount).toFixed(2)
        );
      });

      if (total_sum_adjusted_bill_amount > 0) {
        $("#adv-adj-confirm-add").modal("show");

        var row = "";

        var html = "";

        var metal_rate = $(".per-grm-sale-value").html();

        var weight_amt = parseFloat(data.weight * data.rate_per_gram);

        $("#id_ret_wallet").val(data.id_ret_wallet);

        $.each(data, function (key, items) {
          html +=
            "<tr>" +
            '<td><input type="checkbox" class="bill_id_issue_receipt"  name="adv_adj[id_issue_receipt]" value="' +
            items.id_issue_receipt +
            '"><input type="hidden" class="id_ret_wallet" value="' +
            items.id_ret_wallet +
            '"></td>' +
            '<td><div class="adv_bill_no" value="' +
            items.bill_no +
            '">' +
            items.bill_no +
            "</div></td>" +
            '<td><div class="advance_amount" >' +
            items.amount +
            "</div></td>" +
            '<td><input type="number" class="form-control adj_amount" name="adv_adj[adj_amount]" ></td>' +
            '<td><input type="number" class="form-control blc_amount" name="adv_adj[blc_amount]" readonly></td>' +
            "</tr>";
        });

        $(".total_adv_amt").html(
          parseFloat(total_sum_adjusted_bill_amount).toFixed(2)
        );

        $(".total_bill_amt").html(
          parseFloat($(".receive_amount ").val()).toFixed(2)
        );

        $("#bill_adv_adj > tbody").append(html);
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>" + "Your Wallet Amount is 0",
        });
      }
    },
  });
}

$(document).on("change", ".bill_id_issue_receipt", function (e) {
  var row = $(this).closest("tr");

  var advance_amount = row.find(".advance_amount").html();

  let rate_calc = row.find(".rate_calc").val();

  // 		row.find('.adj_amount').attr('readonly',true);

  if (rate_calc != 0) {
    var advance_amount = row.find(".advance_amount").html();
    row.find(".advance_weight").attr("readonly", false);
  } else {
    var advance_amount = row.find(".advance_amount").html();
    row.find(".adj_amount").attr("readonly", true);
  }

  if (row.find(".bill_id_issue_receipt").is(":checked")) {
    if (rate_calc != 0) {
      row.find(".adj_amount").attr("readonly", true);

      row.find(".adj_amount").val(parseFloat(advance_amount).toFixed(2));
    } else {
      row.find(".adj_amount").attr("readonly", false);

      row.find(".adj_amount").val(parseFloat(advance_amount).toFixed(2));
    }
  } else {
    row.find(".adj_amount").val(0);
  }

  if (ctrl_page[1] == "bill_split") {
    calculate_split_payment_amount();
  } else {
    calculate_advance_adjust_amount();
  }
});

function calculate_advance_adjust_amount() {
  adjusted_amt = 0;

  balance_amt = 0;

  $("#adv-adj-confirm-add .modal-body #bill_adv_adj > tbody  > tr").each(
    function (index, tr) {
      var row = $(this).closest("tr");

      if (row.find(".bill_id_issue_receipt").is(":checked")) {
        adjusted_amt +=
          isNaN(row.find(".adj_amount").val()) ||
          row.find(".adj_amount").val() == ""
            ? 0
            : parseFloat(row.find(".adj_amount").val());

        balance_amt +=
          isNaN(row.find(".blc_amount").val()) ||
          row.find(".blc_amount").val() == ""
            ? 0
            : parseFloat(row.find(".blc_amount").val());
      }
    }
  );

  $(".total_adj_adv_amt").html(parseFloat(adjusted_amt).toFixed(2));

  $(".total_blc_amt").html(parseFloat(balance_amt).toFixed(2));
}

$(document).on("keyup", ".adj_amount", function (e) {
  var row = $(this).closest("tr");

  var advance_amount = parseFloat(row.find(".advance_amount").html());

  if (
    row.find(".adj_amount").val() != "" &&
    row.find(".adj_amount").val() > 0
  ) {
    row.find(".bill_id_issue_receipt").prop("checked", true);

    if (
      parseFloat(advance_amount) < parseFloat(row.find(".adj_amount").val())
    ) {
      row.find(".bill_id_issue_receipt").prop("checked", false);

      row.find(".adj_amount").val(0);

      row.find(".blc_amount").val(0);

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Your Receipt Amount Exceed",
      });
    } else {
      row.find(".bill_id_issue_receipt").prop("checked", true);

      row
        .find(".blc_amount")
        .val(
          parseFloat(
            parseFloat(advance_amount) -
              parseFloat(row.find(".adj_amount").val())
          ).toFixed(2)
        );
    }
  } else {
    row.find(".bill_id_issue_receipt").prop("checked", false);

    row.find(".adj_amount").val(0);

    row.find(".blc_amount").val(0);
  }

  calculate_advance_adjust_amount();
});

$('input[type=radio][name="receipt[receipt_as]"]').change(function () {
  if (this.value == 1) {
    $("#esti_no").prop("disabled", true);
  } else {
    $("#esti_no").prop("disabled", false);
  }
});

$('input[type=radio][name="store_receipt_as"]').change(function () {
  var metal_rate = $(".per-grm-sale-value").html();

  if (adv_adj_details.length > 0) {
    adv_adj_details[0].store_receipt_as = this.value;

    if (this.value == 1) {
      adv_adj_details[0].wallet_blc = $(".excess_amt").html();
    } else {
      adv_adj_details[0].wallet_blc = parseFloat(
        $(".excess_amt").html() / metal_rate
      ).toFixed(4);
    }
  }

  console.log(adv_adj_details);
});

$("#save_receipt_adv_adj").on("click", function (e) {
  var total_adj_adv_amt = $(".total_adj_adv_amt").html();

  var total_bill_amt = $(".total_bill_amt").html();

  if (parseFloat(total_bill_amt) < parseFloat(total_adj_adv_amt)) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Enter The Valid Adjusted Amount",
    });
  } else {
    var advance_adj = [];

    $("#adv-adj-confirm-add .modal-body #bill_adv_adj > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".bill_id_issue_receipt").is(":checked")) {
          advance_adj.push({
            id_issue_receipt: $(this).find(".bill_id_issue_receipt").val(),

            adj_amount: $(this).find(".adj_amount").val(),

            blc_amount: $(this).find(".blc_amount").val(),
          });
        }
      }
    );

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row
        .find("#tot_adv_adj")
        .html($(".total_adj_adv_amt").html());

      $("#advance_muliple_receipt").val(
        advance_adj.length > 0 ? JSON.stringify(advance_adj) : ""
      );

      bal_excss_amt = parseInt(
        parseInt(total_sum_adjusted_bill_amount).toFixed(2) -
          parseInt(adjusted_amt).toFixed(2)
      ).toFixed(2);

      $("#excess_adv_amt").val(bal_excss_amt);
    });

    $("#adv-adj-confirm-add").modal("toggle");

    calculate_ReceiptAmount();
  }
});

$("#close_add_adj").on("click", function (e) {
  $("#adv-adj-confirm-add .modal-body").find("#bill_adv_adj tbody").empty();

  $(".tot_bill_amt").html("");

  $(".adjusted_amt").html("");

  $(".excess_amt").html("");
});

//advance adj

//receipt

function get_delivery_details() {
  my_Date = new Date();

  $.ajax({
    type: "GET",

    url:
      base_url +
      "index.php/admin_ret_catalog/ret_delivery/ajax?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    success: function (data) {
      var id = $("#select_delivery").val();

      var delivery = data.delivery;

      $.each(delivery, function (key, item) {
        if (item.is_default == 1) {
          id = item.id_sale_delivery;
        }

        $("#select_delivery").append(
          $("<option></option>")
            .attr("value", item.id_sale_delivery)

            .text(item.name)
        );
      });

      $("#select_delivery").select2({
        placeholder: "Select Delivery",

        allowClear: true,
      });

      $("#select_delivery").select2("val", id != "" && id > 0 ? id : "");
    },
  });
}

function confirm_delete(bill_id, bill_cancel_otp) {
  $("#bill_id").val(bill_id);

  $("#bill_cancel_otp").val(bill_cancel_otp);

  $("#confirm-billcancell").modal("show");

  if (bill_cancel_otp == 1) {
    $(".cancel_otp").css("display", "block");

    $(".bill_remarks").css("display", "none");

    billcancel_otp();
  } else {
    $(".cancel_otp").css("display", "none");

    $(".bill_remarks").css("display", "block");
  }
}

$("#resend_cancel_otp").on("click", function () {
  billcancel_otp();
});

function billcancel_otp() {
  $("div.overlay").css("display", "block");

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/send_bill_cancel_otp/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { id_branch: $("#billed_branch").val() },

    success: function (data) {
      console.log(data.status);

      if (data.status == true) {
        $("div.overlay").css("display", "none");

        $("#otp_by_emp").val("");

        $.toaster({
          priority: "success",
          title: "Success!",
          message: "" + "</br>" + data.msg,
        });

        var fewSeconds = 60;

        $("#resend_cancel_otp").prop("disabled", true);

        timer = setTimeout(function () {
          $("#resend_cancel_otp").prop("disabled", false);
        }, fewSeconds * 1000);
      } else {
        $("div.overlay").css("display", "none");

        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br> Unable to Send The OTP...",
        });

        //$('#disc_apply').trigger('click');
      }
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

$("#verify_otp").on("click", function () {
  $("#verify_otp").prop("disabled", true);

  if ($("#cancel_otp").val() != "") {
    my_Date = new Date();

    $.ajax({
      url:
        base_url +
        "index.php/admin_ret_billing/verify_otp_for_billcancel/?nocache=" +
        my_Date.getUTCSeconds(),

      data: { otp: $("#cancel_otp").val() },

      dataType: "json",

      method: "POST",

      success: function (data) {
        if (data.status == true) {
          $.toaster({
            priority: "success",
            title: "Success!",
            message: "" + "</br>" + data.msg,
          });

          $(".bill_remarks").css("display", "block");

          $("#verify_otp").prop("disabled", true);
        } else {
          $("#cancel_otp").val("");

          $.toaster({
            priority: "danger",
            title: "Success!",
            message: "" + "</br>" + data.msg,
          });

          $("#verify_otp").prop("disabled", false);
        }
      },

      error: function (error) {},
    });
  } else {
    $.toaster({
      priority: "danger",
      title: "Success!",
      message: "" + "</br>Please Enter The OTP",
    });
  }
});

$("#cancel_otp").on("input", function () {
  if (this.value.length == 6) {
    $("#verify_otp").prop("disabled", false);
  } else {
    $("#verify_otp").prop("disabled", true);

    // alert('Please fill the 6 digit Otp');
  }
});

$("#cancel_remark").on("keypress", function () {
  if (this.value.length > 6) {
    $("#cancell_delete").prop("disabled", false);
  } else {
    $("#cancell_delete").prop("disabled", true);
  }
});

$("#cancell_delete").on("click", function () {
  my_Date = new Date();

  $.ajax({
    type: "POST",

    url:
      base_url +
      "index.php/admin_ret_billing/cancel_bill/ajax?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    data: { remarks: $("#cancel_remark").val(), bill_id: $("#bill_id").val() },

    success: function (data) {
      window.location.reload();
    },
  });
});

$("input[name='billing[chit_refund]']:checkbox").on("change", function () {
  var bal_amount = $(".bal_amount").html();

  if ($("input[name='billing[chit_refund]']:checked").is(":checked")) {
    $(".pay_to_cus").val(parseFloat(bal_amount * -1));

    $("#make_pay_cash").val(parseFloat(bal_amount * -1));

    $("#pay_submit").prop("disabled", false);
  } else {
    $(".pay_to_cus").val(0);

    $("#make_pay_cash").val(0);

    $("#pay_submit").prop("disabled", true);
  }
});

//Business Customers

$("input[name='billing[billing_for]']:radio").on("change", function () {
  $("#bill_cus_id").val("");

  $("#bill_cus_name").val("");

  $("#id_cmp_emp").val("");

  $("#bill_emp_name").val("");

  if (this.value == 1) {
    $("#emp_user").css("display", "none");

    $("#gst_number").css("display", "none");

    $(".gst_number").css("display", "none");
  } else if (this.value == 2) {
    $("#emp_user").css("display", "block");

    $("#gst_number").css("display", "block");

    $(".gst_number").css("display", "block");
  }
});

$("#bill_emp_name").on("keyup", function (e) {
  var customer = $("#bill_emp_name").val();

  var bill_cus_id = $("#bill_cus_id").val();

  if (bill_cus_id != "") {
    if (customer.length >= 2) {
      getSearchCompanyUsers(customer);
    }
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Select Company Name",
    });
  }
});

function getSearchCompanyUsers(searchTxt) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getSearchCompanyUsers/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { searchTxt: searchTxt, id_customer: $("#bill_cus_id").val() },

    success: function (data) {
      $("#bill_emp_name").autocomplete({
        source: data,

        select: function (e, i) {
          e.preventDefault();

          $("#bill_emp_name").val(i.item.label);

          $("#id_cmp_emp").val(i.item.value);
        },

        change: function (event, ui) {
          if (ui.item === null) {
            $(this).val("");

            $("#bill_emp_name").val("");
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (searchTxt != "") {
            if (i.content.length === 0) {
              $.toaster({
                priority: "danger",
                title: "Warning!",
                message:
                  "" + "</br>" + "Enter a valid customer name / mobile..",
              });
            }
          } else {
          }
        },

        minLength: 3,
      });
    },
  });
}

$("#add_cmp_emp").on("click", function () {
  if ($("#bill_cus_id").val() != "") {
    $("#emp_add").modal("show");
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Select Company Name",
    });
  }
});

$("#add_newemployee").on("click", function () {
  if ($("#emp_firstname").val() != "") {
    if ($("#emp_mobile").val() != "") {
      add_company_user();

      $("#emp_firstname").val("");

      $("#emp_mobile").val("");
    } else {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Please Enter The Mobile Number",
      });
    }
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Enter The Name",
    });
  }
});

function add_company_user() {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/addNewCompanyUsers/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      emp_name: $("#emp_firstname").val(),
      mobile: $("#emp_mobile").val(),
      id_customer: $("#bill_cus_id").val(),
    },

    success: function (data) {
      if (data.success == true) {
        $("#emp_add").modal("toggle");

        $("#bill_emp_name").val(
          data.response.firstname + " - " + data.response.mobile
        );

        $("#id_cmp_emp").val(data.response.id_cmp_emp);
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>" + data.message,
        });
      }
    },
  });
}

//For Tcs calc

function getCompanyPurchaseAmount(id_customer) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getCompanyPurchaseAmount/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { id_customer: id_customer },

    success: function (data) {
      $("#tot_purchase_amt").val(data.tot_purchase_amt);
    },
  });
}

//Business Customers

//$("input[name='billing[metal_type]']:radio").on('change',function(){

$("#select_metal_type").on("change", function () {
  $("#billing_sale_details tbody").empty();

  $("#purchase_item_details tbody").empty();

  $("#sale_return_details tbody").empty();

  $("#billing_order_adv_details tbody").empty();

  $("#billing_order_adv_details tbody").empty();

  calculateSaleBillRowTotal();

  calculatePurchaseBillRowTotal();

  calculate_salesReturn_details();
});

function get_invnetory_item(id_branch) {
  if (ctrl_page[1] == "issue") {
    id_branch = $("#branch_select").val();
  }

  $("#select_item option").remove();

  $.ajax({
    type: "POST",

    url: base_url + "index.php/admin_ret_other_inventory/get_invnetory_item",

    dataType: "json",

    data: { id_branch: id_branch },

    success: function (data) {
      other_inventory_item = data;
    },
  });
}

function set_packing_items() {
  if (packing_items.length > 0) {
    $("#estimation_other_inv_details tbody").empty();

    var trHtml = "";

    $.each(packing_items, function (key, items) {
      var item = "<option value=''>-Select Item</option>";

      var image_src = base_url + "assets/img/no_image.png";

      $.each(other_inventory_item, function (key, pitem) {
        var selected = "";

        if (items.id_other_item == pitem.id_other_item) {
          selected = "selected";

          if (pitem.item_image != "") {
            image_src =
              base_url +
              "assets/img/other_inventory/" +
              pitem.sku_id +
              "/" +
              pitem.item_image;
          } else {
            image_src = base_url + "assets/img/no_image.png";
          }
        }

        item +=
          "<option value='" +
          pitem.id_other_item +
          "' " +
          selected +
          ">" +
          pitem.item_name +
          "</option>";
      });

      trHtml +=
        "<tr>" +
        '<td><select class="form-control id_other_item" name="est_oth_inv[id_other_item][]" value="">' +
        item +
        "</select></td>" +
        '<td><input type="number" name="est_oth_inv[no_of_pcs][]" class="form-control no_of_pcs" value="' +
        items.no_of_piece +
        '"></td>' +
        '<td><img class="img_src" src="' +
        image_src +
        '" width="30" height="30"></td>' +
        '<td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
        "</tr>";
    });

    $("#estimation_other_inv_details tbody").append(trHtml);
  }
}

$("#add_new_inv").on("click", function () {
  if (validateEstOtherInvDetailRow()) {
    create_new_empty_est_other_inv_row();
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Fill The Required Fields..",
    });
  }
});

function validateEstOtherInvDetailRow() {
  var row_validate = true;

  $("#estimation_other_inv_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".id_other_item").val() == "" ||
      $(this).find(".no_of_pcs").val() == ""
    ) {
      row_validate = false;
    }
  });

  return row_validate;
}

function create_new_empty_est_other_inv_row() {
  var item = "<option value=''>-Select Item</option>";

  $.each(other_inventory_item, function (key, pitem) {
    item +=
      "<option value='" +
      pitem.id_other_item +
      "'>" +
      pitem.item_name +
      "</option>";
  });

  var trHtml = "";

  var img_src = base_url + "assets/img/no_image.png";

  trHtml +=
    "<tr>" +
    '<td><select class="form-control id_other_item" name="est_oth_inv[id_other_item][]" value="">' +
    item +
    "</select></td>" +
    '<td><input type="number" name="est_oth_inv[no_of_pcs][]" class="form-control no_of_pcs"></td>' +
    '<td><img class="img_src" src="' +
    img_src +
    '" width="30" height="30"></td>' +
    '<td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
    "</tr>";

  if ($("#estimation_other_inv_details > tbody  > tr").length > 0) {
    $("#estimation_other_inv_details > tbody > tr:first").before(trHtml);
  } else {
    $("#estimation_other_inv_details tbody").append(trHtml);
  }

  $("#estimation_old_matel_details > tbody").find(".id_other_item").select2();
}

$(document).on("keyup", ".no_of_pcs", function (e) {
  var row = $(this).closest("tr");

  var id_other_item = row.find(".id_other_item").val();

  var no_of_pcs = row.find(".no_of_pcs").val();

  $.each(other_inventory_item, function (key, items) {
    if (items.id_other_item == id_other_item) {
      var available_pcs = items.tot_pcs;

      if (parseFloat(available_pcs) < no_of_pcs) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Available Pieces is " + items.tot_pcs,
        });

        row.find(".no_of_pcs").val();
      }
    }
  });
});

$(document).on("change", ".id_other_item", function (e) {
  var row = $(this).closest("tr");

  var id_other_item = row.find(".id_other_item").val();

  $.each(other_inventory_item, function (key, items) {
    if (items.id_other_item == id_other_item && items.item_image != "") {
      var img_src =
        base_url +
        "assets/img/other_inventory/" +
        items.sku_id +
        "/" +
        items.item_image;

      row.find(".img_src").attr("src", img_src);
    }
  });
});

function clear_billing_details() {
  $("#billing_sale_details tbody").empty();

  $("#purchase_item_details tbody").empty();

  $("#sale_return_details tbody").empty();

  calculateSaleBillRowTotal();

  calculatePurchaseBillRowTotal();

  calculate_salesReturn_details();
}

function get_ActiveMetal() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_catalog/ret_product/active_metal",

    dataType: "json",

    success: function (data) {
      var id = $("#select_metal_type").val();

      $.each(data, function (key, item) {
        $("#select_metal_type").append(
          $("<option></option>")
            .attr("value", item.id_metal)

            .text(item.metal)
        );
      });

      $("#select_metal_type").select2({
        placeholder: "Select Metal",

        allowClear: true,
      });
    },
  });
}

//Repair Order

function setRepairOrderDetails(data) {
  var repair_percentage = $("#repair_order_per").val();

  rowExist = false;

  var row = "";

  $("#cus_state").val(data[0].cus_state);

  $(".repair_order_details").show();

  $("#bill_cus_name").val(data[0].cus_name);

  $("#bill_cus_id").val(data[0].order_to);

  $("#bill_cus_name").attr("readonly", true);

  $.each(data, function (key, item) {
    $("#billing_repair_order_details > tbody tr").each(function (bidx, brow) {
      bill_sale_row = $(this);

      if (bill_sale_row.find(".id_orderdetails").val() != "") {
        if (
          item.id_orderdetails == bill_sale_row.find(".id_orderdetails").val()
        ) {
          rowExist = true;

          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>" + "Order Details Already Exists..",
          });
        }
      }
    });

    if (!rowExist) {
      row +=
        "<tr id=" +
        key +
        ">" +
        "<td><span>" +
        item.hsn_code +
        '</span><input type="hidden" class="sale_pro_hsn" name="order[hsn]" value="' +
        item.hsn_code +
        '" /><input type="hidden" class="sale_type" name="order[sourcetype][]" value="1" /><input type="hidden" class="is_est_details" value="1" name="order[is_est_details][]" /><input type="hidden" class="sale_cal_type" name="order[calltype][]" value="' +
        item.calculation_based_on +
        '" /><input type="hidden" class="sale_metal_type" value="' +
        item.metal_type +
        '" /><input type="hidden" class="sale_purity" value="' +
        item.id_purity +
        '"  name="order[purity][]" /><input type="hidden" class="sale_size" value="' +
        item.size +
        '"  name="order[size][]" /><input type="hidden" class="total_tax" name="order[total_tax][]" /><input type="hidden" class="id_orderdetails" name="order[id_orderdetails][]" value="' +
        item.id_orderdetails +
        '"></td>' +
        "<td><span>" +
        item.product_name +
        '</span><input class="sale_product_id" type="hidden" name="order[product][]" value="' +
        item.id_product +
        '" /></td>' +
        "<td><span>" +
        item.design_name +
        '</span><input type="hidden" class="sale_design_id" name="order[design][]" value="' +
        item.design_no +
        '" /></td>' +
        "<td><span>" +
        item.totalitems +
        '</span><input type="hidden" class="sale_pcs" name="order[pcs][]" value="' +
        item.totalitems +
        '"  /></td>' +
        "<td><span>" +
        item.gross_wt +
        '</span><input type="hidden" class="bill_gross_val" name="order[gross][]" value="' +
        item.gross_wt +
        '" /></td>' +
        '<td><span></span><input type="hidden" class="bill_less_val" name="order[less][]" value="" /></td>' +
        "<td><span>" +
        item.net_wt +
        '</span><input type="hidden" class="bill_net_val" name="order[net][]" value="' +
        item.net_wt +
        '" /></td>' +
        "<td><span>" +
        item.wast_percent +
        '</span><input type="hidden" class="bill_wastage" name="order[wastage][]" value="' +
        item.wast_percent +
        '" /><input type="hidden" class="wast_wgt"></td>' +
        "<td><span>" +
        item.mc +
        '</span><input type="hidden" class="bill_mctype" name="order[bill_mctype][]" value="" /><input type="hidden" class="bill_mc" name="order[mc][]" value="' +
        item.mc +
        '" /></td>' +
        "<td><span>" +
        repair_percentage +
        '</span><input type="hidden" class="repair_percent" name="order[repair_percent][]" value="' +
        repair_percentage +
        '" /><input type="hidden" class="repair_tot_tax" name="order[repair_tot_tax][]" value="" /><input type="hidden" class="sale_tax_group" name="order[taxgroup][]" value="' +
        item.tax_group_id +
        '" /><input type="hidden" class="sale_cgst" name="order[cgst][]" value="" /><input type="hidden" class="tax_type" name="order[tax_type][]" value="" /><input type="hidden" class="sale_sgst" name="order[sgst][]" value="" /><input type="hidden" class="sale_igst" name="order[igst][]" value="" /><input type="hidden" class="sale_cgst_per" name="order[cgst_per][]" value="' +
        repair_percentage / 2 +
        '" /><input type="hidden" class="sale_sgst_per" name="order[sgst_per][]" value="' +
        repair_percentage / 2 +
        '" /></td>' +
        "<td><span>" +
        item.order_no +
        '</span><input type="hidden" class="order_no" name="order[order_no][]" value="' +
        item.order_no +
        '" /></td>' +
        "<td><span>" +
        item.completed_weight +
        '</span><input type="hidden" class="completed_weight" name="order[completed_weight][]" value="' +
        item.completed_weight +
        '" /></td>' +
        "<td><span>" +
        item.amount +
        '</span><input type="hidden" class="amount" name="order[amount][]" value="' +
        item.amount +
        '" /></td>' +
        '<td><a href="#" onClick="remove_repair_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
        "</tr>";
    }
  });

  $("#billing_repair_order_details tbody").append(row);

  calculateRepairOrderDetails();
}

function calculateRepairOrderDetails() {
  $("#total_cost").attr("readonly", true);

  $("#summary_discount_amt").attr("readonly", true);

  var amount = 0;

  var taxable_amount = 0;

  var tot_taxable_amount = 0;

  var cgst_per = $(".sale_cgst_per").val();

  var sgst_per = $(".sale_sgst_per").val();

  var cus_state = $("#cus_state").val();

  var cmp_state = $("#cmp_state").val();

  var repair_percentage = $("#repair_order_per").val();

  var igst = 0;

  var cgst = 0;

  var sgst = 0;

  var total_tax = 0;

  var tot_cgst = 0;

  var tot_sgst = 0;

  var tot_igst = 0;

  var tot_amount = 0;

  $("#billing_repair_order_details > tbody  > tr").each(function (index, tr) {
    if ($(this).find(".amount").val() != "") {
      curRow = $(this);

      amount = parseFloat(
        isNaN(curRow.find(".amount").val()) ||
          curRow.find(".amount").val() == ""
          ? 0
          : curRow.find(".amount").val()
      );

      taxable_amount = amount / (repair_percentage / 100 + 1);

      total_tax = taxable_amount * (repair_percentage / 100);

      /*if(cus_state==cmp_state)

			{

				cgst=(taxable_amount*cgst_per/100);

				sgst=(taxable_amount*sgst_per/100);

			}else{

				igst=total_tax;

			}*/

      cgst = (taxable_amount * cgst_per) / 100;

      sgst = (taxable_amount * sgst_per) / 100;

      curRow.find(".sale_cgst").val(parseFloat(cgst).toFixed(2));

      curRow.find(".sale_sgst").val(parseFloat(sgst).toFixed(2));

      curRow.find(".sale_igst").val(parseFloat(igst).toFixed(2));

      curRow.find(".repair_tot_tax").val(parseFloat(total_tax).toFixed(2));

      cgst = parseFloat(
        isNaN(curRow.find(".sale_cgst").val()) ||
          curRow.find(".sale_cgst").val() == ""
          ? 0
          : curRow.find(".sale_cgst").val()
      );

      sgst = parseFloat(
        isNaN(curRow.find(".sale_sgst").val()) ||
          curRow.find(".sale_sgst").val() == ""
          ? 0
          : curRow.find(".sale_sgst").val()
      );

      igst = parseFloat(
        isNaN(curRow.find(".sale_igst").val()) ||
          curRow.find(".sale_igst").val() == ""
          ? 0
          : curRow.find(".sale_igst").val()
      );

      tot_cgst += cgst;

      tot_sgst += sgst;

      tot_igst += igst;

      tot_amount += amount;

      tot_taxable_amount += taxable_amount;

      console.log("Taxable - " + parseFloat(taxable_amount).toFixed(2));

      console.log("Total tax - " + parseFloat(total_tax).toFixed(2));

      console.log("Cgst - " + parseFloat(cgst).toFixed(2));

      console.log("Sgst - " + parseFloat(sgst).toFixed(2));

      console.log("Igst - " + parseFloat(igst).toFixed(2));
    }
  });

  $(".summary_repair_amt").html(parseFloat(tot_amount).toFixed(2));

  $(".summary_sale_amt").html(parseFloat(tot_taxable_amount).toFixed(2));

  $(".sales_cgst").html(parseFloat(tot_cgst).toFixed(2));

  $(".sales_sgst").html(parseFloat(tot_sgst).toFixed(2));

  $(".sales_igst").html(parseFloat(tot_igst).toFixed(2));

  calculateFinalCost();
}

function remove_repair_row(curRow) {
  curRow.remove();

  calculateRepairOrderDetails();
}

//Repair Order

function otp_confirmation(discountApprovalMessage) {
  $("#discountApprovalMessage").html(discountApprovalMessage);

  $("#discountApprovalMessage").css("display", "block");

  $("#otp_form").css("display", "none");

  $(".otp_form").css("display", "none");

  $("#send_discount_otp").css("display", "inline-block");

  $("#otp_submit_validation").css("display", "none");

  $("#otp_validation").modal("show");
}

function discount_otp() {
  $("#discountApprovalMessage").css("display", "none");

  $("#otp_form").css("display", "block");

  $(".otp_form").css("display", "none");

  $("#send_discount_otp").css("display", "none");

  $("#otp_submit_validation").css("display", "inline-block");

  $("#resend_otp").prop("disabled", true);

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/admin_approval/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { id_branch: $("#id_branch").val() },

    success: function (data) {
      if (data.status == true) {
        $("#otp_by_emp").val("");

        $("#error-msg").html("");

        $("#remaining_time").html("");

        $("#otp_validation").modal("show");

        discount_val = $("#summary_discount_amt").val();

        $("#dis_value").val(discount_val);

        $.toaster({
          priority: "success",
          title: "Success!",
          message: "" + "</br>" + data.msg,
        });

        var fewSeconds = 60;

        $("#resend_otp").prop("disabled", true);

        timer = setTimeout(function () {
          $("#resend_otp").prop("disabled", false);
        }, fewSeconds * 1000);
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br> Admin Access Denied...",
        });

        $("#summary_discount_amt").val("");
      }
    },

    error: function (error) {},
  });
}

$("#resend_otp").on("click", function () {
  discount_otp();
});

$("#otp_submit_validation").on("click", function () {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/verify_otp/?nocache=" +
      my_Date.getUTCSeconds(),

    data: { otp: $("#otp_by_emp").val() },

    dataType: "json",

    method: "POST",

    success: function (data) {
      if (data.status == true) {
        $("#otp_validation").modal("toggle");

        calculate_discount_amt();

        $("#is_otp_approved").val("1");

        $("#otp_approved_by").val($("#emp_select_otp").val());

        $.toaster({
          priority: "success",
          title: "Success!",
          message: "" + "</br>" + data.msg,
        });
      } else {
        $("#otp_by_emp").val("");

        $("#is_otp_approved").val("0");

        $("#otp_approved_by").val("");

        $.toaster({
          priority: "danger",
          title: "Success!",
          message: "" + "</br>" + data.msg,
        });
      }
    },

    error: function (error) {},
  });
});

//Advance Deposit

$("input[name='billing[make_as_advance]']:radio").on("change", function () {
  $("#advance_amount").val(0);

  $("#advance_amount").prop("disabled", true);

  if (this.value == 1) {
    $("#advance_amount").prop("disabled", false);
  } else if (this.value == 2 && $(".pay_to_cus").val() > 0) {
    $("#advance_amount").prop("disabled", false);

    if ($("#bill_cus_id").val() != "") {
      create_new_empty_chit_deposit_row();
    } else {
      $.toaster({
        priority: "danger",
        title: "Success!",
        message: "" + "</br>Please Select Customer..",
      });
    }
  }

  calculatePaymentCost();
});

function create_new_empty_chit_deposit_row() {
  scheme_details = [];

  $("#chit_deposit_modal").modal("show");

  if ($("#chit_deposit_acc_details").val() != "") {
    chit_deposit_acc_details = JSON.parse($("#chit_deposit_acc_details").val());
  }

  if (chit_deposit_acc_details.length == 0) {
    get_one_time_pre_weight_scheme_details();

    var trHtml = "";

    setTimeout(function () {
      var scheme_list = "<option value=''> - Select Scheme - </option>";

      var scheme_acc_list = "<option value=''> - Select Scheme - </option>";

      $.each(scheme_details, function (pkey, pitem) {
        scheme_list +=
          "<option value='" +
          pitem.id_scheme +
          "'>" +
          pitem.scheme_name +
          "</option>";
      });

      trHtml +=
        "<tr>" +
        '<td><select class="id_scheme" name="chit_details[material_id][]">' +
        scheme_list +
        "</select></td>" +
        '<td><select class="select_scheme_account" name="chit_details[id_scheme_account][]">' +
        scheme_acc_list +
        "</select></td>" +
        '<td><a href="#" onClick="remove_chit_deposit_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
        "</tr>";

      $("#chit_deposit_details tbody").append(trHtml);

      $("#chit_deposit_details > tbody").find(".id_scheme").focus();

      $("#chit_deposit_details > tbody").find(".id_scheme").select2();

      $("#chit_deposit_details > tbody")
        .find(".select_scheme_account")
        .select2();
    }, 1000);
  }
}

function remove_chit_deposit_row(curRow) {
  curRow.remove();
}

$(document).on("change", ".id_scheme", function (e) {
  var row = $(this).closest("tr");

  var id_scheme = row.find(".id_scheme").val();

  get_weight_scheme_details(id_scheme, row);
});

function get_weight_scheme_details(id_scheme, curRow) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_customer_weight_scheme_details/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { id_scheme: id_scheme, id_customer: $("#bill_cus_id").val() },

    success: function (data) {
      var scheme_acc_list = "";

      $.each(data, function (key, items) {
        scheme_acc_list +=
          "<option value='" +
          items.id_scheme_account +
          "'>" +
          items.account_name +
          "</option>";
      });

      curRow.find(".select_scheme_account").append(scheme_acc_list);
    },
  });
}

function get_one_time_pre_weight_scheme_details() {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_one_time_pre_weight_scheme/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "GET",

    success: function (data) {
      scheme_details = data;

      console.log(scheme_details);
    },
  });
}

$("#save_chit_deposit").on("click", function () {
  chit_deposit_acc_details = [];

  $("#chit_deposit_modal .modal-body #chit_deposit_details> tbody  > tr").each(
    function (index, tr) {
      chit_deposit_acc_details.push({
        id_scheme: $(this).find(".id_scheme").val(),
        id_scheme_account: $(this).find(".select_scheme_account").val(),
      });
    }
  );

  $("#chit_deposit_modal").modal("toggle");

  $("#chit_deposit_acc_details").val(
    chit_deposit_acc_details.length > 0
      ? JSON.stringify(chit_deposit_acc_details)
      : ""
  );
});

//Advance Deposit

//supplier sales bill

function create_new_empty_supplier_sale_row() {
  var trHtml = "";

  trHtml +=
    "<tr>" +
    '<td><input type="hidden" class="metal" name="metal_details[metal][]" value="' +
    $("#select_metal").val() +
    '"><input type="hidden" class="category" name="metal_details[category][]" value="' +
    $("#select_category").val() +
    '">' +
    $("#select_category option:selected").text() +
    "</td>" +
    '<td><input type="hidden" class="product" name="metal_details[id_product][]" value="' +
    $("#select_product").val() +
    '"><input type="hidden" class="id_design" name="metal_details[id_design][]" value="' +
    $("#select_design").val() +
    '"><input type="hidden" class="id_sub_design" name="metal_details[id_sub_design][]" value="' +
    $("#select_sub_design").val() +
    '">' +
    $("#select_product option:selected").text() +
    "</td>" +
    '<td><input type="hidden" class="purity" name="metal_details[purity][]" value="' +
    $("#purity").val() +
    '">' +
    $("#purity").val() +
    "</td>" +
    '<td><input type="hidden" class="issue_pcs" name="metal_details[pcs][]" value="' +
    $("#issue_pcs").val() +
    '">' +
    $("#issue_pcs").val() +
    "</td>" +
    '<td><input type="hidden" class="weight" name="metal_details[weight][]" value="' +
    $("#issue_weight").val() +
    '">' +
    $("#issue_weight").val() +
    "</td>" +
    '<td><input type="hidden" class="pur_weight" name="metal_details[pur_weight][]" value="' +
    $("#pur_weight").val() +
    '">' +
    $("#pur_weight").val() +
    "</td>" +
    '<td><input type="hidden" class="rate_per_gram" name="metal_details[rate_per_gram][]" value="' +
    $("#rate_per_gram").val() +
    '">' +
    $("#rate_per_gram").val() +
    "</td>" +
    '<td><input type="hidden" class="item_cost" name="metal_details[item_cost][]" value="' +
    $("#item_cost").val() +
    '"><input type="hidden" class="item_total_tax" name="metal_details[item_total_tax][]" value=""><input type="hidden" class="item_total_sgst" name="metal_details[item_total_sgst][]" value=""><input type="hidden" class="item_total_cgst" name="metal_details[item_total_cgst][]" value=""><input type="hidden" class="item_total_igst" name="metal_details[item_total_igst][]" value="">' +
    $("#item_cost").val() +
    "</td>" +
    '<td><a href="#" class="btn btn-danger btn-del btn-xs" style="padding:5px;" onClick="remove_row($(this).closest(\'tr\'));"><i class="fa fa-trash"></i></a></td>' +
    "</tr>";

  $("#billing_supplier_sales_bill_details tbody").append(trHtml);
}

function get_ActiveMetals() {
  $("div.overlay").css("display", "block");

  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_catalog/active_metals",

    dataType: "json",

    success: function (data) {
      metalDetails = data;

      var id = $("#select_metal").val();

      $.each(data, function (key, item) {
        $("#select_metal").append(
          $("<option></option>")
            .attr("value", item.id_metal)

            .text(item.metal)
        );
      });

      $("#select_metal").select2({
        placeholder: "Metal",

        allowClear: true,
      });

      if ($("#select_metal").length) {
        $("#select_metal").select2("val", id != "" ? id : "");
      }

      $("div.overlay").css("display", "none");
    },
  });
}

$("#select_metal").on("change", function () {
  $("#select_category option").remove();

  $("#select_product option").remove();

  if (this.value != "") {
    get_ActiveCategories();
  }
});

function get_ActiveCategories() {
  $("div.overlay").css("display", "block");

  $("#select_category option").remove();

  $.ajax({
    type: "POST",

    data: {
      id_metal: $("#select_metal").val(),
      id_cat_type: $(
        "input[type='radio'][name='order[po_type]']:checked"
      ).val(),
    },

    url: base_url + "index.php/admin_ret_catalog/get_MetalCategory",

    dataType: "json",

    success: function (data) {
      var id = $("#select_category").val();

      $.each(data, function (key, item) {
        if (item.cat_type == 2 || item.cat_type == 3 || item.cat_type == 4) {
          $("#select_category").append(
            $("<option></option>")
              .attr("value", item.id_ret_category)

              .text(item.name)
          );
        }
      });

      $("#select_category").select2({
        placeholder: "Category",

        allowClear: true,
      });

      if ($("#select_category").length) {
        $("#select_category").select2("val", id != "" ? id : "");
      }

      $("div.overlay").css("display", "none");
    },
  });
}

$("#select_category").on("change", function () {
  if (this.value != "") {
    get_CategoryProducts();

    get_cat_purity();

    //get_available_metal_stock_details();
  }
});

$("#select_product").on("change", function () {
  if (this.value != "") {
    get_ProductDesign();

    set_available_stock_details();
  }
});

function get_ProductDesign() {
  $("#select_design option").remove();

  $(".overlay").css("display", "block");

  $.ajax({
    type: "POST",

    url: base_url + "index.php/admin_ret_catalog/get_active_design_products",

    dataType: "json",

    data: { id_product: $("#select_product").val() },

    success: function (data) {
      var id = $("#select_design").val();

      $.each(data, function (key, item) {
        $("#select_design").append(
          $("<option></option>")
            .attr("value", item.design_no)

            .text(item.design_name)
        );
      });

      $("#select_design").select2({
        placeholder: "Design",

        allowClear: true,
      });

      $("#select_design").select2("val", id != "" && id > 0 ? id : "");

      $(".overlay").css("display", "none");
    },
  });
}

$("#select_design").on("change", function () {
  if (this.value != "") {
    get_ActiveSubDesigns();
  }

  set_availabe_purity();
});

$("#select_sub_design").on("change", function () {
  if (this.value != "") {
    set_availabe_purity();
  }
});

function get_ActiveSubDesigns() {
  $("#select_sub_design option").remove();

  $(".overlay").css("display", "block");

  $.ajax({
    type: "POST",

    url: base_url + "index.php/admin_ret_catalog/get_ActiveSubDesigns",

    dataType: "json",

    data: {
      id_product: $("#select_product").val(),
      design_no: $("#select_design").val(),
    },

    success: function (data) {
      var id = $("#select_sub_design").val();

      $.each(data, function (key, item) {
        $("#select_sub_design").append(
          $("<option></option>")
            .attr("value", item.id_sub_design)

            .text(item.sub_design_name)
        );
      });

      $("#select_sub_design").select2({
        placeholder: "Sub Design",

        allowClear: true,
      });

      $("#select_sub_design").select2("val", id != "" && id > 0 ? id : "");

      $(".overlay").css("display", "none");
    },
  });
}

function get_CategoryProducts() {
  $("#select_product option").remove();

  $(".overlay").css("display", "block");

  my_Date = new Date();

  $.ajax({
    type: "POST",

    data: { id_ret_category: $("#select_category").val() },

    url:
      base_url +
      "index.php/admin_ret_catalog/get_ActiveProducts/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    success: function (data) {
      var id = $("#select_product").val();

      $.each(data, function (key, item) {
        $("#select_product").append(
          $("<option></option>")
            .attr("value", item.pro_id)

            .text(item.product_name)
        );
      });

      $("#select_product").select2({
        placeholder: "Product",

        allowClear: true,
      });

      if ($("#select_product").length) {
        $("#select_product").select2("val", id != "" ? id : "");
      }

      $("div.overlay").css("display", "none");
    },
  });
}

function get_cat_purity() {
  $("#purity option").remove();

  $(".overlay").css("display", "block");

  $.ajax({
    type: "POST",

    url: base_url + "index.php/admin_ret_catalog/category/cat_purity",

    dataType: "json",

    data: { id_category: $("#select_category").val() },

    success: function (data) {
      var id_purity = $("#purity").val();

      $.each(data, function (key, item) {
        $("#purity").append(
          $("<option></option>")
            .attr("value", item.id_purity)

            .text(item.purity)
        );
      });

      $("#purity").select2({
        placeholder: "Purity",

        allowClear: true,
      });

      $("#purity").select2(
        "val",
        id_purity != "" && id_purity > 0 ? id_purity : ""
      );

      $(".overlay").css("display", "none");
    },
  });
}

function get_available_metal_stock_details() {
  my_Date = new Date();

  $("div.overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_purchase/karigarmetalissue/available_stock_details?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "JSON",

    type: "POST",

    data: { id_product: $("#select_product").val() },

    success: function (data) {
      available_metal_stock = data;

      $("div.overlay").css("display", "none");
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

function set_available_stock_details() {
  $.each(available_metal_stock, function (key, item) {
    if (
      $("#select_product").val() == item.id_product &&
      $("#select_design").val() == item.design &&
      $("#select_sub_design").val() == item.id_sub_design
    ) {
      if (item.net_wt > 0) {
        $(".available_pcs").html(item.no_of_piece);

        $(".available_weight").html(item.net_wt);
      }
    }
  });
}

function set_availabe_purity() {
  $("#purity option").remove();

  $.each(available_metal_stock, function (key, item) {
    if (
      $("#select_product").val() == item.id_product &&
      $("#select_design").val() == item.design &&
      $("#select_sub_design").val() == item.id_sub_design
    ) {
      if (item.net_wt > 0) {
        $(".available_pcs").html(item.no_of_piece);

        $(".available_weight").html(item.net_wt);
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Stock Not Available..",
        });
      }
    }
  });
}

$("#issue_pcs").on("change", function () {
  $.each(available_metal_stock, function (key, items) {
    if (
      $("#select_product").val() == items.id_product &&
      $("#select_design").val() == items.design &&
      $("#select_sub_design").val() == items.id_sub_design
    ) {
      if (parseFloat(items.no_of_piece) < $("#issue_pcs").val()) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Available Pieces is " + items.no_of_piece,
        });

        $("#issue_pcs").val("");

        $("#issue_pcs").focus();
      }
    }
  });
});

$("#issue_weight").on("change", function () {
  $.each(available_metal_stock, function (key, items) {
    if (
      $("#select_product").val() == items.id_product &&
      $("#select_design").val() == items.design &&
      $("#select_sub_design").val() == items.id_sub_design
    ) {
      if (parseFloat(items.net_wt) < $("#issue_weight").val()) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Available Weight is " + items.gross_wt,
        });

        $("#issue_weight").val("");

        $("#issue_weight").focus();
      }
    }
  });
});

$("#issue_weight,#purchase_touch,#rate_per_gram").on("keyup", function () {
  var item_cost = 0;

  var issue_pcs =
    isNaN($("#issue_pcs").val()) || $("#issue_pcs").val() == ""
      ? 0
      : $("#issue_pcs").val();

  var tot_weight =
    isNaN($("#issue_weight").val()) || $("#issue_weight").val() == ""
      ? 0
      : $("#issue_weight").val();

  var purity =
    isNaN($("#purity option:selected").text()) ||
    $("#purity option:selected").text() == ""
      ? 0
      : $("#purity option:selected").text();

  var rate_per_gram =
    isNaN($("#rate_per_gram").val()) || $("#rate_per_gram").val() == ""
      ? 0
      : $("#rate_per_gram").val();

  var purewt = parseFloat(
    (parseFloat(tot_weight) * parseFloat(purity)) / 100
  ).toFixed(3);

  item_cost = parseFloat(
    parseFloat(purewt) * parseFloat(rate_per_gram)
  ).toFixed(2);

  $("#pur_weight").val(purewt);

  $("#item_cost").val(item_cost);
});

$("#add_item").on("click", function () {
  if (
    $("#select_category").val() == "" ||
    $("#select_category").val() == null
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select Category",
    });
  } else if (
    $("#select_product").val() == "" ||
    $("#select_product").val() == null
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select Product",
    });
  } else if (
    $("#select_design").val() == "" ||
    $("#select_design").val() == null
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Select Design",
    });
  } else if (
    $("#select_sub_design").val() == "" ||
    $("#select_sub_design").val() == null
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Select Sub Design",
    });
  } else if ($("#purity").val() == "" || $("#purity").val() == null) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select Purity",
    });
  } else if ($("#issue_pcs").val() == "" || $("#issue_pcs").val() == 0) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter The Pieces",
    });
  } else if ($("#issue_weight").val() == "" || $("#issue_weight").val() == 0) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter The Weight",
    });
  } else if (
    $("#rate_per_gram").val() == "" ||
    $("#rate_per_gram").val() == 0
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter The Rate",
    });
  } else if ($("#item_cost").val() == "" || $("#item_cost").val() == 0) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter The Rate",
    });
  } else {
    create_new_empty_supplier_sale_row();

    calculate_sales_details();

    reset_metal_issue_form();
  }
});

function reset_metal_issue_form() {
  $("#select_category").select2("val", "");

  $("#select_product").select2("val", "");

  $("#issue_weight").val("");

  $("#issue_pcs").val("");

  $("#purity").select2("val", "");

  $("#pur_weight").val("");

  $("#rate_per_gram").val("");

  $("#item_cost").val("");
}

//supplier sales bill

//customer delivery address

$("#tab_delivery_address").on("click", function () {
  if ($("#bill_cus_id").val() == "") {
    $("#tab_delivery_address").removeClass("active");

    $("#item_summary").addClass("active");

    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select Customer",
    });
  }
});

$("#delivered_at").on("change", function () {
  $("#tab_delivery_address").css("display", "none");

  if (this.value == 2) {
    if ($("#bill_cus_id").val() != "") {
      $('.nav-tabs a[href="#customer_delivery_address"]').tab("show");

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Verify The Address",
      });

      $("#tab_delivery_address").css("display", "block");

      get_customer_address_det();
    } else {
      $("#delivered_at_show_room").prop("checked", true);

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select Customer",
      });
    }
  } else {
    calculateSaleBillRowTotal();
  }
});

function get_customer_address_det() {
  $(".add_type").css("display", "block");

  $("#delivery_address_type").val(1);

  var delivery_address_type = $("#delivery_address_type").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_customer_address/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { id_customer: $("#bill_cus_id").val() },

    success: function (data) {
      registered_address = data.registered_address;

      console.log(registered_address.length);

      if (registered_address.id_state == undefined) {
        $("#edit_estimation_detalis").trigger("click");

        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Update Customer Address",
        });

        $(".add_type").css("display", "none");

        $("#delivery_address_type").val(0);

        $("#my_addr").css("display", "block");

        get_mydelivery_address();
      } else {
        if (
          registered_address.id_state != "" &&
          registered_address.id_country != ""
        ) {
          $("#my_addr").css("display", "block");

          $("#cus_del_state").val(registered_address.id_state);

          $("#cus_del_country").val(registered_address.id_country);

          $('#cus_country').val(registered_address.id_country);

          var addressHtml =
            "<span>" +
            registered_address.address1 +
            "</br>" +
            (registered_address.address2 != ""
              ? registered_address.address2 + "</br>"
              : "") +
            (registered_address.address3 != ""
              ? registered_address.address3 + "</br>"
              : "") +
            (registered_address.city_name != ""
              ? registered_address.city_name +
                " " +
                (registered_address.pincode != ""
                  ? " - " + registered_address.pincode
                  : "")
              : "") +
            "</br>" +
            (registered_address.state_name != ""
              ? registered_address.state_name + "</br>"
              : "") +
            (registered_address.country_name != ""
              ? registered_address.country_name
              : "") +
            "</br></span>";

          $("#cus_reg_address").html(addressHtml);

          $("#biling_address_as_delivery_addr").html(addressHtml);

          calculateSaleBillRowTotal();
        } else {
          $(".add_type").css("display", "none");

          $("#delivery_address_type").val(0);

          $("#edit_estimation_detalis").trigger("click");
        }
      }
    },
  });
}

$("#make_delivery_address").on("change", function () {
  $("#my_addr").css("display", "none");

  $(".new_address").css("display", "none");

  if ($(this).is(":checked")) {
    $("#delivery_address_type").val(1);

    $("#biling_address_as_delivery_addr").html($("#cus_reg_address").html());

    console.log(registered_address);

    if (registered_address) {
      $("#cus_del_state").val(registered_address.id_state);

      $("#cus_del_country").val(registered_address.id_country);
    }

    calculateSaleBillRowTotal();
  } else {
    $("#delivery_address_type").val(0);

    $("#biling_address_as_delivery_addr").html("-");

    $("#my_addr").css("display", "block");

    get_mydelivery_address();
  }
});

function get_mydelivery_address() {
  $("#select_myaddr option").remove();

  my_Date = new Date();

  $.ajax({
    type: "POST",

    url:
      base_url +
      "index.php/admin_ret_billing/get_mydelivery_address/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    data: { id_customer: $("#bill_cus_id").val() },

    success: function (data) {
      delivered_address = data.delivered_address;

      var id_delivery = $("#select_myaddr").val();

      $.each(data.delivered_address, function (key, val) {
        console.log(val);

        $("#select_myaddr").append(
          $("<option></option>")
            .attr("value", val.id_delivery)

            .text(val.address_name)
        );
      });

      $("#select_myaddr").select2({
        placeholder: "Select Address",

        allowClear: true,
      });

      $("#select_myaddr").select2(
        "val",
        id_delivery != null && id_delivery != "" ? id_delivery : ""
      );
    },

    error: function (error) {},
  });
}

$("#add_new_delivery_address").on("click", function () {
  get_delivery_country();

  $("#del_state").select2();

  $("#del_city").select2();

  $(".new_address").css("display", "block");
});

$("#select_myaddr").on("change", function () {
  var id_delivery = this.value;

  $("#biling_address_as_delivery_addr").html("-");

  $.each(delivered_address, function (key, data) {
    if (id_delivery == data.id_delivery) {
      var addressHtml =
        "<span>" +
        data.address1 +
        "</br>" +
        (data.address2 != "" ? data.address2 : "") +
        "</br>" +
        (data.address3 != "" ? data.address3 : "") +
        "</br>" +
        (data.city_name != ""
          ? data.city_name + " - " + (data.pincode != "" ? data.pincode : "")
          : "") +
        "</br>" +
        (data.state_name != "" ? data.state_name : "") +
        "</br>" +
        (data.country_name != "" ? data.country_name : "") +
        "</br>";

      ("</br></span>");

      $("#biling_address_as_delivery_addr").html(addressHtml);

      $("#cus_del_state").val(data.id_state);

      $("#cus_del_country").val(data.id_country);
    }
  });
});

function get_delivery_country() {
  $("#country option").remove();

  $.ajax({
    type: "GET",

    url: base_url + "index.php/settings/company/getcountry",

    dataType: "json",

    success: function (country) {
      var id_country = $("#delivery_country").val();

      $.each(country, function (key, country) {
        $("#del_country").append(
          $("<option></option>")
            .attr("value", country.id)

            .text(country.name)
        );
      });

      $("#del_country").select2({
        placeholder: "Enter Country",

        allowClear: true,
      });

      $("#del_country").select2(
        "val",
        id_country != null && id_country != "" ? id_country : ""
      );
    },

    error: function (error) {},
  });
}

$("#del_country").on("change", function () {
  if (this.value) {
    get_delivery_state(this.value);
  }
});

$("#del_state").on("change", function () {
  if (this.value) {
    get_delivery_city(this.value);
  }
});

function get_delivery_state(id) {
  $("#del_state option").remove();

  $.ajax({
    type: "POST",

    data: { id_country: id },

    url: base_url + "index.php/settings/company/getstate",

    dataType: "json",

    success: function (state) {
      var id_state = $("#delivery_state").val();

      $.each(state, function (key, state) {
        $("#del_state").append(
          $("<option></option>")
            .attr("value", state.id)

            .text(state.name)
        );
      });

      $("#del_state").select2({
        placeholder: "Enter State",

        allowClear: true,
      });

      $("#del_state").select2(
        "val",
        id_state != null && id_state != "" ? id_state : ""
      );
    },

    error: function (error) {},
  });
}

function get_delivery_city(id) {
  $("#del_city option").remove();

  $.ajax({
    type: "POST",

    data: { id_state: id },

    url: base_url + "index.php/settings/company/getcity",

    dataType: "json",

    success: function (city) {
      var id_city = $("#delivery_city").val();

      $.each(city, function (key, city) {
        $("#del_city").append(
          $("<option></option>")
            .attr("value", city.id)

            .text(city.name)
        );
      });

      $("#del_city").select2({
        placeholder: "Enter City",

        allowClear: true,
      });

      $("#del_city").select2("val", id_city != null ? id_city : "");
    },

    error: function (error) {},
  });
}

$("#save_new_delivery_addr").on("click", function () {
  if ($("#delivery_address_type").val() == 1) {
    $('.nav-tabs a[href="#tot_summary"]').tab("show");

    $("#cus_del_state").val();

    calculateSaleBillRowTotal();
  } else if (
    $("#select_myaddr").val() != "" &&
    $("#select_myaddr").val() != null
  ) {
    $('.nav-tabs a[href="#tot_summary"]').tab("show");

    calculateSaleBillRowTotal();
  } else {
    if ($("#del_address_name").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Enter The Delivery Address Name",
      });
    } else if (
      $("#del_country").val() == "" ||
      $("#del_country").val() == null
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select Country",
      });
    } else if ($("#del_state").val() == "" || $("#del_state").val() == null) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select State",
      });
    } else if ($("#del_city").val() == "" || $("#del_city").val() == null) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select City",
      });
    } else if ($("#del_address1").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Enter The Address1",
      });
    } else if ($("#del_address2").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Enter The Address2",
      });
    } else if ($("#del_pincode").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Enter The PIN Code",
      });
    } else {
      var addressHtml =
        "<span>" +
        $("#del_address1").val() +
        "</br>" +
        ($("#del_address2").val() != "" ? $("#del_address2").val() : "") +
        "</br>" +
        ($("#del_address3").val() != "" ? $("#del_address3").val() : "") +
        "</br>" +
        ($("#del_city option:selected").text() +
          " - " +
          $("#del_pincode").val()) +
        "</br>" +
        $("#del_state option:selected").text() +
        "</br>" +
        $("#del_country option:selected").text() +
        "</br>" +
        "</span>";

      $("#biling_address_as_delivery_addr").html(addressHtml);

      $("#cus_del_state").val($("#del_state").val());

      $("#cus_del_country").val($("#del_country").val());

      $('.nav-tabs a[href="#tot_summary"]').tab("show");

      calculateSaleBillRowTotal();
    }
  }
});

function get_branches() {
  //$(".overlay").css('display','block');

  $.ajax({
    type: "GET",

    url: base_url + "index.php/branch/branchname_list",

    dataType: "json",

    success: function (data) {
      branch_details = data.branch;
    },
  });
}

$("#add_new_customer").on("click", function (e) {
  //$('#confirm-add-customer').modal('toggle');

	if($('#id_branch').val() != '' && $('#id_branch').val() != null){

	$('#demo').offcanvas('show');

	$('#confirm-add').modal('toggle');

  // get_village_list();

  $("#myModalLabel").text("Add Customer");

  $("#add_newcutomer").text("Add");

  $("#cus_first_name").val("");

  $("#cus_mobile").val("");

  $("#cus_mobile").prop("readonly", false);

  $("#id_village").val("");

  $("#sel_village option").remove();

  $("#id_customer").val("");

  $("#id_country").val("");

  $("#id_state").val("");

  $("#state option").remove();

  $("#id_city").val("");

  $("#city option").remove();

  $("#address1").val("");

  $("#address2").val("");

  $("#address3").val("");

  $("#pincode").val("");

  $("#cus_email").val("");

  $("#country").select2({
    placeholder: "Enter Country",

    allowClear: true,
  });

  $("#state").select2({
    placeholder: "Enter State",

    allowClear: true,
  });

  $("#city").select2({
    placeholder: "Enter City",

    allowClear: true,
  });

	get_country();

	$('#id_country').val($('#branch_id_country').val());
	$('#id_state').val($('#branch_id_state').val());
	$('#id_city').val($('#branch_id_city').val());


}
	else {

		$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>" + 'Please Select the Branch' });

		setTimeout(function () {
			$('.toast').fadeOut();
		}, 2000);
	}

});

function get_village_list() {
  $("#sel_village option").remove();

  $("#ed_sel_village option").remove();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/ajax_get_village?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    type: "GET",

    dataType: "JSON",

    success: function (data) {
      var id_village = $("#id_village").val();

      $.each(data, function (key, item) {
        $("#sel_village").append(
          $("<option></option>")
            .attr("value", item.id_village)

            .text(item.village_name)
        );
      });

      $("#sel_village").select2({
        placeholder: "Select Village",

        allowClear: true,
      });

      $("#sel_village").select2(
        "val",
        id_village != "" && id_village > 0 ? id_village : ""
      );

      $(".overlay").css("display", "none");
    },

    error: function (error) {},
  });
}

$("#sel_village").on("change", function () {
  if (this.value != "") {
    $("#id_village").val(this.value);
  } else {
    $("#id_village").val("");
  }
});

function get_country() {
  $("#country option").remove();

  $.ajax({
    type: "GET",

    url: base_url + "index.php/settings/company/getcountry",

    dataType: "json",

    success: function (country) {
      cus_country = country;

      var cus_id_country = $("#id_country").val();

      $.each(country, function (key, country) {
        if (country.is_default == 1) {
          $("#id_country").val(country.id);

          $("#mob_no_len").val(country.mob_no_len);
        }

        $("#country").append(
          $("<option></option>")
            .attr("value", country.id)
            .attr("min_mob_len", country.min_mob_len)
            .attr("max_mob_len", country.max_mob_len)
            .text(country.name)
        );
      });

      var id_country = $("#id_country").val();

      $("#country").select2({
        placeholder: "Enter Country",

        allowClear: true,
      });

      $("#country").select2(
        "val",
        cus_id_country != ""
          ? cus_id_country
          : id_country != null && id_country != ""
          ? id_country
          : ""
      );
    },

    error: function (error) {},
  });
}

$(document).ready(function () {
  $("#country").on("change", function () {
    var id_country = this.value;
    $.each(cus_country, function (key, item) {
      if (id_country == item.id) {
        $("#mob_no_len").val(item.mob_no_len);
      }
    });

    if (this.value) {
      get_state(this.value);
    }
  });

  $("#state").on("change", function () {
    if (this.value) {
      get_city(this.value);
    }
  });
});

function get_state(id) {
  $("#state option").remove();

  $.ajax({
    type: "POST",

    data: { id_country: id },

    url: base_url + "index.php/settings/company/getstate",

    dataType: "json",

    success: function (state) {
      var cus_id_state = $("#id_state").val();

      $.each(state, function (key, state) {
        if (state.is_default == 1) {
          $("#id_state").val(state.id);
        }

        $("#state").append(
          $("<option></option>")
            .attr("value", state.id)

            .text(state.name)
        );
      });

      var id_state = $("#id_state").val();

      $("#state").select2({
        placeholder: "Enter State",

        allowClear: true,
      });

      $("#state").select2(
        "val",
        cus_id_state != ""
          ? cus_id_state
          : id_state != null && id_state != ""
          ? id_state
          : ""
      );
    },

    error: function (error) {},
  });
}

function get_city(id) {
  $("#city option").remove();

  $.ajax({
    type: "POST",

    data: { id_state: id },

    url: base_url + "index.php/settings/company/getcity",

    dataType: "json",

    success: function (city) {
      $.each(city, function (key, city) {
        if (city.is_default == 1) {
          $("#id_city").val(city.id);
        }

        $("#city").append(
          $("<option></option>")
            .attr("value", city.id)

            .text(city.name)
        );
      });

      var id_city = $("#id_city").val();

      $("#city").select2({
        placeholder: "Enter City",

        allowClear: true,
      });

      $("#city").select2("val", id_city != null ? id_city : "");
    },

    error: function (error) {},
  });
}

$("#edit_estimation_detalis").on("click", function () {
  var billing_for = $("input[name='billing[billing_for]']:checked").val();

  if (
    $("#bill_cus_id").val() != "" &&
    typeof $("#bill_cus_id").val() != "undefined"
  ) {
    //  $('#confirm-add-customer').modal('toggle');

    $("#confirm-add").modal("toggle");

    $("#sel_village option").remove();

    $("#state option").remove();

    $("#city option").remove();

    $("#country").select2({
      placeholder: "Enter Country",

      allowClear: true,
    });

    $("#state").select2({
      placeholder: "Enter State",

      allowClear: true,
    });

    $("#city").select2({
      placeholder: "Enter City",

      allowClear: true,
    });

    if (billing_for == 2) {
      $(".gst").css("display", "block");
    }

    $.ajax({
      url:
        base_url +
        "index.php/admin_ret_billing/getCustomersindRecords/?nocache=" +
        my_Date.getUTCSeconds(),

      dataType: "json",

      method: "POST",

      data: { cus_id: $("#bill_cus_id").val(), billing_for: billing_for },

      success: function (data) {
        if (data.length > 0) {
          let customer_records = data[0];

          $("#myModalLabel").text("Edit Customer");

          $("#add_newcutomer").text("Update");

          $("#cus_first_name").val(customer_records.firstname);

          $("#cus_mobile").val(customer_records.mobile);

          $("#cus_mobile").prop("readonly", true);

          $("#id_village").val(customer_records.id_village);

          $("#id_customer").val(customer_records.value);

          $("#cus_village").html(customer_records.id_village);

          $("#cus_city").val(customer_records.id_city);

          $("#cus_state").val(customer_records.id_state);

          $("#cus_country").val(customer_records.id_country);

          $("#cus_address1").val(customer_records.address1);

          $("#cus_address2").val(customer_records.address2);

          $("#cus_address3").val(customer_records.address3);

          $("#id_country").val(customer_records.id_country);

          $("#id_state").val(customer_records.id_state);

          $("#id_city").val(customer_records.id_city);

          $("#address1").val(customer_records.address1);

          $("#address2").val(customer_records.address2);

          $("#address3").val(customer_records.address3);

          $("#pincode").val(customer_records.pincode);

          $("#cus_email").val(customer_records.email);

          $("#pin_code_add").val(customer_records.pincode);

          $("#gst_no").val(customer_records.gst_number);

          $("#pan").val(customer_records.pan_no);

          $("#aadharid").val(customer_records.aadharid);

          $("#title").val(customer_records.title);

          $("#cus_img_preview").attr("src", customer_records.img_path);

          $("#title").val(customer_records.title);

          $("#professionval").val(customer_records.id_profession);

          $("#date_of_birth").val(customer_records.date_of_birth);

          $("#date_of_wed").val(customer_records.date_of_wed);

          $("#dl").val(customer_records.dl_no);

          $("#pp").val(customer_records.pp_no);

          if (customer_records.gender == 0) {
            $("#gender0").attr("checked", true);
          } else if (customer_records.gender == 1) {
            $("#gender1").attr("checked", true);
          } else {
            $("#gender2").attr("checked", true);
          }

          if (customer_records.is_vip == 1) {
            $("#vip1").attr("checked", true);
          } else {
            $("#vip0").attr("checked", true);
          }

          get_country();

          // get_village_list();

          if (customer_records.pincode != "") {
            get_villages_by_pincode(customer_records.pincode);
          }

          get_profession();
        }
      },
    });
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Kindly Select Any One Customer Records..",
    });
  }
});

//customer delivery address
//Payment Mode Edit
// $("#bill_cus_name").on("keyup", function (e) {

// 	var customer = $("#bill_cus_name").val();

// 	if (customer.length >= 2) {

// 		getSearchCustomers(customer);

// 	}

// 	$('#updCusName').prop('disabled', false);

// });

$('#billed_search').on('click', function () {
	if ($('#paymentmode_ed').val() != '' && $('#branch_select').val() != '') {
		$.ajax({
			type: 'POST',
			url: base_url + 'index.php/admin_ret_billing/paymentmode_edit/active_bill_list',
			data: { 'bill_no': $('#paymentmode_ed').val(), 'branch': $('#branch_select').val(), 'fin_year': $('#fin_year_select').val() },
			dataType: 'json',
			success: function (data) {
				if (data.length > 0) {
					$('#paymentmode_ed').prop('disabled', true);
					$('#billed_search').prop('disabled', true);
					$("#branch_select").prop("disabled", true);
					$('#card_detail_modal').prop('disabled', false);
					$('#cheque_modal').prop('disabled', false);
					$('#net_bank_modal').prop('disabled', false);
					$('#paymentmode_ed').val(data[0].bill_no);
					$('#hidden_bill_id').val(data[0].bill);
					payment_date = data[0].payment_date;
					bill_id = data[0].bill_id;
					created_by = data[0].created_by;
					// tot_bill_amount_edit = data[0].tot_bill_amount;
					$('#c_name').val(data[0].firstname);
					$('#bill_cus_name').val(data[0].cus_name);
					$('#bill_cus_id').val(data[0].bill_cus_id);
					$('#billed_cash').val(data[0].tot_bill_amount);
					$('#pan_no').val(data[0].pan_no);
					$('#gst_num').val(data[0].gst_no);
					$('#aadhaar_no').val(data[0].aadhaar_no);
					$("input[name='billing_for'][value='" + data[0].billing_for + "']").prop("checked", true);
					if (data[0].billing_for == '1'){
						$("input[name='billing_for'][value='2']").prop("disabled", true);
					}
					// tot_amt_received = data[0].tot_amt_received;
					tot_amt_received = data[0].tot_amt_received;

          var select_emp =
            "<option class='form-control' value='0'>-Select Employee-</option>";
          $.each(item_emp_details, function (pkey, emp) {
            let emp_selected = "";
            if (data[0].id_employee == emp.id_employee) {
              emp_selected = "selected = 'selected'";
              $("#id_employee").val(data[0].id_employee);
            }
            $("#emp_select").select2(
              "val",
              data[0].id_employee != "" ? data[0].id_employee : ""
            );
          });
          tot_payment_amt = 0;
          for (i = 0; i < data.length; i++) {
            tot_payment_amt += parseFloat(data[i].payment_amount);
            if (data[i].payment_mode == "Cash") {
              $("#make_pay_cash").val(data[i].payment_amount);
            }
            if (data[i].payment_mode == "CC" || data[i].payment_mode == "DC") {
              var bank_list = "";
              $.each(bank_details, function (pkey, item) {
                selected = ' selected="selected"';
                bank_list +=
                  "<option value='" +
                  item.id_bank +
                  "' " +
                  (data[i].id_branch == [i] ? selected : "") +
                  ">" +
                  item.acc_number +
                  "</option>";
              });
              var device_list = "";
              $.each(payment_device_details, function (pkey, item) {
                var selected = "";
                if (item.id_device == data[i].id_pay_device) {
                  selected = ' selected="selected"';
                }
                device_list +=
                  "<option  value='" +
                  item.id_device +
                  "' " +
                  selected +
                  ">" +
                  item.device_name +
                  "</option>";
              });

              selected = ' selected="selected"';
              var row = "";
              row +=
                '<tr id="' +
                $("#card_details tbody tr").length +
                '">' +
                '<td><select name="card_details[card_name][]" class="form-control card_name"><option value="1" ' +
                (data[i].card_type == 1 ? selected : "") +
                '>RuPay</option><option value="2" ' +
                (data[i].card_type == 2 ? selected : "") +
                '>VISA</option><option value="3" ' +
                (data[i].card_type == 3 ? selected : "") +
                '>Mastro</option><option value="4" ' +
                (data[i].card_type == 4 ? selected : "") +
                ">Master</option></select></td>" +
                '<td><select name="card_details[card_type][]" class="form-control card_type"><option value="1" ' +
                (data[i].payment_mode == "CC" ? selected : "") +
                '>CC</option><option value="2" ' +
                (data[i].payment_mode == "DC" ? selected : "") +
                ">DC</option></select></td>" +
                '<td class="device"  ><select class="form-control id_device" name="card_details[id_device][]" style="width: 100px !important;">' +
                device_list +
                "</select></td> " +
                '<td><input type="number" step="any" class="form-control card_no" name="card_details[card_no][]" value="' +
                data[i].card_no +
                '"/></td>' +
                '<td><input type="number" step="any" class="form-control card_amt" name="card_details[card_amt][]" value="' +
                data[i].payment_amount +
                '"/></td>' +
                '<td><input type="text" step="any" class="ref_no" name="card_details[ref_no][]" value="' +
                data[i].payment_ref_number +
                '" ></td>' +
                '<td><a href="#" onClick="removeCC_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
                "</tr>";
              $("#card_details tbody").append(row);
              var cc_amount = 0;
              var dc_amount = 0;
              card_payment = [];
              $(
                "#card-detail-modal .modal-body #card_details > tbody  > tr"
              ).each(function (index, tr) {
                if ($(this).find(".card_amt").val() != "") {
                  if ($(this).find(".card_type").val() == 1) {
                    cc_amount += parseFloat($(this).find(".card_amt").val());
                  } else if ($(this).find(".card_type").val() == 2) {
                    dc_amount += parseFloat($(this).find(".card_amt").val());
                  }
                }
              });

              $("#cc_billed_cash").val(
                parseFloat(
                  parseFloat(cc_amount) + parseFloat(dc_amount)
                ).toFixed(2)
              );
            }
            if (data[i].payment_mode == "CHQ") {
              var row = "";
              var bank_list = "";

              $.each(bank_details, function (pkey, item) {
                selected = ' selected="selected"';
                bank_list +=
                  "<option value='" +
                  item.id_bank +
                  "' " +
                  (data[i].id_bank == item.id_bank ? selected : "") +
                  ">" +
                  item.acc_number +
                  "</option>";
              });

              row +=
                "<tr>" +
                '<td><input class="form-control  datemask date cheque_date" data-date-format="dd-mm-yyyy" name="cheque_details[cheque_date][]" type="text" placeholder="Cheque Date" value="' +
                data[i].cheque_date +
                '"/></td>' +
                '<td><select class="form-control id_bank" name="cheque_details[id_bank][]">' +
                bank_list +
                "</select></td> " +
                '<td><input type="number" step="any" class="cheque_no" name="cheque_details[cheque_no][]" value="' +
                data[i].cheque_no +
                '"/></td>' +
                '<td><input type="number" step="any" class="payment_amount" name="cheque_details[payment_amount][]" value="' +
                data[i].payment_amount +
                '"/></td>' +
                '<td><a href="#" onClick="removeChq_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
                "</tr>";
              $("#chq_details tbody").append(row);
              $("#chq_details > tbody").find("tr:last .cheque_date").focus();
              $(".cheque_date").datepicker({ dateFormat: "dd-mm-yyyy" });
              var chq_amount = 0;

              $(
                "#cheque-detail-modal .modal-body #chq_details > tbody  > tr"
              ).each(function (index, tr) {
                if ($(this).find(".payment_amount").val() != "") {
                  console.log($(this).find(".payment_amount").val());
                  chq_amount += parseFloat(
                    $(this).find(".payment_amount").val()
                  );
                }
              });
              console.log(chq_amount);
              $("#chq_billed_cash").val(parseFloat(chq_amount).toFixed(2));
            }
            if (data[i].payment_mode == "NB") {
              var bank_list = "";
              var device_list = "";
              $.each(bank_details, function (pkey, item) {
                selected = ' selected="selected"';
                bank_list +=
                  "<option value='" +
                  item.id_bank +
                  "' " +
                  (data[i].id_branch == [i] ? selected : "") +
                  ">" +
                  item.acc_number +
                  "</option>";
              });

              $.each(payment_device_details, function (pkey, item) {
                var selected = "";
                if (item.id_device == data[i].id_pay_device) {
                  selected = ' selected="selected"';
                }
                device_list +=
                  "<option  value='" +
                  item.id_device +
                  "' " +
                  selected +
                  ">" +
                  item.device_name +
                  "</option>";
              });

              selected = 'selected="selected"';

              var row = "";
              row +=
                "<tr>" +
                '<td><select name="nb_details[nb_type][]" class="form-control nb_type"><option value=1 ' +
                (data[i].NB_type == 1 ? selected : "") +
                ">RTGS</option><option value=2 " +
                (data[i].NB_type == 2 ? selected : "") +
                ">IMPS</option><option value=3 " +
                (data[i].NB_type == 3 ? selected : "") +
                ">UPI</option></select></td>" +
                '<td class="upi_type" "' +
                (data[i].NB_type == 3
                  ? 'style="display: none "'
                  : 'style="display: block "') +
                '"><select class="form-control " name="nb_details[id_bank][]"  >' +
                bank_list +
                "</select></td> " +
                '<td class="device" ' +
                (data[i].NB_type != 3
                  ? 'style="display: none "'
                  : 'style="display: block "') +
                ' ><select class="form-control id_device" name="card_details[id_device][]" style="width: 100px !important;">' +
                device_list +
                "</select></td> " +
                '<td><input class="form-control  datemask date nb_date" data-date-format="yyyy-mm-dd" name="nb_details[nb_date][]" type="text" placeholder="NB Date"  value="' +
                data[0].payment_date +
                '" /></td>' +
                '<td><input type="number" step="any" class="form-control ref_no" name="nb_details[ref_no][]" placeholder="Enter Ref No" value="' +
                data[i].payment_ref_number +
                '"/></td>' +
                '<td><input type="number" step="any" class="form-control amount" name="nb_details[amount][]" placeholder="Enter The Amount" value="' +
                data[i].payment_amount +
                '"/></td>' +
                '<td><a href="#" onClick="removeNb_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
                "</tr>";

              $("#net_bank_details tbody").append(row);
              var date = new Date();
              var today = data[0].payment_date;
              $(".nb_date").datepicker({
                dateFormat: "yyyy-mm-dd",
                endDate: today,
              });

              if (data[i].NB_type == 3) {
                $(".upi_type").hide();
                $(".device").show();
              } else {
                $(".upi_type").show();
                $(".device").hide();
              }

              var nb_amount = 0;
              $(
                "#net_banking_modal .modal-body #net_bank_details > tbody  > tr"
              ).each(function (index, tr) {
                if ($(this).find(".amount").val() != "") {
                  nb_amount += parseFloat($(this).find(".amount").val());
                }
              });
              $("#nb_billed_cash").val(parseFloat(nb_amount).toFixed(2));
            }
          }

          $("#billed_cash").val(tot_payment_amt);
					tot_bill_amount_edit = tot_payment_amt;

        } else {
          $.toaster({
            priority: "warning",
            title: "Warning!",
            message: "" + "</br> Invalid Bill No...",
          });
        }
      },
    });
  }
});

$("#cc_billed_cash").on("focus", function () {
  $("#card_detail_modal").trigger("click");
});

$("#chq_billed_cash").on("focus", function () {
  $("#cheque_modal").trigger("click");
});

$("#nb_billed_cash").on("focus", function () {
  $("#net_bank_modal").trigger("click");
});

$("#save_bill_edit").on("click", function () {
  if (flag == 1) {
    $("#save_bill_edit").prop("disabled", true);
    card_payment_edit = [];
    chq_payment_edit = [];
    nb_payment_edit = [];
    $("#card-detail-modal .modal-body #card_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".card_amt").val() != "") {
          card_payment_edit.push({
            card_name: $(this).find(".card_name").val(),
            card_type: $(this).find(".card_type").val(),
            id_bank: $(this).find(".id_bank").val(),
            card_no: $(this).find(".card_no").val(),
            card_amt: $(this).find(".card_amt").val(),
            id_device: $(this).find(".id_device").val(),
            ref_no: $(this).find(".ref_no").val(),
          });
        }
      }
    );
    $("#cheque-detail-modal .modal-body #chq_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".payment_amount").val() != "") {
          chq_payment_edit.push({
            cheque_date: $(this).find(".cheque_date").val(),
            cheque_no: $(this).find(".cheque_no").val(),
            id_bank: $(this).find(".id_bank").val(),
            bank_branch: $(this).find(".bank_branch").val(),
            payment_amount: $(this).find(".payment_amount").val(),
          });
        }
      }
    );
    $("#net_banking_modal .modal-body #net_bank_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".amount").val() != "") {
          nb_payment_edit.push({
            nb_type: $(this).find(".nb_type").val(),
            id_device: $(this).find(".id_device").val(),
            id_bank: $(this).find(".id_bank").val(),
            amount: $(this).find(".amount").val(),
            ref_no: $(this).find(".ref_no").val(),
          });
        }
      }
    );
    $.ajax({
      type: "POST",
      url: base_url + "index.php/admin_ret_billing/paymentmode_edit/save",
      data: {
        bill_id: $("#hidden_bill_id").val(),
        payment_date: payment_date,
        card_payment: card_payment_edit,
        chq_payment: chq_payment_edit,
        nb_payment: nb_payment_edit,
        created_by: created_by,
        cash_pay: $("#make_pay_cash").val(),
        branch: $("#branch_select").val(),
        bill_no: $("#paymentmode_ed").val(),
      },
      dataType: "json",
      success: function (data) {
        if (data.status == true) {
          $.toaster({
            priority: "success",
            title: "Success!",
            message: "" + "</br> Bill Edited SuccessFully...",
          });
          window.location.href =
            base_url + "index.php/admin_ret_billing/billing/list";

          $("div.overlay").css("display", "none");
        } else {
          $.toaster({
            priority: "warning",
            title: "Success!",
            message: "" + "</br> Unable to Edit Bill",
          });
          window.location.reload();
          $("div.overlay").css("display", "none");
        }
      },
      error: function (error) {
        $("div.overlay").css("display", "none");
      },
    });
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message:
        "" + "</br> Total amount should be equal to the billed amount...",
    });
  }
});

$(document).on(
  "keyup",
  ".amount, .payment_amount, .card_amt, #make_pay_cash,#c_name",
  function (e) {
    var cash_final = $("#make_pay_cash").val();
    var card_final = $("#cc_billed_cash").val();
    var chq_final = $("#chq_billed_cash").val();
    var nb_final = $("#nb_billed_cash").val();
    if (cash_final == "") {
      var cash_final = 0;
    }
    if (card_final == "") {
      var card_final = 0;
    }
    if (chq_final == "") {
      var chq_final = 0;
    }
    if (nb_final == "") {
      var nb_final = 0;
    }
    var total_payment_amount_edit =
      parseFloat(cash_final) +
      parseFloat(card_final) +
      parseFloat(chq_final) +
      parseFloat(nb_final);

    if (
      parseFloat(tot_amt_received).toFixed(2) ==
        parseFloat(total_payment_amount_edit).toFixed(2) &&
      $("#c_name").val() != ""
    ) {
      $("#save_bill_edit").prop("disabled", false);
      flag = 1;
    } else {
      flag = 0;
      $("#save_bill_edit").prop("disabled", true);
      //$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br> Cash should be equal to the billed amount..."});
    }
  }
);
$("#cancel_bill_edit").on("click", function () {
  window.location.reload();
  $("div.overlay").css("display", "none");
});

if (ctrl_page[1] != "billing" && ctrl_page[2] != "add") {
  $("#card-detail-modal,#cheque-detail-modal,#net_banking_modal").on(
    "hidden.bs.modal",
    function () {
      var cash_final = $("#make_pay_cash").val();
      var card_final = $("#cc_billed_cash").val();
      var chq_final = $("#chq_billed_cash").val();
      var nb_final = $("#nb_billed_cash").val();
      //var tot_bill_amount_edit = 0;
      if (cash_final == "") {
        var cash_final = 0;
      }
      if (card_final == "") {
        var card_final = 0;
      }
      if (chq_final == "") {
        var chq_final = 0;
      }
      if (nb_final == "") {
        var nb_final = 0;
      }
      var total_payment_amount_edit =
        parseFloat(cash_final) +
        parseFloat(card_final) +
        parseFloat(chq_final) +
        parseFloat(nb_final);

      if (
        parseFloat(tot_payment_amt).toFixed(2) ==
        parseFloat(total_payment_amount_edit).toFixed(2)
      ) {
        $("#save_bill_edit").prop("disabled", false);
        flag = 1;
      } else {
        flag = 0;
        $("#save_bill_edit").prop("disabled", true);
      }

      // create_new_empty_cardpay_row();

      // create_new_empty_chqpay_row();

      // create_new_empty_net_banking_row();
    }
  );
}
//Payment Mode Edit

$("input[name$='cus[cus_type]']").click(function () {
  var cus_type = $(this).val();

  if (cus_type == 1) {
    $(".customer").css("display", "block");

    $(".gst").css("display", "none");

    $(".company").css("display", "none");
  } else {
    $(".customer").css("display", "none");

    $(".gst").css("display", "block");

    $(".company").css("display", "block");
  }
});

$("#aadharid,#ed_cus_aadhar").keyup(function () {
  var value = $(this).val();

  value = value
    .replace(/\D/g, "")
    .split(/(?:([\d]{4}))/g)
    .filter((s) => s.length > 0)
    .join("-");

  $(this).val(value);
});

$("#aadharid,#ed_cus_aadhar").on("blur onchange", function (event) {
  event.preventDefault();

  var value = $(this).val();

  var maxLength = $(this).attr("maxLength");

  if (value.length != maxLength) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Enter The Valid Aadhar No..",
    });

    //$('#aadharid,#ed_cus_aadhar').val('');
  }
});

$(".pan_no").on("change", function () {
  if (this.value != "") {
    var regexp = /^[a-zA-Z]{5}\d{4}[a-zA-Z]{1}$/;

    if (!regexp.test(this.value)) {
      //$("#pan").val("");

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Enter The Valid PAN No..",
      });

      $("#pan").focus();
    }
  }
});

$(".dl_no").on("change", function () {
  var value = $(this).val();
  var maxLength = $(this).attr("maxLength");
  if (value.length > maxLength) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Enter The Valid Driving License No..",
    });
    $("#dl").focus();
    $("#dl").val("");
  }
});

$(".pp_no").on("change", function () {
  var value = $(this).val();
  var maxLength = $(this).attr("maxLength");
  if (value.length > maxLength) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Enter The Valid Passport No..",
    });
    $("#pp").val("");
    $("#pp").focus();
  }
});

function checkPanNoValidation(pan_no) {
  var status = false;

  if (pan_no != "") {
    var regexp = /^[a-zA-Z]{5}\d{4}[a-zA-Z]{1}$/;

    if (regexp.test(pan_no)) {
      status = true;
    } else {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Enter The Valid PAN No..",
      });

      $("#pan").focus();
    }
  }

  return status;
}

$("#edit_customer").on("click", function () {
  if ($("#id_customer").val() != "" && $("#id_customer").val() != undefined) {
    get_customer();
  }
});

function get_customer() {
  my_Date = new Date();

  $.ajax({
    type: "POST",

    url:
      base_url +
      "index.php/admin_ret_estimation/get_customer?nocache=" +
      my_Date.getUTCSeconds(),

    cache: false,

    dataType: "JSON",

    data: { id_customer: $("#id_customer").val() },

    success: function (data) {
      $("#id_village").val(data.id_village);

      $("#cus_first_name").val(data.firstname);

      $("#cus_mobile").val(data.mobile);

      $("#cus_email").val(data.email);

      $("#id_country").val(data.id_country);

      $("#id_city").val(data.id_city);

      $("#id_state").val(data.id_state);

      $("#address1").val(data.address1);

      $("#address2").val(data.address2);

      $("#address3").val(data.address3);

      $("#pin_code_add").val(data.pincode);

      $("#gst_no").val(data.gst_number);

      $("#pan").val(data.pan_no);

      $("#aadharid").val(data.aadharid);

      $("#dl").val(data.dl_no);

      $("#pp").val(data.pp_no);

      $("#professionval").val(data.id_profession);

      $("#date_of_birth").val(data.date_of_birth);

      $("#date_of_wed").val(data.date_of_wed);

      console.log($("#pincode").val());

      if (data.cus_type == 1) {
        $("#cus_type1").attr("checked", true);
      } else {
        $("#cus_type2").attr("checked", true);

        $(".gst_no").show();
      }

      if (data.is_vip == 1) {
        $("#vip1").attr("checked", true);
      } else {
        $("#vip0").attr("checked", true);
      }

      get_country();

      // get_village_list();

      get_profession();

      //  $('#confirm-add-customer').modal('show');

      $("#confirm-add").modal("show");
    },
  });
}

function get_check_customer_payment_det(id_customer = "", curRow = "") {
  $("#make_pay_cash").prop("readonly", true);

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/bill_payment_details/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      id_customer:
        ctrl_page[1] == "billing" || ctrl_page[1] == "bill_split"
          ? $("#bill_cus_id").val()
          : ctrl_page[1] == "advance_transfer"
          ? $("#to_cus_id").val()
          : $("#id_customer").val(),
      id_branch: $("#id_branch").val(),
    },

    success: function (data) {
      $("#make_pay_cash").prop("readonly", false);

      if (curRow=="" && ctrl_page[1] == "bill_split"){
        curRow = $(this).closest('tr');
      }
      $.each(data, function (key, val) {
        if (ctrl_page[1] == "bill_split") {
          curRow.find(".cus_payment_details").val(val.bill_amount);
        } else {
          $("#cus_payment_details").val(val.bill_amount);
        }
      });
    },
  });
}

function validate_max_cash() {
  let status = true;

  if (parseFloat($("#validate_max_cash").val()) == 1) {
    let cus_paid_amt =
      isNaN($("#cus_payment_details").val()) ||
      $.trim($("#cus_payment_details").val()) == ""
        ? 0
        : parseFloat($("#cus_payment_details").val());

    let max_cash_amt =
      isNaN($("#max_cash_amt").val()) || $.trim($("#max_cash_amt").val()) == ""
        ? 0
        : parseFloat($("#max_cash_amt").val());

    let cash_pay =
      isNaN($("#make_pay_cash").val()) ||
      $.trim($("#make_pay_cash").val()) == ""
        ? 0
        : parseFloat($("#make_pay_cash").val());

    let chit_cash_paid =
      isNaN($("#chit_total_cash_amt").val()) ||
      $.trim($("#chit_total_cash_amt").val()) == ""
        ? 0
        : parseFloat($("#chit_total_cash_amt").val());

    let adv_total_cash_amt =
      isNaN($("#adv_total_cash_amt").val()) ||
      $.trim($("#adv_total_cash_amt").val()) == ""
        ? 0
        : parseFloat($("#adv_total_cash_amt").val());

    let sales_return_amt =
      isNaN($("#sales_return_cash_amt").val()) ||
      $.trim($("#sales_return_cash_amt").val()) == ""
        ? 0
        : parseFloat($("#sales_return_cash_amt").val());

    let total_cash_pay =
      cash_pay +
      chit_cash_paid +
      adv_total_cash_amt +
      cus_paid_amt +
      sales_return_amt;

    if (parseFloat(total_cash_pay) >= parseFloat(max_cash_amt)) {
      let max_payable =
        max_cash_amt -
        cus_paid_amt -
        sales_return_amt -
        cash_pay -
        chit_cash_paid -
        adv_total_cash_amt;

      if ($("#make_pay_cash").is(":focus")) {
        $("#make_pay_cash").val(0);

        max_payable =
          max_cash_amt -
          cus_paid_amt -
          sales_return_amt -
          chit_cash_paid -
          adv_total_cash_amt;
      } else if ($("#add_adv_adj").is(":focus")) {
        max_payable =
          max_cash_amt -
          cus_paid_amt -
          sales_return_amt -
          cash_pay -
          chit_cash_paid;
      } else if ($("#add_newchit_util").is(":focus")) {
        max_payable =
          max_cash_amt -
          cus_paid_amt -
          sales_return_amt -
          cash_pay -
          adv_total_cash_amt;
      }

      max_payable = max_payable - 1;

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message:
          "" +
          "</br>Maximum cash amount reached. " +
          (max_payable <= 0
            ? "Cannot pay more than this"
            : "It should not exceed Rs." + max_payable.toFixed(2)),
            settings: { timeout: 5000 },
      });

      status = false;
    }
  }

  return status;
}

function validate_max_cash_for_receipt() {
  let status = true;

  if (parseFloat($("#validate_max_cash").val()) == 1) {
    let max_cash_amt = $("#max_cash_amt").val();

    let cash_pay = $("#make_pay_cash").val();

    let cus_paid_amt =
      isNaN($("#cus_payment_details").val()) ||
      $.trim($("#cus_payment_details").val()) == ""
        ? 0
        : $("#cus_payment_details").val();

    if (
      parseFloat(cash_pay) + parseFloat(cus_paid_amt) >=
      parseFloat(max_cash_amt)
    ) {
      let max_payable = parseFloat(max_cash_amt) - parseFloat(cus_paid_amt);

      $("#make_pay_cash").val(0);

      $("#make_pay_cash").focus();

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message:
          "" +
          "</br>Maximum cash amount for this receipt is " +
          (parseFloat(max_payable) - 1),
      });

      status = false;
    }
  }

  return status;
}

function validate_max_cash_advance_transfer() {
  let status = true;

  if (parseFloat($("#validate_max_cash").val()) == 1) {
    let max_cash_amt =
      isNaN($("#max_cash_amt").val()) || $.trim($("#max_cash_amt").val()) == ""
        ? 0
        : parseFloat($("#max_cash_amt").val());

    let cus_paid_amt =
      isNaN($("#cus_payment_details").val()) ||
      $.trim($("#cus_payment_details").val()) == ""
        ? 0
        : parseFloat($("#cus_payment_details").val());

    let adv_total_cash_amt =
      isNaN($("#adv_total_cash_amt").val()) ||
      $.trim($("#adv_total_cash_amt").val()) == ""
        ? 0
        : parseFloat($("#adv_total_cash_amt").val());

    if (cus_paid_amt + adv_total_cash_amt >= max_cash_amt) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message:
          "" +
          "</br>Maximum cash amount for this transfer is Rs." +
          (max_cash_amt - cus_paid_amt - 1) +
          ", paying Rs." +
          adv_total_cash_amt,
      });

      status = false;
    }
  }

  return status;
}

function calc_salesreturn_cash_amt() {
  let sales_return_amt = 0;

  let return_cash_paid_amount = 0;

  let total_cash_paid = 0;

  let groupedData = {};

  if ($("#sale_return_details > tbody").length > 0) {
    $("#sale_return_details > tbody  > tr").each(function (index, tr) {
      let bill_id = $(this).find(".bill_id").val();

      let cash_paid = $(this).find(".return_cash_paid").val();

      let sale_ret_amt = $(this).find(".sale_ret_amt").val();

      if (groupedData.hasOwnProperty(bill_id)) {
        groupedData[bill_id].sale_ret_amt.push(sale_ret_amt);
      } else {
        groupedData[bill_id] = {
          cash_paid: cash_paid,

          sale_ret_amt: [sale_ret_amt],
        };
      }
    });

    console.log("groupedData", groupedData);

    $.each(groupedData, function (key, value) {
      let bill_id = key;

      let cash_paid =
        isNaN(value.cash_paid) || value.cash_paid == ""
          ? 0
          : parseFloat(value.cash_paid);

      let sale_ret_amt = value.sale_ret_amt;

      let total_amount = 0;

      $.each(sale_ret_amt, function (amt_key, amt_value) {
        total_amount +=
          isNaN(amt_value) || amt_value == "" ? 0 : parseFloat(amt_value);
      });

      return_cash_paid_amount =
        cash_paid < total_amount ? cash_paid : total_amount;

      total_cash_paid += return_cash_paid_amount;

      $("#sale_return_details > tbody  > tr")
        .find("." + bill_id + "_cashPayRow")
        .eq(0)
        .val(return_cash_paid_amount.toFixed(2));
    });
  }

  $("#sales_return_cash_amt").val(total_cash_paid);
}

$("#resend_credit_otp").on("click", function () {
  send_credit_bill_otp();
});

function send_credit_bill_otp() {
  $("#CreditApprovalMessage").css("display", "none");

  $(".otp_block").css("display", "block");

  $("#send_credit_otp").css("display", "none");

  $("#send_credit_otp_no").css("display", "none");

  $("#approve").css("display", "inline-block");

  $("#cancel_credit_otp").css("display", "inline-block");

  $("#resend_credit_otp").prop("disabled", true);

  $("div.overlay").css("display", "block");

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/send_credit_bill_otp/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { id_branch: $("#id_branch").val() },

    success: function (data) {
      console.log(data.status);

      if (data.status == true) {
        $("div.overlay").css("display", "none");

        $("#credit_otp").val("");

        $.toaster({
          priority: "success",
          title: "Success!",
          message: "" + "</br>" + data.msg,
        });

        var fewSeconds = 60;

        $("#resend_credit_otp").prop("disabled", true);

        timer = setTimeout(function () {
          $("#resend_credit_otp").prop("disabled", false);
        }, fewSeconds * 1000);
      } else {
        $("div.overlay").css("display", "none");

        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br> Unable to Send The OTP...",
        });

        //$('#disc_apply').trigger('click');
      }
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

$("#credit_otp").on("input", function () {
  if (this.value.length == 6) {
    $("#verify_credit_otp").prop("disabled", false);
  } else {
    $("#verify_credit_otp").prop("disabled", true);

    // alert('Please fill the 6 digit Otp');
  }
});

$("#verify_credit_otp").on("click", function () {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/verify_credit_otp/?nocache=" +
      my_Date.getUTCSeconds(),

    data: { otp: $("#credit_otp").val() },

    dataType: "json",

    method: "POST",

    success: function (data) {
      if (data.status == true) {
        $("#otp_modal").modal("toggle");

        $.toaster({
          priority: "success",
          title: "Success!",
          message: "" + "</br>" + data.msg,
        });

        formSubmit = true;

        setTimeout(() => {
          $("#pay_submit").trigger("click");
        }, 1000);
      } else {
        $("#credit_otp").val("");

        $.toaster({
          priority: "danger",
          title: "Success!",
          message: "" + "</br>" + data.msg,
        });

        formSubmit = false;
      }
    },

    error: function (error) {},
  });
});

$("#cancel_credit_otp").on("click", function () {
  $("#is_credit_no").prop("checked", true);

  $("#otp_modal").modal("toggle");

  $(".receive_amount").attr("readonly", "true");
});

$("#send_credit_otp_no").on("click", function (e) {
  $("#otp_modal").modal("toggle");
  $("#is_credit_no").prop("checked", true);
  $(".receive_amount").attr("readonly", "true");
  calculateFinalCost();

  e.preventDefault();
  formSubmit = true;
});

function discount_validation_for_salebill() {
  //let IsWeightScheme = check_is_weight_scheme();

  let returnData = { status: true, max_discount_limit: 0 };
  let total_payment_amount = $.isNumeric($(".sale_amt_with_tax").html())
    ? parseFloat($(".sale_amt_with_tax").html())
    : 0;

  let summary_discount_amt = $.isNumeric($("#summary_discount_amt").val())
    ? parseFloat($("#summary_discount_amt").val())
    : 0;

  //let handling_charges = $.isNumeric($("#handling_charges").val()) ? parseFloat($("#handling_charges").val()) : 0;

  total_payment_amount =
    parseFloat(total_payment_amount) + parseFloat(old_discount);

  let total_amount_with_mc_va_limit = 0;

  if (total_payment_amount > 0 && summary_discount_amt > 0) {
    $("#billing_sale_details > tbody tr").each(function (idx, row) {
      curRow = $(this);

      var gross_wt =
        isNaN(curRow.find(".bill_gross_val").val()) ||
        curRow.find(".bill_gross_val").val() == ""
          ? 0
          : curRow.find(".bill_gross_val").val();

      var less_wt =
        isNaN(curRow.find(".bill_less_val").val()) ||
        curRow.find(".bill_less_val").val() == ""
          ? 0
          : curRow.find(".bill_less_val").val();

      var net_wt = parseFloat(gross_wt) - parseFloat(less_wt);

      var calculation_type =
        isNaN(curRow.find(".sale_cal_type").val()) ||
        curRow.find(".sale_cal_type").val() == ""
          ? 0
          : curRow.find(".sale_cal_type").val();

      var stone_price =
        isNaN(curRow.find(".bill_stone_price").val()) ||
        curRow.find(".bill_stone_price").val() == ""
          ? 0
          : curRow.find(".bill_stone_price").val();
      var purchase_cost =
        isNaN(curRow.find(".purchase_cost").val()) ||
        curRow.find(".purchase_cost").val() == ""
          ? 0
          : curRow.find(".purchase_cost").val();

      var certification_price =
        isNaN(curRow.find(".certification_cost").val()) ||
        curRow.find(".certification_cost").val() == ""
          ? 0
          : curRow.find(".certification_cost").val();

      var material_price =
        isNaN(curRow.find(".bill_material_price").val()) ||
        curRow.find(".bill_material_price").val() == ""
          ? 0
          : curRow.find(".bill_material_price").val();

      var is_eda = $("#is_eda").val();

      var total_price = 0;
      var rate_per_grm = 0;
      var base_value_amt = 0;
      var arrived_value_amt = 0;
      var arrived_value_tax = 0;
      var base_value_tax = 0;
      var total_tax_rate = 0;
      var cmp_country = $("#cmp_country").val();

      var cus_del_country = $("#cus_del_country").val();

      var tag_sales_value = 0;
      let rate_field = curRow.find(".rate_field").val();
      var rate_per_gram = isNaN($("#" + rate_field).val()) || $("#" + rate_field).val() == "" ? 0 : parseFloat($("#" + rate_field).val());
      var rate_per_grm = (isNaN(curRow.find(".per_grm_amount").val()) || curRow.find(".per_grm_amount").val()== 0 || curRow.find(".per_grm_amount").val()!=undefined)  ? parseFloat(curRow.find(".per_grm_amount").val()) : rate_per_gram ;
      var inclusive_tax_rate = 0;
      var total_tax = 0;
      var discount = 0;
      var disc_type = curRow.find(".disc_type").val();
      var disc_amt = $("#summary_discount_amt").val();
      var total_sales_amt = $(".sale_amt_with_tax").html();
      var tax_group = curRow.find(".sale_tax_group").val();
      let mc_cal_type = curRow.find(".mc_cal_type").val();
      let mc_limit = curRow.find(".mc_limit").val();
      let va_limit = curRow.find(".va_limit").val();
      let margin_mrp = curRow.find(".margin_mrp").val();

      console.log("mc_limit ", mc_limit);
      console.log("va_limit ", va_limit);
      console.log("margin_mrp ", margin_mrp);

      var retail_max_mc = mc_limit;

      var tot_wastage = va_limit;

      let mrpmargin_perc = margin_mrp;

      if (
        calculation_type == 0 ||
        calculation_type == 1 ||
        calculation_type == 2
      ) {
        if (calculation_type == 0) {
          var wast_wgt = parseFloat(
            parseFloat(gross_wt) * parseFloat(tot_wastage / 100)
          ).toFixed(3);

          if (mc_cal_type != 3) {
            var mc_type = parseFloat(
              mc_cal_type == 2
                ? parseFloat(retail_max_mc * gross_wt)
                : parseFloat(retail_max_mc * 1)
            );

            // Metal Rate + Stone + OM + Wastage + MC

            rate_with_mc = parseFloat(
              parseFloat(
                rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
              ) +
                parseFloat(mc_type) +
                parseFloat(stone_price) +
                parseFloat(material_price) +
                parseFloat(certification_price)
            );
          } else {
            var mc_type = parseFloat(
              rate_per_grm *
                (parseFloat(wast_wgt) + parseFloat(net_wt)) *
                (retail_max_mc / 100)
            );

            // Metal Rate + Stone + OM + Wastage + MC

            rate_with_mc = parseFloat(
              parseFloat(
                rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
              ) +
                parseFloat(mc_type) +
                parseFloat(stone_price) +
                parseFloat(material_price) +
                parseFloat(certification_price)
            );
          }
        } else if (calculation_type == 1) {
          var wast_wgt = parseFloat(
            parseFloat(net_wt) * parseFloat(tot_wastage / 100)
          ).toFixed(3);

          if (mc_cal_type != 3) {
            var mc_type = parseFloat(
              mc_cal_type == 2
                ? parseFloat(retail_max_mc * net_wt)
                : parseFloat(retail_max_mc * 1)
            );

            // Metal Rate + Stone + OM + Wastage + MC

            rate_with_mc = parseFloat(
              parseFloat(
                rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
              ) +
                parseFloat(mc_type) +
                parseFloat(stone_price) +
                parseFloat(material_price) +
                parseFloat(certification_price)
            );
          } else {
            var mc_type = parseFloat(
              rate_per_grm *
                (parseFloat(wast_wgt) + parseFloat(net_wt)) *
                (retail_max_mc / 100)
            );

            // Metal Rate + Stone + OM + Wastage + MC

            rate_with_mc = parseFloat(
              parseFloat(
                rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
              ) +
                parseFloat(mc_type) +
                parseFloat(stone_price) +
                parseFloat(material_price) +
                parseFloat(certification_price)
            );
          }
        } else if (calculation_type == 2) {
          //var wast_wgt      = parseFloat(parseFloat(net_wt) * parseFloat(tot_wastage/100)).toFixed(3);

          var wast_wgt = parseFloat(
            parseFloat(net_wt) * parseFloat(tot_wastage / 100)
          ).toFixed(3);

          if (mc_cal_type != 3) {
            var mc_type = parseFloat(
              mc_cal_type == 2
                ? parseFloat(retail_max_mc * gross_wt)
                : parseFloat(retail_max_mc * 1)
            );

            // Metal Rate + Stone + OM + Wastage + MC

            rate_with_mc = parseFloat(
              parseFloat(rate_per_grm) *
                (parseFloat(wast_wgt) + parseFloat(net_wt)) +
                parseFloat(mc_type) +
                parseFloat(stone_price) +
                parseFloat(material_price) +
                parseFloat(certification_price)
            ).toFixed(2);
          } else {
            var mc_type = parseFloat(
              rate_per_grm *
                (parseFloat(wast_wgt) + parseFloat(net_wt)) *
                (retail_max_mc / 100)
            );

            // Metal Rate + Stone + OM + Wastage + MC

            rate_with_mc = parseFloat(
              parseFloat(rate_per_grm) *
                (parseFloat(wast_wgt) + parseFloat(net_wt)) +
                parseFloat(mc_type) +
                parseFloat(stone_price) +
                parseFloat(material_price) +
                parseFloat(certification_price)
            ).toFixed(2);
          }
        }
        let charge_value = isNaN(parseFloat(curRow.find(".charge_value").val()))
          ? 0
          : curRow.find(".charge_value").val();

        rate_with_mc = parseFloat(rate_with_mc) + parseFloat(charge_value);

        if (is_eda == 1 || (is_eda == 2 && $("#is_eda_tax_calc").val() == 1)) {
          var base_value_tax = parseFloat(
            calculate_base_value_tax(rate_with_mc, tax_group)
          );

          var base_value_amt = parseFloat(
            parseFloat(rate_with_mc) + parseFloat(base_value_tax)
          );

          var arrived_value_tax = parseFloat(
            calculate_arrived_value_tax(base_value_amt, tax_group)
          );

          var arrived_value_amt = parseFloat(
            parseFloat(base_value_amt) + parseFloat(arrived_value_tax)
          );

          var total_tax_rate = parseFloat(
            parseFloat(base_value_tax) + parseFloat(arrived_value_tax)
          );

          inclusive_tax_rate = arrived_value_amt;

          if (cus_del_country != cmp_country) {
            inclusive_tax_rate = rate_with_mc;
          }
        } else {
          inclusive_tax_rate = rate_with_mc;
        }
      } else if (calculation_type == 3 || calculation_type == 4) {
        rate_with_mc = parseFloat(
          isNaN(curRow.find(".purchase_cost").val()) ||
            curRow.find(".purchase_cost").val() == ""
            ? 0
            : curRow.find(".purchase_cost").val()
        );

        rate_with_mc =
          parseFloat(rate_with_mc) +
          (parseFloat(rate_with_mc) * parseFloat(mrpmargin_perc)) / 100;

        inclusive_tax_rate = rate_with_mc;
      }
      console.log("tax inclusive", parseFloat(inclusive_tax_rate).toFixed(2));
      total_amount_with_mc_va_limit = (
        parseFloat(total_amount_with_mc_va_limit) +
        parseFloat(inclusive_tax_rate)
      ).toFixed(2);
    });
    console.log("total_payment_amount ", total_payment_amount);
    console.log("summary_discount_amt ", summary_discount_amt);
    console.log(
      "total_amount_with_mc_va_limit ",
      total_amount_with_mc_va_limit
    );

    let _discount_limit =
      parseFloat(total_payment_amount) -
      parseFloat(total_amount_with_mc_va_limit);

    console.log("_discount_limit", _discount_limit);

    if (parseFloat(summary_discount_amt) <= parseFloat(_discount_limit)) {
      returnData.max_discount_limit = parseFloat(_discount_limit).toFixed(2);
      returnData.status = true;
    } else {
      returnData.max_discount_limit = parseFloat(_discount_limit).toFixed(2);
      returnData.status = false;
    }
  }
  return returnData;
}

//for multi metal calculation

function check_is_weight_scheme() {
  let IsWeightScheme = false;

  let chit_details = $("#chit_details").val();

  if (isJsonString(chit_details)) {
    chit_details = JSON.parse(chit_details);

    console.log("chit_details", chit_details);

    if ($(chit_details).length > 0) {
      $(chit_details).each(function (idx, val) {
        if (parseFloat(val.scheme_type) > 0) {
          IsWeightScheme = true;

          return false;
        }
      });
    }
  }

  return IsWeightScheme;
}

/**

 * Check is Valid Json

 */

function isJsonString(str) {
  try {
    JSON.parse(str);
  } catch (e) {
    return false;
  }

  return true;
}

//day closing details

function get_branch_day_closing_details() {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getBranchDayClosingData/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    data: { id_branch: $("#id_branch").val() },

    method: "POST",

    success: function (data) {
      $("#receipt_date").val(data.entry_date);
    },

    error: function (error) {},
  });
}

//day closing details

//repair order delivery

$("input[name='billing[is_against_order]']:radio").on("change", function () {
  $("#billing_repair_order_other_details > tbody").empty();

  $(".order_no_search").css("display", "block");

  $(".repair_with_orderno").css("display", "block");

  $(".repair_without_orderno").css("display", "none");

  if (this.value == 2) {
    $(".order_no_search").css("display", "none");

    $(".repair_with_orderno").css("display", "none");

    $(".repair_without_orderno").css("display", "block");

    create_new_empty_repair_order_row();
  }

  calculateRepairOrderDetails();
});

//repair order delivery

//for multi metal calculation

function calculate_other_metal_amount(other_metal_details, curRow) {
  var tot_amount = 0;

  var rate_per_gram = 0;

  var tag_other_metal_details = [];

  $.each(other_metal_details, function (key, items) {
    $.each(purity_rate, function (key, item) {
      if (
        item.id_metal == items.tag_other_itm_metal_id &&
        item.id_purity == items.tag_other_itm_pur_id
      ) {
        var rate_field = item.rate_field;

        rate_per_gram =
          isNaN($("#" + rate_field).val()) || $("#" + rate_field).val() == ""
            ? 0
            : $("#" + rate_field).val();
      }
    });

    var net_wt = items.tag_other_itm_grs_weight;

    var wastage_perc = items.tag_other_itm_wastage;

    var wast_wt = parseFloat((net_wt * wastage_perc) / 100);

    var mc_type = items.tag_other_itm_cal_type;

    var making_charge = items.tag_other_itm_mc;

    var mc_value =
      mc_type == 1
        ? parseFloat(net_wt * making_charge)
        : mc_type == 2
        ? parseFloat(making_charge)
        : 0;

    var total_amount = parseFloat(
      parseFloat(rate_per_gram) *
        parseFloat(parseFloat(net_wt) + parseFloat(wast_wt)) +
        parseFloat(mc_value)
    ).toFixed(2);

    tot_amount += parseFloat(total_amount);

    console.log("wast_wt:" + wast_wt);

    console.log("mc_value:" + mc_value);

    console.log("total_amount:" + total_amount);

    console.log("oher_metal_rate_per_gram:" + rate_per_gram);

    tag_other_metal_details.push({
      tag_other_itm_id: items.tag_other_itm_id,

      tag_other_itm_tag_id: items.tag_other_itm_tag_id,

      tag_other_itm_metal_id: items.tag_other_itm_metal_id,

      tag_other_itm_pur_id: items.tag_other_itm_pur_id,

      tag_other_itm_grs_weight: items.tag_other_itm_grs_weight,

      tag_other_itm_wastage: items.tag_other_itm_wastage,

      tag_other_itm_uom: items.tag_other_itm_uom,

      tag_other_itm_cal_type: items.tag_other_itm_cal_type,

      tag_other_itm_mc: items.tag_other_itm_mc,

      purname: items.purname,

      metal_name: items.metal_name,

      tag_other_itm_rate: rate_per_gram,

      tag_other_itm_pcs: items.tag_other_itm_pcs,

      tag_other_itm_amount: total_amount,
    });
  });

  curRow
    .find(".other_metal_details")
    .val(JSON.stringify(tag_other_metal_details));

  curRow.find(".other_metal_amount").html(parseFloat(tot_amount).toFixed(2));

  return tot_amount;
}

function get_purity_rate() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_estimation/get_purity_rate",

    dataType: "json",

    success: function (data) {
      purity_rate = data;
    },
  });
}

//for multi metal calculation

//repair order delivery

function create_new_empty_repair_order_row() {
  var repair_percentage = $("#repair_order_per").val();

  var row = "";

  row =
    "<tr>" +
    "<td><select class='form-control repair' name='order[repair][]' id='repair' required='true' style='width: 150px;' /></td>" +
    '<td><select class="form-control sale_product_id" name="order[product][]" value="" ></td>' +
    '<td><input type="number" class="form-control sale_pcs" name="order[piece][]" value="1"  readonly/></td>' +
    '<td><input type="number" class="form-control completed_weight" name="order[completed_weight][]" value="" /></td>' +
    "<td><span>" +
    repair_percentage +
    '</span><input type="hidden" class="repair_percent" name="order[repair_percent][]" value="' +
    repair_percentage +
    '" /><input type="hidden" class="repair_tot_tax" name="order[repair_tot_tax][]" value="" /><input type="hidden" class="sale_tax_group" name="order[taxgroup][]" value="" /><input type="hidden" class="sale_cgst" name="order[cgst][]" value="" /><input type="hidden" class="tax_type" name="order[tax_type][]" value="" /><input type="hidden" class="sale_sgst" name="order[sgst][]" value="" /><input type="hidden" class="sale_igst" name="order[igst][]" value="" /><input type="hidden" class="sale_cgst_per" name="order[cgst_per][]" value="' +
    repair_percentage / 2 +
    '" /><input type="hidden" class="sale_sgst_per" name="order[sgst_per][]" value="' +
    repair_percentage / 2 +
    '" /></td>' +
    '<td><input type="hidden" class="is_est_details" value="1" name="order[is_est_details][]" /><input type="number" class="form-control rapair_amount" name="order[amount][]" value="" /></td>' +
    '<td style="width: 100px;"><button type="button" class="btn btn-success btn-xs" onclick="add_repair_item();"><i class="fa fa-plus"></i></button><a href="#" onClick="remove_repair_row($(this).closest(\'tr\'));" class="btn btn-danger btn-xs btn-del"><i class="fa fa-trash"></i></a></td></tr>';

  +"</tr>";

  $("#billing_repair_order_other_details tbody").append(row);

  get_ActiveProduct();

  get_damage_type_master();
}

function add_repair_item() {
  if (validateRepairOrderDetailRow()) {
    create_new_empty_repair_order_row();
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Fill The Required FIelds..",
    });
  }
}

function validateRepairOrderDetailRow() {
  var validate = true;

  if ($("#billing_repair_order_other_details > tbody").length > 0) {
    $("#billing_repair_order_other_details > tbody  > tr").each(function (
      index,
      tr
    ) {
      console.log($(this).find(".sale_product_id").val());

      console.log($(this).find(".rapair_amount").val());

      if (
        $(this).find(".sale_product_id").val() == "" ||
        $(this).find(".rapair_amount").val() == "" ||
        $(this).find(".completed_weight").val() == ""
      ) {
        validate = false;
      }
    });
  }

  return validate;
}

function remove_repair_row(curRow) {
  curRow.remove();

  calculateServiceBillDetails();
}

$(document).on("keyup", ".rapair_amount", function (e) {
  if (ctrl_page[1] == "service_bill") {
    calculateServiceBillDetails();
  } else {
    calculate_sales_details();
  }
});

function calculateServiceBillDetails() {
  $("#total_cost").attr("readonly", true);

  $("#summary_discount_amt").attr("readonly", true);

  var amount = 0;

  var taxable_amount = 0;

  var tot_taxable_amount = 0;

  var cgst_per = $(".sale_cgst_per").val();

  var sgst_per = $(".sale_sgst_per").val();

  var cus_state = $("#cus_state").val();

  var cmp_state = $("#cmp_state").val();

  var repair_percentage = $("#repair_order_per").val();

  var igst = 0;

  var cgst = 0;

  var sgst = 0;

  var total_tax = 0;

  var tot_cgst = 0;

  var tot_sgst = 0;

  var tot_igst = 0;

  var tot_amount = 0;

  $("#billing_repair_order_other_details > tbody  > tr").each(function (
    index,
    tr
  ) {
    if ($(this).find(".rapair_amount").val() != "") {
      curRow = $(this);

      amount = parseFloat(
        isNaN(curRow.find(".rapair_amount").val()) ||
          curRow.find(".rapair_amount").val() == ""
          ? 0
          : curRow.find(".rapair_amount").val()
      );

      taxable_amount = amount / (repair_percentage / 100 + 1);

      total_tax = taxable_amount * (repair_percentage / 100);

      var total_other_item_amount = 0;

      cgst = (taxable_amount * cgst_per) / 100;

      sgst = (taxable_amount * sgst_per) / 100;

      curRow.find(".sale_cgst").val(parseFloat(cgst).toFixed(2));

      curRow.find(".sale_sgst").val(parseFloat(sgst).toFixed(2));

      curRow.find(".sale_igst").val(parseFloat(igst).toFixed(2));

      curRow.find(".repair_tot_tax").val(parseFloat(total_tax).toFixed(2));

      cgst = parseFloat(
        isNaN(curRow.find(".sale_cgst").val()) ||
          curRow.find(".sale_cgst").val() == ""
          ? 0
          : curRow.find(".sale_cgst").val()
      );

      sgst = parseFloat(
        isNaN(curRow.find(".sale_sgst").val()) ||
          curRow.find(".sale_sgst").val() == ""
          ? 0
          : curRow.find(".sale_sgst").val()
      );

      igst = parseFloat(
        isNaN(curRow.find(".sale_igst").val()) ||
          curRow.find(".sale_igst").val() == ""
          ? 0
          : curRow.find(".sale_igst").val()
      );

      tot_cgst += cgst;

      tot_sgst += sgst;

      tot_igst += igst;

      tot_amount += parseFloat(
        parseFloat(amount) + parseFloat(total_other_item_amount)
      );

      tot_taxable_amount += taxable_amount;

      curRow
        .find(".item_total_amount")
        .html(
          parseFloat(
            parseFloat(amount) + parseFloat(total_other_item_amount)
          ).toFixed(2)
        );

      console.log("Taxable - " + parseFloat(taxable_amount).toFixed(2));

      console.log("Total tax - " + parseFloat(total_tax).toFixed(2));

      console.log("Cgst - " + parseFloat(cgst).toFixed(2));

      console.log("Sgst - " + parseFloat(sgst).toFixed(2));

      console.log("Igst - " + parseFloat(igst).toFixed(2));
    }
  });

  $(".summary_repair_amt").html(parseFloat(tot_amount).toFixed(2));

  $(".summary_sale_amt").html(parseFloat(tot_taxable_amount).toFixed(2));

  $(".sales_cgst").html(parseFloat(tot_cgst).toFixed(2));

  $(".sales_sgst").html(parseFloat(tot_sgst).toFixed(2));

  $(".sales_igst").html(parseFloat(tot_igst).toFixed(2));

  $("#total_cost").val(parseFloat(tot_amount).toFixed(2));

  $(".service_bill_receive_amount").val(parseFloat(tot_amount).toFixed(2));

  calculateServiceBillFinalCost();
}

function calculateServiceBillFinalCost() {
  var total_bill_amount = 0;

  total_bill_amount = parseFloat(
    isNaN($("#total_cost").val()) || $("#total_cost").val() == ""
      ? 0
      : $("#total_cost").val()
  ).toFixed(2);

  $(".receive_amount").val(total_bill_amount);

  calculateServiceBillPaymentCost();
}

$(".service_bill_receive_amount,#service_bill_cash").on("keyup", function () {
  if (this.value < 0) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter The Valid Amount..",
    });

    $(".service_bill_receive_amount").val(0);
  }

  calculateServiceBillPaymentCost();
});

function calculateServiceBillPaymentCost() {
  var receive_amount =
    $(".service_bill_receive_amount").val() != ""
      ? $(".service_bill_receive_amount").val()
      : 0;

  var make_pay_cash =
    $("#service_bill_cash").val() != "" ? $("#service_bill_cash").val() : 0;

  var cc = $(".CC").html() != "" ? $(".CC").html() : 0;

  var dc = $(".DC").html() != "" ? $(".DC").html() : 0;

  var chq = $(".CHQ").html() != "" ? $(".CHQ").html() : 0;

  var NB = $(".NB").html() != "" ? $(".NB").html() : 0;

  var allowsubmit = true;

  var total_payment_amount = 0;

  if (receive_amount > 0) {
    total_payment_amount = parseFloat(
      parseFloat(make_pay_cash) +
        parseFloat(cc) +
        parseFloat(dc) +
        parseFloat(chq) +
        parseFloat(NB)
    ).toFixed(2);

    bal_amount = parseFloat(
      parseFloat(receive_amount) - parseFloat(total_payment_amount)
    ).toFixed(2);

    if (bal_amount == 0) {
      $("#service_bill_pay_submit").prop("disabled", false);
    } else {
      $("#service_bill_pay_submit").prop("disabled", true);
    }

    $(".sum_of_amt").html(total_payment_amount);

    $(".bal_amount").html(bal_amount);
    console.log("bal_amount:" + bal_amount);
    console.log("total_payment_amount:" + total_payment_amount);
  }
}

$("#service_bill_pay_submit").on("click", function () {
  var is_counter_req = $("#is_counter_req").val();

  var counter_id = $("#counter_id").val();

  var allow_submit = true;

  if ($("#id_branch").val() == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select The Branch..",
    });

    allow_submit = false;
  } else if ($("#bill_cus_id").val() == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select The Customer",
    });

    allow_submit = false;
  } else if (is_counter_req == 1) {
    if (counter_id == "" || counter_id == null || counter_id == undefined) {
      allow_submit = false;

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message:
          "" +
          "</br>Unable to Set The MAC Address For Your System.Please Contact Your Admin..",
      });
    }
  } else if ($("#billing_repair_order_other_details >tbody>tr").length == 0) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Item Details Not Found..",
    });

    allow_submit = false;
  } else if ($("#billing_repair_order_other_details >tbody>tr").length > 0) {
    var bal_amount = $(".bal_amount").html();

    if (bal_amount != 0) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Check The Payment Amount Details..",
      });

      allow_submit = false;
    }

    if (!validateRepairOrderDetailRow()) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Fill The Required Fields..",
      });

      allow_submit = false;
    }
  }

  if (allow_submit == true) {
    $("div.overlay").css("display", "block");

    var form_data = $("#service_bill").serialize();

    $("#service_bill_pay_submit").prop("disabled", true);

    var url =
      base_url +
      "index.php/admin_ret_billing/service_bill/save?nocache=" +
      my_Date.getUTCSeconds();

    $.ajax({
      url: url,

      data: form_data,

      type: "POST",

      dataType: "JSON",

      success: function (data) {
        if (data.status) {
          $("div.overlay").css("display", "none");

          window.open(
            base_url +
              "index.php/admin_ret_billing/service_bill_invoice/" +
              data["id"],
            "_blank"
          );

          window.location.href =
            base_url + "index.php/admin_ret_billing/service_bill/add";
        } else {
          window.location.href =
            base_url + "index.php/admin_ret_billing/service_bill/add";
        }

        $("div.overlay").css("display", "none");
      },

      error: function (error) {
        $("div.overlay").css("display", "none");
      },
    });
  } else {
    $("#service_bill_pay_submit").prop("disabled", false);

    $("div.overlay").css("display", "none");
  }
});

$("#service_bill_card").on("click", function () {
  if (validateCardDetailRow()) {
    card_payment = [];

    $("#card-detail-modal .modal-body #card_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".card_amt").val() != "") {
          card_payment.push({
            card_name: $(this).find(".card_name").val(),
            id_device: $(".id_device").val(),
            card_type: $(this).find(".card_type").val(),
            card_no: $(this).find(".card_no").val(),
            card_amt: $(this).find(".card_amt").val(),
            ref_no: $(this).find(".ref_no").val(),
          });
        }
      }
    );

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".CC").html($(".cc_total_amt").html());

      bill_card_pay_row.find(".DC").html($(".dc_total_amt").html());

      bill_card_pay_row
        .find("#card_payment")
        .val(card_payment.length > 0 ? JSON.stringify(card_payment) : "");
    });

    $("#card-detail-modal").modal("toggle");

    calculateServiceBillPaymentCost();
  } else {
    alert("Please fill required fields");
  }
});

$("#service_bill_chq").on("click", function () {
  if (validateChqDetailRow()) {
    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".CHQ").html($(".chq_total_amount").html());

      bill_card_pay_row
        .find("#chq_payment")
        .val(chq_payment.length > 0 ? JSON.stringify(chq_payment) : "");
    });

    $("#cheque-detail-modal").modal("toggle");

    calculateServiceBillPaymentCost();
  } else {
    alert("Please fill required fields");
  }
});

$("#service_bill_net_bank").on("click", function () {
  var nb_payment = [];

  if (validateNBDetailRow()) {
    $("#net_banking_modal .modal-body #net_bank_details > tbody  > tr").each(
      function (index, tr) {
        if ($(this).find(".amount").val() != "") {
          nb_payment.push({
            nb_type: $(this).find(".nb_type").val(),

            id_bank: $(this).find(".id_bank").val(),

            nb_date: $(this).find(".nb_date").val(),

            id_device: $(this).find(".id_device").val(),

            amount: $(this).find(".amount").val(),

            ref_no: $(this).find(".ref_no").val(),
          });
        }
      }
    );

    $("#payment_modes > tbody >tr").each(function (bidx, brow) {
      bill_card_pay_row = $(this);

      bill_card_pay_row.find(".NB").html($(".nb_total_amount").html());

      bill_card_pay_row.find("#nb_payment").val("");

      bill_card_pay_row
        .find("#nb_payment")
        .val(nb_payment.length > 0 ? JSON.stringify(nb_payment) : "");
    });

    $("#net_banking_modal").modal("toggle");

    calculateServiceBillPaymentCost();
  } else {
    alert("Please fill required fields");
  }
});

function get_ActiveProduct() {
  //$('.sale_product_id option').remove();

  $.ajax({
    type: "POST",

    url: base_url + "index.php/admin_ret_reports/get_ActiveProduct",

    data: { id_category: "" },

    dataType: "json",

    success: function (data) {
      prod_details = data;

      var id = $(".sale_product_id").val();

      $.each(data, function (key, item) {
        $(".sale_product_id").append(
          $("<option></option>")
            .attr("value", item.pro_id)

            .text(item.product_name)
        );
      });

      $(".sale_product_id").select2({
        placeholder: "Select Product",

        allowClear: true,
      });

      $(".sale_product_id").select2("val", id != "" && id > 0 ? id : "");
    },
  });
}

function get_damage_type_master() {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_order/get_repair_damage_master?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    type: "POST",

    dataType: "JSON",

    success: function (data) {
      var id = $(".repair").val();

      $.each(data, function (key, item) {
        $(".repair").append(
          $("<option></option>")
            .attr("value", item.id_repair_master)

            .text(item.name)
        );
      });

      $(".repair").select2({
        placeholder: "Select Type",

        allowClear: true,
      });

      $(".repair").select2("val", id != "" && id > 0 ? id : "");

      $(".repair").select2("val", id != "" && id > 0 ? id : "");
    },

    error: function (error) {},
  });
}

$("#cus_search").on("keyup", function (e) {
  var customer = $("#cus_search").val();

  if (customer.length >= 2) {
    get_search_cus(customer);
  }
});

function get_search_cus(searchTxt) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/getCustomersBySearch/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { searchTxt: searchTxt, billing_for: "", esti_for: "" },

    success: function (data) {
      $("#cus_search").autocomplete({
        source: data,

        select: function (e, i) {
          e.preventDefault();

          $("#cus_info").html("");

          $("#cus_search").val(i.item.label);

          $("#bill_cus_id").val(i.item.value);
        },

        change: function (event, ui) {
          if (ui.item === null) {
            $(this).val("");

            $("#bill_cus_name").val("");

            $("#bill_cus_id").val("");
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (searchTxt != "") {
            if (i.content.length === 0) {
            } else {
            }
          } else {
          }
        },

        minLength: 3,
      });
    },
  });
}

$("#search_service_bill").on("click", function () {
  get_service_bill_list();
});

function get_service_bill_list() {
  my_Date = new Date();

  $("div.overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/service_bill/ajax?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "JSON",

    data: {
      dt_range: $("#dt_range").val(),
      bill_no: $("#filter_bill_no").val(),
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
    },

    type: "POST",

    success: function (data) {
      console.log("List", data);

      set_service_bill_list(data);

      $("div.overlay").css("display", "none");
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

function set_service_bill_list(data) {
  $("div.overlay").css("display", "none");

  var billing = data.list;

  var access = data.access;

  var profile = data.profile;

  var oTable = $("#billing_list").DataTable();

  $("#total_billing").text(billing.length);

  if (access.add == "0") {
    $("#add_billing").attr("disabled", "disabled");
  }

  oTable.clear().draw();

  if (billing != null && billing.length > 0) {
    oTable = $("#billing_list").dataTable({
      bDestroy: true,

      bInfo: true,

      bFilter: true,

      bSort: true,

      order: [[0, "desc"]],

      dom: "lBfrtip",

      buttons: [
        {
          extend: "print",

          footer: true,

          title: "Billing",

          customize: function (win) {
            $(win.document.body)
              .find("table")

              .addClass("compact")

              .css("font-size", "inherit");
          },
        },

        {
          extend: "excel",

          footer: true,

          title: "Billing",
        },
      ],

      aaData: billing,

      aoColumns: [
        { mDataProp: "id_service_bill" },

        { mDataProp: "bill_date" },

        { mDataProp: "branch_name" },

        { mDataProp: "bill_no" },

        {
          mDataProp: function (row, type, val, meta) {
            return row.cus_name;
          },
        },

        {
          mDataProp: function (row, type, val, meta) {
            return row.mobile;
          },
        },

        { mDataProp: "total_bill_amount" },

        { mDataProp: "billStatus" },

        {
          mDataProp: function (row, type, val, meta) {
            id = row.id_service_bill;

            edit_url =
              access.edit == "1"
                ? base_url + "index.php/admin_ret_billing/billing/edit/" + id
                : "#";

            print_url =
              base_url +
              "index.php/admin_ret_billing/service_bill_invoice/" +
              id;

            delete_url =
              access.delete == "1"
                ? base_url + "index.php/admin_ret_billing/billing/delete/" + id
                : "#";

            billcancel_url =
              access.edit == "1"
                ? base_url +
                  "index.php/admin_ret_billing/billing/cancell/" +
                  id +
                  "/" +
                  row.bill_no
                : "#";

            action_content =
              '<a href="' +
              print_url +
              '" target="_blank" class="btn btn-info btn-print" data-toggle="tooltip" title="Billing Receipt"><i class="fa fa-print" ></i></a>' +
              (row.allow_cancel == 1 &&
              profile.allow_bill_cancel == 1 &&
              row.bill_status == 1 &&
              access.edit == "1"
                ? '<button class="btn btn-warning" onclick="confirm_delete(' +
                  id +
                  "," +
                  profile.bill_cancel_otp +
                  ')"><i class="fa fa-close" ></i></button>'
                : "");

            return action_content;
          },
        },
      ],
    });
  }
}

$("#service_bill_remark").on("keypress", function () {
  if (this.value.length > 6) {
    $("#cancell_service_bill").prop("disabled", false);
  } else {
    $("#cancell_service_bill").prop("disabled", true);
  }
});

$("#cancell_service_bill").on("click", function () {
  my_Date = new Date();

  $.ajax({
    type: "POST",

    url:
      base_url +
      "index.php/admin_ret_billing/cancel_service_bill?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    data: {
      remarks: $("#service_bill_remark").val(),
      bill_id: $("#bill_id").val(),
    },

    success: function (data) {
      window.location.reload();
    },
  });
});

//repair order delivery

//Approval Stock Create order

function get_order_status() {
  my_Date = new Date();

  $.ajax({
    type: "GET",

    url:
      base_url +
      "index.php/admin_ret_reports/order_status/order_status?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    dataType: "json",

    success: function (data) {
      var id = $("#order_status").val();

      $.each(data, function (key, item) {
        if (
          item.id_order_msg == 3 ||
          item.id_order_msg == 5 ||
          item.id_order_msg == 0
        ) {
          $("#order_status").append(
            $("<option></option>")
              .attr("value", item.id_order_msg)

              .text(item.order_status)
          );
        }
      });

      $("#order_status").select2("val", 0);
    },
  });
}

$("#order_status").on("change", function () {
  $(".create_order").css("display", "none");

  $(".update_order").css("display", "none");

  if (this.value != "") {
    get_approval_billing_list();

    if (this.value == 0) {
      $(".create_order").css("display", "block");

      $(".update_order").css("display", "none");
    } else if (this.value == 5) {
      $(".update_order").css("display", "block");
    }
  }
});

$("#create_order").on("click", function () {
  if ($("input[name='approva[tag_id][]']:checked").val()) {
    $("#create_order").prop("disabled", true);

    $(".overlay").css("display", "block");

    var selected_data = [];

    var deleteids_arr = [];

    $("#approval_billing_list tbody tr").each(function (index, value) {
      if (
        $(value)
          .find("input:checkbox[class=approval_tags]:checked")
          .is(":checked")
      ) {
        if (
          $(value).find(".approval_tags").val() != "" &&
          $(value).find(".id_karigar").val() != ""
        ) {
          transData = {
            tag_id: $(value).find(".approval_tags").val(),

            id_karigar: $(value).find(".id_karigar").val(),
          };

          selected_data.push(transData);
        } else {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>" + "Supplier or Tag Not Found",
          });
        }
      }
    });

    if (selected_data.length > 0) {
      order_place(selected_data);
    }
  } else {
    $("#create_order").prop("disabled", false);

    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Select Any One Item",
    });
  }
});

$("#update_branch").on("click", function () {
  if ($("input[name='approva[tag_id][]']:checked").val()) {
    $("#update_branch").prop("disabled", true);

    $(".overlay").css("display", "block");

    var selected_data = [];

    var deleteids_arr = [];

    $("#approval_billing_list tbody tr").each(function (index, value) {
      if (
        $(value)
          .find("input:checkbox[class=approval_tags]:checked")
          .is(":checked")
      ) {
        if (
          $(value).find(".approval_tags").val() != "" &&
          $(value).find(".id_karigar").val() != ""
        ) {
          transData = {
            tag_id: $(value).find(".approval_tags").val(),

            id_karigar: $(value).find(".id_karigar").val(),
          };

          selected_data.push(transData);
        } else {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>" + "Supplier or Tag Not Found",
          });
        }
      }
    });

    if (selected_data.length > 0) {
      update_branch(selected_data);
    }
  } else {
    $("#update_branch").prop("disabled", false);

    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Select Any One Item",
    });
  }
});

function order_place(req_data) {
  my_Date = new Date();

  $(".overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/order_place?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    data: { req_data: req_data },

    type: "POST",

    dataType: "json",

    async: false,

    success: function (data) {
      location.reload(true);

      $(".overlay").css("display", "none");
    },

    error: function (error) {
      console.log(error);

      $(".overlay").css("display", "none");
    },
  });
}

function update_branch(req_data) {
  my_Date = new Date();

  $(".overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/update_branch?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    data: { req_data: req_data },

    type: "POST",

    dataType: "json",

    async: false,

    success: function (data) {
      location.reload(true);

      $(".overlay").css("display", "none");
    },

    error: function (error) {
      console.log(error);

      $(".overlay").css("display", "none");
    },
  });
}

//Approval Stock Create order

//Supplier Sales bill

$("#tag_history_search").on("click", function () {
  if ($("#old_tag_number").val() != "" || $("#tag_number").val() != "") {
    var old_tag_number = $("#old_tag_number").val().replaceAll(" ", "");

    get_tag_scan_details($("#tag_number").val(), old_tag_number);
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter The Tag No..",
    });
  }
});

function get_tag_scan_details(tag_id, old_tag_id) {
  $("div.overlay").css("display", "block");

  var my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_reports/tag_history/ajax?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { tag_id: tag_id, old_tag_id: old_tag_id },

    success: function (data) {
      if (data.list.length > 0) {
        var rowExists = false;

        var trHtml = "";

        $.each(data.list, function (key, items) {
          if (items.karigar_id == $("#bill_cus_id").val()) {
            var stock_type = $("input[name='stock_type']:checked").val();

            $.each(returntaggeditemlist, function (key, val) {
              if (val.tag_id == items.tag_id) {
                rowExists = true;

                $.toaster({
                  priority: "danger",
                  title: "Warning!",
                  message: "" + "</br>Item Already Exists..",
                });
              }
            });

            if (!rowExists) {
              var allow_create = true;

              if (stock_type == 1) {
                if (
                  items.tag_type == 0 ||
                  items.is_approval_stock_converted == 1
                ) {
                  allow_create = false;

                  $.toaster({
                    priority: "danger",
                    title: "Warning!",
                    message: "" + "</br>Invalid Stock Type..",
                  });
                }
              } else if (stock_type == 0) {
                if (
                  items.tag_type == 1 &&
                  items.is_approval_stock_converted == 0
                ) {
                  allow_create = false;

                  $.toaster({
                    priority: "danger",
                    title: "Warning!",
                    message: "" + "</br>Invalid Stock Type..",
                  });
                }
              }

              if (allow_create) {
                if (data.list[0].tagging_status == 0) {
                  items = data.list[0];

                  var other_metal_details = [];

                  var tag_other_itm_grs_weight = 0;

                  $.each(items.other_metal_details, function (k, stn) {
                    tag_other_itm_grs_weight += parseFloat(
                      stn.tag_other_itm_grs_weight
                    );

                    other_metal_details.push({
                      id_metal: stn.tag_other_itm_metal_id,

                      id_purity: stn.tag_other_itm_pur_id,

                      pcs: stn.tag_other_itm_pcs,

                      gwt: stn.tag_other_itm_grs_weight,

                      wastage_perc: stn.tag_other_itm_wastage,

                      making_charge: stn.tag_other_itm_metal_id,

                      rate_per_gram: stn.tag_other_itm_rate,

                      amount: stn.tag_other_itm_amount,
                    });
                  });

                  returntaggeditemlist.push({
                    cat_id: data.list[0].cat_id,
                    tag_id: data.list[0].tag_id,
                    piece: data.list[0].piece,
                    gross_wt: data.list[0].gross_wt,
                    net_wt: data.list[0].net_wt,
                    catname: data.list[0].catname,
                    tgrp_id: data.list[0].tgrp_id,
                    other_metal_details: other_metal_details,
                  });

                  var stone_wt = 0;

                  $.each(items.stone_details, function (k, stn) {
                    if (stn.stone_type == 1) {
                      stone_wt += parseFloat(stn.stone_wt / 5);
                    } else {
                      stone_wt += parseFloat(stn.stone_wt);
                    }
                  });

                  if (insertedcatdetails.length > 0) {
                    var category_exists = false;

                    $.each(insertedcatdetails, function (k, val) {
                      if (val.cat_id == data.list[0].cat_id) {
                        category_exists = true;
                      }
                    });

                    if (category_exists) {
                      $.each(insertedcatdetails, function (key, val) {
                        if (val.cat_id == data.list[0].cat_id) {
                          insertedcatdetails[key].piece =
                            parseFloat(insertedcatdetails[key].piece) +
                            parseFloat(items.piece);

                          insertedcatdetails[key].gross_wt = parseFloat(
                            parseFloat(insertedcatdetails[key].gross_wt) +
                              parseFloat(items.gross_wt)
                          ).toFixed(3);

                          insertedcatdetails[key].less_wt = parseFloat(
                            parseFloat(insertedcatdetails[key].less_wt) +
                              parseFloat(stone_wt)
                          ).toFixed(3);

                          insertedcatdetails[key].other_metal_weight =
                            parseFloat(
                              parseFloat(
                                insertedcatdetails[key].other_metal_weight
                              ) + parseFloat(tag_other_itm_grs_weight)
                            ).toFixed(3);

                          if (stone_wt > 0) {
                            var stn_details = JSON.parse(
                              insertedcatdetails[key].stone_details
                            );

                            $.each(
                              data.list[0].stone_details,
                              function (k, stnval) {
                                stn_details.push({
                                  show_in_lwt: stnval.show_in_lwt,

                                  stones_type: stnval.stones_type,

                                  stone_uom_id: stnval.stone_uom_id,

                                  stone_id: stnval.stone_id,

                                  stone_pcs: stnval.stone_pcs,

                                  stone_wt: stnval.stone_wt,

                                  stone_cal_type: stnval.stone_cal_type,

                                  stone_price: stnval.stone_price,

                                  stone_type: stnval.stone_type,

                                  stone_rate: stnval.stone_rate,
                                });
                              }
                            );

                            insertedcatdetails[key].stone_details =
                              JSON.stringify(stn_details);
                          }

                          if (tag_other_itm_grs_weight > 0) {
                            var tag_other_metal_details = JSON.parse(
                              insertedcatdetails[key].other_metal_details
                            );

                            $.each(
                              items.other_metal_details,
                              function (k, stnval) {
                                tag_other_metal_details.push({
                                  id_metal: stnval.tag_other_itm_metal_id,

                                  id_purity: stnval.tag_other_itm_pur_id,

                                  pcs: stnval.tag_other_itm_pcs,

                                  gwt: stnval.tag_other_itm_grs_weight,

                                  wastage_perc: stnval.tag_other_itm_wastage,

                                  making_charge: stnval.tag_other_itm_metal_id,

                                  rate_per_gram: stnval.tag_other_itm_rate,

                                  amount: stnval.tag_other_itm_amount,
                                });
                              }
                            );

                            insertedcatdetails[key].other_metal_details =
                              JSON.stringify(tag_other_metal_details);
                          }
                        }
                      });
                    } else {
                      insertedcatdetails.push({
                        cat_id: items.cat_id,
                        piece: items.piece,
                        catname: items.catname,
                        gross_wt: items.gross_wt,
                        tgrp_id: items.tgrp_id,
                        less_wt: stone_wt,
                        other_metal_weight: tag_other_itm_grs_weight,
                        stone_details:
                          data.list[0].stone_details.length > 0
                            ? JSON.stringify(data.list[0].stone_details)
                            : "",
                        other_metal_details:
                          other_metal_details.length > 0
                            ? JSON.stringify(other_metal_details)
                            : "",
                      });
                    }
                  } else {
                    insertedcatdetails.push({
                      cat_id: items.cat_id,
                      piece: items.piece,
                      catname: items.catname,
                      gross_wt: items.gross_wt,
                      tgrp_id: items.tgrp_id,
                      less_wt: stone_wt,
                      other_metal_weight: tag_other_itm_grs_weight,
                      stone_details:
                        data.list[0].stone_details.length > 0
                          ? JSON.stringify(data.list[0].stone_details)
                          : "",
                      other_metal_details:
                        other_metal_details.length > 0
                          ? JSON.stringify(other_metal_details)
                          : "",
                    });
                  }
                } else {
                  $.toaster({
                    priority: "danger",
                    title: "Warning!",
                    message: "" + "</br>Tag Not Availabe.",
                  });
                }
              }
            }
          } else {
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: "" + "</br>Invalid Supplier..",
            });
          }
        });

        updatereturncategory();

        $("div.overlay").css("display", "none");
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>No Record Found..",
        });

        $("div.overlay").css("display", "none");
      }

      $("#tag_number").val("");

      $("#old_tag_number").val("");
    },
  });
}

function updatereturncategory() {
  $("#return_item_detail > tbody").empty();

  var cattrHtml = "";

  var purreturnpcs = 0;

  var purreturnweight = 0;

  $("#returntaggeditemlist").val(JSON.stringify(returntaggeditemlist));

  $("#nontagreturnitemlist").val(JSON.stringify(nontagreturnitemlist));

  console.log(nontagreturnitemlist);

  console.log(returntaggeditemlist);

  console.log(purchasereturnitemlist);

  console.log(insertedcatdetails);

  $.each(insertedcatdetails, function (key, items) {
    var less_wt = items.hasOwnProperty("less_wt") ? items.less_wt : 0;

    var other_metal_weight = items.hasOwnProperty("other_metal_weight")
      ? items.other_metal_weight
      : 0;

    var net_wt = parseFloat(
      parseFloat(items.gross_wt) -
        parseFloat(less_wt) -
        parseFloat(other_metal_weight)
    ).toFixed(3);

    console.log(items.gross_wt);

    cattrHtml +=
      '<tr id="' +
      key +
      '">' +
      '<td><input type="hidden" name="supplier_sales_bill[tgrp_id][]" class="return_item_tax_id" value="' +
      items.tgrp_id +
      '" /><input type="hidden" name="supplier_sales_bill[pur_ret_tax_rate][]" class="return_item_tax_percent" value="" /><input type="hidden" class="return_item_tax_cgst_value" value=""  name="supplier_sales_bill[cgst_cost][]" /><input type="hidden" class="return_item_tax_sgst_value" value="" name="supplier_sales_bill[sgst_cost][]" /><input type="hidden" class="return_item_tax_igst_value" value="" name="supplier_sales_bill[igst_cost][]" /><input type="hidden" class="return_item_tax_value" value="" name="supplier_sales_bill[total_tax][]" /><input type="checkbox" class="return_item_cat_id" name="supplier_sales_bill[catid][]" value="' +
      items.cat_id +
      '" checked /></td>' +
      '<td class="purreturncat">' +
      items.catname +
      "</td>" +
      '<td><input type="number" class="form-control custom-inp purreturnpcs" name="supplier_sales_bill[pcs][]" value="' +
      parseInt(items.piece) +
      '" style="width:100px;" step="any" readonly></td>' +
      '<td><input type="number" class="form-control custom-inp purreturnweight" name="supplier_sales_bill[gross_wt][]" value="' +
      parseFloat(items.gross_wt).toFixed(3) +
      '" style="width:100px;" step="any" readonly></td>' +
      '<td><div class="form-group"><div class="input-group "><input class="form-control custom-inp add_less_wt" name="supplier_sales_bill[less_wt][]" value="' +
      parseFloat(items.less_wt).toFixed(3) +
      '" onClick="create_new_empty_est_cus_stone_item($(this).closest(\'tr\'));"  type="number" name="item[less_wt][]" step="any" readonly style="width:100px;"/><span class="input-group-addon input-sm add_tag_lwt" onClick="create_new_empty_est_cus_stone_item($(this).closest(\'tr\'));">+</span></div></div></td>' +
      '<td><div class="form-group"><div class="input-group "><input class="form-control custom-inp add_other_metal_wt" name="supplier_sales_bill[other_metal_wt][]" value="' +
      parseFloat(items.tag_other_itm_grs_weight).toFixed(3) +
      '" onClick="create_new_empty_other_metal_row($(this).closest(\'tr\'));"  type="number" step="any" style="width:100px;" readonly/><span class="input-group-addon input-sm add_other_metal_wt" onClick="create_new_empty_other_metal_row($(this).closest(\'tr\'));">+</span></div></div></td>' +
      '<td><input type="number" class="form-control custom-inp net_wt" name="supplier_sales_bill[net_wt][]" name="supplier_sales_bill[net_wt][]" value="' +
      net_wt +
      '" style="width:100px;" step="any" readonly><input type="hidden" class="stone_details" name="item[stone_details][]" value=' +
      (items.stone_details != "" ? items.stone_details : "") +
      ' ><input type="hidden" class="other_metal_details" name="item[other_metal_details][]" value=' +
      (items.other_metal_details != "" ? items.other_metal_details : "") +
      " ></td>" +
      '<td><div class="input-group"><input class="purreturnrate form-control" type="number" name="supplier_sales_bill[rate_per_gram][]"  name="return_item_cat[price][]" value="" style="width:100px;"><span class="input-group-btn" ><select class="purreturncaltype form-control" name="supplier_sales_bill[caltype][]" style="width: 100px;" ><option value="1" selected="selected">Grm</option><option value="2">Pcs</option></select></span></div></td>' +
      '<td><input type="number" class="form-control custom-inp returnitemcost" name="supplier_sales_bill[returnitemcost][]" style="width:100px;" step="any"><input type="hidden" class="form-control custom-inp itemcaltype" style="width:100px;" step="any" value="1"></td>' +
      '<td><input type="number" class="purreturnamount form-control" value="" name="supplier_sales_bill[amount][]" readonly style="width:100px;"/></td>' +
      '<td><a href="#" class="btn btn-danger btn-del btn-xs" style="padding:5px;" onClick="remove_pur_ret_row($(this).closest(\'tr\'));"><i class="fa fa-trash"></i></a></td>' +
      "</tr>";
  });

  $("#return_item_detail tbody").append(cattrHtml);

  $("#issue_weight").val("");

  $("#issue_pcs").val("");

  $(".available_weight").html("");

  $(".available_pcs").html("");

  $("#select_product").select2("val", "");

  $("#select_design").select2("val", "");

  $("#select_sub_design").select2("val", "");

  calculate_purchase_return_final_cost();

  get_purchase_return_total();
}

function calculate_purchase_return_final_cost() {
  var total_item_cost = 0;

  var total_bill_amount = 0;

  var other_charges_amount = 0;

  var total_taxable_amt = 0;

  var cmp_country = $("#cmp_country").val();

  var cmp_state = $("#cmp_state").val();

  $("#return_item_detail > tbody tr").each(function (idx, row) {
    curRow = $(this);

    var supplier_country = "";

    var supplier_state = "";

    var item_igst = 0;

    var item_sgst = 0;

    var item_cgst = 0;

    var stoneAmount = 0;

    var stone_wt = 0;

    var othermetalwt = 0;

    var otherMetalAmount = 0;

    var stone_details = curRow.find(".stone_details").val();

    var other_metal_details = curRow.find(".other_metal_details").val();

    var purreturnweight = curRow.find(".purreturnweight").val();

    if (stone_details != "") {
      stone_details = JSON.parse(stone_details);

      $.each(stone_details, function (k, val) {
        stoneAmount += parseFloat(val.stone_price);

        if (val.stone_type == 1) {
          stone_wt += parseFloat(val.stone_wt / 5);
        } else {
          stone_wt += parseFloat(val.stone_wt);
        }
      });
    }

    if (other_metal_details != "") {
      other_metal_details = JSON.parse(other_metal_details);

      $.each(other_metal_details, function (k, val) {
        otherMetalAmount += parseFloat(val.amount);

        othermetalwt += parseFloat(val.gwt);
      });
    }

    var less_wt = parseFloat(
      parseFloat(stone_wt) + parseFloat(othermetalwt)
    ).toFixed(3);

    var net_wt = parseFloat(
      parseFloat(purreturnweight) - parseFloat(less_wt)
    ).toFixed(3);

    var retWeight = net_wt;

    var pcs = isNaN(parseInt(curRow.find(".purreturnpcs").val()))
      ? 0
      : curRow.find(".purreturnpcs").val();

    var retRate = 0;

    var itemCost = 0;

    var retItemRowCost = 0;

    var calType = curRow.find(".purreturncaltype").val();

    if (curRow.find(".itemcaltype").val() == 1) {
      retRate = isNaN(parseFloat(curRow.find(".purreturnrate").val()))
        ? 0
        : parseFloat(curRow.find(".purreturnrate").val());

      if (calType == 1) {
        retTotal = parseFloat(retWeight) * parseFloat(retRate);
      } else {
        console.log("retTotal:" + retTotal);

        retTotal = parseFloat(pcs) * parseFloat(retRate);
      }
    } else {
      itemCost = isNaN(parseFloat(curRow.find(".returnitemcost").val()))
        ? 0
        : parseFloat(curRow.find(".returnitemcost").val());

      if (calType == 1) {
        retRate = parseFloat(
          parseFloat(parseFloat(itemCost) / parseFloat(retWeight))
        ).toFixed(2);

        curRow.find(".purreturnrate").val(retRate);
      } else {
        retRate = parseFloat(
          parseFloat(parseFloat(itemCost) / parseFloat(pcs))
        ).toFixed(2);

        curRow.find(".purreturnrate").val(retRate);
      }

      retTotal = itemCost;
    }

    retItemRowCost =
      parseFloat(retTotal) +
      parseFloat(stoneAmount) +
      parseFloat(otherMetalAmount);

    var tax_details = get_tax_details(
      parseFloat(retItemRowCost),
      parseInt(curRow.find(".return_item_tax_id").val())
    );

    console.log(tax_details);

    var item_tax_amt = tax_details["totaltax"];

    var tax_percentage = tax_details["tax_percentage"];

    $.each(karigar_details, function (k, val) {
      if (val.id_karigar == $("#bill_cus_id").val()) {
        supplier_country = val.id_country;

        supplier_state = val.id_state;
      }
    });

    $("#supplier_country").val(supplier_country);

    $("#supplier_state").val(supplier_state);

    if (cmp_country == "" || cmp_state == "") {
      item_sgst = parseFloat(parseFloat(item_tax_amt) / 2).toFixed(2);

      item_cgst = parseFloat(parseFloat(item_tax_amt) / 2).toFixed(2);
    } else {
      if (item_tax_amt > 0) {
        if (cmp_country == supplier_country) {
          if (cmp_state == supplier_state) {
            item_sgst = parseFloat(parseFloat(item_tax_amt) / 2).toFixed(2);

            item_cgst = parseFloat(parseFloat(item_tax_amt) / 2).toFixed(2);
          } else {
            item_igst = item_tax_amt;
          }
        } else {
          item_sgst = parseFloat(parseFloat(item_tax_amt) / 2).toFixed(2);

          item_cgst = parseFloat(parseFloat(item_tax_amt) / 2).toFixed(2);
        }
      }
    }

    console.log("less_wt:" + less_wt);

    console.log("net_wt:" + net_wt);

    console.log("othermetalwt:" + othermetalwt);

    console.log("stone_wt:" + stone_wt);

    console.log("otherMetalAmount:" + otherMetalAmount);

    console.log("stoneAmount:" + stoneAmount);

    console.log("taxableamount:" + retItemRowCost);

    console.log("item_tax_amt:" + item_tax_amt);

    curRow.find(".add_less_wt").val(parseFloat(less_wt).toFixed(3));

    curRow.find(".add_other_metal_wt").val(parseFloat(othermetalwt).toFixed(3));

    curRow.find(".net_wt").val(parseFloat(net_wt).toFixed(3));

    curRow.find(".return_item_tax_value").val(item_tax_amt);

    curRow.find(".return_item_tax_igst_value").val(item_igst);

    curRow.find(".return_item_tax_sgst_value").val(item_sgst);

    curRow.find(".return_item_tax_cgst_value").val(item_cgst);

    curRow.find(".return_item_tax_percent").val(tax_percentage);

    total_taxable_amt += parseFloat(retItemRowCost);

    total_item_cost += parseFloat(retItemRowCost) + parseFloat(item_tax_amt);

    curRow.find(".returnitemcost").val(parseFloat(retItemRowCost).toFixed(2));

    curRow
      .find(".purreturnamount")
      .val(
        parseFloat(
          parseFloat(retItemRowCost) + parseFloat(item_tax_amt)
        ).toFixed(2)
      );
  });

  other_charges_amount =
    isNaN($("#other_charges_amount").val()) ||
    $("#other_charges_amount").val() == ""
      ? 0
      : $("#other_charges_amount").val();

  total_bill_amount = parseFloat(
    parseFloat(total_item_cost) + parseFloat(other_charges_amount)
  ).toFixed(2);

  round_of_val = total_bill_amount;

  tot_cost = parseFloat(Math.round(total_bill_amount));

  round_of_amt = parseFloat(tot_cost - round_of_val).toFixed(2);

  console.log(round_of_amt);

  $(".return_round_off").val(round_of_amt < 0.5 ? round_of_amt : round_of_amt);

  $(".return_total_cost").val(parseFloat(tot_cost).toFixed(2));

  $(".total_summary_payable_amt").val(parseFloat(total_taxable_amt).toFixed(2));

  calculate_purchase_return_summary_cost();
}

function get_tax_details(taxcallrate, taxgroup) {
  var totaltax = 0;

  console.log(tax_details);

  var return_details = [];

  var tax_percentage = 0;

  $.each(tax_details, function (idx, taxitem) {
    if (taxitem.tgi_tgrpcode == taxgroup) {
      console.log(taxitem);

      if (taxitem.tgi_calculation == 1) {
        tax_percentage = taxitem.tax_percentage;

        if (taxitem.tgi_type == 1) {
          totaltax +=
            parseFloat(taxcallrate) *
            (parseFloat(taxitem.tax_percentage) / 100);
        } else {
          totaltax -=
            parseFloat(taxcallrate) *
            (parseFloat(taxitem.tax_percentage) / 100);
        }
      }
    }
  });

  return_details["totaltax"] = parseFloat(totaltax).toFixed(2);

  return_details["tax_percentage"] = tax_percentage;

  return return_details;
}

function calculate_purchase_return_summary_cost() {
  var total_item_cost = 0;

  var total_bill_amount = 0;

  var total_taxable_amount = 0;

  var total_cgst_amount = 0;

  var total_sgst_amount = 0;

  var total_igst_amount = 0;

  var tcsval = 0;

  var tdsval = 0;

  var other_charges_tdsval = 0;

  $.each(karigar_details, function (k, val) {
    if (val.id_karigar == $("#bill_cus_id").val()) {
      supplier_country = val.id_country;

      supplier_state = val.id_state;

      $("#tcs_percent").val(val.tcs_tax);

      $("#tds_percent").val(val.tds_tax);
    }
  });

  var tcspercent =
    isNaN($("#tcs_percent").val()) || $("#tcs_percent").val() == ""
      ? 0
      : $("#tcs_percent").val();

  var tdspercent =
    isNaN($("#tds_percent").val()) || $("#tds_percent").val() == ""
      ? 0
      : $("#tds_percent").val();

  var charges_tds_percent =
    isNaN($("#charges_tds_percent").val()) ||
    $("#charges_tds_percent").val() == ""
      ? 0
      : $("#charges_tds_percent").val();

  var other_charges_details = $("#other_charges_details").val();

  var charges_details = [];

  if (other_charges_details != "") {
    var charges_details = JSON.parse($("#other_charges_details").val());
  }

  var total_charges_taxable_amount = 0;

  var total_charges_tax_amount = 0;

  var total_charges_amount = 0;

  if (charges_details.length > 0) {
    $.each(charges_details, function (k, val) {
      total_charges_amount += parseFloat(val.char_with_tax);

      total_charges_taxable_amount += parseFloat(val.charge_value);

      total_charges_tax_amount += parseFloat(val.charge_tax_value);
    });
  }

  $("#return_item_detail > tbody tr").each(function (idx, row) {
    curRow = $(this);

    total_item_cost += parseFloat(curRow.find(".purreturnamount").val());

    total_cgst_amount += parseFloat(
      curRow.find(".return_item_tax_cgst_value").val()
    );

    total_sgst_amount += parseFloat(
      curRow.find(".return_item_tax_sgst_value").val()
    );

    total_igst_amount += parseFloat(
      curRow.find(".return_item_tax_igst_value").val()
    );

    total_taxable_amount += parseFloat(
      curRow.find(".purreturnamount").val() -
        curRow.find(".return_item_tax_value").val()
    );
  });

  var tot_discount =
    isNaN($(".grn_discount").val()) || $(".grn_discount").val() == ""
      ? 0
      : $(".grn_discount").val();

  var other_charges_amount =
    isNaN($("#other_charges_amount").val()) ||
    $("#other_charges_amount").val() == ""
      ? 0
      : $("#other_charges_amount").val();

  $(".total_summary_taxable_amt").val(
    parseFloat(total_taxable_amount).toFixed(2)
  );

  $(".total_summary_cgst_amount").val(parseFloat(total_cgst_amount).toFixed(2));

  $(".total_summary_sgst_amount").val(parseFloat(total_sgst_amount).toFixed(2));

  $(".total_summary_igst_amount").val(parseFloat(total_igst_amount).toFixed(2));

  $("#other_charges_taxable_amount").val(
    parseFloat(total_charges_taxable_amount).toFixed(2)
  );

  $("#other_charges_tax").val(parseFloat(total_charges_tax_amount).toFixed(2));

  if (total_charges_tax_amount > 0) {
    var cmp_country = $("#cmp_country").val();

    var cmp_state = $("#cmp_state").val();

    var supplier_country = $("#supplier_country").val();

    var supplier_state = $("#supplier_state").val();

    var other_charges_igst = 0;

    var other_charges_sgst = 0;

    var other_charges_cgst = 0;

    if (cmp_country == supplier_country) {
      if (cmp_state == supplier_state) {
        other_charges_cgst = parseFloat(
          parseFloat(total_charges_tax_amount) / 2
        ).toFixed(2);

        other_charges_sgst = parseFloat(
          parseFloat(total_charges_tax_amount) / 2
        ).toFixed(2);
      } else {
        other_charges_igst = total_charges_tax_amount;
      }
    } else {
      other_charges_cgst = parseFloat(
        parseFloat(total_charges_tax_amount) / 2
      ).toFixed(2);

      other_charges_sgst = parseFloat(
        parseFloat(total_charges_tax_amount) / 2
      ).toFixed(2);
    }

    $(".other_charges_cgst").html(parseFloat(other_charges_cgst).toFixed(2));

    $(".other_charges_sgst").html(parseFloat(other_charges_sgst).toFixed(2));

    $(".other_charges_igst").html(parseFloat(other_charges_igst).toFixed(2));
  }

  if (tdspercent > 0) {
    tdsval = parseFloat(
      parseFloat(total_taxable_amount) * (tdspercent / 100)
    ).toFixed(2);
  }

  $("#tds_tax_value").val(tdsval);

  if (tcspercent > 0) {
    tcsval = parseFloat(
      parseFloat(total_item_cost) * (tcspercent / 100)
    ).toFixed(2);
  }

  $("#tcs_tax_value").val(tcsval);

  if (charges_tds_percent > 0) {
    other_charges_tdsval = parseFloat(
      parseFloat(total_charges_taxable_amount) * (charges_tds_percent / 100)
    ).toFixed(2);
  }

  $("#other_charges_tds_tax_value").val(other_charges_tdsval);

  calculate_sales_details(); //Calculate Sales Details

  calculate_purchase_details(); //Calculate Purchase Details
}

$(document).on("change", ".return_round_off,.round_off_symbol", function () {
  var final_cost = $(".return_total_cost").val();

  var return_round_off =
    isNaN($(".return_round_off").val()) || $(".return_round_off").val() == ""
      ? 0
      : $(".return_round_off").val();

  var round_off_symbol = $(".round_off_symbol").val();

  if (return_round_off > 0) {
    if (round_off_symbol == 1) {
      // Add to Final cost

      final_cost = parseFloat(final_cost) + parseFloat(return_round_off);
    } else {
      final_cost = parseFloat(final_cost) - parseFloat(return_round_off);
    }

    $(".return_total_cost").val(parseFloat(final_cost).toFixed(2));
  } else {
    calculate_sales_details(); //Calculate Sales Details

    calculate_purchase_details(); //Calculate Purchase Details
  }
});

$(document).on("keyup", ".tds_percent,.tcs_percent", function () {
  calculate_sales_details(); //Calculate Sales Details

  calculate_purchase_details(); //Calculate Purchase Details
});

function get_purchase_return_total() {
  var total_pcs = 0;

  var total_wt = 0;

  var add_less_wt = 0;

  var net_wt = 0;

  var return_omwt = 0;

  $("#return_item_detail tbody tr").each(function (index, value) {
    console.log($(value).find('input[type="checkbox"]').is(":checked"));

    if ($(value).find('input[type="checkbox"]').is(":checked")) {
      total_pcs += parseFloat($(value).find(".purreturnpcs").val());

      total_wt += parseFloat($(value).find(".purreturnweight").val());

      add_less_wt += parseFloat(
        isNaN($(value).find(".add_less_wt").val()) ||
          $(value).find(".add_less_wt").val() == ""
          ? 0
          : $(value).find(".add_less_wt").val()
      );

      net_wt += parseFloat(
        isNaN($(value).find(".net_wt").val()) ||
          $(value).find(".net_wt").val() == ""
          ? 0
          : $(value).find(".net_wt").val()
      );

      return_omwt += parseFloat(
        isNaN($(value).find(".add_other_metal_wt").val()) ||
          $(value).find(".add_other_metal_wt").val() == ""
          ? 0
          : $(value).find(".add_other_metal_wt").val()
      );
    }
  });

  $(".return_pcs").html(total_pcs);

  $(".return_gwt").html(parseFloat(total_wt).toFixed(3));

  $(".return_lwt").html(parseFloat(add_less_wt).toFixed(3));

  $(".return_nwt").html(parseFloat(net_wt).toFixed(3));

  $(".return_omwt").html(parseFloat(return_omwt).toFixed(3));
}

$(document).on(
  "change",
  ".purreturnrate, .purreturnpcs, .purreturnweight,.purreturncaltype",
  function (event) {
    var row = $(this).parent().closest("tr");

    calculate_purchase_return_final_cost();
  }
);

/*$(document).on('keyup','.returnitemcost',function(){

	curRow = $(this).parent().closest('tr');

	curRow.find('.itemcaltype').val(2);

	calculate_returnItem_details(curRow);

});*/

function calculate_returnItem_details(row) {
  var retWeight = $(row).find(".net_wt").val();

  var retRate = 0;

  //var retRate     = isNaN(parseFloat($(row).find('.purreturnrate').val())) ? 0 : parseFloat($(row).find('.purreturnrate').val());

  var calType = $(row).find(".purreturncaltype").val();

  var pcs = isNaN(parseInt($(row).find(".purreturnpcs").val()))
    ? 0
    : $(row).find(".purreturnpcs").val();

  var stoneAmount = isNaN(parseFloat($(row).find(".ret_add_stone_wt").val()))
    ? 0
    : parseFloat($(row).find(".ret_add_stone_wt").val());

  var otherMetalAmount = isNaN(
    parseFloat($(row).find(".ret_add_other_metal_wt").val())
  )
    ? 0
    : parseFloat($(row).find(".ret_add_other_metal_wt").val());

  var retTotal = 0;

  var retItemRowCost = 0;

  if (calType == 1) {
    var retcost = isNaN(parseFloat($(row).find(".returnitemcost").val()))
      ? 0
      : parseFloat($(row).find(".returnitemcost").val());

    retRate = parseFloat(parseFloat(retcost) / parseFloat(retWeight)).toFixed(
      2
    );

    retTotal = retcost;
  } else {
    var retcost = isNaN(parseFloat($(row).find(".returnitemcost").val()))
      ? 0
      : parseFloat($(row).find(".returnitemcost").val());

    retRate = parseFloat(parseFloat(retcost) / parseFloat(pcs)).toFixed(2);

    retTotal = retcost;
  }

  $(row).find(".purreturnrate").val(retRate);

  retItemRowCost =
    parseFloat(retTotal) +
    parseFloat(stoneAmount) +
    parseFloat(otherMetalAmount);

  //$(row).find('.returnitemcost').val(isNaN(retItemRowCost) ? 0 : retItemRowCost.toFixed(2));

  var tax_details = calculate_base_value_tax(
    parseFloat(retItemRowCost),
    parseInt($(row).find(".return_item_tax_id").val())
  );

  var item_tax_amt = tax_details["totaltax"];

  var tax_percentage = tax_details["tax_percentage"];

  $(row)
    .find(".purreturnamount")
    .val(
      parseFloat(parseFloat(retItemRowCost) + parseFloat(item_tax_amt)).toFixed(
        2
      )
    );

  //calculate_purchase_return_final_cost();
}

function remove_pur_ret_row(curRow) {
  var cat_id = curRow.find(".return_item_cat_id").val();

  $.each(nontagreturnitemlist, function (k, nt_val) {
    if (nt_val.cat_id == cat_id) {
      nontagreturnitemlist.splice(k, 1);
    }
  });

  $.each(returntaggeditemlist, function (k, nt_val) {
    if (nt_val.cat_id == cat_id) {
      returntaggeditemlist.splice(k, 1);
    }
  });

  $.each(purchasereturnitemlist, function (k, nt_val) {
    if (nt_val.cat_id == cat_id) {
      purchasereturnitemlist.splice(k, 1);
    }
  });

  $.each(insertedcatdetails, function (k, nt_val) {
    if (nt_val.cat_id == cat_id) {
      insertedcatdetails.splice(k, 1);
    }
  });

  $("#returntaggeditemlist").val(JSON.stringify(returntaggeditemlist));

  $("#nontagreturnitemlist").val(JSON.stringify(nontagreturnitemlist));

  console.log(nontagreturnitemlist);

  console.log(returntaggeditemlist);

  curRow.remove();

  calculate_purchase_return_final_cost();

  get_purchase_return_total();
}

function get_ActiveKaigar() {
  $.ajax({
    type: "GET",

    url: base_url + "index.php/admin_ret_catalog/karigar/active_list",

    dataType: "json",

    success: function (data) {
      karigar_details = data;

      $.each(data, function (key, item) {
        $("#select_karigar").append(
          $("<option></option>")
            .attr("value", item.id_karigar)

            .text(item.karigar)
        );
      });

      $("#select_karigar").select2({
        placeholder: "Select Karigar",

        allowClear: true,
      });

      if ($("#select_karigar").length) {
        $("#select_karigar").select2("val", "");
      }
    },
  });
}

function get_non_tag_product() {
  $("div.overlay").css("display", "block");

  $("#select_product option").remove();

  $.ajax({
    type: "POST",

    url: base_url + "index.php/admin_ret_catalog/get_NonTagProducts",

    dataType: "json",

    success: function (data) {
      non_tag_category = data;

      $.each(data, function (key, item) {
        $("#select_product").append(
          $("<option></option>")
            .attr("value", item.pro_id)

            .text(item.product_name)

            .attr("data-cat_id", item.cat_id)

            .attr("data-categoryname", item.categoryname)

            .attr("data-tgrp_id", item.tgrp_id)
        );
      });

      $("#select_product").select2({
        placeholder: "Select Product",

        allowClear: true,
      });

      if ($("#select_product").length) {
        $("#select_product").select2("val", "");
      }

      $("div.overlay").css("display", "none");
    },
  });
}

$("#set_non_tag_stock_list").on("click", function () {
  if ($("#select_product").val() == null || $("#select_product").val() == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Select Product",
    });
  } else if (
    $("#select_design").val() == null ||
    $("#select_design").val() == ""
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Select Design",
    });
  } else if (
    $("#select_sub_design").val() == null ||
    $("#select_sub_design").val() == ""
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Select Sub Design",
    });
  } else {
    var nonTagProdExists = false;

    var cat_id = $("#select_product option:selected").attr("data-cat_id");

    var categoryname = $("#select_product option:selected").attr(
      "data-categoryname"
    );

    var tgrp_id = $("#select_product option:selected").attr("data-tgrp_id");

    var piece = $("#issue_pcs").val();

    var issue_weight = $("#issue_weight").val();

    if (nontagreturnitemlist.length > 0) {
      var index = nontagreturnitemlist.findIndex((val) => val.cat_id == cat_id);

      if (index >= 0) {
        nontagreturnitemlist[index].piece = parseFloat(
          parseFloat(nontagreturnitemlist[index].piece) +
            parseFloat($("#issue_pcs").val())
        ).toFixed(3);

        nontagreturnitemlist[index].gross_wt = parseFloat(
          parseFloat(nontagreturnitemlist[index].gross_wt) +
            parseFloat($("#issue_weight").val())
        ).toFixed(3);

        nontagreturnitemlist[index].less_wt = 0;
      } else {
        nontagreturnitemlist.push({
          tgrp_id: tgrp_id,
          cat_id: cat_id,
          id_product: $("#select_product").val(),
          id_design: $("#select_design").val(),
          id_sub_design: $("#select_sub_design").val(),
          piece: $("#issue_pcs").val(),
          gross_wt: $("#issue_weight").val(),
          less_wt: 0,
          net_wt: $("#issue_weight").val(),
          catname: categoryname,
        });
      }
    } else {
      nontagreturnitemlist.push({
        tgrp_id: tgrp_id,
        cat_id: cat_id,
        id_product: $("#select_product").val(),
        id_design: $("#select_design").val(),
        id_sub_design: $("#select_sub_design").val(),
        piece: $("#issue_pcs").val(),
        gross_wt: $("#issue_weight").val(),
        less_wt: 0,
        net_wt: $("#issue_weight").val(),
        catname: categoryname,
      });
    }

    console.log(nontagreturnitemlist);

    if (insertedcatdetails.length > 0) {
      var index = insertedcatdetails.findIndex((val) => val.cat_id == cat_id);

      if (index >= 0) {
        insertedcatdetails[index].piece = parseFloat(
          parseFloat(insertedcatdetails[index].piece) +
            parseFloat($("#issue_pcs").val())
        ).toFixed(3);

        insertedcatdetails[index].gross_wt = parseFloat(
          parseFloat(insertedcatdetails[index].gross_wt) +
            parseFloat($("#issue_weight").val())
        ).toFixed(3);

        insertedcatdetails[index].less_wt = 0;
      } else {
        insertedcatdetails.push({
          cat_id: cat_id,
          piece: piece,
          catname: categoryname,
          gross_wt: issue_weight,
          tgrp_id: tgrp_id,
          less_wt: 0,
          other_metal_weight: 0,
          stone_details: "",
          other_metal_details: "",
        });
      }
    } else {
      insertedcatdetails.push({
        cat_id: cat_id,
        piece: piece,
        catname: categoryname,
        gross_wt: issue_weight,
        tgrp_id: tgrp_id,
        less_wt: 0,
        other_metal_weight: 0,
        stone_details: "",
        other_metal_details: "",
      });
    }

    updatereturncategory();
  }
});

//Supplier Sales bill

function get_tcs_percent(id_customer) {
  $(".overlay").css("display", "block");
  my_Date = new Date();
  $.ajax({
    type: "POST",
    url:
      base_url +
      "index.php/admin_ret_billing/get_customer_tcs_percent?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),
    dataType: "json",
    data: { id_customer: id_customer },
    success: function (data) {
      tcs_details = data.tcs_details;

      $("#opening_balance").val(tcs_details.balance);

      $("#fin_year_code").val(tcs_details.fin_year_code);

      $("#bt_tcs_tax_per").val(data.tax_per);

      $("#customer_sales_limit").val(data.settings);

      var pan_no = $("#pan_no").val();

      //var customer_sales_limit = $('#customer_sales_limit').val();

      var tcs_min_bill_amt = $("#tcs_min_bill_amt").val();

      var is_tcs_required = $("#is_tcs_required").val();

      var item_cost = $("#opening_balance").val();

      var item_amount = $("#total_payment_amount").val();

      var total_balance_amount = parseFloat(
        parseFloat(item_cost) + parseFloat(item_amount)
      ).toFixed(2);
      $("#cus_total_amt_for_tcs").val(total_balance_amount);

      if (pan_no != "" && is_tcs_required == 1) {
        if (parseFloat(total_balance_amount) >= parseFloat(tcs_min_bill_amt)) {
          var tax_per = $("#bt_tcs_tax_per").val();

          $("#tcs_percent").val(tax_per);

          $(".tcs_value").css("display", "block");
        } else {
          $(".tcs_value").css("display", "none");

          var tax_per = 0;

          $("#tcs_percent").val(tax_per);
        }
      } else {
        $(".tcs_value").css("display", "none");

        var tax_per = 0;

        $("#tcs_percent").val(tax_per);
      }

      calculateFinalCost();

      $(".overlay").css("display", "none");
    },
  });
}

function customer_detail_modal(id_customer) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getCustomerDet/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      id_customer: id_customer,
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val() || $("#id_branch").val(),
    },

    success: function (data) {
      console.log(data);

      $("#finalname").val(data.cus_details[0].firstname);

      $("#cus_pop").html("");

      $("#customer-popup").modal("show");

			$('#from_cus_mobile').val(data.cus_details[0].mobile);

			$('#pan_no').val(data.cus_details[0].pan_no);

			let cus_aadhar_no = data.cus_details[0].aadhar_no;
      if (cus_aadhar_no != '' && cus_aadhar_no != null) {
        cus_aadhar_no = cus_aadhar_no.replace(/\D/g, "").split(/(?:([\d]{4}))/g).filter(s => s.length > 0).join("-");
      }

			$('#aadhar_no').val(cus_aadhar_no);

      $.each(data.cus_details, function (key, item) {
        var cusRow =
          "<div class='row'>" +
          "<div class='col-md-12 col-md-offset-1'>" +
          "<div class='row'>" +
          "<div class='col-md-4'>" +
          "<div class='form-group'>" +
          "<label>Customer name</label><br>" +
          item.firstname +
          "<br></div>" +
          "<div class='form-group'>" +
          "<label>Rating</label><br>" +
          (item.is_vip == 0
            ? "-"
            : "<span class='label bg-orange'><i class='fa fa-fw fa-star'></i> V I P</span>") +
          "<br></div>" +
          "<div class='form-group'>" +
          "<label>Total Accounts</label><br><span class='badge bg-green'>" +
          item.tot_account +
          "</span></div>" +
          "</div>" +
          "<div class='col-md-4'>" +
          "<div class='form-group'>" +
          "<label>Active Accounts</label><br><span class='badge bg-green'>" +
          item.active_acc +
          "</span><br></div>" +
          "<div class='form-group'>" +
          "<label>Closed Accounts</label><br><span class='badge bg-green'>" +
          item.closed_count +
          "</span><br></div>" +
          "<div class='form-group'>" +
          "<label>Inactive Accounts</label><br><span class='badge bg-green'>" +
          item.inactive_acount +
          "</span><br></div>" +
          "</div>" +
          "<div class='col-md-4'>" +
          "<div class='form-group'>" +
          "<label>Gold (Grams)</label><br>" +
          item.gold_wt +
          "<br></div>" +
          "<div class='form-group'>" +
          "<label>Silver (Grams)</label><br>" +
          item.silver_wt +
          "<br></div>" +
          "<div class='form-group'>" +
          "<label>MRP (Rs)</label><br>" +
          item.tot_fixed_rate +
          "<br></div>" +
          "</div>" +
          "</div>" +
          "</div>";

        $("#cus_pop").append(cusRow);
      });

      var tablehead =
        "<div class='table-responsive'>" +
        "<table id='bill_list' class='table table-bordered table-striped text-center'>" +
        "<thead style='background-color: LightSkyBlue'>" +
        "<tr>" +
        "<th>Bill Date</th>" +
        "<th>Bill No</th>" +
        "<th>Branch</th>" +
        "<th>Gold Wt</th>" +
        "<th>Silver Wt</th>" +
        "<th>MRP Amt</th>" +
        "<th>Bill Amt</th>" +
        "</tr>" +
        "</thead>" +
        "<tbody>";

      $.each(data.bill_details, function (key, item) {
        tablehead +=
          "<tr>" +
          "<td>" +
          item.bill_date +
          "</td>" +
          "<td>" +
          item.bill_no +
          "</td>" +
          "<td>" +
          item.branch_name +
          "</td>" +
          "<td>" +
          item.gold_wt +
          "</td>" +
          "<td>" +
          item.silver_wt +
          "</td>" +
          "<td>" +
          item.mrp_amount +
          "</td>" +
          "<td>" +
          money_format_india(item.tot_bill_amount) +
          "</td>" +
          "</tr>";
      });

      tablehead += "</tbody></table></div>";

      var credit_bill_details = "";

      var tot_outstanding = "";

      if (data.outstanding.length > 0) {
        var credit_bill_details =
          "<div class='table-responsive'>" +
          "<table id='bill_list' class='table table-bordered table-striped text-center'>" +
          "<thead style='background-color: LightSkyBlue '>" +
          "<tr style='text-align: right'>" +
          "<th>Bill Date</th>" +
          "<th>Bill No</th>" +
          "<th>Bill Amt</th>" +
          "<th>Bill paid amount</th>" +
          "<th>Due Amount</th>" +
          "<th>credit collection</th>" +
          "<th>Balance</th>" +
          "</tr>" +
          "</thead>";

        ("<tbody>");

        var total_pending_amt = 0;

        $.each(data.outstanding, function (key, items) {
          $("#from_cus_mobile").val(items.mobile);

          total_pending_amt += items.bal_amt;

          var paid_amount = (credit_bill_details +=
            "<tr>" +
            "<td>" +
            items.bill_date +
            "</td>" +
            "<td>" +
            items.bill_no +
            "</td>" +
            "<td>" +
            money_format_india(items.tot_bill_amount) +
            "</td>" +
            "<td>" +
            money_format_india(items.tot_amt_received) +
            "</td>" +
            "<td>" +
            money_format_india(items.due_amount) +
            "</td>" +
            "<td>" +
            money_format_india(items.paid_amount) +
            "</td>" +
            "<td>" +
            money_format_india(items.bal_amt) +
            "</td>" +
            "</tr>");
        });

        var tot_outstanding =
          "<div class='table-responsive'>" +
          "<table id='bill_list' class='table table-bordered table-striped text-center'>" +
          "<tfoot >" +
          "<tr style='text-align: right'>" +
          "<th style='text-align: left'>Total Outstanding Amount : " +
          money_format_india(total_pending_amt) +
          "</th>" +
          "</tr>";

        credit_bill_details += "</tbody></tfoot></table></div>";
      }

      $("#cus_bill_details").html(
        tablehead + credit_bill_details + tot_outstanding
      );
    },
  });
}

$("#cus_image").on("change", function () {
  validateImage(this);
});

function validateImage() {
  if (arguments[0].id == "cus_image") {
    var preview = $("#cus_img_preview");
  } else if (arguments[0].id == "ed_cus_image") {
    var preview = $("#ed_cus_img_preview");
  }

  if (arguments[0].files[0].size > 1048576) {
    alert("File size cannot be greater than 1 MB");

    arguments[0].value = "";

    preview.css("display", "none");
  } else {
    var fileName = arguments[0].value;

    var ext = fileName.substring(fileName.lastIndexOf(".") + 1);

    ext = ext.toLowerCase();

    if (ext != "jpg" && ext != "png" && ext != "jpeg") {
      alert("Upload JPG or PNG Images only");

      arguments[0].value = "";

      preview.css("display", "none");
    } else {
      var file = arguments[0].files[0];

      var reader = new FileReader();

      reader.onloadend = function () {
        preview.prop("src", reader.result);
      };

      if (file) {
        reader.readAsDataURL(file);

        preview.css("display", "");
      } else {
        preview.prop("src", "");

        preview.css("display", "none");
      }
    }
  }
}

$("input[name='billing[is_to_be]']:radio").on("change", function () {
  if ($(this).val() == 0) {
    $("#credit_due_date").prop("disabled", true);

    $("#is_credit_no").prop("checked", true);

    $('.receive_amount').val($('#total_cost').val());

    $("#is_credit_no").prop("disabled", false);

    //For item Deilvery

    $(".delivery_status").prop("disabled", true);

    $(".delivery_status").prop("checked", true);

    $(".is_delivered").val(1);
  } else {
    $("#credit_due_date").prop("disabled", false);

    $("#is_credit_yes").prop("checked", true);

    $("#is_credit_no").prop("disabled", true);

    //For item Deilvery

    $(".delivery_status").prop("disabled", false);

    $(".delivery_status").prop("checked", false);

    $(".is_delivered").val(0);
  }
  calculatePaymentCost();
});

/* Credit Collection Bills*/

$("#credit_history").on("click", function (e) {
  if ($("#bill_cus_name").val() != "") {
    get_CustomerCredithistory($("#bill_cus_id").val());
  }
});

$("input[name='billing[collection_type]']:radio").on("change", function (e) {
  if ($("#bill_cus_name").val() != "") {
    getCreditPending($("#bill_cus_id").val());
  }
});

function getCreditPending(id_customer) {
  var col_type = $("input[name='billing[collection_type]']:checked").val();

  $("#filter_bill_no option").remove();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getCreditPending/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      id_customer: id_customer,
      id_branch: $("#id_branch").val(),
      col_type: col_type,
    },

    success: function (data) {
      console.log(data.length);

      if (data.length > 0) {
        $.each(data, function (key, val) {
          $("#filter_bill_no").append(
            $("<option></option>")
              .attr("value", val.s_ref_no)

              .text(val.s_ref_no)
          );
        });
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>No records Found..",
        });
      }
    },
  });
}

function get_CustomerCredithistory(id_customer) {
  var col_type = $("input[name='billing[collection_type]']:checked").val();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getCreditPending/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: {
      id_customer: id_customer,
      id_branch: $("#id_branch").val(),
      col_type: col_type,
    },

    success: function (data) {
      if (data.length > 0) {
        $("#bill-credit-popup").modal("toggle");

        $("#bill_items_tbl_for_pending tbody").empty();

        $.each(data, function (key, val) {
          var url =
            base_url +
            "index.php/admin_ret_billing/billing_invoice/" +
            val.bill_id;

          var row =
            "<tr>" +
            '<td><input type="checkbox" class="select_credit_bill" value="1" /><input type="hidden" class="ref_no" value=' +
            val.s_ref_no +
            "></td>" +
            '<td class="bill_no"><a href=' +
            url +
            ' target="_blank">' +
            val.bill_no +
            "</td>" +
            '<td class="bill_date">' +
            val.bill_date +
            "</td>" +
            '<td class="tot_bill_amount">' +
            val.tot_bill_amount +
            "</td>" +
            '<td class="due_amount">' +
            val.due_amount +
            "</td>" +
            '<td class="paid_amount">' +
            val.paid_amount +
            "</td>" +
            '<td class="bal_amt">' +
            val.bal_amt +
            "</td>" +
            "</tr>";

          $("#bill_items_tbl_for_pending tbody").append(row);
        });

        $("#bill_items_for_pending").show();
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>No records Found..",
        });
      }
    },
  });
}

$(document).on("change", ".select_credit_bill", function () {
  curRow = $(this);

  $(".select_credit_bill").not(this).prop("checked", false);
});

$("#update_bill_credit").on("click", function (e) {
  $("#filter_bill_no option").remove();

  $("#bill_items_tbl_for_pending > tbody tr").each(function (i, row) {
    curRow = $(this);

    console.log(curRow.find("td:first .select_credit_bill").is(":checked"));

    if (curRow.find("td:first .select_credit_bill").is(":checked")) {
      var ref_no = curRow.find(".ref_no").val();

      $("#filter_bill_no").append(
        $("<option></option>")
          .attr("value", ref_no)

          .text(ref_no)
      );

      console.log(curRow.find(".ref_no").val());
    }
  });

  $("#bill-credit-popup").modal("toggle");
});

/* Credit Collection Bills*/

/*Sales Bills for Sales Return*/

function getCustomerSalesDetails(id_customer) {
  $("#filter_bill_no option").remove();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/getCustomerSalesDetails/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { id_customer: id_customer, id_branch: $("#id_branch").val() },

    success: function (data) {
      if (data.length > 0) {
        $.each(data, function (key, val) {
          $("#filter_bill_no").append(
            $("<option></option>")
              .attr("value", val.bill_no)

              .text(val.bill_no)
          );
        });
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>No records Found..",
        });
      }
    },
  });
}

/*Sales Bills for Sales Return*/

function get_employee() {
  $("#emp_select option").remove();

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/get_employee?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    data: { id_branch: $("#id_branch").val() },

    type: "POST",

    dataType: "JSON",

    success: function (data) {
      item_emp_details = data;

      var id_employee = $("#id_employee").val();

      $.each(data, function (key, item) {
        $("#emp_select").append(
          $("<option></option>")
            .attr("value", item.id_employee)

            .text(item.emp_name)
        );

        $("#emp_select_otp").append(
          $("<option></option>")
            .attr("value", item.id_employee)

            .text(item.emp_name)
        );
      });

      $("#emp_select,#emp_select_otp").select2({
        placeholder: "Select Employee",

        allowClear: true,
      });

      $("#emp_select").select2(
        "val",
        id_employee != "" && id_employee > 0 ? id_employee : ""
      );

      $(".overlay").css("display", "none");
    },

    error: function (error) {
      $(".overlay").css("display", "none");
    },
  });
}

/* function get_profession()

{

	$('.overlay').css('display','block');



		$.ajax({



		  type: 'GET',

		  url:  base_url+'index.php/settings/company/getprofession',



		  dataType: 'json',



		  success: function(data) {

			$.each(data, function (key,data ) {



				$('#profession').append(



					$("<option></option>")



					  .attr("value", data.id_profession)



					  .text(data.name)

				);

			});

			if($("#profession").length > 0)

			{

				$("#profession").select2("val", ($('#professionval').val()!=null?$('#professionval').val():''));

			}





			$('.overlay').css('display','none');



			},

		 error:function(error)  {



			$("div.overlay").css("display", "none");

		 }

		});



} */

/* $('#profession').on('change',function()

{

	if(this.value!='')

	{

		$('#professionval').val(this.value);

	}

	else

	{

		$('#professionval').val('');

	}

}); */

// $('#emp_select').on('change',function()

// {

// 	if(this.value!='')

// 	{

// 		$('#id_employee').val(this.value);

// 	}

// 	else

// 	{

// 		$('#id_employee').val('');

// 	}

// });

//Bill Split Function Start here

//Bill Split Function Start here
$("#bill_split_search").on("click", function () {
  if ($("#branch_select").val() == "" || $("#branch_select").val() == null) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select The Branch..",
    });
    allow_submit = false;
  } else if ($("#est_split_no").val() == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter the Est no..",
    });
    allow_submit = false;
  } else {
    get_esti_details();
  }
});
function get_esti_details() {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/bill_split/esti_details?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),
    data: {
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
      est_no: $("#est_split_no").val(),
    },
    type: "POST",
    dataType: "JSON",
    success: function (data) {
      var id_employee = $("#id_employee").val();
      $.each(data, function (key, item) {
        $("#emp_select").append(
          $("<option></option>")
            .attr("value", item.id_employee)
            .text(item.emp_name)
        );
      });
      $("#emp_select").select2({
        placeholder: "Select Employee",
        allowClear: true,
      });
      $("#emp_select").select2(
        "val",
        id_employee != "" && id_employee > 0 ? id_employee : ""
      );
      $(".overlay").css("display", "none");
    },
    error: function (error) {
      $(".overlay").css("display", "none");
    },
  });
}
$("#ratio_apply").on("click", function () {
  var bill_split_details = [];
  var ratio_per = $("#ratio_per").val();
  if (ratio_per < 100 && ratio_per != "") {
    $("#billing_split_sale_details tbody").empty();
    $("#billing_sale_details > tbody tr").each(function (idx, row) {
      curRow = $(this);
      var tag_split_count = 0;

      var gross_wt =
        isNaN(curRow.find(".bill_gross_val").val()) ||
        curRow.find(".bill_gross_val").val() == ""
          ? 0
          : curRow.find(".bill_gross_val").val();
      var item_stone_weight = 0;
      let availableBeginning = gross_wt;
      var splitted_weight = 0;
      var total_splitted_stone_weight = 0;
      var balance_weight = 0;
      var balance_stone_weight = 0;
      var total_row_stn_details = [];

      for (let index = 0; gross_wt > 0; index++) {
        let applied_weight = parseFloat(
          (ratio_per / 100) * availableBeginning
        ).toFixed(3);
        splitted_weight += parseFloat(applied_weight);
        if (parseFloat(splitted_weight) < parseFloat(gross_wt)) {
          var charge_detais = curRow.find(".charges_details").val();
          var stone_details = curRow.find(".stone_details").val();
          var row_stn_details = [];
          if (stone_details != "") {
            stone_details = JSON.parse(stone_details);
            if (stone_details.length > 0) {
              $.each(stone_details, function (k, val) {
                item_stone_weight += parseFloat(val.stone_wt);
                var stone_weight = val.stone_wt;
                let availableBeginningStnweight = stone_weight;
                var splitted_stn_weight = 0;
                console.log("stone_weight:" + stone_weight);
                for (let stn_index = 0; stone_weight > 0; stn_index++) {
                  let applied_stn_weight = parseFloat(
                    (ratio_per / 100) * availableBeginningStnweight
                  ).toFixed(3);
                  splitted_stn_weight += parseFloat(applied_stn_weight);
                  total_splitted_stone_weight += parseFloat(applied_stn_weight);

                  if (
                    parseFloat(splitted_stn_weight) < parseFloat(stone_weight)
                  ) {
                    if (index == stn_index) {
                      row_stn_details.push({
                        stone_id: val.stone_id,
                        uom_id: val.uom_id,
                        stone_pcs: stn_index == 0 ? val.stone_pcs : 0,
                        stone_wt: applied_stn_weight,
                        stone_price:
                          val.stone_cal_type == 1
                            ? parseFloat(
                                parseFloat(applied_stn_weight) *
                                  parseFloat(val.rate_per_gram)
                              ).toFixed(2)
                            : parseFloat(
                                parseFloat(val.stone_pcs) *
                                  parseFloat(val.rate_per_gram)
                              ).toFixed(2),
                        stone_name: val.stone_name,
                        is_apply_in_lwt: val.is_apply_in_lwt,
                        stone_cal_type: val.stone_cal_type,
                        rate_per_gram: val.rate_per_gram,
                      });
                      total_row_stn_details.push({
                        stone_id: val.stone_id,
                        uom_id: val.uom_id,
                        stone_pcs: stn_index == 0 ? val.stone_pcs : 0,
                        stone_wt: applied_stn_weight,
                        stone_price:
                          val.stone_cal_type == 1
                            ? parseFloat(
                                parseFloat(applied_stn_weight) *
                                  parseFloat(val.rate_per_gram)
                              ).toFixed(2)
                            : parseFloat(
                                parseFloat(val.stone_pcs) *
                                  parseFloat(val.rate_per_gram)
                              ).toFixed(2),
                        stone_name: val.stone_name,
                        is_apply_in_lwt: val.is_apply_in_lwt,
                        stone_cal_type: val.stone_cal_type,
                        rate_per_gram: val.rate_per_gram,
                      });
                    }
                  } else {
                    splitted_stn_weight -= applied_stn_weight;
                    total_splitted_stone_weight -= applied_stn_weight;
                    break;
                  }
                }
              });
            }
          }
          bill_split_details.push({
            product_name: curRow.find(".product_name").html(),
            design_name: curRow.find(".design_name").html(),
            id_collecion_maping_det: curRow
              .find(".id_collecion_maping_det")
              .val(),
            order_no: curRow.find(".order_no").val(),
            id_orderdetails: curRow.find(".id_orderdetails").val(),
            id_customerorder: curRow.find(".id_customerorder").val(),
            sale_pro_hsn: curRow.find(".sale_pro_hsn").val(),
            sale_type: curRow.find(".sale_type").val(),
            sale_item_type: curRow.find(".sale_item_type").val(),
            is_est_details: curRow.find(".is_est_details").val(),
            est_itm_id: curRow.find(".est_itm_id").val(),
            sale_cal_type: curRow.find(".sale_cal_type").val(),
            sale_metal_type: curRow.find(".sale_metal_type").val(),
            sale_purity: curRow.find(".sale_purity").val(),
            sale_uom: curRow.find(".sale_uom").val(),
            is_partial: index == 0 ? 1 : 0,
            max_wastage: curRow.find(".max_wastage").val(),
            stock_type: curRow.find(".stock_type").val(),
            rate_field: curRow.find(".rate_field").val(),
            va_limit: curRow.find(".va_limit").val(),
            margin_mrp: curRow.find(".margin_mrp").val(),
            purchase_cost: curRow.find(".purchase_cost").val(),
            sale_product_id: curRow.find(".sale_product_id").val(),
            scheme_closure_benefit: curRow
              .find(".scheme_closure_benefit")
              .val(),
            sale_design_id: curRow.find(".sale_design_id").val(),
            id_sub_design: curRow.find(".id_sub_design").val(),
            sale_pcs: index == 0 ? curRow.find(".sale_pcs").val() : 1,
            bill_gross_val: applied_weight,
            bill_less_val: 0,
            bill_net_val: 0,
            bill_wastage: curRow.find(".bill_wastage").val(),
            bill_wastage_per: curRow.find(".bill_wastage_per").val(),
            bill_wastage_wt: curRow.find(".bill_wastage_wt").val(),
            wastage_discount: curRow.find(".wastage_discount").val(),
            mc_discount: curRow.find(".mc_discount").val(),
            item_blc_discount: curRow.find(".item_blc_discount").val(),
            mc_dis: curRow.find(".mc_dis").val(),
            bill_mctype: curRow.find(".bill_mctype").val(),
            bill_mc: curRow.find(".bill_mc").val(),
            discount: curRow.find(".discount").val(),
            sale_tax_group: curRow.find(".sale_tax_group").val(),
            charges_details:
              index == 0 ? curRow.find(".charges_details").val() : [],
            charge_value: index == 0 ? curRow.find(".charge_value").val() : 0,
            certification_cost: curRow.find(".certification_cost").val(),
            est_old_stone_val: curRow.find(".est_old_stone_val").val(),
            est_old_dust_val: curRow.find(".est_old_dust_val").val(),
            bill_material_price: curRow.find(".bill_material_price").val(),
            stone_details: row_stn_details.length > 0 ? row_stn_details : [],
            other_metal_details: curRow.find(".other_metal_details").val(),
            est_old_dust_val: curRow.find(".est_old_dust_val").val(),
            sale_tag_id: curRow.find(".sale_tag_id").val(),
            sale_cgst: curRow.find(".sale_cgst").val(),
            sale_sgst: curRow.find(".sale_sgst").val(),
            sale_igst: curRow.find(".sale_igst").val(),
            sale_est_itm_id: curRow.find(".sale_est_itm_id").val(),
            tag_sales_value: curRow.find(".tag_sales_value").val(),
            esti_no: curRow.find(".esti_no").html(),
            tag_code: curRow.find(".tag_code").html(),
            tgrp_name: curRow.find(".tgrp_name").html(),
            esti_number: curRow.find(".esti_number").html(),
            sale_size: curRow.find(".sale_size").val(),
            is_non_tag: 0,
          });
        } else {
          splitted_weight -= applied_weight;
          break;
        }
      }
      balance_weight = parseFloat(
        parseFloat(gross_wt) - parseFloat(splitted_weight)
      ).toFixed(3);
      if (balance_weight > 0) {
        var balacne_stone_details = [];
        var tag_stone_details = curRow.find(".stone_details").val();
        if (tag_stone_details != "") {
          tag_stone_details = JSON.parse(tag_stone_details);

          $.each(tag_stone_details, function (k, stval) {
            var splitted_stone_weight = 0;
            var tag_less_wt = parseFloat(stval.stone_wt);
            $.each(total_row_stn_details, function (key, val) {
              if (val.stone_id == stval.stone_id) {
                splitted_stone_weight += parseFloat(val.stone_wt);
              }
            });
            var balance_stone_weight = parseFloat(
              parseFloat(tag_less_wt) - parseFloat(splitted_stone_weight)
            ).toFixed(3);
            if (balance_stone_weight > 0) {
              balacne_stone_details.push({
                stone_id: stval.stone_id,
                uom_id: stval.uom_id,
                stone_pcs: 0,
                stone_wt: balance_stone_weight,
                stone_price:
                  stval.stone_cal_type == 1
                    ? parseFloat(
                        parseFloat(balance_stone_weight) *
                          parseFloat(stval.rate_per_gram)
                      ).toFixed(2)
                    : parseFloat(
                        parseFloat(stval.stone_pcs) *
                          parseFloat(stval.rate_per_gram)
                      ).toFixed(2),
                stone_name: stval.stone_name,
                is_apply_in_lwt: stval.is_apply_in_lwt,
                stone_cal_type: stval.stone_cal_type,
                rate_per_gram: stval.rate_per_gram,
              });
            }
          });
        }

        bill_split_details.push({
          product_name: curRow.find(".product_name").html(),
          design_name: curRow.find(".design_name").html(),
          id_collecion_maping_det: curRow
            .find(".id_collecion_maping_det")
            .val(),
          order_no: curRow.find(".order_no").val(),
          id_orderdetails: curRow.find(".id_orderdetails").val(),
          id_customerorder: curRow.find(".id_customerorder").val(),
          sale_pro_hsn: curRow.find(".sale_pro_hsn").val(),
          sale_type: curRow.find(".sale_type").val(),
          sale_item_type: curRow.find(".sale_item_type").val(),
          is_est_details: curRow.find(".is_est_details").val(),
          est_itm_id: curRow.find(".est_itm_id").val(),
          sale_cal_type: curRow.find(".sale_cal_type").val(),
          sale_metal_type: curRow.find(".sale_metal_type").val(),
          sale_purity: curRow.find(".sale_purity").val(),
          sale_uom: curRow.find(".sale_uom").val(),
          is_partial: 0,
          max_wastage: curRow.find(".max_wastage").val(),
          stock_type: curRow.find(".stock_type").val(),
          rate_field: curRow.find(".rate_field").val(),
          va_limit: curRow.find(".va_limit").val(),
          margin_mrp: curRow.find(".margin_mrp").val(),
          purchase_cost: curRow.find(".purchase_cost").val(),
          sale_product_id: curRow.find(".sale_product_id").val(),
          scheme_closure_benefit: curRow.find(".scheme_closure_benefit").val(),
          sale_design_id: curRow.find(".sale_design_id").val(),
          id_sub_design: curRow.find(".id_sub_design").val(),
          sale_pcs: 0,
          bill_gross_val: balance_weight,
          bill_less_val: 0,
          bill_net_val: 0,
          bill_wastage: curRow.find(".bill_wastage").val(),
          bill_wastage_per: curRow.find(".bill_wastage_per").val(),
          bill_wastage_wt: curRow.find(".bill_wastage_wt").val(),
          wastage_discount: curRow.find(".wastage_discount").val(),
          mc_discount: curRow.find(".mc_discount").val(),
          item_blc_discount: curRow.find(".item_blc_discount").val(),
          mc_dis: curRow.find(".mc_dis").val(),
          bill_mctype: curRow.find(".bill_mctype").val(),
          bill_mc: curRow.find(".bill_mc").val(),
          discount: curRow.find(".discount").val(),
          sale_tax_group: curRow.find(".sale_tax_group").val(),
          charges_details: 0,
          charge_value: 0,
          certification_cost: curRow.find(".certification_cost").val(),
          est_old_stone_val: curRow.find(".est_old_stone_val").val(),
          est_old_dust_val: curRow.find(".est_old_dust_val").val(),
          bill_material_price: curRow.find(".bill_material_price").val(),
          stone_details:
            balacne_stone_details.length > 0 ? balacne_stone_details : [],
          other_metal_details: curRow.find(".other_metal_details").val(),
          est_old_dust_val: curRow.find(".est_old_dust_val").val(),
          sale_tag_id: curRow.find(".sale_tag_id").val(),
          sale_cgst: curRow.find(".sale_cgst").val(),
          sale_sgst: curRow.find(".sale_sgst").val(),
          sale_igst: curRow.find(".sale_igst").val(),
          sale_est_itm_id: curRow.find(".sale_est_itm_id").val(),
          tag_sales_value: curRow.find(".tag_sales_value").val(),
          esti_no: curRow.find(".esti_no").html(),
          tag_code: curRow.find(".tag_code").html(),
          tgrp_name: curRow.find(".tgrp_name").html(),
          sale_size: curRow.find(".sale_size").val(),
          is_non_tag: 0,
          esti_number: curRow.find(".esti_number").html(),
        });
      }
    });

    if (bill_split_details.length > 0) {
      var row = "";
      $.each(bill_split_details, function (key, estval) {
        row +=
          '<tr id="' +
          key +
          '" class="' +
          key +
          '" >' +
          '<td><div class="form-group"><div class="input-group"><input class="form-control cus_name" type="text" name="split_sale[cus_name][]"  placeholder="Search Customer" required autocomplete="off" style="width:100px;" /><span class="input-group-addon input-sm" onClick="create_new_customer($(this).closest(\'tr\'));" >+</span><input type="hidden" class="id_customer" name="split_sale[id_customer][]" ><input type="hidden" class="cus_del_state" name="split_sale[cus_del_state][]" ><input type="hidden" class="cus_del_country" name="split_sale[cus_del_country][]" ></div></div></td>' +
          "<td><span>" +
          estval.sale_pro_hsn +
          '</span><input type="hidden" name="split_sale[id_collecion_maping_det][]" class="id_collecion_maping_det" value="' +
          estval.id_collecion_maping_det +
          '"><input type="hidden" name="split_sale[order_no][]" class="order_no" value="' +
          estval.order_no +
          '"><input type="hidden" name="split_sale[id_orderdetails][]" class="id_orderdetails" value="' +
          estval.id_orderdetails +
          '"><input type="hidden" name="split_sale[id_customerorder][]" class="id_customerorder" value="' +
          estval.id_customerorder +
          '"><input type="hidden" class="sale_pro_hsn" name="split_sale[hsn]" value="' +
          estval.sale_pro_hsn +
          '" /><input type="hidden" class="sale_type" name="split_sale[sourcetype][]" value="1" /><input type="hidden" class="sale_item_type itemtype" name="split_sale[itemtype][]" value="' +
          estval.sale_item_type +
          '" /><input type="hidden" class="is_est_details" value="1" name="split_sale[is_est_details][]" /><input type="hidden" class="est_itm_id" name="split_sale[est_itm_id][]" value="' +
          estval.est_itm_id +
          '" /><input type="hidden" class="sale_cal_type" name="split_sale[calltype][]" value="' +
          estval.sale_cal_type +
          '" /><input type="hidden" class="sale_metal_type" value="' +
          estval.sale_metal_type +
          '" /><input type="hidden" class="sale_purity" value="' +
          estval.sale_purity +
          '"  name="split_sale[purity][]" /><input type="hidden" class="sale_size" value="' +
          estval.sale_size +
          '"  name="split_sale[size][]" /><input type="hidden" class="sale_uom" value="' +
          estval.sale_uom +
          '"  name="split_sale[uom][]" /><input type="hidden" class="total_tax" name="split_sale[item_total_tax][]"><input type="hidden" class="is_partial" value="' +
          estval.is_partial +
          '"  name="split_sale[is_partial][]" /><input type="hidden" class="min_wastage" value="' +
          estval.min_wastage +
          '"  name="split_sale[min_wastage][]" /><input type="hidden" class="max_wastage" value="' +
          estval.max_wastage +
          '"  name="split_sale[max_wastage][]" /><input type="hidden" class="stock_type" name="split_sale[stock_type][]" value="' +
          estval.stock_type +
          '" /><input type="hidden" class="is_non_tag" name="split_sale[is_non_tag][]" value="' +
          estval.is_non_tag +
          '" /><input type="hidden" class="rate_field"  value="' +
          estval.rate_field +
          '" /><input type="hidden" class="mc_limit"  value="' +
          estval.mc_limit +
          '" /><input type="hidden" class="va_limit"  value="' +
          estval.va_limit +
          '" /><input type="hidden" class="margin_mrp"  value="' +
          estval.margin_mrp +
          '" /><input type="hidden" class="purchase_cost" value="' +
          estval.purchase_cost +
          '" /></td>' +
          '<td><span class="product_name">' +
          estval.product_name +
          '</span><input class="sale_product_id" type="hidden" name="split_sale[product][]" value="' +
          estval.sale_product_id +
          '" /><input class="scheme_closure_benefit" type="hidden" name="split_sale[scheme_closure_benefit][]" value="' +
          estval.scheme_closure_benefit +
          '" /><input type="hidden" class="esti_no"  name="split_sale[esti_no][]"  value="' +
          estval.esti_no +
          '" /></td>' +
          '<td><span class="design_name">' +
          estval.design_name +
          '</span><input type="hidden" class="sale_design_id" name="split_sale[design][]" value="' +
          estval.sale_design_id +
          '" /><input type="hidden" class="id_sub_design" name="split_sale[id_sub_design][]" value="' +
          estval.id_sub_design +
          '" /></td>' +
          "<td><span>" +
          estval.sale_pcs +
          '</span><input type="hidden" class="sale_pcs" name="split_sale[pcs][]" value="' +
          estval.sale_pcs +
          '"  /></td>' +
          "<td><span>" +
          estval.bill_gross_val +
          '</span><input type="hidden" class="bill_gross_val" name="split_sale[gross][]" value="' +
          estval.bill_gross_val +
          '" /></td>' +
          '<td><span class="bill_split_lesswt">' +
          estval.bill_less_val +
          '</span><input type="hidden" class="bill_less_val" name="split_sale[less][]" value="' +
          estval.bill_less_val +
          '" /></td>' +
          '<td><span class="bill_sale_net_wt"></span><input type="hidden" class="bill_net_val" name="split_sale[net][]" value="' +
          estval.bill_net_val +
          '" /><input type="hidden" class="bill_tag_net_wt_val"  value="' +
          estval.bill_net_val +
          '" /></td>' +
          '<td><span class="est_wastage">' +
          estval.bill_wastage_per +
          '</span><input type="hidden" class="bill_wastage" value="' +
          estval.bill_wastage_per +
          '" /><input type="hidden" class="bill_wastage_per" name="split_sale[wastage][]" value="' +
          estval.bill_wastage_per +
          '" /></td>' +
          '<td><span class="est_wastage_wt"></span><input type="hidden" class="bill_wastage_wt" value=""><input type="hidden" name="split_sale[wastage_discount][]" class="wastage_discount" value=""><input type="hidden" name="split_sale[mc_discount][]" class="mc_discount" value=""><input type="hidden" name="split_sale[item_blc_discount][]" class="item_blc_discount" value=""></td>' +
          '<td><span class="making_charge">' +
          estval.bill_mc +
          '</span><input type="hidden" class="mc_dis" value="0"><input type="hidden" class="bill_mctype" name="split_sale[bill_mctype][]" value="' +
          estval.bill_mctype +
          '" /><input type="hidden" class="bill_mc" name="split_sale[mc][]" value="' +
          estval.bill_mc +
          '" /><input type="hidden" class="discount"  name="split_sale[adjusted_dis][]" value="" /><input type="hidden" class="bill_mc_value" value="' +
          estval.bill_mc +
          '" /></td>' +
          '<td><input type="number" class="bill_discount" name="split_sale[discount][]"  step="any" readonly/></td>' +
          '<td><span class="bill_taxable_amt"></span></td>' +
          '<td><span class="tgrp_name">' +
          estval.tgrp_name +
          '</span><input type="hidden" class="sale_tax_group" name="split_sale[taxgroup][]" value="' +
          estval.sale_tax_group +
          '" /></td>' +
          '<td class="tax_amt"></td>' +
          '<td class="total_charges">' +
          estval.charge_value +
          (estval.charges_details.length > 0
            ? ' <a href="#" onClick="show_chargesdetails(event, $(this).closest(\'tr\'));" class="btn btn-success btn-sm"><i class="fa fa-edit"></i></a>'
            : "-") +
          '<input type="hidden" value=' +
          estval.charges_details +
          ' class="charges_details" /><input type="hidden" class="charge_value" value="' +
          estval.charge_value +
          '" /></td>' +
          //+'<td>'+(stone_details.length>0 ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>' :'-')+'<input type="hidden" class="certification_cost" value="'+estval.certification_cost+'" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="'+estval.othermat_amount+'"/><input type="hidden" name="sale[stone_details][]" value=\''+(JSON.stringify(stone_details))+'\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value="'+tag_other_itm_amount+'"/><input type="hidden" class="other_metal_details" name="sale[other_metal_details][]" value='+(JSON.stringify(other_metal_details))+' class="other_metal_details" /></td>'
          "<td>" +
          (estval.stone_details.length > 0
            ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>'
            : "-") +
          '<input type="hidden" class="certification_cost" value="' +
          estval.certification_cost +
          '" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="' +
          estval.othermat_amount +
          '"/><input type="hidden" name="split_sale[stone_details][]" value=\'' +
          JSON.stringify(estval.stone_details) +
          '\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value=""/><input type="hidden" class="other_metal_details" name="split_sale[other_metal_details][]" value="" class="other_metal_details" /></td>' +
          '<td><input type="hidden" class="bill_stone_price" value="' +
          estval.bill_stone_price +
          '" /><input type="number" class="bill_amount" name="split_sale[billamount][]" value="" step="any" readonly /><input type="hidden" class="per_grm_amount" name="split_sale[per_grm][]" value="' +
          estval.per_grm_amount +
          '" step="any" /><input type="hidden" class="round_of_amt" name="split_sale[round_of_amt][]" value="" /></td>' +
          '<td><input type="number" class="split_recd_amount" name="split_sale[split_recd_amount][]" value="" step="any" /></td>' +
          '<td><a href="#" onClick="create_new_empty_payment_details_row($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" name="split_sale[split_payment_details][]" value="" class="split_payment_details" /><input type="hidden" value="" class="split_recd_amt" /><input type="hidden" value="" class="cus_advance_details" name="split_sale[cus_advance_details][]" /></td>' +
          "<td>" +
          (estval.is_partial == 1 ? "YES" : "NO") +
          "</td>" +
          '<td><span class="tag_code">' +
          estval.tag_code +
          '</span><input type="hidden" class="sale_tag_id" name="split_sale[tag][]" value="' +
          estval.sale_tag_id +
          '" /><input type="hidden" name="split_sale[total_cgst][]" class="sale_cgst"/><input type="hidden" class="sale_sgst" name="split_sale[total_sgst][]"/><input type="hidden" class="sale_igst" name="split_sale[total_igst][]"/></td>' +
          "<td>" +
          estval.order_no +
          "</td>" +
          '<td><span class="esti_number">' +
          estval.esti_number +
          '</span><input type="hidden" class="sale_est_itm_id" name="split_sale[estid][]" value="' +
          estval.est_item_id +
          '" /><input type="hidden" class="tag_sales_value"  value="' +
          estval.item_cost +
          '" /><input type="hidden" class="gift_applicable"  value="' +
          estval.gift_applicable +
          '" /></td>' +
          "<td></td>" +
          "</tr>";
      });
      $("#billing_split_sale_details tbody").append(row);
      calculateSaleBillSplitRowTotal();
    }
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter The Valid Ratio in Percentage",
    });
  }
});

$("#bill_split_kyc_modal  #save_kyc_details").on("click", function () {
  var catRow = $("#row_active_id").val();
  $("." + catRow)
    .find(".pan_no")
    .val($("#pan_no").val());
  $("." + catRow)
    .find(".aadhar_no")
    .val($("#aadhar_no").val());
  $("." + catRow)
    .find(".dl_no")
    .val($("#dl_no").val());
  $("." + catRow)
    .find(".pp_no")
    .val($("#pp_no").val());
  $("#pan_no").val("");
  $("#aadhar_no").val("");
  $("#dl_no").val("");
  $("#pp_no").val("");
  $("#bill_split_kyc_modal").modal("toggle");
});
$(document).on("change", ".split_credit", function () {
  var row = $(this).closest("tr");
  var trid = $(this).closest("tr").attr("id");
  var checked = $(this).is(":checked");
  var bill_amount = row.find(".bill_amount").val();
  if (checked) {
    $(this).closest("tr").find(".is_credit_split").val(1);
    $(this).closest("tr").find(".split_recd_amount").prop("readonly", false);
    $(this).closest("tr").find(".credit_due_date").prop("disabled", false);
  } else {
    $(this).closest("tr").find(".is_credit_split").val(0);
    $(this).closest("tr").find(".split_recd_amount").prop("readonly", true);
    $(this).closest("tr").find(".credit_due_date").prop("disabled", true);
    $(this).closest("tr").find(".credit_due_date").val("");
    row.find(".split_recd_amount").val(bill_amount);
  }
});
$(document).on("change", ".split_recd_amount", function () {
  var row = $(this).closest("tr");
  var bill_amount = row.find(".bill_amount").val();
  var split_recd_amount = row.find(".split_recd_amount").val();
  if (parseFloat(split_recd_amount) > parseFloat(bill_amount)) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message:
        "" + "</br>Received Amount is grater than the Total Bill Amount.",
    });
    row.find(".split_recd_amount").val(bill_amount);
  }
  calculate_sales_details(); //Calculate Sales Details
  calculate_purchase_details(); //Calculate Purchase Details
});

function createSaleBillSplitRow(curRow, splitRatios) {
  console.log("LMX");
  if (curRow != undefined) {
    var totalBillAmount = curRow.find(".bill_amount").val();
    var totalBillSplit = curRow.find(".sale_noof_bills").val();
    var bill_split_details = [];

    var gross_wt =
      isNaN(curRow.find(".bill_gross_val").val()) ||
      curRow.find(".bill_gross_val").val() == ""
        ? 0
        : curRow.find(".bill_gross_val").val();
    var mc_value =
      isNaN(curRow.find(".bill_mc").val()) ||
      curRow.find(".bill_mc").val() == ""
        ? 0
        : curRow.find(".bill_mc").val();
    var item_stone_weight = 0;
    let availableBeginning = gross_wt;
    let availableBeginningMc = mc_value;

    var splitted_weight = 0;
    var splitted_mc_value = 0;

    var total_splitted_stone_weight = 0;
    var balance_weight = 0;
    var balance_stone_weight = 0;
    var total_row_stn_details = [];

    console.log(splitRatios);
    $(splitRatios).each(function (idx, ival) {
      var ratio_per = ival;

      let applied_weight = parseFloat(
        (ratio_per / 100) * availableBeginning
      ).toFixed(3);
      splitted_weight += parseFloat(applied_weight);

      let applied_mc_value = parseFloat(
        (ratio_per / 100) * availableBeginningMc
      ).toFixed(2);
      splitted_mc_value += parseFloat(applied_mc_value);

      var charge_detais = curRow.find(".charges_details").val();
      var stone_details = curRow.find(".stone_details").val();
      var row_stn_details = [];
      if (stone_details != "") {
        stone_details = JSON.parse(stone_details);
        if (stone_details.length > 0) {
          $.each(stone_details, function (k, val) {
            item_stone_weight += parseFloat(val.stone_wt);
            var stone_weight = val.stone_wt;
            let availableBeginningStnweight = stone_weight;
            var splitted_stn_weight = 0;
            console.log("stone_weight:" + stone_weight);
            let applied_stn_weight = parseFloat(
              (ratio_per / 100) * availableBeginningStnweight
            ).toFixed(3);
            splitted_stn_weight += parseFloat(applied_stn_weight);
            total_splitted_stone_weight += parseFloat(applied_stn_weight);

            row_stn_details.push({
              stone_id: val.stone_id,
              uom_id: val.uom_id,
              stone_pcs: idx == 0 ? val.stone_pcs : 0,
              stone_wt: applied_stn_weight,
              stone_price:
                val.stone_cal_type == 1
                  ? parseFloat(
                      parseFloat(applied_stn_weight) *
                        parseFloat(val.rate_per_gram)
                    ).toFixed(2)
                  : val.stone_cal_type == 2 && idx == 0
                  ? parseFloat(
                      parseFloat(val.stone_pcs) * parseFloat(val.rate_per_gram)
                    ).toFixed(2)
                  : 0,
              stone_name: val.stone_name,
              is_apply_in_lwt: val.is_apply_in_lwt,
              stone_cal_type: val.stone_cal_type,
              rate_per_gram: val.rate_per_gram,
            });
          });
        }
      }
      bill_split_details.push({
        product_name: curRow.find(".product_name").html(),
        design_name: curRow.find(".design_name").html(),
        id_collecion_maping_det: curRow.find(".id_collecion_maping_det").val(),
        order_no: curRow.find(".order_no").val(),
        id_orderdetails: curRow.find(".id_orderdetails").val(),
        id_customerorder: curRow.find(".id_customerorder").val(),
        sale_pro_hsn: curRow.find(".sale_pro_hsn").val(),
        sale_type: curRow.find(".sale_type").val(),
        is_est_details: curRow.find(".is_est_details").val(),
        est_itm_id: curRow.find(".est_itm_id").val(),
        sale_cal_type: curRow.find(".sale_cal_type").val(),
        sale_metal_type: curRow.find(".sale_metal_type").val(),
        sale_purity: curRow.find(".sale_purity").val(),
        sale_uom: curRow.find(".sale_uom").val(),
        is_partial: idx == 0 ? 1 : 0,

        sale_item_type: idx == 0 ? 0 : 2,
        max_wastage: curRow.find(".max_wastage").val(),
        stock_type: curRow.find(".stock_type").val(),
        rate_field: curRow.find(".rate_field").val(),
        va_limit: curRow.find(".va_limit").val(),
        margin_mrp: curRow.find(".margin_mrp").val(),
        purchase_cost: curRow.find(".purchase_cost").val(),
        sale_product_id: curRow.find(".sale_product_id").val(),
        scheme_closure_benefit: curRow.find(".scheme_closure_benefit").val(),
        sale_design_id: curRow.find(".sale_design_id").val(),
        id_sub_design: curRow.find(".id_sub_design").val(),
        sale_pcs: idx == 0 ? curRow.find(".sale_pcs").val() : 1,
        bill_gross_val: applied_weight,
        bill_less_val: 0,
        bill_net_val: 0,
        bill_wastage: curRow.find(".bill_wastage").val(),
        bill_wastage_per: curRow.find(".bill_wastage_per").val(),
        bill_wastage_wt: curRow.find(".bill_wastage_wt").val(),
        wastage_discount: curRow.find(".wastage_discount").val(),
        mc_discount: curRow.find(".mc_discount").val(),
        item_blc_discount: curRow.find(".item_blc_discount").val(),
        mc_dis: curRow.find(".mc_dis").val(),
        bill_mctype: curRow.find(".bill_mctype").val(),
        //'bill_mc': (curRow.find('.bill_mctype').val() == 2 ? curRow.find('.bill_mc').val() : (idx == 0 ? curRow.find('.bill_mc').val() : 0)),
        bill_mc:
          curRow.find(".bill_mctype").val() == 2
            ? curRow.find(".bill_mc").val()
            : applied_mc_value,
        discount: curRow.find(".discount").val(),
        sale_tax_group: curRow.find(".sale_tax_group").val(),
        charges_details: idx == 0 ? curRow.find(".charges_details").val() : [],
        charge_value: idx == 0 ? curRow.find(".charge_value").val() : 0,
        certification_cost: curRow.find(".certification_cost").val(),
        est_old_stone_val: curRow.find(".est_old_stone_val").val(),
        est_old_dust_val: curRow.find(".est_old_dust_val").val(),
        bill_material_price: curRow.find(".bill_material_price").val(),
        stone_details: row_stn_details.length > 0 ? row_stn_details : [],
        other_metal_details: curRow.find(".other_metal_details").val(),
        est_old_dust_val: curRow.find(".est_old_dust_val").val(),
        sale_tag_id: curRow.find(".sale_tag_id").val(),
        sale_cgst: curRow.find(".sale_cgst").val(),
        sale_sgst: curRow.find(".sale_sgst").val(),
        sale_igst: curRow.find(".sale_igst").val(),
        sale_est_itm_id: curRow.find(".sale_est_itm_id").val(),
        tag_sales_value: curRow.find(".tag_sales_value").val(),
        esti_no: curRow.find(".esti_no").html(),
        tag_code: curRow.find(".tag_code").html(),
        tgrp_name: curRow.find(".tgrp_name").html(),
        esti_number: curRow.find(".esti_number").html(),
        sale_size: curRow.find(".sale_size").val(),
        per_grm_amount: curRow.find(".per_grm_amount").val(),
        is_non_tag: 0,
      });

      console.log(bill_split_details);
    });

    var actual_gwt = Math.floor(gross_wt);
    var total_bill_split_gwt = Math.floor(splitted_weight);

    if (parseFloat(actual_gwt) != parseFloat(total_bill_split_gwt)) {
      $("#apply_split").trigger("click");
    }

    if (bill_split_details.length > 0) {
      var row = "";

      $.each(bill_split_details, function (key, estval) {
        var length = $("#billing_split_sale_details tbody tr").length + 1;
        row =
          '<tr id="' +
          length +
          '" class="' +
          length +
          '" >' +
          "<td>" +
          length +
          "</td>" +
          '<td><div class="form-group"><div class="input-group"><input class="form-control cus_name" type="text" name="split_sale[cus_name][]"  placeholder="Search Customer" required autocomplete="off" style="width:100px;" /><span class="input-group-addon input-sm" onClick="create_new_customer($(this).closest(\'tr\'));" >+</span><input type="hidden" class="id_customer" name="split_sale[id_customer][]" ><input type="hidden" class="cus_del_state" name="split_sale[cus_del_state][]" ><input type="hidden" class="cus_del_country" name="split_sale[cus_del_country][]" ><input type="hidden" class="cus_payment_details" name="split_sale[cus_payment_details][]" ></div></div></td>' +
          '<td><a href="#" onClick="create_customer_kyc($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" name="split_sale[pan_no][]"  class="pan_no" /><input type="hidden" name="split_sale[aadhar_no][]"  class="aadhar_no" /><input type="hidden" name="split_sale[pp_no][]"  class="pp_no" /><input type="hidden" name="split_sale[dl_no][]"  class="dl_no" /></td>' +
          '<td><input type="checkbox" class="split_credit"><input type="hidden" class="is_credit_split" name="split_sale[is_credit][]" value="0"></td>' +
          "<td><span>" +
          estval.sale_pro_hsn +
          '</span><input type="hidden" name="split_sale[id_collecion_maping_det][]" class="id_collecion_maping_det" value="' +
          estval.id_collecion_maping_det +
          '"><input type="hidden" name="split_sale[order_no][]" class="order_no" value="' +
          estval.order_no +
          '"><input type="hidden" name="split_sale[id_orderdetails][]" class="id_orderdetails" value="' +
          estval.id_orderdetails +
          '"><input type="hidden" name="split_sale[id_customerorder][]" class="id_customerorder" value="' +
          estval.id_customerorder +
          '"><input type="hidden" class="sale_pro_hsn" name="split_sale[hsn]" value="' +
          estval.sale_pro_hsn +
          '" /><input type="hidden" class="sale_type" name="split_sale[sourcetype][]" value="1" /><input type="hidden" class="sale_item_type" name="split_sale[itemtype][]" value="' +
          estval.sale_item_type +
          '" /><input type="hidden" class="is_est_details" value="1" name="split_sale[is_est_details][]" /><input type="hidden" class="est_itm_id" name="split_sale[est_itm_id][]" value="' +
          estval.est_itm_id +
          '" /><input type="hidden" class="sale_cal_type" name="split_sale[calltype][]" value="' +
          estval.sale_cal_type +
          '" /><input type="hidden" class="sale_metal_type" value="' +
          estval.sale_metal_type +
          '" /><input type="hidden" class="sale_purity" value="' +
          estval.sale_purity +
          '"  name="split_sale[purity][]" /><input type="hidden" class="sale_size" value="' +
          estval.sale_size +
          '"  name="split_sale[size][]" /><input type="hidden" class="sale_uom" value="' +
          estval.sale_uom +
          '"  name="split_sale[uom][]" /><input type="hidden" class="total_tax" name="split_sale[item_total_tax][]"><input type="hidden" class="is_partial" value="' +
          estval.is_partial +
          '"  name="split_sale[is_partial][]" /><input type="hidden" class="min_wastage" value="' +
          estval.min_wastage +
          '"  name="split_sale[min_wastage][]" /><input type="hidden" class="max_wastage" value="' +
          estval.max_wastage +
          '"  name="split_sale[max_wastage][]" /><input type="hidden" class="stock_type" name="split_sale[stock_type][]" value="' +
          estval.stock_type +
          '" /><input type="hidden" class="is_non_tag" name="split_sale[is_non_tag][]" value="' +
          estval.is_non_tag +
          '" /><input type="hidden" class="rate_field"  value="' +
          estval.rate_field +
          '" /><input type="hidden" class="mc_limit"  value="' +
          estval.mc_limit +
          '" /><input type="hidden" class="va_limit"  value="' +
          estval.va_limit +
          '" /><input type="hidden" class="margin_mrp"  value="' +
          estval.margin_mrp +
          '" /><input type="hidden" class="purchase_cost" value="' +
          estval.purchase_cost +
          '" /></td>' +
          '<td><span class="product_name">' +
          estval.product_name +
          '</span><input class="sale_product_id" type="hidden" name="split_sale[product][]" value="' +
          estval.sale_product_id +
          '" /><input class="scheme_closure_benefit" type="hidden" name="split_sale[scheme_closure_benefit][]" value="' +
          estval.scheme_closure_benefit +
          '" /><input type="hidden" class="esti_no"  name="split_sale[esti_no][]"  value="' +
          estval.esti_no +
          '" /></td>' +
          '<td><span class="design_name">' +
          estval.design_name +
          '</span><input type="hidden" class="sale_design_id" name="split_sale[design][]" value="' +
          estval.sale_design_id +
          '" /><input type="hidden" class="id_sub_design" name="split_sale[id_sub_design][]" value="' +
          estval.id_sub_design +
          '" /></td>' +
          "<td><span>" +
          estval.sale_pcs +
          '</span><input type="hidden" class="sale_pcs" name="split_sale[pcs][]" value="' +
          estval.sale_pcs +
          '"  /></td>' +
          "<td><span>" +
          estval.bill_gross_val +
          '</span><input type="hidden" class="bill_gross_val" name="split_sale[gross][]" value="' +
          estval.bill_gross_val +
          '" /></td>' +
          '<td><span class="bill_split_lesswt">' +
          estval.bill_less_val +
          '</span><input type="hidden" class="bill_less_val" name="split_sale[less][]" value="' +
          estval.bill_less_val +
          '" /></td>' +
          '<td><span class="bill_sale_net_wt"></span><input type="hidden" class="bill_net_val" name="split_sale[net][]" value="' +
          estval.bill_net_val +
          '" /><input type="hidden" class="bill_tag_net_wt_val"  value="' +
          estval.bill_net_val +
          '" /></td>' +
          '<td><span class="est_wastage">' +
          estval.bill_wastage_per +
          '</span><input type="hidden" class="bill_wastage" value="' +
          estval.bill_wastage_per +
          '" /><input type="hidden" class="bill_wastage_per" name="split_sale[wastage][]" value="' +
          estval.bill_wastage_per +
          '" /></td>' +
          '<td><span class="est_wastage_wt"></span><input type="hidden" class="bill_wastage_wt" value=""><input type="hidden" name="split_sale[wastage_discount][]" class="wastage_discount" value=""><input type="hidden" name="split_sale[mc_discount][]" class="mc_discount" value=""><input type="hidden" name="split_sale[item_blc_discount][]" class="item_blc_discount" value=""></td>' +
          '<td><span class="making_charge">' +
          estval.bill_mc +
          '</span><input type="hidden" class="mc_dis" value="0"><input type="hidden" class="bill_mctype" name="split_sale[bill_mctype][]" value="' +
          estval.bill_mctype +
          '" /><input type="hidden" class="bill_mc" name="split_sale[mc][]" value="' +
          estval.bill_mc +
          '" /><input type="hidden" class="discount"  name="split_sale[adjusted_dis][]" value="" /><input type="hidden" class="bill_mc_value" value="' +
          estval.bill_mc +
          '" /></td>' +
          '<td><input type="number" class="bill_discount" name="split_sale[discount][]"  step="any" readonly/></td>' +
          '<td><span class="bill_taxable_amt"></span></td>' +
          '<td><span class="tgrp_name">' +
          estval.tgrp_name +
          '</span><input type="hidden" class="sale_tax_group" name="split_sale[taxgroup][]" value="' +
          estval.sale_tax_group +
          '" /></td>' +
          '<td class="tax_amt"></td>' +
          '<td class="total_charges">' +
          estval.charge_value +
          (estval.charges_details.length > 0
            ? ' <a href="#" onClick="show_chargesdetails(event, $(this).closest(\'tr\'));" class="btn btn-success btn-sm"><i class="fa fa-edit"></i></a>'
            : "-") +
          '<input type="hidden" value=' +
          estval.charges_details +
          ' class="charges_details" /><input type="hidden" class="charge_value" value="' +
          estval.charge_value +
          '" /></td>' +
          //+'<td>'+(stone_details.length>0 ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>' :'-')+'<input type="hidden" class="certification_cost" value="'+estval.certification_cost+'" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="'+estval.othermat_amount+'"/><input type="hidden" name="sale[stone_details][]" value=\''+(JSON.stringify(stone_details))+'\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value="'+tag_other_itm_amount+'"/><input type="hidden" class="other_metal_details" name="sale[other_metal_details][]" value='+(JSON.stringify(other_metal_details))+' class="other_metal_details" /></td>'
          "<td>" +
          (estval.stone_details.length > 0
            ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>'
            : "-") +
          '<input type="hidden" class="certification_cost" value="' +
          estval.certification_cost +
          '" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="' +
          estval.othermat_amount +
          '"/><input type="hidden" name="split_sale[stone_details][]" value=\'' +
          JSON.stringify(estval.stone_details) +
          '\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value=""/><input type="hidden" class="other_metal_details" name="split_sale[other_metal_details][]" value="" class="other_metal_details" /></td>' +
          '<td><span class="total_split_sales_amount"></span><input type="number" class="total_sales_amount" name="split_sale[total_sales_amount][]" value="" step="any" readonly /></td>' +
          '<td><a href="#" onClick="create_new_empty_old_metal_details_row($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" name="split_sale[old_metal_details][]"  class="old_metal_details" /></br><span class="purchase_old_metal_amt"></span></td>' +
          '<td><input type="hidden" class="bill_stone_price" value="' +
          estval.bill_stone_price +
          '" /><input type="number" class="bill_amount" name="split_sale[billamount][]" value="" step="any" readonly /><input type="hidden" class="per_grm_amount" name="split_sale[per_grm][]" value="' +
          estval.per_grm_amount +
          '" step="any" /><input type="hidden" class="round_of_amt" name="split_sale[round_of_amt][]" value="" /></td>' +
          '<td><input type="number" class="split_recd_amount" name="split_sale[split_recd_amount][]" value="" step="any" readonly/></td>' +
          '<td><a href="#" onClick="create_new_empty_payment_details_row($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" name="split_sale[split_payment_details][]" value="" class="split_payment_details" /><input type="hidden" value="" class="split_recd_amt" /><input type="hidden" value="" class="cus_advance_details" name="split_sale[cus_advance_details][]" /></br><span class="total_split_sale_amt"></span></td>' +
          '<td><input class="form-control credit_due_date"  data-date-format="dd-mm-yyyy hh:mm:ss" name="split_sale[credit_due_date][]" value="" type="text" placeholder="Credit Due Date" style="width: 100px;" disabled/></td>' +
          "<td>" +
          (estval.is_partial == 1 ? "YES" : "NO") +
          "</td>" +
          '<td><span class="tag_code">' +
          estval.tag_code +
          '</span><input type="hidden" class="sale_tag_id" name="split_sale[tag][]" value="' +
          estval.sale_tag_id +
          '" /><input type="hidden" name="split_sale[total_cgst][]" class="sale_cgst"/><input type="hidden" class="sale_sgst" name="split_sale[total_sgst][]"/><input type="hidden" class="sale_igst" name="split_sale[total_igst][]"/></td>' +
          "<td>" +
          estval.order_no +
          "</td>" +
          '<td><span class="esti_number">' +
          estval.esti_number +
          '</span><input type="hidden" class="sale_est_itm_id" name="split_sale[estid][]" value="' +
          estval.est_item_id +
          '" /><input type="hidden" class="tag_sales_value"  value="' +
          estval.item_cost +
          '" /><input type="hidden" class="gift_applicable"  value="' +
          estval.gift_applicable +
          '" /></td>' +
          "<td></td>" +
          "</tr>";
        $("#billing_split_sale_details tbody").append(row);
      });
      if ($(".credit_due_date").length > 0) {
        $(".credit_due_date")
          .datepicker({
            startDate: "+1d",
            format: "dd-mm-yyyy",
          })
          .on("changeDate", function (ev) {
            $(this).datepicker("hide");
          });
      }

      calculateSaleBillSplitRowTotal();
    }
  }
}
function splitted_item_sort() {
  var item_details = [];
  $("#billing_split_sale_details > tbody tr").each(function (idx, row) {
    curRow = $(this);
    item_details.push({
      product_name: curRow.find(".product_name").html(),
      design_name: curRow.find(".design_name").html(),
      id_collecion_maping_det: curRow.find(".id_collecion_maping_det").val(),
      order_no: curRow.find(".order_no").val(),
      id_orderdetails: curRow.find(".id_orderdetails").val(),
      id_customerorder: curRow.find(".id_customerorder").val(),
      sale_pro_hsn: curRow.find(".sale_pro_hsn").val(),
      sale_type: curRow.find(".sale_type").val(),
      sale_item_type: curRow.find(".sale_item_type").val(),
      is_est_details: curRow.find(".is_est_details").val(),
      est_itm_id: curRow.find(".est_itm_id").val(),
      sale_cal_type: curRow.find(".sale_cal_type").val(),
      sale_metal_type: curRow.find(".sale_metal_type").val(),
      sale_purity: curRow.find(".sale_purity").val(),
      sale_uom: curRow.find(".sale_uom").val(),
      is_partial: curRow.find(".is_partial").val(),
      max_wastage: curRow.find(".max_wastage").val(),
      stock_type: curRow.find(".stock_type").val(),
      rate_field: curRow.find(".rate_field").val(),
      va_limit: curRow.find(".va_limit").val(),
      margin_mrp: curRow.find(".margin_mrp").val(),
      purchase_cost: curRow.find(".purchase_cost").val(),
      sale_product_id: curRow.find(".sale_product_id").val(),
      scheme_closure_benefit: curRow.find(".scheme_closure_benefit").val(),
      sale_design_id: curRow.find(".sale_design_id").val(),
      id_sub_design: curRow.find(".id_sub_design").val(),
      sale_pcs: curRow.find(".sale_pcs").val(),
      bill_gross_val: curRow.find(".bill_gross_val").val(),
      bill_less_val: 0,
      bill_net_val: 0,
      bill_wastage: curRow.find(".bill_wastage").val(),
      bill_wastage_per: curRow.find(".bill_wastage_per").val(),
      bill_wastage_wt: curRow.find(".bill_wastage_wt").val(),
      wastage_discount: curRow.find(".wastage_discount").val(),
      mc_discount: curRow.find(".mc_discount").val(),
      item_blc_discount: curRow.find(".item_blc_discount").val(),
      mc_dis: curRow.find(".mc_dis").val(),
      bill_mctype: curRow.find(".bill_mctype").val(),
      bill_mc: curRow.find(".bill_mc").val(),
      discount: curRow.find(".discount").val(),
      sale_tax_group: curRow.find(".sale_tax_group").val(),
      charges_details: curRow.find(".charges_details").val(),
      charge_value: curRow.find(".charge_value").val(),
      certification_cost: curRow.find(".certification_cost").val(),
      est_old_stone_val: curRow.find(".est_old_stone_val").val(),
      est_old_dust_val: curRow.find(".est_old_dust_val").val(),
      bill_material_price: curRow.find(".bill_material_price").val(),
      stone_details: curRow.find(".stone_details").val(),
      other_metal_details: curRow.find(".other_metal_details").val(),
      est_old_dust_val: curRow.find(".est_old_dust_val").val(),
      sale_tag_id: curRow.find(".sale_tag_id").val(),
      sale_cgst: curRow.find(".sale_cgst").val(),
      sale_sgst: curRow.find(".sale_sgst").val(),
      sale_igst: curRow.find(".sale_igst").val(),
      sale_est_itm_id: curRow.find(".sale_est_itm_id").val(),
      tag_sales_value: curRow.find(".tag_sales_value").val(),
      esti_no: curRow.find(".esti_no").html(),
      tag_code: curRow.find(".tag_code").html(),
      tgrp_name: curRow.find(".tgrp_name").html(),
      esti_number: curRow.find(".esti_number").html(),
      sale_size: curRow.find(".sale_size").val(),
      is_non_tag: curRow.find(".is_non_tag").val(),
      bill_amount: curRow.find(".bill_amount").val(),
      curRowindex: curRow.closest("tr").attr("id"),
    });
  });
  item_details.sort(function (a, b) {
    return a["bill_amount"] - b["bill_amount"];
  });
  return item_details;
}
function group_splitted_item() {
  var splitted_details = splitted_item_sort();
  var result = [];
  var currentAmount = 0;
  var currentWeight = 0;
  $.each(splitted_details, function (key, val) {
    var newAmount = parseFloat(currentAmount) + parseFloat(val.bill_amount);
    if (newAmount <= 200000) {
      currentAmount = newAmount;
      currentWeight += parseFloat(val.bill_gross_val);
    } else {
      if (currentWeight > 0 && currentAmount > 0) {
        result.push({
          product_name: curRow.find(".product_name").html(),
          design_name: curRow.find(".design_name").html(),
          id_collecion_maping_det: curRow
            .find(".id_collecion_maping_det")
            .val(),
          order_no: curRow.find(".order_no").val(),
          id_orderdetails: curRow.find(".id_orderdetails").val(),
          id_customerorder: curRow.find(".id_customerorder").val(),
          sale_pro_hsn: curRow.find(".sale_pro_hsn").val(),
          sale_type: curRow.find(".sale_type").val(),
          sale_item_type: curRow.find(".sale_item_type").val(),
          is_est_details: curRow.find(".is_est_details").val(),
          est_itm_id: curRow.find(".est_itm_id").val(),
          sale_cal_type: curRow.find(".sale_cal_type").val(),
          sale_metal_type: curRow.find(".sale_metal_type").val(),
          sale_purity: curRow.find(".sale_purity").val(),
          sale_uom: curRow.find(".sale_uom").val(),
          is_partial: curRow.find(".is_partial").val(),
          max_wastage: curRow.find(".max_wastage").val(),
          stock_type: curRow.find(".stock_type").val(),
          rate_field: curRow.find(".rate_field").val(),
          va_limit: curRow.find(".va_limit").val(),
          margin_mrp: curRow.find(".margin_mrp").val(),
          purchase_cost: curRow.find(".purchase_cost").val(),
          sale_product_id: curRow.find(".sale_product_id").val(),
          scheme_closure_benefit: curRow.find(".scheme_closure_benefit").val(),
          sale_design_id: curRow.find(".sale_design_id").val(),
          id_sub_design: curRow.find(".id_sub_design").val(),
          sale_pcs: curRow.find(".sale_pcs").val(),
          bill_gross_val: parseFloat(currentWeight).toFixed(3),
          bill_less_val: 0,
          bill_net_val: 0,
          bill_wastage: curRow.find(".bill_wastage").val(),
          bill_wastage_per: curRow.find(".bill_wastage_per").val(),
          bill_wastage_wt: curRow.find(".bill_wastage_wt").val(),
          wastage_discount: curRow.find(".wastage_discount").val(),
          mc_discount: curRow.find(".mc_discount").val(),
          item_blc_discount: curRow.find(".item_blc_discount").val(),
          mc_dis: curRow.find(".mc_dis").val(),
          bill_mctype: curRow.find(".bill_mctype").val(),
          bill_mc: curRow.find(".bill_mc").val(),
          discount: curRow.find(".discount").val(),
          sale_tax_group: curRow.find(".sale_tax_group").val(),
          charges_details: [],
          charge_value: curRow.find(".charge_value").val(),
          certification_cost: curRow.find(".certification_cost").val(),
          est_old_stone_val: curRow.find(".est_old_stone_val").val(),
          est_old_dust_val: curRow.find(".est_old_dust_val").val(),
          bill_material_price: curRow.find(".bill_material_price").val(),
          stone_details: [],
          other_metal_details: curRow.find(".other_metal_details").val(),
          est_old_dust_val: curRow.find(".est_old_dust_val").val(),
          sale_tag_id: curRow.find(".sale_tag_id").val(),
          sale_cgst: curRow.find(".sale_cgst").val(),
          sale_sgst: curRow.find(".sale_sgst").val(),
          sale_igst: curRow.find(".sale_igst").val(),
          sale_est_itm_id: curRow.find(".sale_est_itm_id").val(),
          tag_sales_value: curRow.find(".tag_sales_value").val(),
          esti_no: curRow.find(".esti_no").html(),
          tag_code: curRow.find(".tag_code").html(),
          tgrp_name: curRow.find(".tgrp_name").html(),
          esti_number: curRow.find(".esti_number").html(),
          sale_size: curRow.find(".sale_size").val(),
          is_non_tag: curRow.find(".is_non_tag").val(),
        });
      }
      currentAmount = val.bill_amount;
      currentWeight = val.bill_gross_val;
    }
  });
  if (currentWeight > 0 && currentAmount > 0) {
    result.push({
      product_name: curRow.find(".product_name").html(),
      design_name: curRow.find(".design_name").html(),
      id_collecion_maping_det: curRow.find(".id_collecion_maping_det").val(),
      order_no: curRow.find(".order_no").val(),
      id_orderdetails: curRow.find(".id_orderdetails").val(),
      id_customerorder: curRow.find(".id_customerorder").val(),
      sale_pro_hsn: curRow.find(".sale_pro_hsn").val(),
      sale_type: curRow.find(".sale_type").val(),
      sale_item_type: curRow.find(".sale_item_type").val(),
      is_est_details: curRow.find(".is_est_details").val(),
      est_itm_id: curRow.find(".est_itm_id").val(),
      sale_cal_type: curRow.find(".sale_cal_type").val(),
      sale_metal_type: curRow.find(".sale_metal_type").val(),
      sale_purity: curRow.find(".sale_purity").val(),
      sale_uom: curRow.find(".sale_uom").val(),
      is_partial: curRow.find(".is_partial").val(),
      max_wastage: curRow.find(".max_wastage").val(),
      stock_type: curRow.find(".stock_type").val(),
      rate_field: curRow.find(".rate_field").val(),
      va_limit: curRow.find(".va_limit").val(),
      margin_mrp: curRow.find(".margin_mrp").val(),
      purchase_cost: curRow.find(".purchase_cost").val(),
      sale_product_id: curRow.find(".sale_product_id").val(),
      scheme_closure_benefit: curRow.find(".scheme_closure_benefit").val(),
      sale_design_id: curRow.find(".sale_design_id").val(),
      id_sub_design: curRow.find(".id_sub_design").val(),
      sale_pcs: curRow.find(".sale_pcs").val(),
      bill_gross_val: parseFloat(currentWeight).toFixed(3),
      bill_less_val: 0,
      bill_net_val: 0,
      bill_wastage: curRow.find(".bill_wastage").val(),
      bill_wastage_per: curRow.find(".bill_wastage_per").val(),
      bill_wastage_wt: curRow.find(".bill_wastage_wt").val(),
      wastage_discount: curRow.find(".wastage_discount").val(),
      mc_discount: curRow.find(".mc_discount").val(),
      item_blc_discount: curRow.find(".item_blc_discount").val(),
      mc_dis: curRow.find(".mc_dis").val(),
      bill_mctype: curRow.find(".bill_mctype").val(),
      bill_mc: curRow.find(".bill_mc").val(),
      discount: curRow.find(".discount").val(),
      sale_tax_group: curRow.find(".sale_tax_group").val(),
      charges_details: [],
      stone_details: [],
      charge_value: curRow.find(".charge_value").val(),
      certification_cost: curRow.find(".certification_cost").val(),
      est_old_stone_val: curRow.find(".est_old_stone_val").val(),
      est_old_dust_val: curRow.find(".est_old_dust_val").val(),
      bill_material_price: curRow.find(".bill_material_price").val(),
      //'stone_details'                 :curRow.find('.stone_details').val(),
      other_metal_details: curRow.find(".other_metal_details").val(),
      est_old_dust_val: curRow.find(".est_old_dust_val").val(),
      sale_tag_id: curRow.find(".sale_tag_id").val(),
      sale_cgst: curRow.find(".sale_cgst").val(),
      sale_sgst: curRow.find(".sale_sgst").val(),
      sale_igst: curRow.find(".sale_igst").val(),
      sale_est_itm_id: curRow.find(".sale_est_itm_id").val(),
      tag_sales_value: curRow.find(".tag_sales_value").val(),
      esti_no: curRow.find(".esti_no").html(),
      tag_code: curRow.find(".tag_code").html(),
      tgrp_name: curRow.find(".tgrp_name").html(),
      esti_number: curRow.find(".esti_number").html(),
      sale_size: curRow.find(".sale_size").val(),
      is_non_tag: curRow.find(".is_non_tag").val(),
    });
  }
  console.log(result);
  if (result.length > 0) {
    $("#billing_split_sale_details tbody").empty();
    var row = "";
    $.each(result, function (key, estval) {
      row +=
        '<tr id="' +
        key +
        '" class="' +
        key +
        '" >' +
        '<td><div class="form-group"><div class="input-group"><input class="form-control cus_name" type="text" name="split_sale[cus_name][]"  placeholder="Search Customer" required autocomplete="off" style="width:100px;" /><span class="input-group-addon input-sm" onClick="create_new_customer($(this).closest(\'tr\'));" >+</span><input type="hidden" class="id_customer" name="split_sale[id_customer][]" ><input type="hidden" class="cus_del_state" name="split_sale[cus_del_state][]" ><input type="hidden" class="cus_del_country" name="split_sale[cus_del_country][]" ></div></div></td>' +
        "<td><span>" +
        estval.sale_pro_hsn +
        '</span><input type="hidden" name="split_sale[id_collecion_maping_det][]" class="id_collecion_maping_det" value="' +
        estval.id_collecion_maping_det +
        '"><input type="hidden" name="split_sale[order_no][]" class="order_no" value="' +
        estval.order_no +
        '"><input type="hidden" name="split_sale[id_orderdetails][]" class="id_orderdetails" value="' +
        estval.id_orderdetails +
        '"><input type="hidden" name="split_sale[id_customerorder][]" class="id_customerorder" value="' +
        estval.id_customerorder +
        '"><input type="hidden" class="sale_pro_hsn" name="split_sale[hsn]" value="' +
        estval.sale_pro_hsn +
        '" /><input type="hidden" class="sale_type" name="split_sale[sourcetype][]" value="1" /><input type="hidden" class="sale_item_type" name="split_sale[itemtype][]" value="' +
        estval.sale_item_type +
        '" /><input type="hidden" class="is_est_details" value="1" name="split_sale[is_est_details][]" /><input type="hidden" class="est_itm_id" name="split_sale[est_itm_id][]" value="' +
        estval.est_itm_id +
        '" /><input type="hidden" class="sale_cal_type" name="split_sale[calltype][]" value="' +
        estval.sale_cal_type +
        '" /><input type="hidden" class="sale_metal_type" value="' +
        estval.sale_metal_type +
        '" /><input type="hidden" class="sale_purity" value="' +
        estval.sale_purity +
        '"  name="split_sale[purity][]" /><input type="hidden" class="sale_size" value="' +
        estval.sale_size +
        '"  name="split_sale[size][]" /><input type="hidden" class="sale_uom" value="' +
        estval.sale_uom +
        '"  name="split_sale[uom][]" /><input type="hidden" class="total_tax" name="split_sale[item_total_tax][]"><input type="hidden" class="is_partial" value="' +
        estval.is_partial +
        '"  name="split_sale[is_partial][]" /><input type="hidden" class="min_wastage" value="' +
        estval.min_wastage +
        '"  name="split_sale[min_wastage][]" /><input type="hidden" class="max_wastage" value="' +
        estval.max_wastage +
        '"  name="split_sale[max_wastage][]" /><input type="hidden" class="stock_type" name="split_sale[stock_type][]" value="' +
        estval.stock_type +
        '" /><input type="hidden" class="is_non_tag" name="split_sale[is_non_tag][]" value="' +
        estval.is_non_tag +
        '" /><input type="hidden" class="rate_field"  value="' +
        estval.rate_field +
        '" /><input type="hidden" class="mc_limit"  value="' +
        estval.mc_limit +
        '" /><input type="hidden" class="va_limit"  value="' +
        estval.va_limit +
        '" /><input type="hidden" class="margin_mrp"  value="' +
        estval.margin_mrp +
        '" /><input type="hidden" class="purchase_cost" value="' +
        estval.purchase_cost +
        '" /></td>' +
        '<td><span class="product_name">' +
        estval.product_name +
        '</span><input class="sale_product_id" type="hidden" name="split_sale[product][]" value="' +
        estval.sale_product_id +
        '" /><input class="scheme_closure_benefit" type="hidden" name="split_sale[scheme_closure_benefit][]" value="' +
        estval.scheme_closure_benefit +
        '" /><input type="hidden" class="esti_no"  name="split_sale[esti_no][]"  value="' +
        estval.esti_no +
        '" /></td>' +
        '<td><span class="design_name">' +
        estval.design_name +
        '</span><input type="hidden" class="sale_design_id" name="split_sale[design][]" value="' +
        estval.sale_design_id +
        '" /><input type="hidden" class="id_sub_design" name="split_sale[id_sub_design][]" value="' +
        estval.id_sub_design +
        '" /></td>' +
        "<td><span>" +
        estval.sale_pcs +
        '</span><input type="hidden" class="sale_pcs" name="split_sale[pcs][]" value="' +
        estval.sale_pcs +
        '"  /></td>' +
        "<td><span>" +
        estval.bill_gross_val +
        '</span><input type="hidden" class="bill_gross_val" name="split_sale[gross][]" value="' +
        estval.bill_gross_val +
        '" /></td>' +
        '<td><span class="bill_split_lesswt">' +
        estval.bill_less_val +
        '</span><input type="hidden" class="bill_less_val" name="split_sale[less][]" value="' +
        estval.bill_less_val +
        '" /></td>' +
        '<td><span class="bill_sale_net_wt"></span><input type="hidden" class="bill_net_val" name="split_sale[net][]" value="' +
        estval.bill_net_val +
        '" /><input type="hidden" class="bill_tag_net_wt_val"  value="' +
        estval.bill_net_val +
        '" /></td>' +
        '<td><span class="est_wastage">' +
        estval.bill_wastage_per +
        '</span><input type="hidden" class="bill_wastage" value="' +
        estval.bill_wastage_per +
        '" /><input type="hidden" class="bill_wastage_per" name="split_sale[wastage][]" value="' +
        estval.bill_wastage_per +
        '" /></td>' +
        '<td><span class="est_wastage_wt"></span><input type="hidden" class="bill_wastage_wt" value=""><input type="hidden" name="split_sale[wastage_discount][]" class="wastage_discount" value=""><input type="hidden" name="split_sale[mc_discount][]" class="mc_discount" value=""><input type="hidden" name="split_sale[item_blc_discount][]" class="item_blc_discount" value=""></td>' +
        '<td><span class="making_charge">' +
        estval.bill_mc +
        '</span><input type="hidden" class="mc_dis" value="0"><input type="hidden" class="bill_mctype" name="split_sale[bill_mctype][]" value="' +
        estval.bill_mctype +
        '" /><input type="hidden" class="bill_mc" name="split_sale[mc][]" value="' +
        estval.bill_mc +
        '" /><input type="hidden" class="discount"  name="split_sale[adjusted_dis][]" value="" /><input type="hidden" class="bill_mc_value" value="' +
        estval.bill_mc +
        '" /></td>' +
        '<td><input type="number" class="bill_discount" name="split_sale[discount][]"  step="any" readonly/></td>' +
        '<td><span class="bill_taxable_amt"></span></td>' +
        '<td><span class="tgrp_name">' +
        estval.tgrp_name +
        '</span><input type="hidden" class="sale_tax_group" name="split_sale[taxgroup][]" value="' +
        estval.sale_tax_group +
        '" /></td>' +
        '<td class="tax_amt"></td>' +
        '<td class="total_charges">' +
        estval.charge_value +
        (estval.charges_details.length > 0
          ? ' <a href="#" onClick="show_chargesdetails(event, $(this).closest(\'tr\'));" class="btn btn-success btn-sm"><i class="fa fa-edit"></i></a>'
          : "-") +
        '<input type="hidden" value=' +
        estval.charges_details +
        ' class="charges_details" /><input type="hidden" class="charge_value" value="' +
        estval.charge_value +
        '" /></td>' +
        //+'<td>'+(stone_details.length>0 ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>' :'-')+'<input type="hidden" class="certification_cost" value="'+estval.certification_cost+'" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="'+estval.othermat_amount+'"/><input type="hidden" name="sale[stone_details][]" value=\''+(JSON.stringify(stone_details))+'\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value="'+tag_other_itm_amount+'"/><input type="hidden" class="other_metal_details" name="sale[other_metal_details][]" value='+(JSON.stringify(other_metal_details))+' class="other_metal_details" /></td>'
        "<td>" +
        (estval.stone_details.length > 0
          ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>'
          : "-") +
        '<input type="hidden" class="certification_cost" value="' +
        estval.certification_cost +
        '" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="' +
        estval.othermat_amount +
        '"/><input type="hidden" name="split_sale[stone_details][]" value=\'' +
        JSON.stringify(estval.stone_details) +
        '\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value=""/><input type="hidden" class="other_metal_details" name="split_sale[other_metal_details][]" value="" class="other_metal_details" /></td>' +
        '<td><input type="hidden" class="bill_stone_price" value="' +
        estval.bill_stone_price +
        '" /><input type="number" class="bill_amount" name="split_sale[billamount][]" value="" step="any" readonly /><input type="hidden" class="per_grm_amount" name="split_sale[per_grm][]" value="' +
        estval.per_grm_amount +
        '" step="any" /><input type="hidden" class="round_of_amt" name="split_sale[round_of_amt][]" value="" /></td>' +
        '<td><input type="number" class="split_recd_amount" name="split_sale[split_recd_amount][]" value="" step="any" /></td>' +
        '<td><a href="#" onClick="create_new_empty_payment_details_row($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" name="split_sale[split_payment_details][]" value="" class="split_payment_details" /><input type="hidden" value="" class="split_recd_amt" /><input type="hidden" value="" class="cus_advance_details" name="split_sale[cus_advance_details][]" /></td>' +
        "<td>" +
        (estval.is_partial == 1 ? "YES" : "NO") +
        "</td>" +
        '<td><span class="tag_code">' +
        estval.tag_code +
        '</span><input type="hidden" class="sale_tag_id" name="split_sale[tag][]" value="' +
        estval.sale_tag_id +
        '" /><input type="hidden" name="split_sale[total_cgst][]" class="sale_cgst"/><input type="hidden" class="sale_sgst" name="split_sale[total_sgst][]"/><input type="hidden" class="sale_igst" name="split_sale[total_igst][]"/></td>' +
        "<td>" +
        estval.order_no +
        "</td>" +
        '<td><span class="esti_number">' +
        estval.esti_number +
        '</span><input type="hidden" class="sale_est_itm_id" name="split_sale[estid][]" value="' +
        estval.est_item_id +
        '" /><input type="hidden" class="tag_sales_value"  value="' +
        estval.item_cost +
        '" /><input type="hidden" class="gift_applicable"  value="' +
        estval.gift_applicable +
        '" /></td>' +
        "<td></td>" +
        "</tr>";
    });
    $("#billing_split_sale_details tbody").append(row);
    calculateSaleBillSplitRowTotal();
  }
}
function calculateSaleBillSplitRowTotal() {
  var is_store_delivery = $("#delivered_at").val();
  var total_pcs = 0;
  var total_gwt = 0;
  var total_lwt = 0;
  var total_nwt = 0;
  var total_amount = 0;
  $("#billing_split_sale_details > tbody tr").each(function (idx, row) {
    curRow = $(this);
    var row_id = $(this).attr("id");
    //multi metal calculation
    var tag_other_itm_weight = 0;
    var tag_other_itm_amount = 0;
    var other_metal_details = curRow.find(".other_metal_details").val();
    if (other_metal_details != "") {
      var other_metal_details = JSON.parse(other_metal_details);
      if (other_metal_details.length > 0) {
        $.each(other_metal_details, function (key, items) {
          tag_other_itm_weight += parseFloat(items.tag_other_itm_grs_weight);
        });
        tag_other_itm_amount = calculate_other_metal_amount(
          other_metal_details,
          curRow
        );
      }
    }
    //multi metal calculation
    var pcs =
      isNaN(curRow.find(".sale_pcs").val()) ||
      curRow.find(".sale_pcs").val() == ""
        ? 0
        : curRow.find(".sale_pcs").val();
    var gross_wt =
      isNaN(curRow.find(".bill_gross_val").val()) ||
      curRow.find(".bill_gross_val").val() == ""
        ? 0
        : curRow.find(".bill_gross_val").val();
    var stone_price = 0;
    let tot_stone_wt = 0;
    let stone_details = curRow.find(".stone_details").val();
    if (stone_details != "") {
      var st_details = JSON.parse(stone_details);
      if (st_details.length > 0) {
        $.each(st_details, function (pkey, pitem) {
          $.each(uom_details, function (key, item) {
            if (item.uom_id == pitem.uom_id) {
              if (pitem.is_apply_in_lwt == 1) {
                if (
                  item.uom_short_code == "CT" &&
                  item.divided_by_value != null &&
                  item.divided_by_value != ""
                ) {
                  //For Carat Need to convert into gram
                  stone_wt = parseFloat(
                    parseFloat(pitem.stone_wt) /
                      parseFloat(item.divided_by_value)
                  );
                } else {
                  stone_wt = pitem.stone_wt;
                }
                tot_stone_wt += parseFloat(stone_wt);
              }
            }
          });
          stone_price += parseFloat(pitem.stone_price);
        });
      }
    }
    curRow.find(".bill_less_val").val(parseFloat(tot_stone_wt).toFixed(3));
    curRow.find(".bill_less_wt").html(parseFloat(tot_stone_wt).toFixed(3));
    var less_wt =
      isNaN(curRow.find(".bill_less_val").val()) ||
      curRow.find(".bill_less_val").val() == ""
        ? 0
        : curRow.find(".bill_less_val").val();
    var net_wt = parseFloat(
      parseFloat(gross_wt) -
        parseFloat(less_wt) -
        parseFloat(tag_other_itm_weight)
    ).toFixed(3);
    var calculation_type =
      isNaN(curRow.find(".sale_cal_type").val()) ||
      curRow.find(".sale_cal_type").val() == ""
        ? 0
        : curRow.find(".sale_cal_type").val();
    total_pcs += parseFloat(pcs);
    total_gwt += parseFloat(gross_wt);
    total_lwt += parseFloat(less_wt);
    total_nwt += parseFloat(net_wt);
    var certification_price =
      isNaN(curRow.find(".certification_cost").val()) ||
      curRow.find(".certification_cost").val() == ""
        ? 0
        : curRow.find(".certification_cost").val();
    var material_price =
      isNaN(curRow.find(".bill_material_price").val()) ||
      curRow.find(".bill_material_price").val() == ""
        ? 0
        : curRow.find(".bill_material_price").val();
    var total_price = 0;
    var rate_per_grm = 0;
    var base_value_amt = 0;
    var arrived_value_amt = 0;
    var arrived_value_tax = 0;
    var base_value_tax = 0;
    var total_tax_rate = 0;
    var cus_state = $("#cus_state").val();
    var cus_country = $("#cus_country").val();
    var cmp_state = $("#cmp_state").val();
    var cmp_country = $("#cmp_country").val();
    var cus_del_state = curRow.find(".cus_del_state").val();
    var cus_del_country = curRow.find(".cus_del_country").val();
    var is_eda = $("#is_eda").val();
    var cgst = 0;
    var igst = 0;
    var sgst = 0;
    var tag_sales_value = 0;
    rate_field = curRow.find(".rate_field").val();
    if (
      isNaN(parseFloat(curRow.find(".per_grm_amount").val())) ||
      curRow.find(".per_grm_amount").val() == 0 ||
      curRow.find(".per_grm_amount").val() == ""
    ) {
      var rate_per_grm =
        isNaN($("#" + rate_field).val()) || $("#" + rate_field).val() == ""
          ? 0
          : parseFloat($("#" + rate_field).val());
    } else {
      var rate_per_grm =
        isNaN(parseFloat(curRow.find(".per_grm_amount").val())) ||
        curRow.find(".per_grm_amount").val() == ""
          ? 0
          : parseFloat(curRow.find(".per_grm_amount").val());
    }
    var inclusive_tax_rate = 0;
    var total_tax = 0;
    var discount = 0;
    var disc_type = curRow.find(".disc_type").val();
    var disc_amt = $("#summary_discount_amt").val();
    var total_sales_amt = $(".sale_amt_with_tax").html();
    var tax_group = curRow.find(".sale_tax_group").val();
    var retail_max_mc =
      isNaN(curRow.find(".bill_mc").val()) ||
      curRow.find(".bill_mc").val() == ""
        ? 0
        : curRow.find(".bill_mc").val();
    var tot_wastage =
      isNaN(curRow.find(".bill_wastage").val()) ||
      curRow.find(".bill_wastage").val() == ""
        ? 0
        : curRow.find(".bill_wastage").val();

    //Purchase Details
    var purchase_old_metal_amt =
      isNaN(curRow.find(".purchase_old_metal_amt").html()) ||
      curRow.find(".purchase_old_metal_amt").html() == ""
        ? 0
        : curRow.find(".purchase_old_metal_amt").html();
    //Purchase Details

    //Discount Work
    var bill_discount_type = $("#bill_discount_type").val(); //1-General Discount , 2-Apply in V.A & M.C
    var wast_wgt_amt = 0;
    var total_mc_and_wast_wgt_amt = 0;
    var wastage_discount = 0;
    var mc_discount = 0;
    var blc_discount = 0;
    var item_blc_discount = 0;
    var discount_weight = 0;

    total_sales_amt = parseFloat(total_sales_amt) + parseFloat(disc_amt);

    //Discount Work
    if (calculation_type == 0) {
      var wast_wgt = parseFloat(
        parseFloat(gross_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);
      wast_wgt_amt = parseFloat(
        parseFloat(wast_wgt) * parseFloat(rate_per_grm)
      ).toFixed(2);
      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * 1)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      } else {
        var mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) *
            (retail_max_mc / 100)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 1) {
      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);
      wast_wgt_amt = parseFloat(
        parseFloat(wast_wgt) * parseFloat(rate_per_grm)
      ).toFixed(2);
      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * net_wt)
            : parseFloat(retail_max_mc * 1)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      } else {
        var mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) *
            (retail_max_mc / 100)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        rate_with_mc = parseFloat(
          parseFloat(
            rate_per_grm * (parseFloat(wast_wgt) + parseFloat(net_wt))
          ) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        );
      }
    } else if (calculation_type == 2) {
      var wast_wgt = parseFloat(
        parseFloat(net_wt) * parseFloat(tot_wastage / 100)
      ).toFixed(3);
      wast_wgt_amt = parseFloat(
        parseFloat(wast_wgt) * parseFloat(rate_per_grm)
      ).toFixed(2);
      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * gross_wt)
            : parseFloat(retail_max_mc * 1)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        rate_with_mc = parseFloat(
          parseFloat(rate_per_grm) *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        ).toFixed(2);
      } else {
        var mc_type = parseFloat(
          rate_per_grm *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) *
            (retail_max_mc / 100)
        );
        // Metal Rate + Stone + OM + Wastage + MC
        rate_with_mc = parseFloat(
          parseFloat(rate_per_grm) *
            (parseFloat(wast_wgt) + parseFloat(net_wt)) +
            parseFloat(mc_type) +
            parseFloat(stone_price) +
            parseFloat(material_price) +
            parseFloat(certification_price)
        ).toFixed(2);
      }
    } else if (calculation_type == 3) {
      rate_with_mc = parseFloat(
        isNaN(curRow.find(".tag_sales_value").val()) ||
          curRow.find(".tag_sales_value").val() == ""
          ? 0
          : curRow.find(".tag_sales_value").val()
      );
      tag_sales_value = rate_with_mc;
    } else if (calculation_type == 4) {
      if (curRow.find(".bill_mctype").val() != 3) {
        var mc_type = parseFloat(
          curRow.find(".bill_mctype").val() == 2
            ? parseFloat(retail_max_mc * net_wt)
            : parseFloat(retail_max_mc * 1)
        );
      }
      rate_with_mc = parseFloat(
        isNaN(curRow.find(".tag_sales_value").val()) ||
          curRow.find(".tag_sales_value").val() == ""
          ? 0
          : curRow.find(".tag_sales_value").val() * gross_wt
      );
      rate_with_mc = parseFloat(
        parseFloat(rate_with_mc) + parseFloat(mc_type)
      ).toFixed(2);
      tag_sales_value = parseFloat(
        isNaN(curRow.find(".tag_sales_value").val()) ||
          curRow.find(".tag_sales_value").val() == ""
          ? 0
          : curRow.find(".tag_sales_value").val() * gross_wt
      );
    }
    let charge_value = isNaN(parseFloat(curRow.find(".charge_value").val()))
      ? 0
      : curRow.find(".charge_value").val();
    rate_with_mc = parseFloat(
      parseFloat(rate_with_mc) +
        parseFloat(charge_value) +
        parseFloat(tag_other_itm_amount)
    ).toFixed(2);
    if (disc_amt > 0) {
      console.log("rate_with_mc:" + rate_with_mc);
      var disc_per = parseFloat((disc_amt / total_sales_amt) * 100);
      var discount = parseFloat((rate_with_mc * disc_per) / 100);
      rate_with_mc = parseFloat(rate_with_mc - discount).toFixed(2);
      console.log("disc_per:" + disc_per);
      console.log("discount:" + discount);
      console.log("rate_with_mc:" + rate_with_mc);
      if (bill_discount_type == 2) {
        /*
				1.Need to Apply the disocunt in MC..Then Apply in V.A..
				*/
        if (parseFloat(mc_type) < parseFloat(discount)) {
          mc_discount = mc_type;
          blc_discount = parseFloat(
            parseFloat(discount) - parseFloat(mc_type)
          ).toFixed(2);
          if (blc_discount > 0) {
            if (wast_wgt_amt > 0) {
              if (parseFloat(wast_wgt_amt) > parseFloat(blc_discount)) {
                wastage_discount = parseFloat(blc_discount).toFixed(2);
              } else {
                wastage_discount = parseFloat(parseFloat(wast_wgt_amt)).toFixed(
                  2
                );
              }
            } else {
              wastage_discount = 0;
            }
            var total_applied_discount = parseFloat(
              parseFloat(mc_discount) + parseFloat(wastage_discount)
            ).toFixed(2);
            if (total_applied_discount < discount) {
              item_blc_discount = parseFloat(
                parseFloat(discount) - parseFloat(total_applied_discount)
              ).toFixed(2);
            }
          }
        } else {
          if (mc_type > discount) {
            mc_discount = parseFloat(discount).toFixed(2);
          }
        }
        if (wastage_discount > 0) {
          discount_weight = parseFloat(
            parseFloat(wastage_discount) / parseFloat(rate_per_grm)
          ).toFixed(3);
        }
      }
    }
    var tax_type = "";
    $.each(prod_details, function (k, val) {
      if (val.pro_id == curRow.find(".sale_product_id").val()) {
        tax_type = val.tax_type;
      }
    });
    if (is_eda == 1) {
      var base_value_tax = parseFloat(
        calculate_base_value_tax(rate_with_mc, tax_group)
      );
      var base_value_amt = parseFloat(
        parseFloat(rate_with_mc) + parseFloat(base_value_tax)
      );
      var arrived_value_tax = parseFloat(
        calculate_arrived_value_tax(base_value_amt, tax_group)
      );
      var arrived_value_amt = parseFloat(
        parseFloat(base_value_amt) + parseFloat(arrived_value_tax)
      );
      var total_tax_rate = parseFloat(
        parseFloat(base_value_tax) + parseFloat(arrived_value_tax)
      );
      inclusive_tax_rate = arrived_value_amt;
      if ((calculation_type == 3 || calculation_type == 4) && tax_type == 1) {
        //tax_type 1-Inclusive ,2-Exclusive
        inclusive_tax_rate = rate_with_mc;
        var total_tax_rate = parseFloat(
          calculate_inclusiveGST(rate_with_mc, tax_group)
        ).toFixed(2);
        rate_with_mc = parseFloat(
          parseFloat(rate_with_mc) - parseFloat(total_tax_rate)
        ).toFixed(2);
      }
      if (is_store_delivery == 1) {
        // SHOW ROOM DELIVERY
        cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);
        sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(3);
      }
      if (is_store_delivery == 2) {
        // Customer Delivery
        if (cus_del_country == cmp_country) {
          if (cus_del_state == cmp_state) {
            cgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(2);
            sgst = parseFloat(parseFloat(total_tax_rate) / 2).toFixed(2);
          } else {
            cgst = 0;
            sgst = 0;
            igst = total_tax_rate;
          }
        }
        /*else if(cus_del_country=='')
				{
					cgst=parseFloat(parseFloat(total_tax_rate)/2).toFixed(2);
					sgst=parseFloat(parseFloat(total_tax_rate)/2).toFixed(2);
				}*/ // NO GST
        else {
          cgst = 0;
          sgst = 0;
          igst = 0;
          inclusive_tax_rate = rate_with_mc;
        }
      }
    } else {
      inclusive_tax_rate = rate_with_mc;
    }

    var split_item_cost = parseFloat(
      parseFloat(Math.round(inclusive_tax_rate)) -
        parseFloat(purchase_old_metal_amt)
    ).toFixed(2);
    curRow.find(".bill_taxable_amt").html(parseFloat(rate_with_mc).toFixed(2));
    curRow.find(".mc_discount").val(parseFloat(mc_discount).toFixed(2));
    curRow
      .find(".wastage_discount")
      .val(parseFloat(wastage_discount).toFixed(2));
    curRow
      .find(".item_blc_discount")
      .val(parseFloat(item_blc_discount).toFixed(2));

    curRow.find(".tax_amt").html(parseFloat(total_tax_rate).toFixed(2));
    curRow.find(".total_tax").val(parseFloat(total_tax_rate).toFixed(2));
    curRow.find(".bill_amount").val(split_item_cost);
    curRow.find(".split_recd_amount").val(split_item_cost);
    curRow.find(".sale_cgst").val(cgst);
    curRow.find(".sale_sgst").val(sgst);
    curRow.find(".sale_igst").val(igst);
    curRow.find(".bill_discount").val(parseFloat(discount).toFixed(2));
    curRow.find(".per_grm_amount").val(rate_per_grm);
    curRow.find(".bill_wastage_wt").val(wast_wgt);
    if (discount_weight > 0) {
      curRow
        .find(".est_wastage")
        .html(
          parseFloat(
            parseFloat(
              parseFloat(parseFloat(wast_wgt) - parseFloat(discount_weight)) *
                100
            ) / parseFloat(net_wt)
          ).toFixed(2)
        );
    }
    curRow
      .find(".est_wastage_wt")
      .html(
        parseFloat(parseFloat(wast_wgt) - parseFloat(discount_weight)).toFixed(
          3
        )
      );
    curRow
      .find(".making_charge")
      .html(parseFloat(mc_type - mc_discount).toFixed(2));
    curRow.find(".bill_split_lesswt").html(parseFloat(less_wt).toFixed(3));
    curRow.find(".bill_sale_net_wt").html(parseFloat(net_wt).toFixed(3));
    curRow.find(".bill_net_val").val(parseFloat(net_wt).toFixed(3));
    total_amount += parseFloat(split_item_cost);
    round_of_val = inclusive_tax_rate;
    tot_cost = parseFloat(Math.round(inclusive_tax_rate));

    curRow
      .find(".total_split_sales_amount")
      .html(parseFloat(tot_cost).toFixed(2));
    curRow.find(".total_sales_amount").val(parseFloat(tot_cost).toFixed(2));

    round_of_amt = parseFloat(tot_cost - round_of_val).toFixed(2);
    curRow.find(".round_of_amt").val(round_of_amt);
    console.log("cus_del_country:" + cus_del_country);
    console.log("cus_del_state:" + cus_del_state);
    console.log("cgst:" + cgst);
    console.log("sgst:" + sgst);
    console.log("igst:" + igst);
    console.log("mc_type:" + mc_type);
    console.log("mc_discount:" + mc_discount);
    console.log("blc_discount:" + blc_discount);
    console.log("wast_wgt_amt:" + wast_wgt_amt);
    console.log("wastage_discount:" + wastage_discount);
    console.log("round_of_val:" + round_of_val);
    console.log("tot_cost:" + tot_cost);
    console.log("round_of_amt:" + round_of_amt);
    console.log("calculation_type:" + calculation_type);
    console.log("rate_with_mc:" + rate_with_mc);
    console.log("wast_wgt:" + wast_wgt);
    console.log("mc:" + curRow.find(".bill_mctype").val());
    console.log("mc_type:" + mc_type);
    console.log("retail_max_mc:" + retail_max_mc);
    console.log("inclusive_tax_rate:" + inclusive_tax_rate);
    console.log("total_tax:" + total_tax);
    console.log("tax_group:" + tax_group);
    console.log("rate_per_grm:" + rate_per_grm);
    console.log("------------");
  });
  $(".total_bill_split_pcs").html(parseFloat(total_pcs));
  $(".total_bill_split_gwt").html(parseFloat(total_gwt).toFixed(3));
  $(".total_bill_split_lwt").html(parseFloat(total_lwt).toFixed(3));
  $(".total_bill_split_nwt").html(parseFloat(total_nwt).toFixed(3));
  $(".total_bill_split_amount").html(
    Math.round(parseFloat(total_amount).toFixed(2))
  );
  calculate_sales_details(); //Calculate Sales Details
  calculate_purchase_details(); //Calculate Purchase Details
}
$(document).on("keyup", ".cus_name", function () {
  var row = $(this).closest("tr");
  var customer = row.find(".cus_name").val();
  search_cus_details(row, customer);
});
function search_cus_details(curRow, searchTxt) {
  var billing_for = $("input[name='billing[billing_for]']:checked").val();
  var bill_type = $(".bill_type_sales:checked").val();
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/getCustomersBySearch/?nocache=" +
      my_Date.getUTCSeconds(),
    dataType: "json",
    method: "POST",
    data: {
      searchTxt: searchTxt,
      billing_for: billing_for,
      esti_for: billing_for == 1 ? 1 : 3,
    },
    success: function (data) {
      curRow.find(".cus_name").autocomplete({
        source: data,
        select: function (e, i) {
          e.preventDefault();
          $("#cus_info").html("");
          curRow.find(".cus_name").val(i.item.label);
          curRow.find(".id_customer").val(i.item.value);

          curRow.find(".cus_del_state").val(i.item.id_state);
          curRow.find(".cus_del_country").val(i.item.id_country);

          curRow.find("#cus_del_state").val(i.item.id_state);
          curRow.find("#cus_del_country").val(i.item.id_country);
          curRow.find("#cus_state").val(i.item.id_state);
          curRow.find("#cus_country").val(i.item.id_country);

          if (i.item.pan_no != "") {
            curRow.find(".pan_no").val(i.item.pan_no);
          }

          calculateSaleBillSplitRowTotal();
          get_bill_split_advance_details(curRow, i.item.value);

          //get_customer_address_det();
          //TCS Calculation

          if (billing_for == 2) {
            getCompanyPurchaseAmount(i.item.value);
          }

          customer_detail_modal(i.item.value); // Customer Purchase and Account Details
          get_tcs_percent(i.item.value);
          if (bill_type == 8) {
            getCreditPending(i.item.value);
          }
          if (bill_type == 7) {
            getCustomerSalesDetails(i.item.value);
          }
          if (i.item.value != "") {
            get_check_customer_payment_det(i.item.value, curRow);
          }
        },
        change: function (event, ui) {
          if (ui.item === null) {
            $(this).val("");
            curRow.find(".cus_name").val("");
            curRow.find(".id_customer").val("");
            curRow.find(".cus_advance_details").val("");
          }
        },
        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.
          if (searchTxt != "") {
            if (i.content.length === 0) {
              $("#customerAlert").html(
                '<p style="color:red">Enter a valid customer name / mobile</p>'
              );
            } else {
              $("#customerAlert").html("");
            }
          } else {
          }
        },
        minLength: 3,
      });
    },
  });
}
function get_bill_split_advance_details(curRow, bill_cus_id) {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_advance_details/?nocache=" +
      my_Date.getUTCSeconds(),
    dataType: "json",
    method: "POST",
    data: {
      bill_cus_id: bill_cus_id,
      is_eda: $("#is_eda").val(),
      id_branch: $("#id_branch").val(),
    },
    success: function (data) {
      if (data.length > 0) {
        curRow.find(".cus_advance_details").val(JSON.stringify(data));
      }
    },
  });
}
function create_new_customer(curRow) {
  console.log(curRow.closest("tr").attr("id"));
  if (curRow != undefined) {
    $("#row_active_id").val(curRow.closest("tr").attr("id"));
  }
  $("#confirm-add").modal("toggle");
  // get_village_list();
  $("#myModalLabel").text("Add Customer");
  $("#add_newcutomer").text("Add");
  $("#cus_first_name").val("");
  $("#cus_mobile").val("");
  $("#cus_mobile").prop("readonly", false);
  $("#id_village").val("");
  $("#sel_village option").remove();
  $("#id_customer").val("");
  $("#id_country").val("");
  $("#id_state").val("");
  $("#state option").remove();
  $("#id_city").val("");
  $("#city option").remove();
  $("#address1").val("");
  $("#address2").val("");
  $("#address3").val("");
  $("#pincode").val("");
  $("#cus_email").val("");

  $("#country").select2({
    placeholder: "Enter Country",
    allowClear: true,
  });
  $("#state").select2({
    placeholder: "Enter State",
    allowClear: true,
  });

  $("#city").select2({
    placeholder: "Enter City",
    allowClear: true,
  });
  get_country();
}
function validateSplitSaleRow() {
  var Rowvalidate = true;
  var bill_split_max_amount = $("#bill_split_max_amount").val();
  var bill_split_min_amount = $("#bill_split_min_amount").val();
  $("#billing_split_sale_details > tbody tr").each(function (idx, row) {
    curRow = $(this);
    if (curRow.find(".id_customer").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select The Customer..",
      });
      allow_submit = false;
    } else if (curRow.find(".split_recd_amount").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Received Amount Is Empty..",
      });
      Rowvalidate = false;
    }
    /*if(parseFloat(bill_split_min_amount)>parseFloat(curRow.find('.split_recd_amount').val()))
		{
			$.toaster({ priority : 'danger', title : 'Warning!', message : ''+"</br>Minimum Split Amount is Less than the Received Amount.."});
			Rowvalidate=false;
		}*/
  });
  return Rowvalidate;
}
function bill_split_submit() {
  var is_counter_req = $("#is_counter_req").val();
  var counter_id = $("#counter_id").val();
  var mac_id = localStorage.getItem("mac_id");
  var allow_submit = true;
  var is_store_delivery = $("#delivered_at").val();
  var bill_type = $("input[name='billing[bill_type]']:checked").val();
  var is_credit = $("input[name='billing[is_credit]']:checked").val();
  var is_aganist_order = $(
    "input[name='billing[is_aganist_order]']:checked"
  ).val();
  var credit_Otp_approval = $("#credit_sales_otp_req").val();
  if ($("#id_branch").val() == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select The Branch..",
    });
    allow_submit = false;
  } else if (bill_type == "" || bill_type == undefined) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select The Bill Type..",
    });
    allow_submit = false;
  } else if ($("#billing_split_sale_details >tbody>tr").length == 0) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>No Records Found..",
    });
    allow_submit = false;
  } else if (!validateSplitSaleRow()) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Fill The Required Fields..",
    });
    allow_submit = false;
  }

  if (
    $("#billing_emp_select_req").val() == 1 &&
    ($("#emp_select").val() == "" || $("#emp_select").val() == null)
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select Employee..",
    });
    allow_submit = false;
  }

  if (allow_submit == true) {
    $("div.overlay").css("display", "block");
    var form_data = $("#bill_pay").serialize();
    $("#pay_submit").prop("disabled", true);
    var url =
      base_url +
      "index.php/admin_ret_billing/billing/split_save?nocache=" +
      my_Date.getUTCSeconds();
    $.ajax({
      url: url,
      data: form_data,
      type: "POST",
      dataType: "JSON",
      success: function (data) {
        if (data.status) {
          $("div.overlay").css("display", "none");
          if (bill_type == 11) {
            window.open(
              base_url +
                "index.php/admin_ret_billing/repair_order_thermal_print/" +
                data["id"],
              "_blank"
            );
          } else {
            window.open(
              base_url +
                "index.php/admin_ret_billing/billing_invoice/" +
                data["id"],
              "_blank"
            );
          }

          window.location.href =
            base_url + "index.php/admin_ret_billing/billing/add";
        } else {
          window.location.href =
            base_url + "index.php/admin_ret_billing/billing/add";
        }

        $("div.overlay").css("display", "none");
      },
      error: function (error) {
        $("div.overlay").css("display", "none");
      },
    });
  } else {
    $("#pay_submit").prop("disabled", false);
    $("div.overlay").css("display", "none");
  }
}
function remove_payment_row(curRow) {
  curRow.remove();
  calculate_split_payment_amount();
}
function add_new_payment() {
  var trHtml = "";
  var paymode = "";
  var bank = '<option value="">Select Bank</option>';
  var device = '<option value="">Select Device</option>';
  var card_type = '<option value="">Select Card Type</option>';
  $.each(payment_mode_details, function (k, pm) {
    paymode +=
      "<option value='" + pm.short_code + "' >" + pm.short_code + "</option>";
  });
  $.each(bank_details, function (k, bnk) {
    bank +=
      "<option value='" + bnk.id_bank + "' >" + bnk.acc_number + "</option>";
  });
  $.each(payment_device_details, function (k, val) {
    device +=
      "<option value='" + val.id_device + "' >" + val.device_name + "</option>";
  });
  var net_bank_type =
    '<option value="">Select Net Bank Type</option>' +
    '<option value="1">RTGS</option>' +
    '<option value="2">IMPS</option>' +
    '<option value="3">UPI(Transfer)</option>' +
    '<option value="4">NEFT</option>' +
    '<option value="5">UPI(Scanner)</option>';
  var card_name =
    '<option value="">Select Card</option>' +
    '<option value="1">RuPay</option>' +
    '<option value="2">VISA</option>' +
    '<option value="3">Mastro</option>';
  +'<option value="4">Master</option>';
  trHtml =
    "<tr>" +
    '<td><select class="paymode form-control"  value="" style="width: 100px;">' +
    paymode +
    "</select></td>" +
    '<td><input type="number" class="recd_amt form-control" style="width: 100px;"></td>' +
    '<td><select class="card_name form-control"  value="" style="width: 100px;" disabled>' +
    card_name +
    "</select></td>" +
    '<td><select class="device_type form-control"  value="" style="width: 100px;" disabled>' +
    device +
    "</select></td>" +
    '<td><select class="net_bank_type form-control"  value="" style="width: 100px;" disabled>' +
    net_bank_type +
    "</select></td>" +
    '<td><input type="text" class="ref_no form-control" style="width: 100px;" disabled></td>' +
    '<td><input type="number" class="approval_no form-control" style="width: 100px;" disabled></td>' +
    '<td><select class="bankname form-control"  value="" style="width: 100px;" disabled>' +
    bank +
    "</select></td>" +
    '<td><input class="form-control datemask date cheque_deposit_date" data-date-format="dd-mm-yyyy"  type="text" placeholder="Cheque Date" disabled /></td>' +
    '<td><a href="#" onClick="remove_payment_row($(this).closest(\'tr\').remove());" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
    "</tr>";
  $("#pay_details_table tbody").append(trHtml);

  var date = new Date();

  var today = new Date(date.getFullYear(), date.getMonth(), date.getDate());

  $(".cheque_deposit_date")
    .datepicker({
      dateFormat: "dd-mm-yyyy",
      endDate: today,
      autoclose: "true",
    })
    .datepicker("setDate", today);
}
$(document).on("change", ".paymode", function () {
  var curRow = $(this).closest("tr");
  curRow.find(".device_type").prop("disabled", true);
  curRow.find(".ref_no").prop("disabled", true);
  curRow.find(".net_bank_type").prop("disabled", true);
  curRow.find(".approval_no").prop("disabled", true);
  curRow.find(".bankname").prop("disabled", true);
  curRow.find(".card_name").prop("disabled", true);
  curRow.find(".cheque_deposit_date").prop("disabled", true);
  curRow.find(".device_type").val("");
  curRow.find(".ref_no").val("");
  curRow.find(".net_bank_type").val("");
  curRow.find(".approval_no").val("");
  curRow.find(".bankname").val("");
  curRow.find(".card_name").val("");
  var paymode = curRow.find(".paymode").val();
  if (paymode == "CC" || paymode == "DC") {
    curRow.find(".device_type").prop("disabled", false);
    curRow.find(".ref_no").prop("disabled", false);
    curRow.find(".approval_no").prop("disabled", false);
    curRow.find(".card_name").prop("disabled", false);
  } else if (paymode == "NB") {
    curRow.find(".net_bank_type").prop("disabled", false);
    curRow.find(".bankname").prop("disabled", false);
    curRow.find(".ref_no").prop("disabled", false);
  } else if (paymode == "CHQ") {
    curRow.find(".bankname").prop("disabled", false);
    curRow.find(".cheque_deposit_date").prop("disabled", false);
    curRow.find(".ref_no").prop("disabled", false);
  }

  calculate_split_payment_amount();
});
$(document).on("change", ".net_bank_type", function () {
  var curRow = $(this).closest("tr");
  curRow.find(".device_type").prop("disabled", true);
  var net_bank_type = curRow.find(".net_bank_type").val();
  if (net_bank_type == 3) {
    curRow.find(".device_type").prop("disabled", false);
  }
  calculate_split_payment_amount();
});

$(document).on("keyup", ".recd_amt", function () {
  var curRow = $(this).closest("tr");
  var catRow = $("#row_active_id").val();
  if (curRow.find(".paymode ").val() == "CSH") {
    let cus_paid_amt =
      isNaN(
        $("." + catRow)
          .find(".cus_payment_details")
          .val()
      ) ||
      $.trim(
        $("." + catRow)
          .find(".cus_payment_details")
          .val()
      ) == ""
        ? 0
        : $("." + catRow)
            .find(".cus_payment_details")
            .val();
    let max_cash_amt =
      isNaN($("#max_cash_amt").val()) || $.trim($("#max_cash_amt").val()) == ""
        ? 0
        : $("#max_cash_amt").val();
    let cash_pay =
      isNaN(curRow.find(".recd_amt").val()) ||
      $.trim(curRow.find(".recd_amt").val()) == ""
        ? 0
        : curRow.find(".recd_amt").val();
    let adv_total_cash_amt =
      isNaN($("#adv_total_cash_amt").val()) ||
      $.trim($("#adv_total_cash_amt").val()) == ""
        ? 0
        : $("#adv_total_cash_amt").val();
    let bal_cash_pay = parseFloat(max_cash_amt) - parseFloat(cus_paid_amt);
    if (
      parseFloat($("#validate_max_cash").val()) == 1
        ? parseFloat(cash_pay) + parseFloat(cus_paid_amt) >
          parseFloat(max_cash_amt)
        : false
    ) {
      if (curRow.find(".recd_amt").val() != "") {
        curRow.find(".recd_amt").val(0);
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message:
            "" + "</br>Maximum cash amount for this bill is " + bal_cash_pay,
        });
        status = false;
      }
    }
  }
  calculate_split_payment_amount();
});

function validate_split_payment_row() {
  var Rowvalidate = true;
  if ($("#pay_details_table > tbody tr").length > 0) {
    $("#pay_details_table > tbody tr").each(function (idx, row) {
      curRow = $(this);
      console.log(curRow.find(".paymode").val());
      if (
        (curRow.find(".recd_amt").val() == "" ||
          curRow.find(".recd_amt").val() == 0) &&
        $(".tot_adj_amount").html() == 0
      ) {
        Rowvalidate = false;
      } else if (
        (curRow.find(".paymode").val() == "CC" ||
          curRow.find(".paymode").val() == "DC") &&
        (curRow.find(".card_name").val() == "" ||
          curRow.find(".ref_no").val() == "" ||
          curRow.find(".approval_no ").val() == "")
      ) {
        Rowvalidate = false;
      } else if (
        curRow.find(".paymode").val() == "DC" &&
        (curRow.find(".device_type ").val() == "" ||
          curRow.find(".approval_no ").val() == "")
      ) {
        Rowvalidate = false;
      } else if (
        curRow.find(".paymode").val() == "NB" &&
        (curRow.find(".net_bank_type").val() == "" ||
          curRow.find(".ref_no").val() == "")
      ) {
        console.log(2);
        Rowvalidate = false;
      } else if (
        curRow.find(".net_bank_type").val() == 3 &&
        curRow.find(".device_type").val() == ""
      ) {
        console.log(3);
        Rowvalidate = false;
      } else if (
        curRow.find(".paymode").val() == "CHQ" &&
        (curRow.find(".ref_no").val() == "" ||
          curRow.find(".cheque_deposit_date").val() == "" ||
          curRow.find(".bankname").val() == "")
      ) {
        console.log(3);
        Rowvalidate = false;
      }
    });
  }
  return Rowvalidate;
}

function calculate_split_payment_amount() {
  var recd_amount = 0;
  var adj_amount = 0;
  var tot_bill_split_amount = $(".tot_bill_split_amount").html();
  var balance_amount = 0;
  $("#pay_details_table > tbody tr").each(function (idx, row) {
    curRow = $(this);
    recd_amount += parseFloat(
      isNaN(curRow.find(".recd_amt").val()) ||
        curRow.find(".recd_amt").val() == ""
        ? 0
        : curRow.find(".recd_amt").val()
    );
  });
  $("#bill_split_adv_adj > tbody tr").each(function (idx, row) {
    curRow = $(this);
    adj_amount += parseFloat(
      isNaN(curRow.find(".adj_amount").val()) ||
        curRow.find(".adj_amount").val() == ""
        ? 0
        : curRow.find(".adj_amount").val()
    );
  });
  $(".tot_recd_amount").html(parseFloat(recd_amount).toFixed(2));
  $(".tot_adj_amount").html(parseFloat(adj_amount).toFixed(2));
  balance_amount = parseFloat(
    parseFloat(tot_bill_split_amount) -
      parseFloat(recd_amount) -
      parseFloat(adj_amount)
  ).toFixed(2);
  $(".tot_blc_amt").html(balance_amount);
  if (balance_amount == 0 && validate_split_payment_row()) {
    $("#save_payment_details").prop("disabled", false);
  } else {
    $("#save_payment_details").prop("disabled", true);
  }
}
function create_new_empty_payment_details_row(curRow, id) {
  if (
    curRow.find(".id_customer").val() == "" ||
    curRow.find(".id_customer").val() == null
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select The Customer..",
    });
  } else if (
    curRow.find(".pan_no").val() == "" &&
    parseFloat(curRow.find(".bill_amount").val()) >
      parseFloat($("#min_pan_amt").val())
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter the PAN NO",
    });

    allow_submit = false;
  } else {
    if (curRow != undefined) {
      $("#row_active_id").val(curRow.closest("tr").attr("id"));
    }
    var row = "";
    var catRow = $("#row_active_id").val();
    var item_cost = curRow.find(".split_recd_amount").val();
    var row_payment_details = $(curRow).find(".split_payment_details").val();
    var cus_advance_details = $(curRow).find(".cus_advance_details").val();
    if (row_payment_details != "") {
      var payment_details = JSON.parse(row_payment_details);
      if (payment_details.length > 0) {
        $.each(payment_details, function (pkey, pitem) {
          create_new_empty_payment_row(pitem);
        });
      }
    } else {
      if ($("#pay_details_table > tbody > tr").length == 0) {
        add_new_payment();
      }
    }
    if (cus_advance_details != "") {
      var adv_details = JSON.parse(cus_advance_details);
      console.log(adv_details);
      if (adv_details.length > 0) {
        $.each(adv_details, function (pkey, pitem) {
          create_new_empty_split_advance_row(pitem);
        });
      }
    }
    $("#payment_detail_modal").modal("show");
    $(".tot_bill_split_amount").html(item_cost);
    calculate_split_payment_amount();
  }
}
$("#add_new_payment").on("click", function () {
  if (validate_split_payment_row()) {
    add_new_payment();
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Fill The Required Fields..",
    });
  }
});
function create_new_empty_split_advance_row(items) {
  var trHtml = "";
  let id_issue_receipt =
    items.id_issue_receipt != undefined && items.id_issue_receipt != ""
      ? items.id_issue_receipt
      : "";
  let bill_no =
    items.bill_no != undefined && items.bill_no != "" ? items.bill_no : "";
  let amount =
    items.amount != undefined && items.amount != "" ? items.amount : "";
  let adj_amount =
    items.adj_amount != undefined && items.adj_amount != ""
      ? items.adj_amount
      : "";
  let cash_pay =
    items.cash_pay != undefined && items.cash_pay != "" ? items.cash_pay : "";
  let total_cash_pay =
    items.total_cash_pay != undefined && items.total_cash_pay != ""
      ? items.total_cash_pay
      : "";
  trHtml =
    "<tr>" +
    '<td><input type="checkbox" class="bill_id_issue_receipt"  name="adv_adj[id_issue_receipt]" value="' +
    id_issue_receipt +
    '" ' +
    (adj_amount != "" ? "checked" : "") +
    '><input type="hidden" class="cash_pay"  value="' +
    cash_pay +
    '"><input type="hidden" class="total_cash_pay"  value="' +
    total_cash_pay +
    '"></td>' +
    '<td><div class="adv_bill_no">' +
    bill_no +
    "</div></td>" +
    '<td><div class="advance_amount" >' +
    amount +
    "</div></td>" +
    '<td><input type="number" class="form-control adj_amount" name="adv_adj[adj_amount]" value="' +
    adj_amount +
    '" ' +
    (adj_amount != "" ? "" : "readonly") +
    "></td>" +
    '<td><input type="number" class="form-control blc_amount" name="adv_adj[blc_amount]" readonly><input type="hidden" class="rate_calc" value="0"></td>' +
    "</tr>";
  $("#bill_split_adv_adj tbody").append(trHtml);
}
function create_new_empty_payment_row(pay_data = []) {
  var trHtml = "";
  var paymode = "";
  var bank = '<option value="">Select Bank</option>';
  var device = '<option value="">Select Device</option>';
  var card_type = '<option value="">Select Card Type</option>';
  $.each(payment_mode_details, function (k, pm) {
    var selected = "";
    console.log(pay_data);
    if (pm.short_code == pay_data.payment_mode) {
      selected = "selected";
    }
    paymode +=
      "<option value='" +
      pm.short_code +
      "' " +
      selected +
      " >" +
      pm.short_code +
      "</option>";
  });
  $.each(bank_details, function (k, bnk) {
    var selected = "";
    if (bnk.id_bank == pay_data.bankname) {
      selected = "selected";
    }
    bank +=
      "<option value='" +
      bnk.id_bank +
      "' " +
      selected +
      " >" +
      bnk.acc_number +
      "</option>";
  });
  $.each(payment_device_details, function (k, val) {
    var selected = "";
    if (val.id_device == pay_data.device_type) {
      selected = "selected";
    }
    device +=
      "<option value='" +
      val.id_device +
      "' " +
      selected +
      " >" +
      val.device_name +
      "</option>";
  });
  var net_bank_type =
    '<option value="">Select Net Bank Type</option>' +
    '<option value="1" ' +
    (pay_data.net_bank_type == 1 ? "selected" : "") +
    " >RTGS</option>" +
    '<option value="2" ' +
    (pay_data.net_bank_type == 2 ? "selected" : "") +
    ">IMPS</option>" +
    '<option value="3" ' +
    (pay_data.net_bank_type == 3 ? "selected" : "") +
    " >UPI</option>";
  var card_name =
    '<option value="">Select Card</option>' +
    '<option value="1"  ' +
    (pay_data.card_name == 1 ? "selected" : "") +
    " >RuPay</option>" +
    '<option value="2" ' +
    (pay_data.card_name == 2 ? "selected" : "") +
    " >VISA</option>" +
    '<option value="3" ' +
    (pay_data.card_name == 3 ? "selected" : "") +
    " >Mastro</option>";
  +'<option value="4" ' +
    (pay_data.card_name == 4 ? "selected" : "") +
    " >Master</option>";
  trHtml =
    "<tr>" +
    '<td><select class="paymode form-control"  value="" style="width: 100px;">' +
    paymode +
    "</select></td>" +
    '<td><input type="number" class="recd_amt form-control" value="' +
    pay_data.recd_amt +
    '" style="width: 100px;"></td>' +
    '<td><select class="card_name form-control"  value="" style="width: 100px;" ' +
    (pay_data.payment_mode == "CC" || pay_data.payment_mode == "DC"
      ? ""
      : "disabled") +
    ">" +
    card_name +
    "</select></td>" +
    '<td><select class="device_type form-control"  value="" style="width: 100px;" ' +
    (pay_data.payment_mode == "CC" || pay_data.payment_mode == "DC"
      ? ""
      : "disabled") +
    ">" +
    device +
    "</select></td>" +
    '<td><select class="net_bank_type form-control"  value="" style="width: 100px;" ' +
    (pay_data.net_bank_type != "" ? "" : "disabled") +
    ">" +
    net_bank_type +
    "</select></td>" +
    '<td><input type="text" class="ref_no form-control" value="' +
    pay_data.ref_no +
    '" style="width: 100px;" ' +
    (pay_data.ref_no != "" ? "" : "disabled") +
    "></td>" +
    '<td><input type="number" class="approval_no form-control" value="' +
    pay_data.approval_no +
    '" style="width: 100px;" ' +
    (pay_data.payment_mode == "CC" || pay_data.payment_mode == "DC"
      ? ""
      : "disabled") +
    " ></td>" +
    '<td><select class="bankname form-control"  value="" style="width: 100px;" disabled>' +
    bank +
    "</select></td>" +
    '<td><input class="form-control datemask date cheque_deposit_date" data-date-format="dd-mm-yyyy"  type="text" value="' +
    pay_data.cheque_deposit_date +
    '" placeholder="Cheque Date" ' +
    (pay_data.payment_mode == "CHQ" ? "" : "disabled") +
    " /></td>" +
    '<td><a href="#" onClick="remove_payment_row($(this).closest(\'tr\').remove());" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
    "</tr>";

  $("#pay_details_table tbody").append(trHtml);
}
$("#payment_detail_modal  #close_payment_details").on("click", function () {
  $("#pay_details_table > tbody").empty();
  $("#payment_detail_modal .modal-body")
    .find("#bill_split_adv_adj tbody")
    .empty();
  $(".tot_bill_split_amount").html(0);
  $(".tot_recd_amount").html(0);
  $(".tot_adj_amount").html(0);
  $(".tot_blc_amt").html(0);

  $("#payment_detail_modal").modal("toggle");
});
$("#payment_detail_modal  #save_payment_details").on("click", function () {
  var total_split_amt = 0;
  var catRow = $("#row_active_id").val();
  if ($("#pay_details_table > tbody > tr").length == 0) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>No Records Found..",
    });
  } else {
    var payment_validate = false;
    if (validate_split_payment_row()) {
      var payment_details = [];
      var total_recd_amt = 0;

      $(
        "#payment_detail_modal .modal-body #pay_details_table > tbody  > tr"
      ).each(function (index, tr) {
        if (
          $(this).find(".recd_amt").val() != "" &&
          $(this).find(".recd_amt").val() != 0
        ) {
          total_recd_amt += parseFloat($(this).find(".recd_amt").val());
          payment_details.push({
            payment_mode: $(this).find(".paymode").val(),
            recd_amt: $(this).find(".recd_amt").val(),
            card_name: $(this).find(".card_name").val(),
            device_type: $(this).find(".device_type").val(),
            net_bank_type: $(this).find(".net_bank_type").val(),
            ref_no: $(this).find(".ref_no").val(),
            approval_no: $(this).find(".approval_no").val(),
            bankname: $(this).find(".bankname").val(),
            cheque_deposit_date: $(this).find(".cheque_deposit_date").val(),
          });
        }
      });
      total_split_amt = total_recd_amt;
      console.log(payment_details);
      $("." + catRow)
        .find(".total_split_sale_amt")
        .html(parseFloat(total_recd_amt).toFixed(2));
      $("." + catRow)
        .find(".split_recd_amt")
        .val(parseFloat(total_recd_amt).toFixed(2));
      $("." + catRow)
        .find(".split_payment_details")
        .val(payment_details.length > 0 ? JSON.stringify(payment_details) : "");
      //calculateSaleBillSplitRowTotal();
      calculate_sales_details(); //Calculate Sales Details
      calculate_purchase_details(); //Calculate Purchase Details
      $("#payment_detail_modal .modal-body")
        .find("#pay_details_table tbody")
        .empty();
      payment_validate = true;
    } else {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Fill The Required Fields..",
      });
    }
  }
  if ($("#bill_split_adv_adj > tbody > tr").length > 0) {
    var advance_adj = [];
    $(
      "#payment_detail_modal .modal-body #bill_split_adv_adj > tbody  > tr"
    ).each(function (index, tr) {
      total_split_amt += parseFloat(
        $(this).find(".adj_amount").val() != ""
          ? $(this).find(".adj_amount").val()
          : 0
      );
      advance_adj.push({
        id_issue_receipt: $(this).find(".bill_id_issue_receipt").val(),
        total_amount: $(this).find(".advance_amount").html(),
        total_cash_pay: $(this).find(".total_cash_pay").val(),
        amount: $(this).find(".amount").val(),
        bill_no: $(this).find(".adv_bill_no").html(),
        cash_pay: $(this).find(".cash_pay").val(),
        adj_amount: $(this).find(".adj_amount").val(),
        blc_amount: $(this).find(".blc_amount").val(),
        is_receipt_select: $(this).find(".bill_id_issue_receipt").is(":checked")
          ? 1
          : 0,
      });
    });
    $("." + catRow)
      .find(".cus_advance_details")
      .val(advance_adj.length > 0 ? JSON.stringify(advance_adj) : "");
    payment_validate = true;
    $("#payment_detail_modal .modal-body")
      .find("#bill_split_adv_adj tbody")
      .empty();
  }
  $("." + catRow)
    .find(".total_split_sale_amt")
    .html(parseFloat(total_split_amt).toFixed(2));
  if (payment_validate) {
    $("#payment_detail_modal").modal("toggle");
  }
});

function calculateBillsplitPaymentCost() {
  var total_bill_split_cash_amt = 0;
  var total_bill_split_card_amt = 0;
  var total_bill_chq_amt = 0;
  var total_bill_split_net_banking_amt = 0;
  var total_bill_split_recd_amt = 0;
  var total_bill_split_blc_amt = 0;
  var total_bill_split_adv_adj_amt = 0;
  var receive_amount = $(".receive_amount").val();
  $("#billing_split_sale_details > tbody tr").each(function (idx, row) {
    var curRow = $(this);
    var split_payment_details = curRow.find(".split_payment_details").val();
    var cus_advance_details = curRow.find(".cus_advance_details").val();
    if (split_payment_details != "") {
      var payment_details = JSON.parse(split_payment_details);
      $.each(payment_details, function (key, val) {
        if (val.payment_mode == "CSH") {
          total_bill_split_cash_amt += parseFloat(val.recd_amt);
        }
        if (val.payment_mode == "CC" || val.payment_mode == "DC") {
          total_bill_split_card_amt += parseFloat(val.recd_amt);
        }
        if (val.payment_mode == "NB") {
          total_bill_split_net_banking_amt += parseFloat(val.recd_amt);
        }
        if (val.payment_mode == "CHQ") {
          total_bill_chq_amt += parseFloat(val.recd_amt);
        }
      });
    }
    if (cus_advance_details != "") {
      var cus_advance_details = JSON.parse(cus_advance_details);
      $.each(cus_advance_details, function (key, val) {
        if (val.is_receipt_select == 1) {
          if (val.adj_amount != 0) {
            total_bill_split_adv_adj_amt += parseFloat(val.adj_amount);
          }
        }
      });
    }
  });
  total_bill_split_recd_amt =
    parseFloat(total_bill_split_net_banking_amt) +
    parseFloat(total_bill_chq_amt) +
    parseFloat(total_bill_split_card_amt) +
    parseFloat(total_bill_split_cash_amt) +
    parseFloat(total_bill_split_adv_adj_amt);
  total_bill_split_blc_amt =
    parseFloat(receive_amount) - parseFloat(total_bill_split_recd_amt);
  $("#total_bill_split_net_banking_amt").val(
    parseFloat(total_bill_split_net_banking_amt).toFixed(2)
  );
  $("#total_bill_chq_amt").val(parseFloat(total_bill_chq_amt).toFixed(2));
  $("#total_bill_split_card_amt").val(
    parseFloat(total_bill_split_card_amt).toFixed(2)
  );
  $("#total_bill_split_cash_amt").val(
    parseFloat(total_bill_split_cash_amt).toFixed(2)
  );
  $(".total_bill_split_recd_amt").html(
    parseFloat(total_bill_split_recd_amt).toFixed(2)
  );
  $(".total_bill_split_blc_amt").html(
    parseFloat(total_bill_split_blc_amt).toFixed(2)
  );
  $("#total_bill_split_adv_adj_amt").val(
    parseFloat(total_bill_split_adv_adj_amt).toFixed(2)
  );
  if (total_bill_split_blc_amt == 0) {
    $("#pay_submit").prop("disabled", false);
  } else {
    $("#pay_submit").prop("disabled", true);
  }
}
//Bill Split Function Start here

$(document).on("keyup", ".bill_mc", function () {
  var curRow = $(this).closest("tr");

  let bill_mc = curRow.find(".bill_mc").val() != "" ? 0 : "";

  curRow.find(".bill_mc_value").val(bill_mc);

  calculateSaleBillRowTotal();
});

$(document).on("keyup", ".bill_wastage", function () {
  var curRow = $(this).closest("tr");

  let bill_wastage =
    curRow.find(".bill_wastage").val() != ""
      ? curRow.find(".bill_wastage").val()
      : 0;

  curRow.find(".bill_wastage_per").val(parseFloat(bill_wastage).toFixed(2));

  curRow.find(".est_wastage").html(parseFloat(bill_wastage).toFixed(2));

  calculateSaleBillRowTotal();
});

//Advance Transfer

$(document).on("keyup", "#adv_trns_from_cust", function (e) {
  var adv_trns_from_cust = $("#adv_trns_from_cust").val();

  if (adv_trns_from_cust.length >= 1) {
    getsearchfromcustomer(adv_trns_from_cust);
  }
});

$(document).on("keyup", "#adv_trns_to_cust", function (e) {
  var adv_trns_to_cust = $("#adv_trns_to_cust").val();

  if (adv_trns_to_cust.length >= 1) {
    getsearchtocustomer(adv_trns_to_cust);
  }
});

function getsearchfromcustomer(adv_trns_from_cust) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/getCustomersBySearch/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { searchTxt: adv_trns_from_cust },

    success: function (data) {
      console.log("From getsearchcustomer: " + JSON.stringify(data));

      $("#adv_trns_from_cust").autocomplete({
        source: data,

        select: function (e, i) {
          e.preventDefault();

          $("#adv_trns_from_cust").val(i.item.label);

          $("#from_cus_id").val(i.item.value);

          $("#from_cus_mobile").val(i.item.mobile);

          get_advance_detail(i.item.value);

          $("#advance_trns_list tbody").empty();
        },

        change: function (event, ui) {
          if (ui.item === null) {
            $(this).val("");

            $("#adv_trns_from_cust").val("");

            $("#from_cus_id").val("");
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (adv_trns_from_cust != "") {
            if (i.content.length === 0) {
              $(".customerAlert").html(
                '<p style="color:red">Enter a valid customer name / mobile</p>'
              );
            } else {
              $(".customerAlert").html("");
            }
          }
        },

        minLength: 3,
      });
    },
  });
}

function getsearchtocustomer(adv_trns_to_cust) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/getCustomersBySearch/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { searchTxt: adv_trns_to_cust },

    success: function (data) {
      console.log(" to getsearchcustomer: " + JSON.stringify(data));

      $("#adv_trns_to_cust").autocomplete({
        source: data,

        select: function (e, i) {
          e.preventDefault();

          $("#cus_info").html("");

          $("#adv_trns_to_cust").val(i.item.label);

          $("#to_cus_id").val(i.item.value);

          get_check_customer_payment_det();
        },

        change: function (event, ui) {
          if (ui.item === null) {
            $(this).val("");

            $("#adv_trns_to_cust").val("");

            $("#to_cus_id").val("");
          }
        },

        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.

          if (adv_trns_to_cust != "") {
            if (i.content.length === 0) {
              $(".tocustomerAlert").html(
                '<p style="color:red">Enter a valid customer name / mobile</p>'
              );
            } else {
              $(".tocustomerAlert").html("");
            }
          } else {
          }
        },

        minLength: 3,
      });
    },
  });
}

function get_advance_detail(id_fromcustomer) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_advance_details/?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "json",

    method: "POST",

    data: { bill_cus_id: id_fromcustomer, id_branch: $("#id_branch").val() },

    success: function (data) {
      if (data.length > 0) {
        var html = "";

        $.each(data, function (key, items) {
          if (items["amount"] > 0) {
            html +=
              "<tr>" +
              '<td><input type="checkbox" class="adv_trans_id_issue_receipt"  name="adv_trans[id_issue_receipt]" value="' +
              items.id_issue_receipt +
              '"><input type="hidden" class="id_ret_wallet" value="' +
              items.id_ret_wallet +
              '"><input type="hidden" class="adv_cash_paid" value="' +
              items.cash_pay +
              '"><input type="hidden" class="is_currentday_adv" value="' +
              items.is_currentday_adv +
              '"></td>' +
              '<td><div class="adv_bill_no" value="' +
              items.bill_no +
              '">' +
              items.bill_no +
              "</div></td>" +
              '<td><div class="at_rcpt_bal_amount" >' +
              items.amount +
              "</div></td>" +
              '<td><input type="number" class="form-control transfer_amount" name="adv_trans[transfer_amount]" readonly></td>' +
              '<td><input type="number" class="form-control tot_blc_amount" name="adv_trans[tot_blc_amount]" readonly></td>' +
              "</tr>";
          }
        });

        $("#advance_trns_list > tbody").append(html);
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>No Records Found..",
        });

        return false;
      }
    },
  });
}

$(document).on("change", ".adv_trans_id_issue_receipt", function (e) {
  var row = $(this).closest("tr");

  if (row.find(".adv_trans_id_issue_receipt").is(":checked")) {
    row.find(".transfer_amount").attr("readonly", false);
  } else {
    row.find(".transfer_amount").val(0);

    row.find(".tot_blc_amount").val(0);

    row.find(".transfer_amount").attr("readonly", true);
  }

  calculate_advance_transfer_amount();
});

$("#submit_advance_transfer,.submit_advance_transfer").on("click", function () {
  var receipt = $("input[name='adv_trans[id_issue_receipt]']:checked").val();

  var transferAmounts = [];

  $(".transfer_amount").each(function () {
    transferAmounts.push($(this).val());
  });

  console.log(transferAmounts);

  if (
    $("#id_branch").val() == 0 ||
    $("#id_branch").val() == undefined ||
    $("#id_branch").val() == null
  ) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select Branch..",
    });

    return false;
  } else if ($("#from_cus_id").val() == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter Transfer From Customer..",
    });

    return false;
  } else if ($("#to_cus_id").val() == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Enter Transfer To Customer..",
    });

    return false;
  } else if (typeof receipt === "undefined") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "Please Select Any One Receipt...",
    });

    return false;
  } else if (transferAmounts.every((amount) => amount == 0 || amount == "")) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "Please Enter Transfer Amount...",
    });
    return false;
  } else if ($("#otp_required").val() == 1 && $("#is_otp_verfied").val() != 1) {
    $("#otp_modal").modal("show");

    at_send_otp();
  } else {
    if ($("#otp_required").val() == 1 && $("#is_otp_verfied").val() != 1) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>OTP is Not Verified Yet..",
      });

      return false;
    } else {
      set_advance_transfer();
    }
  }
});

function set_advance_transfer() {
  var transfered_amount_Details = [];

  var adv_cash_paid = 0;

  $("#total_transfered_amt").val();

  $("#advance_trns_list > tbody  > tr").each(function (index, tr) {
    if ($(this).find(".adv_trans_id_issue_receipt").is(":checked")) {
      var transfer_amount =
        isNaN($(this).find(".transfer_amount").val()) ||
        $(this).find(".transfer_amount").val() == ""
          ? 0
          : $(this).find(".transfer_amount").val();

      var cash_pay =
        isNaN($(this).find(".adv_cash_paid").val()) ||
        $(this).find(".adv_cash_paid").val() == ""
          ? 0
          : $(this).find(".adv_cash_paid").val();

      cash_pay =
        parseFloat(transfer_amount) <= parseFloat(cash_pay)
          ? transfer_amount
          : cash_pay;

      //if (parseFloat($(this).find(".is_currentday_adv").val()) == 0) {

      adv_cash_paid = adv_cash_paid + parseFloat(cash_pay);

      //}

      transfered_amount_Details.push({
        adv_trans_id_issue_receipt: $(this)
          .find(".adv_trans_id_issue_receipt")
          .val(),

        transfer_amount: $(this).find(".transfer_amount").val(),

        tot_blc_amount: $(this).find(".tot_blc_amount").val(),

        adv_trans_otp: $("#adv_trans_otp").val(),

        cash_pay: cash_pay,
      });

      console.log(
        "transfered_amount_Details : " +
          JSON.stringify(transfered_amount_Details)
      );
    }
  });

  $("#adv_total_cash_amt").val(adv_cash_paid);

  var max_cash_valid = validate_max_cash_advance_transfer();

  if (max_cash_valid == true) {
    $("#advance_transfer").val(
      transfered_amount_Details.length > 0
        ? JSON.stringify(transfered_amount_Details)
        : ""
    );

    $.ajax({
      type: "POST",

      url: base_url + "index.php/admin_ret_billing/advance_transfer/save",

      dataType: "JSON",

      data: {
        send_resend: $("#send_resend").val(),
        transfer_amount: $("#advance_transfer").val(),
        tot_transfer_amount: $("#total_transfered_amt").val(),
        id_branch:
          $("#branch_select").val() != "" ||
          $("#branch_select").val() != undefined ||
          $("#branch_select").val() != null
            ? $("#branch_select").val()
            : $("#branch_filter").val(),
        is_eda: $("#is_eda").val(),
        to_cus_id: $("#to_cus_id").val(),
      },

      success: function (data) {
        if (data.status == true) {
          window.open(
            base_url +
              "index.php/admin_ret_billing/receipt/receipt_print/" +
              data["id"],
            "_blank"
          );

          $.toaster({
            priority: "success",
            title: "Success!",
            message: "" + "</br> Transfer Amount  SuccessFully...",
          });

          window.location.reload();

          $("div.overlay").css("display", "none");
        } else {
          $.toaster({
            priority: "warning",
            title: "Success!",
            message: "" + "</br> Unable to Transfer Amount",
          });

          window.location.reload();

          $("div.overlay").css("display", "none");
        }
      },
    });

    calculate_advance_transfer_amount();
  } else {
    $("#adv_total_cash_amt").val(0);
  }
}

$(document).on("keyup", ".transfer_amount", function (e) {
  var row = $(this).closest("tr");

  var at_rcpt_bal_amount = parseFloat(row.find(".at_rcpt_bal_amount").html());

  var total_transfered_amt = 0;

  var balance_amount = 0;

  $(" #advance_trns_list > tbody  > tr").each(function (index, tr) {
    var row = $(this).closest("tr");

    if (row.find(".adv_trans_id_issue_receipt").is(":checked")) {
      total_transfered_amt +=
        isNaN(row.find(".transfer_amount").val()) ||
        row.find(".transfer_amount").val() == ""
          ? 0
          : parseFloat(row.find(".transfer_amount").val());
    }
  });

  if (
    row.find(".transfer_amount").val() != "" &&
    row.find(".transfer_amount").val() > 0
  ) {
    row.find(".adv_trans_id_issue_receipt").prop("checked", true);

    if (
      parseFloat(at_rcpt_bal_amount) <
      parseFloat(row.find(".transfer_amount").val())
    ) {
      row.find(".transfer_amount").val(0);

      row.find(".tot_blc_amount").val(0);

      row.find(".adv_trans_id_issue_receipt").prop("checked", false);

      row.find(".transfer_amount").attr("readonly", true);

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message:
          "" +
          "</br>" +
          "The Entered Transfer Amount Is more than the Receipt Balance value",
      });
    } else {
      tot_balance_amount =
        parseFloat(at_rcpt_bal_amount) -
        parseFloat(row.find(".transfer_amount").val());

      row.find(".adv_trans_id_issue_receipt").prop("checked", true);

      row
        .find(".tot_blc_amount")
        .val(parseFloat(tot_balance_amount).toFixed(2));
    }
  } else {
    row.find(".adv_trans_id_issue_receipt").prop("checked", false);

    row.find(".transfer_amount").val(0);

    row.find(".tot_blc_amount").val(0);
  }

  calculate_advance_transfer_amount();
});

function calculate_advance_transfer_amount() {
  transfer_amt = 0;

  total_balance_amt = 0;

  $("#advance_trns_list > tbody  > tr").each(function (index, tr) {
    var row = $(this).closest("tr");

    if (row.find(".adv_trans_id_issue_receipt").is(":checked")) {
      transfer_amt +=
        isNaN(row.find(".transfer_amount").val()) ||
        row.find(".transfer_amount").val() == ""
          ? 0
          : parseFloat(row.find(".transfer_amount").val());

      total_balance_amt +=
        isNaN(row.find(".tot_blc_amount").val()) ||
        row.find(".tot_blc_amount").val() == ""
          ? 0
          : parseFloat(row.find(".tot_blc_amount").val());
    }
  });

  $(".total_transfered_amt").html(parseFloat(transfer_amt).toFixed(2));

  $("#total_transfered_amt").val(parseFloat(transfer_amt).toFixed(2));
}

function at_send_otp() {
  my_Date = new Date();

  var mobile = $("#from_cus_mobile").val();

  var send_resend = $("#send_resend").val();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/adtrnssendotp?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    type: "POST",

    data: { mobile: mobile, send_resend: send_resend },

    dataType: "json",

    async: false,

    success: function (data) {
      if (data.status) {
        $("#otp_modal").modal({
          backdrop: "static",

          keyboard: false,
        });

        var fewSeconds = 3;

        $("#resend_advance_transfer_otp").prop("disabled", true);

        timer = setTimeout(function () {
          $("#resend_advance_transfer_otp").prop("disabled", false);
        }, fewSeconds * 1000);
      } else {
        $("#otp_modal").modal({
          backdrop: "static",

          keyboard: false,
        });

        var fewSeconds = 3;

        $("#resend_advance_transfer_otp").prop("disabled", true);

        timer = setTimeout(function () {
          $("#resend_advance_transfer_otp").prop("disabled", false);
        }, fewSeconds * 1000);
      }
    },
  });
}

$(document).on("input", "#adv_trns_otp", function (e) {
  if (this.value.length == 6) {
    $("#verify_advance_transfer_otp").prop("disabled", false);

    $("#adv_trns_otp").val(this.value);
  } else {
    $("#verify_advance_transfer_otp").prop("disabled", true);
  }
});

$("#verify_advance_transfer_otp").on("click", function () {
  verify_advance_transfer_otp();
});

function verify_advance_transfer_otp() {
  var transfered_amount_Details = [];

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/verify_advance_transfer_otp?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    data: { otp: $("#adv_trns_otp").val() },

    type: "POST",

    dataType: "json",

    async: false,

    success: function (data) {
      $(".otp_alert").css("display", "block");

      if (data.status) {
        alert("1");

        $("#adv_trns_otp").prop("disabled", true);

        $("#verify_advance_transfer_otp").prop("disabled", true);

        $(".submit_advance_transfer").prop("disabled", false);

        $(".otp_alert").append('<p style="color:green">' + data.msg + "</p>");

        $("#resend_advance_transfer_otp").prop("disabled", true);

        $("#is_otp_verfied").val(1);

        $("#adv_trans_otp").val($("#adv_trns_otp").val());

        setTimeout(function () {
          $(".otp_alert").css("display", "none");

          $(".otp_alert").empty();
        }, 3000);
      } else {
        $("#verify_advance_transfer_otp").prop("disabled", false);

        $(".submit_advance_transfer").prop("disabled", true);

        $(".otp_alert").append('<p style="color:red">' + data.msg + "</p>");

        $("#is_otp_verfied").val(0);

        setTimeout(function () {
          $(".otp_alert").css("display", "none");

          $(".otp_alert").empty();

          $("#adv_trns_otp").prop("disabled", false);

          $("#resend_advance_transfer_otp").prop("disabled", false);
        }, 3000);

        $("#resend_advance_transfer_otp").prop("disabled", false);
      }
    },

    error: function (error) {
      $(".overlay").css("display", "none");
    },
  });
}

$("#resend_advance_transfer_otp").on("click", function () {
  $("#send_resend").val(1);

  $(".submit_advance_transfer").prop("disabled", true);

  at_send_otp();
});

$("#close").on("click", function () {
  clearTimeout(timer); //clears the previous timer.

  $("#adv_trns_otp").val("");

  $("#resend_advance_transfer_otp").attr("disabled", true);

  $(".submit_advance_transfer").attr("disabled", true);

  $("#submit_advance_transfer").attr("disabled", false);

  $("#is_otp_verfied").val(0);
});

//Advance Transfer

/*Jewel Not Delivered*/

$(document).on("change", ".delivery_status", function () {
  var row = $(this).closest("tr");

  var trid = $(this).closest("tr").attr("id");

  var checked = $(this).is(":checked");

  if (checked) {
    $(this).closest("tr").find(".is_delivered").val(1);
  } else {
    $(this).closest("tr").find(".is_delivered").val(0);
  }

  DeliveryStatusChange(checked, trid);
});

function DeliveryStatusChange(IsChecked, tr_id) {
  console.log("Is", IsChecked);

  console.log("table", tr_id);

  var Delivery_Notchecked = true;

  var t_len = $("#billing_sale_details tbody tr").length;

  $("#billing_sale_details > tbody  > tr").each(function (index, tr) {
    var row = $(this);

    var table_id = $(this).attr("id");

    if (tr_id != table_id) {
      if (row.find(".delivery_status").is(":checked") == true) {
        Delivery_Notchecked = false;
      }

      if (row.find(".delivery_status").is(":checked") == false) {
        Delivery_Notchecked = true;
      }
    }
  });

  if (IsChecked && t_len == 1) {
    $("#is_to_be_no").prop("checked", true);
  }

  if (!IsChecked) {
    $("#is_to_be_yes").prop("checked", true);
  } else if (IsChecked && !Delivery_Notchecked) {
    $("#is_to_be_no").prop("checked", true);
  }

  console.log("Delivery_Notchecked", Delivery_Notchecked);
}

$("#item_delivery_search").on("click", function () {
  get_delivery_list();
});

function get_delivery_list() {
  my_Date = new Date();

  $("div.overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/item_delivery/ajax?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "JSON",

    data: {
      dt_range: $("#dt_range").val(),
      bill_no: $("#filter_bill_no").val(),
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
    },

    type: "POST",

    success: function (data) {
      set_delivery_list(data);

      $("div.overlay").css("display", "none");
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

$("#item_deliver").on("click", function () {
  if ($("input[name='bill_det_id[]']:checked").val()) {
    var selected = [];

    $("#delivery_list tbody tr").each(function (index, value) {
      if ($(value).find("input[name='bill_det_id[]']:checked").is(":checked")) {
        transData = {
          bill_det_id: $(value).find(".bill_det_id").val(),
          id_branch: $(value).find(".id_branch").val(),
        };

        selected.push(transData);
      }
    });

    update_delivery_status(selected);
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Select The Bill No..",
    });
  }
});

function update_delivery_status(req_data) {
  my_Date = new Date();

  $("div.overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/update_delivery_status?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    data: { req_data: req_data },

    type: "POST",

    dataType: "JSON",

    async: false,

    success: function (data) {
      if (data.status) {
        $.toaster({
          priority: "success",
          title: "Warning!",
          message: "" + "</br>" + data.msg,
        });
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>" + data.msg,
        });
      }

      get_delivery_list();

      $("div.overlay").css("display", "none");
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

function set_delivery_list(data) {
  $("div.overlay").css("display", "none");

  var billing = data.list;

  var access = data.access;

  var oTable = $("#delivery_list").DataTable();

  $("#total_billing").text(billing.length);

  if (access.add == "0") {
    $("#add_billing").attr("disabled", "disabled");
  }

  oTable.clear().draw();

  if (billing != null && billing.length > 0) {
    oTable = $("#delivery_list").dataTable({
      bDestroy: true,

      bInfo: true,

      bFilter: true,

      bSort: true,

      order: [[0, "desc"]],

      dom: "lBfrtip",

      buttons: ["excel", "print"],

      tableTools: {
        buttons: [
          { sExtends: "xls", oSelectorOpts: { page: "current" } },
          { sExtends: "pdf", oSelectorOpts: { page: "current" } },
        ],
      },

      aaData: billing,

      aoColumns: [
        {
          mDataProp: function (row, type, val, meta) {
            if (row.is_delivered == 0) {
              chekbox =
                '<input type="checkbox" class="bill_det_id" name="bill_det_id[]" value="' +
                row.bill_det_id +
                '"/><input type="hidden" class="id_branch" value="' +
                row.id_branch +
                '" ><a href=' +
                base_url +
                "index.php/admin_ret_billing/billing_invoice/" +
                row.bill_id +
                ' target="_blank">';

              return chekbox + " " + row.bill_no;
            } else {
              chekbox =
                "<a href=" +
                base_url +
                "index.php/admin_ret_billing/billing_invoice/" +
                row.bill_id +
                ' target="_blank">';

              return chekbox + " " + row.bill_no;
            }
          },
        },

        { mDataProp: "bill_date" },

        { mDataProp: "branch_name" },

        { mDataProp: "cus_name" },

        { mDataProp: "mobile" },

        { mDataProp: "product_name" },

        {
          mDataProp: function (row, type, val, meta) {
            if (row.is_delivered == 0) {
              return '<span class="badge bg-red">Yet to Deliver</span>';
            } else if (row.is_delivered == 2) {
              return '<span class="badge bg-green">Delivered</span>';
            }
          },
        },

        { mDataProp: "delivered_date" },

        { mDataProp: "delivered_by" },
      ],
    });
  }
}

$(document).on("click", "#billing_sale_details a.tag_images", function (e) {
  e.preventDefault();

  id = $(this).data("id");

  $("#edit-id").val(id);

  view_taging_imgs(id);
});

function view_taging_imgs(tag_id) {
  $("#order_images").empty();

  $("#imageModal_tag").modal("show");

  data = [];

  var tag_image1 = base_url + "assets/img/tag/";

  $(".overlay").css("display", "none");

  $.ajax({
    data: { tag_id: tag_id },

    url:
      base_url +
      "index.php/admin_ret_estimation/get_tag_img_by_id?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    dataType: "JSON",

    type: "POST",

    success: function (data) {
      for (i = 0; i < data.length; i++) {
        img_src = data[i].image;

        var preview = $("#order_images");

        var img = tag_image1 + "/" + img_src;

        console.log(img);

        if (img_src) {
          div = document.createElement("div");

          div.setAttribute("class", "col-md-3 images");

          div.setAttribute("id", "order_img_edit_" + [i]);

          $(".images").css("margin-right", "25px");

          key = [i];

          param = img_src;

          console.log(param);

          div.innerHTML +=
            "<div class='form-group'><div class='image-input image-input-outline' id='kt_image_'><div class='image-input-wrapper'><img class='thumbnail' src='" +
            img +
            "'" +
            "style='width: 200px;height: 200px;'/><a href=" +
            img +
            " download=" +
            img_src +
            "></div></div></a>";

          preview.append(div);
        }
      }
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

function DiscountValidationForBill() {
  let returnData = { status: true, max_discount_limit: 0 };

  let total_payment_amount = $.isNumeric($(".sale_amt_with_tax").html())
    ? parseFloat($(".sale_amt_with_tax").html())
    : 0;

  let summary_discount_amt = $.isNumeric($("#summary_discount_amt").val())
    ? parseFloat($("#summary_discount_amt").val())
    : 0;

  total_payment_amount =
    parseFloat(total_payment_amount) + parseFloat(old_discount);

  var dis_amount = 0;

  var total_discount_amount = 0;

  if (total_payment_amount > 0 && summary_discount_amt > 0) {
    $("#billing_sale_details > tbody tr").each(function (idx, row) {
      curRow = $(this);

      var net_wt =
        isNaN(curRow.find(".bill_net_val").val()) ||
        curRow.find(".bill_net_val").val() == ""
          ? 0
          : curRow.find(".bill_net_val").val();

      let rate_field = curRow.find(".rate_field").val();

      var tag_sales_value =
        isNaN(curRow.find(".tag_sales_value").val()) ||
        curRow.find(".tag_sales_value").val() == ""
          ? 0
          : curRow.find(".tag_sales_value").val();

      //var rate_per_grm =  (isNaN($('#'+rate_field).val()) ||$('#'+rate_field).val() == '')  ? 0 : parseFloat($('#'+rate_field).val());

      var rate_per_grm =
        isNaN(curRow.find(".per_grm_amount").val()) ||
        curRow.find(".per_grm_amount").val() == ""
          ? 0
          : curRow.find(".per_grm_amount").val();

      var calculation_type =
        isNaN(curRow.find(".sale_cal_type").val()) ||
        curRow.find(".sale_cal_type").val() == ""
          ? 0
          : curRow.find(".sale_cal_type").val();

      if (calculation_type == 3 || calculation_type == 4) {
        // for Mrp Product
        //dis_amount = parseFloat(tag_sales_value).toFixed(2);
        dis_amount = 0;
      } else {
        dis_amount = parseFloat(
          parseFloat(net_wt) * parseFloat(rate_per_grm)
        ).toFixed(2);
      }

      console.log("dis_amount", dis_amount);

      total_discount_amount += parseFloat(dis_amount);
    });

    let _discount_limit = parseFloat(
      total_payment_amount - total_discount_amount
    ).toFixed(2);
    console.log("_discount_limit", _discount_limit);
    if (parseFloat(summary_discount_amt) <= parseFloat(_discount_limit)) {
      returnData.max_discount_limit = parseFloat(_discount_limit).toFixed(2);

      returnData.status = true;
    } else {
      returnData.max_discount_limit = parseFloat(_discount_limit).toFixed(2);

      returnData.status = false;
    }
  }
  return returnData;
}

function calculate_stone_amount() {
  $("#estimation_stone_item_details > tbody tr").each(function (idx, row) {
    curRow = $(this);

    var stone_amt = 0;

    var stone_pcs =
      isNaN(curRow.find(".stone_pcs").val()) ||
      curRow.find(".stone_pcs").val() == ""
        ? 0
        : curRow.find(".stone_pcs").val();

    var stone_wt =
      isNaN(curRow.find(".stone_wt").val()) ||
      curRow.find(".stone_wt").val() == ""
        ? 0
        : curRow.find(".stone_wt").val();

    var stone_rate =
      isNaN(curRow.find(".rate_per_gram ").val()) ||
      curRow.find(".rate_per_gram ").val() == ""
        ? 0
        : curRow.find(".rate_per_gram ").val();

    var st_rate = 0;

    //stone_amt = parseFloat(parseFloat(stone_wt)*parseFloat(stone_rate)).toFixed(2);

    var stonePrice =
      isNaN(curRow.find(".stone_price").val()) ||
      curRow.find(".stone_price").val() == ""
        ? 0
        : curRow.find(".stone_price").val();

    var stonePrice_focus = curRow.find(".stone_price").is(":focus");

    console.log(curRow.find("input[type=radio]:checked").val());

    if (curRow.find("input[type=radio]:checked").val() == 1) {
      if (stonePrice_focus == true) {
        st_rate = parseFloat(
          parseFloat(stonePrice) / parseFloat(stone_wt)
        ).toFixed(2);
      } else {
        stone_amt = parseFloat(
          parseFloat(stone_wt) * parseFloat(stone_rate)
        ).toFixed(2);
      }
    } else {
      if (stonePrice_focus == true) {
        st_rate = parseFloat(
          parseFloat(stonePrice) / parseFloat(stone_pcs)
        ).toFixed(2);
      } else {
        stone_amt = parseFloat(
          parseFloat(stone_pcs) * parseFloat(stone_rate)
        ).toFixed(2);
      }
    }

    if (stonePrice_focus == true) {
      curRow.find(".stone_price ").val(st_rate);
    } else {
      curRow.find(".stone_price ").val(stone_amt);
    }

    var stone_price = 0;

    var stone_weight = 0;

    $(
      "#stoneModal .modal-body #estimation_stone_item_details> tbody  > tr"
    ).each(function (index, tr) {
      stone_price += parseFloat($(this).find(".stone_price").val());

      stone_weight += parseFloat($(this).find(".stone_wt").val());
    });

    $(".stone_total_amount").html(parseFloat(stone_price).toFixed(2));

    $(".stone_total_weight").html(parseFloat(stone_weight).toFixed(3));
  });
}

$(document).on("change", ".rate_per_gram,.stone_price,.stone_wt", function () {
  var row = $(this).closest("tr");

  check_min_max_stone_rate(row);
});

$(document).on("change", ".stone_cal_type", function () {
  calculate_stone_amount();
});

$("input:radio[name='billing[make_as_advance]']").change(function () {
  if (
    $("input:radio[name='billing[make_as_advance]']:checked").val() == 1 &&
    $(".pay_to_cus").val() > 0
  ) {
    $("#store_as_amt").attr("disabled", false);
    $("#store_as_wt").attr("disabled", false);
  } else {
    $("#store_as_amt").attr("disabled", true);
    $("#store_as_wt").attr("disabled", true);
  }
});

$(document).on("keyup", ".advance_weight", function () {
  var curRow = $(this).closest("tr");
  let act_wt = curRow.find(".actual_wt").val();
  let changed_wt = curRow.find(".advance_weight").val();
  let rate_calc = curRow.find(".rate_calc").val();
  let adv_amt = curRow.find(".advance_amount").html();
  let gold_rate = $("#goldrate_22ct").val();
  let silver_rate = $("#silverrate_1gm").val();

  if (parseFloat(act_wt) < parseFloat(changed_wt)) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Given Weight is Exceed",
    });
    curRow.find(".advance_weight").val("");
    curRow.find(".advance_weight").val(act_wt).trigger("keyup");
  } else {
    if (rate_calc == 1) {
      let changedRate = parseFloat(changed_wt * gold_rate).toFixed(2);
      curRow.find(".adj_amount").val(changedRate);
    } else if (rate_calc == 2) {
      let changedRate = parseFloat(changed_wt * silver_rate).toFixed(2);
      curRow.find(".adj_amount").val(changedRate);
    }
  }

  if (parseFloat(act_wt) > parseFloat(changed_wt)) {
    if (rate_calc == 1) {
      let adj_amt = parseFloat((act_wt - changed_wt) * gold_rate).toFixed(2);
      curRow.find(".blc_amount").val(adj_amt);
    } else if (rate_calc == 2) {
      let adj_amt = parseFloat((act_wt - changed_wt) * silver_rate).toFixed(2);
      curRow.find(".blc_amount").val(adj_amt);
    }
  } else {
    curRow.find(".blc_amount").val("");
  }
});

//Pincode Wise Area

/* $('.add_new_village').on('click', function () {
	if ($('#pin_code_add').val().length == 6) {
		$('#confirm-area').modal('show');
		var pin_code = $('#pin_code_add').val();
		$('#new_pincode').val(pin_code);
	}else {
		$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>" + 'Enter Valid Pin Code' });

	}
}); */

/* $('#add_new_area').click(function (event) {
	if ($('#village').val() == '' || $('#village').val() == null) {
		$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>" + 'Enter the Village..' });
		return false;
	}
	else if ($('#new_pincode').val() == '') {
		$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>" + 'Enter the Pincode..' });
		return false;
	}
	else if ($('#new_pincode').val() != '' && ($('#new_pincode').val().length != 6)) {
		$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>" + 'Enter the Valid Pincode..' });
		return false;
	}

	add_new_village($('#village').val(), $('#new_pincode').val());
	$('#village').val('');
	$('#new_pincode').val('');

}); */

function add_new_village_old(village, pincode) {
  my_Date = new Date();
  $("div.overlay").css("display", "block");
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/get_village?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),
    data: { village_name: village, pincode: pincode },
    type: "POST",
    dataType: "JSON",
    async: false,
    success: function (data) {
      console.log(data);
      if (data.status) {
        var ins_id = data.ins_id;
        // $('#pin_code_add').val(pincode);
        var newVillage = village;
        var $newOption = $("<option>", {
          value: ins_id,
          text: newVillage,
        });

        $.toaster({
          priority: "success",
          title: "Success!",
          message: "" + "</br>" + data.message,
        });

        // $('#sel_village').append($newOption);

        if (ins_id != "") {
          $("#id_village").val(ins_id);
        }
        // $('#sel_village').select2("val",(ins_id!='' ? ins_id: ''));

        // $('#sel_village').val(ins_id).trigger('change');
        $("#confirm-area").modal("hide");
        $("div.overlay").css("display", "none");
        if ($("#pin_code_add").val().length == 6) {
          get_villages_by_pincode($("#pin_code_add").val());
        }
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>" + data.message,
        });
      }
    },
    error: function (error) {
      console.log(error);
      $("div.overlay").css("display", "none");
    },
  });
}

/* $(document).on('keyup', '#pin_code_add', function () {


	if ($("#pin_code_add").val().length == 6) {
		get_villages_by_pincode($("#pin_code_add").val())

	}else{
		$('#id_village').val('');
		$('#sel_village').select2("val",'');
		$('#sel_village option').remove();

	}
}); */

function get_villages_by_pincode_old(pincode) {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/get_village_by_pincode?nocache=" +
      my_Date.getUTCSeconds(),
    dataType: "json",
    type: "POST",
    data: { pin_code: pincode },
    success: function (data) {
      if (data.length > 0) {
        var id_village = $("#id_village").val();
        $("#sel_village option").remove();

        $("#sel_village").select2({
          placeholder: "Select Area",
          allowClear: true,
        });
        $.each(data, function (key, item) {
          $("#sel_village").append(
            $("<option></option>")
              .attr("value", item.id_village)
              .text(item.village_name)
          );
        });

        if ($("#sel_village").length > 0) {
          $("#sel_village").select2("val", id_village != "" ? id_village : "");
        }

        if (id_village != "") {
          $("#sel_village").select2("val", id_village != "" ? id_village : "");
        }

        $("body").on("hidden.bs.modal", function () {
          // to use multiple model in one page
          if ($(".modal.in").length > 0) {
            $("body").addClass("modal-open");
          }
        });
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>" + "No Area Found For this Pincode",
        });
        $("#sel_village option").remove();
        // $('#ed_sel_village option').remove();

        $("#id_village").val("");
        $("#ed_id_village").val("");

        $("#sel_village,#ed_sel_village").select2({
          placeholder: "Select Area",
          allowClear: true,
        });
      }
    },
  });
}

$(".new_village_close,.add_new_area").on("click", function () {
  $("body").on("hidden.bs.modal", function () {
    // to use multiple model in one page
    if ($(".modal.in").length > 0) {
      $("body").addClass("modal-open");
    }
  });
});

function getLooseStoneProductRateSettings() {
  $.ajax({
    type: "GET",
    url:
      base_url + "index.php/admin_ret_catalog/getLooseStoneProductRateSettings",
    dataType: "json",
    success: function (data) {
      loose_product_rate = data;
      $(".overlay").css("display", "none");
    },
  });
}

//Order delievery otp starts

$(".submit_order_delievery").on("click", function () {
  if ($("#otp_required").val() == 1 && $("#is_otp_verfied").val() != 1) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>OTP is Not Verified Yet..",
    });

    return false;
  } else {
    $("#pay_submit").trigger("click");
  }
});

function order_at_send_otp() {
  my_Date = new Date();

  var mobile = $("#from_cus_mobile").val();

  var send_resend = $("#send_resend").val();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/order_delievery_sendotp?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    type: "POST",

    data: { mobile: mobile, send_resend: send_resend },

    dataType: "json",

    async: false,

    success: function (data) {
      if (data.status) {
        $("#order_otp_modal").modal({
          backdrop: "static",

          keyboard: false,
        });

        var fewSeconds = 3;

        $("#resend_order_otp").prop("disabled", true);

        timer = setTimeout(function () {
          $("#resend_order_otp").prop("disabled", false);
        }, fewSeconds * 1000);
      } else {
        $("#order_otp_modal").modal({
          backdrop: "static",

          keyboard: false,
        });

        var fewSeconds = 3;

        $("#resend_order_otp").prop("disabled", true);

        timer = setTimeout(function () {
          $("#resend_order_otp").prop("disabled", false);
        }, fewSeconds * 1000);
      }
    },
  });
}

$(document).on("input", "#order_trns_otp", function (e) {
  if (this.value.length == 6) {
    $("#verify_order_otp").prop("disabled", false);

    $("#order_trns_otp").val(this.value);
  } else {
    $("#verify_order_otp").prop("disabled", true);
  }
});

$("#verify_order_otp").on("click", function () {
  order_verify_order_otp();
});

function order_verify_order_otp() {
  var transfered_amount_Details = [];

  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/order_delievery_verify_otp?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    data: { otp: $("#order_trns_otp").val() },

    type: "POST",

    dataType: "json",

    async: false,

    success: function (data) {
      $(".otp_alert").css("display", "block");

      if (data.status) {
        // alert("1");

        $("#order_trns_otp").prop("disabled", true);

        $("#verify_order_otp").prop("disabled", true);

        $(".submit_order_delievery").prop("disabled", false);

        $(".otp_alert").append('<p style="color:green">' + data.msg + "</p>");

        $("#resend_order_otp").prop("disabled", true);

        $("#is_otp_verfied").val(1);

        // $('#adv_trans_otp').val($('#order_trns_otp').val());

        setTimeout(function () {
          $(".otp_alert").css("display", "none");

          $(".otp_alert").empty();
        }, 3000);
      } else {
        $("#verify_order_otp").prop("disabled", false);

        $(".submit_order_delievery").prop("disabled", true);

        $(".otp_alert").append('<p style="color:red">' + data.msg + "</p>");

        $("#is_otp_verfied").val(0);

        setTimeout(function () {
          $(".otp_alert").css("display", "none");

          $(".otp_alert").empty();

          $("#order_trns_otp").prop("disabled", false);

          $("#resend_order_otp").prop("disabled", false);
        }, 3000);

        $("#resend_order_otp").prop("disabled", false);
      }
    },

    error: function (error) {
      $(".overlay").css("display", "none");
    },
  });
}

$("#resend_order_otp").on("click", function () {
  $("#send_resend").val(1);

  $("#order_trns_otp").val("");

  $(".submit_order_delievery").prop("disabled", true);

  order_at_send_otp();
});

$("#close").on("click", function () {
  clearTimeout(timer); //clears the previous timer.

  $("#order_trns_otp").val("");

  $("#resend_order_otp").attr("disabled", true);

  $(".submit_order_delievery").attr("disabled", true);

  $("#is_otp_verfied").val(0);
});
//Order delievery otp ends

//Purchase entry in billing form
$(document).on("click", ".purchase_add", function (e) {
  create_new_oldmetal_row({}, e);
});

$(document).on("keypress", ".purchase_add", function (e) {
  if (e.which === 13) {
    create_new_oldmetal_row({}, e);
  }
});

function create_new_oldmetal_row(data = {}, event) {
  event.preventDefault();
  console.log(data);
  let id_metal = data.hasOwnProperty("id_category") ? data.id_category : "";
  let piece = data.hasOwnProperty("piece") ? data.piece : "";
  let gross_wt = data.hasOwnProperty("gross_wt") ? data.gross_wt : "";
  let dust_wt = data.hasOwnProperty("dust_wt") ? data.dust_wt : "";
  let stone_wt = data.hasOwnProperty("stone_wt") ? data.stone_wt : "";
  let wastage_percent = data.hasOwnProperty("wastage_percent")
    ? data.wastage_percent
    : "";
  let wastage_wt = data.hasOwnProperty("wastage_wt") ? data.wastage_wt : "";
  let net_wt = data.hasOwnProperty("net_wt") ? data.net_wt : "";
  let rate_per_gram = data.hasOwnProperty("rate_per_gram")
    ? data.rate_per_gram
    : "";
  let purity = data.hasOwnProperty("purity") ? data.purity : "";
  let purpose = data.hasOwnProperty("purpose") ? data.purpose : "";
  let amount = data.hasOwnProperty("amount") ? data.amount : "";
  let old_metal_sale_id = data.hasOwnProperty("old_metal_sale_id")
    ? data.old_metal_sale_id
    : "";
  let est_id = data.hasOwnProperty("est_id") ? data.est_id : "";
  let esti_no = data.hasOwnProperty("esti_no") ? data.esti_no : "";
  let stone_details = [];

  let other_stone_wt = 0;
  let other_stone_price = 0;
  if (data.hasOwnProperty("stone_details")) {
    $.each(data.stone_details, function (key, item) {
      stone_details.push({
        est_old_metal_stone_id: item.est_old_metal_stone_id,
        stone_id: item.stone_id,
        stone_pcs: item.pieces,
        stone_wt: item.wt,
        stone_price: item.price,
      });
      other_stone_wt += parseFloat(item.wt);
      other_stone_price += parseFloat(item.price);
    });
  }
  var matelTupes = "<option value=''>- Select Metal-</option>";
  matel_types = [
    { id_metal: 1, metal: "Gold" },
    { id_metal: 2, metal: "Silver" },
    { id_metal: 3, metal: "Platinum" },
  ];
  $.each(matel_types, function (mkey, mitem) {
    matelTupes +=
      "<option " +
      (mitem.id_metal == id_metal ? "selected" : "") +
      " value='" +
      mitem.id_metal +
      "'>" +
      mitem.metal +
      "</option>";
  });
  var metal_types = "<option value=''>- Select Metal Type-</option>";
  var old_metal_cat = "<option value=''>- Select -</option>";
  var row = "";
  var a = $("#oldMRow").val();
  var i = ++a;
  $("#oldMRow").val(i);
  row +=
    "<tr id=oldM" +
    i +
    ">" +
    '<td><select class="form-control pur_metal_type"  name="purchase[metal_type][]" style="width: 100px;" >' +
    matelTupes +
    "</select></td>" +
    '<td><select class="form-control old_metal_type"  name="purchase[id_old_metal_type][]" style="width: 100px;" >' +
    metal_types +
    "</select></td>" +
    '<td><select class="form-control old_metal_category"  name="purchase[id_old_metal_category][]" style="width: 100px;" >' +
    old_metal_cat +
    "</select></td>" +
    '<td><input type="number" class="form-control purity" name="purchase[purity][]"  style="width: 86px;" value="' +
    purity +
    '" /></td>' +
    '<td><input type="number" class="form-control pur_piece" name="purchase[piece][]" style="width: 100px;" value="' +
    piece +
    '" /></td>' +
    '<td><input type="number" class="form-control pur_gross_val" name="purchase[gross][]"  style="width: 86px;" value="' +
    gross_wt +
    '" /></td>' +
    '<td><input class="form-control est_old_dust_val" type="number" name="purchase[dust_wt][]"  style="width: 86px;" value="' +
    dust_wt +
    '" /></td>' +
    '<td><input type="number" readonly class="form-control old_swt" name="purchase[stone_wt][]"  style="width: 86px;" value="' +
    stone_wt +
    '" /></td>' +
    '<td><input class="form-control pur_wastage" type="number" name="purchase[wastage][]" step="any"  style="width: 86px;" value="' +
    wastage_percent +
    '" /></td>' +
    '<td><input class="form-control pur_wastage_wt" type="number" name="purchase[wastage_wt][]" step="any"  style="width: 86px;"  value="' +
    wastage_wt +
    '" /></td>' +
    '<td><input class="form-control pur_net_val" type="number" name="purchase[net][]" step="any"  style="width: 86px;"  value="' +
    net_wt +
    '" readonly/></td>' +
    '<td><input type="number" class="form-control bill_rate_per_grm" name="purchase[rate_per_grm][]"  style="width: 100px;" value="' +
    rate_per_gram +
    '"  /></td>' +
    '<td><input type="number" class="form-control old_touch" name="purchase[touch][]"  style="width: 100px;" value="' +
    100 +
    '"  /></td>' +
    '<td style="display:none"><a href="#" onClick="show_oldmetal_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a></td>' +
    '<td><a href="#" onclick="create_new_empty_est_old_metal_stone($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a></td>' +
    '<td><select name="purchase[id_purpose][] class="form-control id_purpose"><option  ' +
    (purpose == 1 ? "selected" : "") +
    ' value="1">Cash</option><option  ' +
    (purpose == 2 ? "selected" : "") +
    ' value="2" selected>Exchange</option></select></td>' +
    '<td><textarea class="form-control old_metal_remarks" style="width:217px;height:35px;" name="purchase[remark][]" placeholder="Enter Remarks" rows="5" cols="20" value=""></textarea></td>' +
    '<td><input class="form-control bill_amount" type="number" name="purchase[billamount][]"  value="' +
    amount +
    '" style="width: 100px;"/><input type="hidden" class="item_type" name="purchase[itemtype][]" value="2" /><input type="hidden" name="purchase[est_itm_id][]" class="est_itm_id" value="' +
    old_metal_sale_id +
    '" /><input type="hidden" class="est_old_itm_id" name="purchase[est_old_itm_id][]"  value="' +
    old_metal_sale_id +
    '" /><input type="hidden" class="stone_details" name="purchase[stone_details][]" value=' +
    JSON.stringify(stone_details) +
    ' /><input type="hidden" class="other_stone_price"  value="' +
    other_stone_price +
    '" /><input type="hidden" class="other_stone_wt" /><input type="hidden" class="bill_material_price" value="' +
    other_stone_wt +
    '" /><input type="hidden" class="pur_est_id" name="purchase[estid][]" value="' +
    est_id +
    '" /><input type="hidden" class="pur_esti_no" name="purchase[esti_no][]" value="' +
    esti_no +
    '" /><input type="hidden" class="is_est_details" value="1" name="purchase[is_est_details][]" /></td>' +
    '<td><button  type="button" onClick="remove_row($(this).closest(\'tr\'));" style="margin-bottom: 2px;" class="btn btn-danger del-btn"><i class="fa fa-trash"></i></button> <button type="button" onClick="create_new_oldmetal_row({},event)" class="btn btn-success add-btn"><i class="fa fa-plus"></i></button></td>' +
    "</tr>";
  $("#purchase_item_details tbody").append(row);
  let last_row = $("#purchase_item_details tbody tr:last");
  calculateOldMatelItemSaleValue(last_row);
  setTabIndex();
}

function calculateOldMatelItemSaleValue(curRow) {
  let tot_stone_wt = 0;
  let stone_price = 0;
  var stone_details = curRow.find(".stone_details").val()
    ? curRow.find(".stone_details").val()
    : "";
  if (stone_details != "" && stone_details !== undefined) {
    var st_details = JSON.parse(stone_details);
    if (st_details.length > 0) {
      $.each(st_details, function (pkey, pitem) {
        $.each(uom_details, function (key, item) {
          if (item.uom_id == pitem.stone_uom_id) {
            if (pitem.show_in_lwt == 1) {
              if (
                item.uom_short_code == "CT" &&
                item.divided_by_value != null &&
                item.divided_by_value != ""
              ) {
                //For Carat Need to convert into gram
                stone_wt = parseFloat(
                  parseFloat(pitem.stone_wt) / parseFloat(item.divided_by_value)
                );
              } else {
                stone_wt = pitem.stone_wt;
              }
              tot_stone_wt += parseFloat(stone_wt);
            }
            stone_price += parseFloat(pitem.stone_price);
          }
        });
      });
    }
  }

  tot_stone_wt = parseFloat(tot_stone_wt).toFixed(3);
  curRow.find(".old_swt").val(tot_stone_wt);
  curRow.find(".other_stone_price").val(stone_price);
  validate_oldmetal_weight(curRow);
  var gross_wt =
    isNaN(curRow.find(".pur_gross_val").val()) ||
    curRow.find(".pur_gross_val").val() == ""
      ? 0
      : curRow.find(".pur_gross_val").val();
  var dust_wt =
    isNaN(curRow.find(".est_old_dust_val").val()) ||
    curRow.find(".est_old_dust_val").val() == ""
      ? 0
      : curRow.find(".est_old_dust_val").val();
  var stone_wt =
    isNaN(curRow.find(".old_swt").val()) || curRow.find(".old_swt").val() == ""
      ? 0
      : curRow.find(".old_swt").val();
  var other_stone_wt =
    isNaN(curRow.find(".other_stone_wt").val()) ||
    curRow.find(".other_stone_wt").val() == ""
      ? 0
      : curRow.find(".other_stone_wt").val();
  var other_stone_price =
    isNaN(curRow.find(".other_stone_price").val()) ||
    curRow.find(".other_stone_price").val() == ""
      ? 0
      : curRow.find(".other_stone_price").val();
  var touch =
    isNaN(curRow.find(".old_touch").val()) ||
    curRow.find(".old_touch").val() == "" ||
    curRow.find(".old_touch").val() > 100
      ? 100
      : curRow.find(".old_touch").val();
  var purity =
    isNaN(curRow.find(".old_purity").val()) ||
    curRow.find(".old_purity").val() == "" ||
    curRow.find(".old_purity").val() > 100
      ? 0
      : curRow.find(".old_purity").val();
  var total_price = 0;
  var tax_rate = 0;
  var rate_per_grm =
    isNaN(curRow.find(".bill_rate_per_grm").val()) ||
    curRow.find(".bill_rate_per_grm").val() == ""
      ? 0
      : curRow.find(".bill_rate_per_grm").val();
  var cal_weight =
    isNaN(curRow.find(".pur_wastage_wt").val()) ||
    curRow.find(".pur_wastage_wt").val() == ""
      ? 0
      : curRow.find(".pur_wastage_wt").val();
  var wastage =
    isNaN(curRow.find(".pur_wastage").val()) ||
    curRow.find(".pur_wastage").val() == ""
      ? 0
      : curRow.find(".pur_wastage").val();
  var net_wt =
    isNaN(curRow.find(".pur_net_val").val()) ||
    curRow.find(".pur_net_val").val() == ""
      ? 0
      : curRow.find(".pur_net_val").val();
  var net_weight = parseFloat(
    parseFloat(gross_wt) -
      parseFloat(dust_wt) -
      parseFloat(other_stone_wt) -
      parseFloat(cal_weight)
  ).toFixed(3);
  curRow.find(".old_nwt").val(net_weight);
  //total_price =parseFloat(parseFloat(net_weight)*parseFloat(rate_per_grm));
  total_price = parseFloat(
    parseFloat((parseFloat(net_weight) * parseFloat(touch)) / 100) *
      parseFloat(rate_per_grm)
  ).toFixed(2);
  total_price = Math.round(
    parseFloat(total_price) + parseFloat(other_stone_price)
  );
  $(".summary_sale_amt").html(total_price);
  curRow.find(".bill_amount").val(parseFloat(total_price).toFixed(2));
  calculate_purchase_details();
  calculate_sales_details();
  console.log("total_price:" + total_price);
  console.log("rate_per_grm:" + rate_per_grm);
  console.log("tot_wastage:" + wastage);
  console.log("cal_weight:" + cal_weight);
  console.log("net_wt:" + net_weight);
  console.log("other_stone_wt:" + other_stone_wt);
  console.log("--------------");
}

/* function calculateOldMatelItemSaleValue(curRow){
	let gross_wt = (isNaN(curRow.find('.pur_gross_val').val()) || curRow.find('.pur_gross_val').val() == '')  ? 0 : curRow.find('.pur_gross_val').val();
	let dust_wt  = (isNaN(curRow.find('.est_old_dust_val').val()) || curRow.find('.est_old_dust_val').val() == '')  ? 0 : curRow.find('.est_old_dust_val').val();
	let stone_wt  = (isNaN(curRow.find('.est_old_stone_val').val()) || curRow.find('.est_old_stone_val').val() == '')  ? 0 : curRow.find('.est_old_stone_val').val();
	let other_stone_wt  = (isNaN(curRow.find('.other_stone_wt').val()) || curRow.find('.other_stone_wt').val() == '')  ? 0 : curRow.find('.other_stone_wt').val();
	let other_stone_price  = (isNaN(curRow.find('.other_stone_price').val()) || curRow.find('.other_stone_price').val() == '')  ? 0 : curRow.find('.other_stone_price').val();
	let total_price = (isNaN(curRow.find('.bill_amount').val()) || curRow.find('.bill_amount').val() == '')  ? 0 : curRow.find('.bill_amount').val();
	let tax_rate = 0;
	let rate_per_grm = (isNaN(curRow.find('.bill_rate_per_grm').val()) || curRow.find('.bill_rate_per_grm').val() == '')  ? 0 : curRow.find('.bill_rate_per_grm').val();
	let cal_weight = (isNaN(curRow.find('.pur_wastage_wt').val()) || curRow.find('.pur_wastage_wt').val() == '')  ? 0 : curRow.find('.pur_wastage_wt').val();
	let wastage = (isNaN(curRow.find('.pur_wastage').val()) || curRow.find('.pur_wastage').val() == '')  ? 0 : curRow.find('.pur_wastage').val();
	net_weight = parseFloat(parseFloat(gross_wt) -parseFloat(dust_wt)-parseFloat(stone_wt)-parseFloat(other_stone_wt)-parseFloat(cal_weight)).toFixed(3);
	curRow.find('.pur_net_val').val(net_weight);
	let net_wt = (isNaN(curRow.find('.pur_net_val').val()) || curRow.find('.pur_net_val').val() == '')  ? 0 : curRow.find('.pur_net_val').val();
	total_price =parseFloat(parseFloat(net_wt)*parseFloat(rate_per_grm));
	//total_price =Math.round(parseFloat(total_price)+parseFloat(other_stone_price));
	curRow.find('.bill_amount').val(parseFloat(total_price).toFixed(2));
	//rate_per_grm=parseFloat(total_price)/parseFloat(net_wt);
	curRow.find('.bill_rate_per_grm').val(parseFloat(rate_per_grm).toFixed(2));
	calculateSaleBillRowTotal();
} */

/*Non-Tag Product , Design Dropdown*/

function validate_oldmetal_weight(row) {
  var gross_wt =
    isNaN(row.find(".pur_gross_val").val()) ||
    row.find(".pur_gross_val").val() == ""
      ? 0
      : row.find(".pur_gross_val").val();

  var dust_wt =
    isNaN(row.find(".est_old_dust_val").val()) ||
    row.find(".est_old_dust_val").val() == ""
      ? 0
      : row.find(".est_old_dust_val").val();

  var stone_wt =
    isNaN(row.find(".old_swt").val()) || row.find(".old_swt").val() == ""
      ? 0
      : row.find(".old_swt").val();

  var old_wastage =
    isNaN(row.find(".pur_wastage_wt").val()) ||
    row.find(".pur_wastage_wt").val() == ""
      ? 0
      : row.find(".pur_wastage_wt").val();

  var wastage_wt = 0;

  var other_stone_wt =
    isNaN(row.find(".stone_wt").val()) || row.find(".stone_wt").val() == ""
      ? 0
      : row.find(".stone_wt").val();

  var net_wt = parseFloat(
    parseFloat(gross_wt) -
      (parseFloat(dust_wt) +
        parseFloat(stone_wt) +
        parseFloat(other_stone_wt) +
        parseFloat(wastage_wt))
  ).toFixed(3);

  // Condition to check whether Dust wt is greater than Gwt

  if (parseFloat(dust_wt) > parseFloat(gross_wt)) {
    row.find(".est_old_dust_val").val(0);

    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Entered Dust WT is greater than Gwt",
    });

    row.find(".est_old_dust_val").focus();
  }

  // Condition to check whether Stone wt is greater than Gwt
  else if (parseFloat(stone_wt) > parseFloat(gross_wt)) {
    row.find(".old_swt").val(0);

    row.find(".stone_details").val("");

    row.find(".stone_price").val(0);

    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Entered Stone WT is greater than Gwt",
    });

    row.find(".old_swt").focus();
  }

  // Condition to check whether Dust wt and Stone Wt is greater than Gwt
  else if (parseFloat(stone_wt) + parseFloat(dust_wt) > parseFloat(gross_wt)) {
    row.find(".old_swt").val(0);

    row.find(".stone_details").val("");

    row.find(".stone_price").val(0);

    row.find(".old_dwt").val(0);

    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Entered Dust WT & Stone WT is greater than Gwt",
    });

    row.find(".old_dwt").focus();

    row.find(".old_nwt").val(gross_wt);
  } else {
    wastage_wt = parseFloat(net_wt * (old_wastage / 100)).toFixed(3);

    net_wt = parseFloat(
      parseFloat(gross_wt) -
        parseFloat(dust_wt) -
        parseFloat(stone_wt) -
        parseFloat(other_stone_wt) -
        parseFloat(wastage_wt)
    ).toFixed(3);

    row.find(".old_wastage_wt").val(wastage_wt);

    row.find(".old_nwt").val(net_wt);
  }
}

function validateOldMatelDetailRow() {
  var row_validate = true;
  /*$('#purchase_item_details > tbody  > tr').each(function(index, tr) {
		if($(this).find('.old_item_type').val() == "" || $(this).find('.old_id_category').val() == "" || $(this).find('.old_metal_category').val() == "" || $(this).find('.old_gwt').val() == "" || $(this).find('.old_pcs').val() == "" || $(this).find('.old_metal_type').val() == "" || $(this).find('.old_purity').val() == "" ){
			row_validate = false;
		}
	});*/
  return row_validate;
}
$(document).on("change", ".bill_rate_per_grm,.old_touch", function (e) {
  var row = $(this).closest("tr");
  calculateOldMatelItemSaleValue(row);
});
$(document).on(
  "change",
  ".pur_gross_val, .est_old_dust_val,.est_old_stone_val,.pur_wastage",
  function (e) {
    var row = $(this).closest("tr");

    var gross_wt =
      isNaN(row.find(".pur_gross_val").val()) ||
      row.find(".pur_gross_val").val() == ""
        ? 0
        : row.find(".pur_gross_val").val();

    var dust_wt =
      isNaN(row.find(".est_old_dust_val").val()) ||
      row.find(".est_old_dust_val").val() == ""
        ? 0
        : row.find(".est_old_dust_val").val();

    var stone_wt =
      isNaN(row.find(".est_old_stone_val").val()) ||
      row.find(".est_old_stone_val").val() == ""
        ? 0
        : row.find(".est_old_stone_val").val();

    var old_wastage =
      isNaN(row.find(".pur_wastage").val()) ||
      row.find(".pur_wastage").val() == ""
        ? 0
        : row.find(".pur_wastage").val();

    var wastage_wt = 0;

    var other_stone_wt =
      isNaN(row.find(".est_old_stone_val").val()) ||
      row.find(".est_old_stone_val").val() == ""
        ? 0
        : row.find(".est_old_stone_val").val();

    var net_wt = parseFloat(
      parseFloat(gross_wt) -
        (parseFloat(dust_wt) +
          parseFloat(stone_wt) +
          parseFloat(other_stone_wt) +
          parseFloat(wastage_wt))
    ).toFixed(3);

    // Condition to check whether Dust wt is greater than Gwt

    if (parseFloat(this.value) > 100) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Please Enter Valid Wastage Percent",
      });
      row.find(".pur_wastage").val("");
      row.find(".pur_wastage").focus();
    } else if (parseFloat(dust_wt) > parseFloat(gross_wt)) {
      row.find(".est_old_dust_val").val("");

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Entered Dust WT is greater than Gwt",
      });

      row.find(".est_old_dust_val").focus();
    } else if (parseFloat(stone_wt) > parseFloat(gross_wt)) {
      row.find(".est_old_stone_val").val("");

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Entered Stone WT is greater than Gwt",
      });

      row.find(".est_old_stone_val").focus();
    } else if (
      parseFloat(stone_wt) + parseFloat(dust_wt) >
      parseFloat(gross_wt)
    ) {
      row.find(".est_old_dust_val").val("");

      row.find(".est_old_stone_val").val("");

      $.toaster({
        priority: "danger",
        title: "Warning!",
        message:
          "" + "</br>" + "Entered Dust WT & Stone WT is greater than Gwt",
      });

      row.find(".est_old_dust_val").focus();

      row.find(".pur_net_val").val(gross_wt);

      calculateOldMatelItemSaleValue(row);
    } else {
      wastage_wt = parseFloat(net_wt * (old_wastage / 100)).toFixed(3);

      net_wt = parseFloat(
        parseFloat(gross_wt) -
          parseFloat(dust_wt) -
          parseFloat(stone_wt) -
          parseFloat(other_stone_wt) -
          parseFloat(wastage_wt)
      ).toFixed(3);

      row.find(".pur_wastage_wt").val(wastage_wt);

      row.find(".pur_net_val").val(net_wt);

      calculateOldMatelItemSaleValue(row);
    }
  }
);

$(document).on("change", ".old_wastage_wt", function (e) {
  var row = $(this).closest("tr");
  var gross_wt =
    isNaN(row.find(".pur_gross_val").val()) ||
    row.find(".pur_gross_val").val() == ""
      ? 0
      : row.find(".pur_gross_val").val();
  var dust_wt =
    isNaN(row.find(".est_old_dust_val").val()) ||
    row.find(".est_old_dust_val").val() == ""
      ? 0
      : row.find(".est_old_dust_val").val();
  var stone_wt =
    isNaN(row.find(".est_old_stone_val").val()) ||
    row.find(".est_old_stone_val").val() == ""
      ? 0
      : row.find(".est_old_stone_val").val();
  //var old_wastage  = (isNaN(row.find('.pur_wastage').val()) || row.find('.pur_wastage').val() == '')  ? 0 : row.find('.pur_wastage').val();
  var old_wastage_wt = 0;
  var other_stone_wt =
    isNaN(row.find(".est_old_stone_val").val()) ||
    row.find(".est_old_stone_val").val() == ""
      ? 0
      : row.find(".est_old_stone_val").val();
  var pur_net_val =
    isNaN(row.find(".pur_net_val").val()) ||
    row.find(".pur_net_val").val() == ""
      ? 0
      : row.find(".pur_net_val").val();
  var net_wt = parseFloat(
    parseFloat(gross_wt) -
      (parseFloat(dust_wt) +
        parseFloat(stone_wt) +
        parseFloat(other_stone_wt) +
        parseFloat(old_wastage_wt))
  ).toFixed(3);
  var wsatage_per =
    (parseFloat(old_wastage_wt) * 100) /
    parseFloat(row.find(".pur_net_val").val());
  row.find(".pur_net_val").val(net_wt);
  row.find(".pur_wastage").val(wsatage_per);
  calculateOldMatelItemSaleValue(row);
});
old_metal_rate = [];
old_metal_category = [];
old_metal_types = [];
function get_all_old_metal_rates() {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/get_all_old_metal_rates?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),
    type: "POST",
    dataType: "JSON",
    success: function (data) {
      old_metal_rate = data;
    },
    error: function (error) {},
  });
}
function get_old_metal_categories() {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/get_old_metal_category?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),
    type: "POST",
    dataType: "JSON",
    success: function (data) {
      old_metal_category = data;
    },
    error: function (error) {},
  });
}
$(document).on("change", ".pur_metal_type", function (e) {
  var row = $(this).closest("tr");
  row.find(".old_metal_type option:gt(0)").remove();
  row.find(".old_metal_category option:gt(0)").remove();
  row.find(".old_rate").val("");
  if (this.value > 0) get_old_metal_type(this.value, row);
});
function get_old_metal_type(id_metal, curRow) {
  $(".overlay").css("display", "block");
  $.ajax({
    type: "POST",
    url: base_url + "index.php/admin_ret_estimation/get_old_metal_type",
    dataType: "json",
    data: { id_metal: id_metal },
    success: function (data) {
      var metal_type = "";
      $.each(data, function (pkey, pitem) {
        let selected = pitem.id_metal_type == 1 ? "selected" : "";
        metal_type +=
          "<option " +
          selected +
          " value='" +
          pitem.id_metal_type +
          "'>" +
          pitem.metal_type +
          "</option>";
      });
      curRow.find(".old_metal_type").append(metal_type);
      $(".overlay").css("display", "none");
    },
  });

  load_old_metal_type(curRow, 1);
}
$(document).on("change", ".old_metal_type", function (e) {
  var row = $(this).closest("tr");

  var id_old_metal = this.value;

  load_old_metal_type(row, id_old_metal);
});

function load_old_metal_type(row, id_old_metal) {
  row.find(".old_metal_category option:gt(0)").remove();
  row.find(".old_rate").val("");
  if (id_old_metal > 0) {
    var metal_cat = "";
    $.each(old_metal_category, function (pkey, pitem) {
      if (pitem.id_old_metal_type == id_old_metal) {
        metal_cat +=
          "<option value='" +
          pitem.id_old_metal_cat +
          "'>" +
          pitem.old_metal_cat +
          "</option>";
      }
    });
    row.find(".old_metal_category").append(metal_cat);
  }
}

$(document).on("change", ".old_metal_category", function (e) {
  var row = $(this).closest("tr");
  row.find(".bill_rate_per_grm").val("");
  var id_old_metal_cat = this.value;
  var id_old_metal = row.find(".old_metal_type").val();
  var id_metal = row.find(".pur_metal_type").val();
  var old_metal_rate_type = $("#old_metal_rate_type").val(); //1-Old metal rate ,2-Current Board Rate
  if (id_old_metal_cat > 0 && id_old_metal > 0 && id_metal > 0) {
    let metal_perc = 0;
    let metal_rate = 0;
    let metal_discount = 0;
    $.each(old_metal_category, function (catkey, catitem) {
      if (catitem.id_old_metal_type == id_old_metal) {
        if (catitem.id_old_metal_cat == id_old_metal_cat) {
          metal_perc = catitem.old_metal_perc;
          metal_discount = catitem.old_metal_discount;
          return;
        }
      }
    });
    $.each(old_metal_rate, function (orkey, oritem) {
      if (oritem.id_metal == id_metal) {
        metal_rate = oritem.rate;
      }
    });
    metal_rate =
      parseFloat(metal_rate - metal_discount) - (metal_rate * metal_perc) / 100;

    if (old_metal_rate_type == 1) {
      row.find(".bill_rate_per_grm").val(metal_rate);
    } else {
      if (id_metal == 1) {
        old_rate =
          isNaN($("#goldrate_22ct").val()) || $("#goldrate_22ct").val() == ""
            ? 0
            : parseFloat($("#goldrate_22ct").val());
        row.find(".bill_rate_per_grm").val(old_rate);
      } else if (id_metal == 2) {
        old_rate =
          isNaN($("#silverrate_1gm").val()) || $("#silverrate_1gm").val() == ""
            ? 0
            : parseFloat($("#silverrate_1gm").val());
        row.find(".bill_rate_per_grm").val(old_rate);
      }
    }

    //row.find('.bill_rate_per_grm').val(metal_rate);
  }
});

//Old Stone
$(document).on(
  "keyup",
  ".old_stone_pcs,.old_stone_wt,.old_stone_rate",
  function () {
    calculate_old_stone_amount();
  }
);
$(document).on("change", ".old_stone_cal_type", function () {
  $("#estimation_stone_old_metal_details > tbody tr").each(function (idx, row) {
    curRow = $(this);
    console.log(curRow.find("input[type=radio]:checked").val() == 1);
    if (curRow.find("input[type=radio]:checked").val() == 1) {
      curRow.find(".old_stone_wt").attr("readonly", false);
      curRow.find(".stone_uom_id").attr("disabled", false);
    } else {
      //curRow.find('.stone_wt').val(0);
      curRow.find(".old_stone_wt").attr("readonly", true);
      curRow.find(".stone_uom_id").attr("disabled", true);
    }
  });
  calculate_old_stone_amount();
});
function calculate_old_stone_amount() {
  $("#estimation_stone_old_metal_details > tbody tr").each(function (idx, row) {
    curRow = $(this);
    var stone_amt = 0;
    var old_stone_pcs =
      isNaN(curRow.find(".old_stone_pcs").val()) ||
      curRow.find(".old_stone_pcs").val() == ""
        ? 0
        : curRow.find(".old_stone_pcs").val();
    var old_stone_wt =
      isNaN(curRow.find(".old_stone_wt").val()) ||
      curRow.find(".old_stone_wt").val() == ""
        ? 0
        : curRow.find(".old_stone_wt").val();
    var old_stone_rate =
      isNaN(curRow.find(".old_stone_rate").val()) ||
      curRow.find(".old_stone_rate").val() == ""
        ? 0
        : curRow.find(".old_stone_rate").val();
    //stone_amt = parseFloat(parseFloat(stone_wt)*parseFloat(stone_rate)).toFixed(2);
    console.log(curRow.find("input[type=radio]:checked").val());
    if (curRow.find("input[type=radio]:checked").val() == 1) {
      stone_amt = parseFloat(
        parseFloat(old_stone_wt) * parseFloat(old_stone_rate)
      ).toFixed(2);
    } else {
      stone_amt = parseFloat(
        parseFloat(old_stone_pcs) * parseFloat(old_stone_rate)
      ).toFixed(2);
    }
    curRow.find(".stone_price").val(stone_amt);
  });
}
function show_oldmetal_stone_item(curRow) {
  if (curRow != undefined) {
    $("#active_id").val(curRow.closest("tr").attr("id"));
  }
  let row = "";

  let catRow = $("#active_id").val();

  let row_st_details = $("#" + catRow)
    .find(".stone_details")
    .val();
  if (row_st_details != "") {
    let stone_details = JSON.parse(row_st_details);
    if (stone_details.length > 0) {
      $.each(stone_details, function (pkey, pitem) {
        console.log("pitem", pitem);
        create_new_empty_oldmetal_stone_item(pitem);
      });
    }
  }
  $("#PurstoneModal").modal("show");
}
$("#PurstoneModal .modal-body #create_stone_item_details").on(
  "click",
  function () {
    if (validateStoneoldMetalDetailRow()) {
      create_new_empty_oldmetal_stone_item();
    }
  }
);
function validateStoneoldMetalDetailRow() {
  return true;
}
function create_new_empty_oldmetal_stone_item(stn_data = []) {
  var row = "";

  var stones_list = "<option value=''> -Select Stone- </option>";

  var stones_type = "<option value=''>-Stone Type-</option>";
  var uom_list = "<option value=''>-UOM-</option>";
  $.each(stones, function (pkey, pitem) {
    stones_list +=
      "<option value='" +
      pitem.stone_id +
      "' " +
      (stn_data
        ? pitem.stone_id == stn_data.stone_id
          ? "selected"
          : ""
        : "") +
      ">" +
      pitem.stone_name +
      "</option>";
  });
  $.each(uom_details, function (pkey, pitem) {
    uom_list +=
      "<option value='" +
      pitem.uom_id +
      "' " +
      (stn_data
        ? pitem.uom_id == stn_data.stone_uom_id
          ? "selected"
          : ""
        : "") +
      ">" +
      pitem.uom_name +
      "</option>";
  });
  $.each(stone_types, function (pkey, pitem) {
    stones_type +=
      "<option value='" +
      pitem.id_stone_type +
      "' " +
      (stn_data
        ? pitem.id_stone_type == stn_data.stones_type
          ? "selected"
          : ""
        : "") +
      ">" +
      pitem.stone_type +
      "</option>";
  });
  var is_apply_in_lwt = stn_data ? stn_data.is_apply_in_lwt : "";
  var stone_pcs = stn_data
    ? stn_data.stone_pcs == undefined
      ? ""
      : stn_data.stone_pcs
    : "";
  var stone_wt = stn_data
    ? stn_data.stone_wt == undefined
      ? ""
      : stn_data.stone_wt
    : "";
  var rate = stn_data
    ? stn_data.rate_per_gram == undefined
      ? 0
      : stn_data.rate_per_gram
    : 0;
  var price = stn_data
    ? stn_data.stone_price == undefined
      ? 0
      : stn_data.stone_price
    : 0;

  var cal_type = stn_data
    ? stn_data.stone_cal_type == undefined
      ? 1
      : stn_data.stone_cal_type
    : 1;
  var row_cls = $("#estimation_stone_item_details tbody tr").length;
  console.log("row_cls", row_cls);
  row =
    '<tr id="' +
    $("#estimation_stone_item_details tbody tr").length +
    '" class="st_' +
    $("#estimation_stone_item_details tbody tr").length +
    '">' +
    '<td><select class="is_apply_in_lwt form-control" name="est_stones_item[is_apply_in_lwt][]" style="width:100px;"><option value="">-Select-</option><option value=1 ' +
    (is_apply_in_lwt == 1 ? "selected" : "") +
    ">Yes</option><option value=0 " +
    (is_apply_in_lwt == 0 ? "selected" : "") +
    ">No</option></select></td>" +
    '<td><select class="stone_id form-control" name="est_stones_item[stone_id][]" style="width:100px;">' +
    stones_list +
    '</select><input type="hidden" class="stone_type" value=""></td>' +
    '<td><input type="number" class="stone_pcs form-control" name="est_stones_item[stone_pcs][]" value="' +
    stone_pcs +
    '" style="width: 60px;"/></td>' +
    '<td><div class="input-group" style="width:159px;"><input class="stone_wt form-control" type="number" name="est_stones_item[stone_wt][]" value="' +
    stone_wt +
    '" style="width: 78px;"/><span class="input-group-btn" style="width: 138px;"><select class="stone_uom_id form-control" name="est_stones_item[uom_id][]">' +
    uom_list +
    "</select></span></div></td>" +
    '<td><div class="form-group" style="width: 100px;"><input class="stone_cal_type" type="radio" name="est_stones_item[cal_type][' +
    row_cls +
    ']" value="1" ' +
    (cal_type == 1 ? "checked" : "") +
    '>Wt&nbsp;<input type="radio" name="est_stones_item[cal_type][' +
    row_cls +
    ']" class="stone_cal_type" value="2" ' +
    (cal_type == 2 ? "checked" : "") +
    ">Pcs</div></td>" +
    '<td><input type="number" class="rate_per_gram form-control" name="est_stones_item[rate_per_gram][]" value="' +
    rate +
    '" /></td>' +
    '<td><input type="number" class="stone_price form-control" name="est_stones_item[stone_price][]" value="' +
    price +
    '" "/></td>' +
    '<td style="width: 100px;"><button type="button" class="btn btn-success btn-xs create_stone_item_details"><i class="fa fa-plus"></i></button><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-xs btn-del"><i class="fa fa-trash"></i></a></td></tr>';

  $("#stoneModal .modal-body")
    .find("#estimation_stone_item_details tbody")
    .append(row);
}
$("#old_stoneModal  #update_stone_details").on("click", function () {
  var stone_details = [];
  var stone_price = 0;
  var tag_less_wgt = 0;
  if (validateStoneoldMetalDetailRow()) {
    $(
      "#old_stoneModal .modal-body #estimation_stone_old_metal_details> tbody  > tr"
    ).each(function (index, tr) {
      // console.log($(this).find('.show_in_lwt').is(':checked'));
      if ($(this).find(".show_in_lwt").is(":checked")) {
        tag_less_wgt += parseFloat($(this).find(".old_stone_wt").val());
      }
      stone_id = $(this).find(".stone_id").val();
      console.log(stone_id);
      stone_price += parseFloat($(this).find(".stone_price").val());
      stone_details.push({
        show_in_lwt: $(this).find(".show_in_lwt").val(),
        stone_id: $(this).find(".stone_id").val(),
        stones_type: $(this).find(".stones_type").val(),
        stone_pcs: $(this).find(".old_stone_pcs").val(),
        stone_wt: $(this).find(".old_stone_wt").val(),
        old_stone_cal_type: $(this).find("input[type=radio]:checked").val(),
        stone_price: $(this).find(".stone_price").val(),
        rate_per_gram: $(this).find(".old_stone_rate").val(),
        stone_uom_id: $(this).find(".stone_uom_id").val(),
      });
    });
    console.log(stone_details);
    if (stone_id != "") {
      $("#old_stoneModal").modal("toggle");
      var catRow = $("#old_metal_active_id").val();
      $("#" + catRow)
        .find(".stone_details")
        .val(stone_details.length > 0 ? JSON.stringify(stone_details) : "");
      $("#" + catRow)
        .find(".stone_price")
        .val(stone_price);
      var row = $("#" + catRow).closest("tr");
      calculateOldMatelItemSaleValue(row);
      $("#old_stoneModal .modal-body")
        .find("#estimation_stone_item_details tbody")
        .empty();
    }
  } else {
    alert("Please Fill The Required Details");
  }
});

function create_new_empty_est_old_metal_stone(curRow, id) {
  $("#estimation_stone_old_metal_details tbody").empty();
  if (curRow != undefined) {
    $("#old_metal_active_id").val(curRow.closest("tr").attr("id"));
  }
  var row = "";
  if (id != undefined) {
    my_Date = new Date();
    $.ajax({
      url:
        base_url +
        "index.php/admin_ret_estimation/get_old_metal_stone_details?nocache=" +
        my_Date.getUTCSeconds() +
        "" +
        my_Date.getUTCMinutes() +
        "" +
        my_Date.getUTCHours(),
      data: { est_old_metal_sale_id: id },
      type: "POST",
      dataType: "json",
      async: false,
      success: function (data) {
        if (data.length > 0) {
          $.each(data, function (pkey, pitem) {
            var stones_list = "";
            $.each(materials, function (pkey, item) {
              var selected = "";
              if (item.stone_id == pitem.stone_id) {
                selected = "selected='selected'";
              }
              stones_list +=
                "<option value='" +
                pitem.stone_id +
                "'>" +
                pitem.stone_name +
                "</option>";
            });
            row +=
              '<tr><td><select class="stone_id" name="est_stones_item[stone_id][]">' +
              stones_list +
              '</select><input type="hidden" class="stone_id" name="est_stones[stone_id][]" value="' +
              pitem["stone_id"] +
              '" /></td><td><input type="number" class="stone_pcs" name="est_stones[stone_pcs][]" value="' +
              pitem["pieces"] +
              '" /></td><td><input class="stone_wt" type="number" name="est_stones[stone_wt][]" value="' +
              pitem["wt"] +
              '" /></td><td><input type="number" class="stone_price" name="est_stones[stone_price][]" value="' +
              pitem["price"] +
              '" /></td><td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
          });
        } else {
          var stones_list = "<option value=''>-Select Stone-</option>";
          $.each(stones, function (pkey, pitem) {
            stones_list +=
              "<option value='" +
              pitem.stone_id +
              "'>" +
              pitem.stone_name +
              "</option>";
          });
          row +=
            '<tr><td><select class="stone_id" name="est_stones_item[stone_id][]">' +
            stones_list +
            '</select></td><td><input type="number" class="stone_pcs" name="est_stones_item[stone_pcs][]" value="" /></td><td><input class="stone_wt" type="number" name="est_stones_item[stone_wt][]" value="" /></td><td><input type="number" class="stone_price" name="est_stones_item[stone_price][]" value=""  /></td><td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
        }
      },
    });
  } else {
    var catRow = $("#old_metal_active_id").val();
    var row_st_details = $("#" + catRow)
      .find(".stone_details")
      .val();
    var stone_details = row_st_details ? JSON.parse(row_st_details) : [];
    if (stone_details.length > 0) {
      $.each(stone_details, function (pkey, pitem) {
        var stones_list = "";
        var stones_type_list = "";
        var uom_list = "";
        var html = "";
        $.each(stones, function (key, item) {
          console.log(item);
          var selected = "";
          if (item.stone_id == pitem.stone_id) {
            selected = "selected='selected'";
          }
          stones_list +=
            "<option value='" +
            item.stone_id +
            "'" +
            selected +
            ">" +
            item.stone_name +
            "</option>";
        });
        $.each(stone_types, function (key, item) {
          var st_type_selected = "";
          if (item.id_stone_type == pitem.stones_type) {
            st_type_selected = "selected='selected'";
          }
          stones_type_list +=
            "<option value='" +
            item.id_stone_type +
            "' " +
            st_type_selected +
            ">" +
            item.stone_type +
            "</option>";
        });
        $.each(uom_details, function (key, item) {
          var uom_selected = "";
          if (item.uom_id == pitem.stone_uom_id) {
            uom_selected = "selected='selected'";
          }
          uom_list +=
            "<option value='" +
            item.uom_id +
            "' " +
            uom_selected +
            ">" +
            item.uom_name +
            "</option>";
        });
        row +=
          '<tr data-rowno="' +
          (pkey + 1) +
          '">' +
          '<td><input class="show_in_lwt" type="checkbox" name="est_stones_item[show_in_lwt][]" value="' +
          (pitem.show_in_lwt == 1 ? 1 : 0) +
          '" ' +
          (pitem.show_in_lwt == 1 ? "checked" : "") +
          " ></td>" +
          '<td><select class="stones_type form-control" name="est_stones_item[stones_type][]" >' +
          stones_type_list +
          "</select></td>" +
          '<td><select class="stone_id form-control" name="est_stones_item[stone_id][]" >' +
          stones_list +
          " </select></td>" +
          '<td><input type="number" class="old_stone_pcs form-control" name="est_stones_item[stone_pcs][]" value="' +
          pitem["stone_pcs"] +
          '" style="width: 100%;"/></td>' +
          '<td><div class="input-group"><input class="old_stone_wt form-control" type="number" name="est_stones_item[old_stone_wt][]" value="' +
          pitem["stone_wt"] +
          '" style="width:100px;"/><span class="input-group-btn" style="width: 70px;"><select class="stone_uom_id form-control" name="est_stones_item[uom_id][]" >' +
          uom_list +
          "</select></span></div></td>" +
          '<td><div class="form-group" style="width: 100px;"><input class="old_stone_cal_type" type="radio" name="est_stones_item[cal_type][' +
          pkey +
          ']" value="1" ' +
          (pitem.old_stone_cal_type == 1 ? "checked" : "") +
          ' > By Wt&nbsp;<input type="radio" name="est_stones_item[cal_type][' +
          pkey +
          ']" class="old_stone_cal_type" value="2" ' +
          (pitem.old_stone_cal_type == 2 ? "checked" : "") +
          " > By Pcs</div></td>" +
          '<td><input type="number" class="old_stone_rate form-control" name="est_stones_item[old_stone_rate][]" value="' +
          pitem["stone_price"] +
          '"  style="width:80%;"/></td>' +
          '<td><input type="number" class="stone_price form-control" name="est_stones_item[stone_price][]" value="' +
          pitem["stone_price"] +
          '"  style="width:100%;"/></td>' +
          '<td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
      });
    } else {
      var stones_list = "<option value=''>-Select Stone-</option>";
      var stones_type = "<option value=''>-Stone Type-</option>";
      var uom_list = "<option value=''>-UOM-</option>";
      $.each(stones, function (pkey, pitem) {
        stones_list +=
          "<option value='" +
          pitem.stone_id +
          "'>" +
          pitem.stone_name +
          "</option>";
      });
      $.each(stone_types, function (pkey, pitem) {
        stones_type +=
          "<option value='" +
          pitem.id_stone_type +
          "'>" +
          pitem.stone_type +
          "</option>";
      });
      $.each(uom_details, function (pkey, pitem) {
        uom_list +=
          "<option value='" +
          pitem.uom_id +
          "'>" +
          pitem.uom_name +
          "</option>";
      });
      let rowNo = $("#old_stoneModal .modal-body")
        .find("#estimation_stone_old_metal_details tbody tr:last")
        .attr("data-rowno");
      if (/^\d+$/.test(rowNo)) {
        rowNo = parseInt(rowNo) + 1;
      } else {
        rowNo = 1;
      }
      row +=
        '<tr data-rowno="' +
        rowNo +
        '">' +
        '<td style="width:8%;"><input class="show_in_lwt" type="checkbox"name="est_stones_item[show_in_lwt][]" value="1" checked></td>' +
        '<td style="width:15%;"><select class="stones_type form-control" name="est_stones_item[stones_type][]" >' +
        stones_type +
        "</select></td>" +
        '<td style="width:15%;"><select class="stone_id form-control" name="est_stones_item[stone_id][]">' +
        stones_list +
        "</select></td>" +
        '<td style="width:10%;"><input type="number" class="old_stone_pcs form-control" name="est_stones_item[old_stone_pcs][]" value="" style="width: 100%;"/></td>' +
        '<td><div class="input-group"><input class="old_stone_wt form-control" type="number" name="est_stones_item[old_stone_wt][]" value="" style="width:100px;"/><span class="input-group-btn" style="width: 70px;" ><select class="stone_uom_id form-control" name="est_stones_item[uom_id][]" style="width: 70px;">' +
        uom_list +
        "</select></span></div></td>" +
        '<td ><div class="form-group" style="width: 100px;"><input class="old_stone_cal_type" type="radio" name="est_stones_item[cal_type][' +
        (rowNo - 1) +
        ']" value="1" checked="true"> By Wt&nbsp;<input type="radio" name="est_stones_item[cal_type][' +
        (rowNo - 1) +
        ']" class="old_stone_cal_type" value="2"> By Pcs</div></td>' +
        '<td style="width:15%;"><input type="number" class="old_stone_rate form-control" name="est_stones_item[old_stone_rate][]" value=""  style="width:80%;"/></td>' +
        '<td><input type="number" class="stone_price" name="est_stones_item[stone_price][]" value=""  /></td>' +
        '<td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
    }
  }
  $("#old_stoneModal .modal-body")
    .find("#estimation_stone_old_metal_details tbody")
    .append(row);
  $("#old_stoneModal").modal("show");
}

$("#old_stoneModal .modal-body #create_stone_old").on("click", function () {
  if (validateStoneoldMetalDetailRow()) {
    create_empty_est_old_metal_stone();
  } else {
    alert("Please fill required fields");
  }
});
function create_empty_est_old_metal_stone(curRow, id) {
  if (curRow != undefined) {
    $("#old_metal_active_id").val(curRow.closest("tr").attr("id"));
  }
  var row = "";
  var catRow = $("#old_metal_active_id").val();
  var stones_list = "<option value=''>-Select Stone-</option>";
  var stones_type = "<option value=''>-Stone Type-</option>";
  var uom_list = "<option value=''>-UOM-</option>";
  $.each(stones, function (pkey, pitem) {
    stones_list +=
      "<option value='" +
      pitem.stone_id +
      "'>" +
      pitem.stone_name +
      "</option>";
  });
  $.each(stone_types, function (pkey, pitem) {
    stones_type +=
      "<option value='" +
      pitem.id_stone_type +
      "'>" +
      pitem.stone_type +
      "</option>";
  });
  $.each(uom_details, function (pkey, pitem) {
    uom_list +=
      "<option value='" + pitem.uom_id + "'>" + pitem.uom_name + "</option>";
  });
  $.each(stone_types, function (pkey, pitem) {
    stones_type +=
      "<option value='" +
      pitem.id_stone_type +
      "'>" +
      pitem.stone_type +
      "</option>";
  });
  let rowNo = $("#old_stoneModal .modal-body")
    .find("#estimation_stone_old_metal_details tbody tr:last")
    .attr("data-rowno");
  if (/^\d+$/.test(rowNo)) {
    rowNo = parseInt(rowNo) + 1;
  } else {
    rowNo = 1;
  }
  row +=
    '<tr data-rowno="' +
    rowNo +
    '">' +
    '<td style="width:8%;"><input class="show_in_lwt" type="checkbox"name="est_stones_item[show_in_lwt][]" value="1" checked></td>' +
    '<td style="width:15%;"><select class="stones_type form-control" name="est_stones_item[stones_type][]" >' +
    stones_type +
    "</select></td>" +
    '<td style="width:15%;"><select class="stone_id form-control" name="est_stones_item[stone_id][]"></select></td>' +
    '<td style="width:10%;"><input type="number" class="old_stone_pcs form-control" name="est_stones_item[old_stone_pcs][]" value="" style="width: 100%;"/></td>' +
    '<td><div class="input-group"><input class="old_stone_wt form-control" type="number" name="est_stones_item[old_stone_wt][]" value="" style="width:100px;"/><span class="input-group-btn" style="width: 70px;" ><select class="stone_uom_id form-control" name="est_stones_item[uom_id][]" style="width: 70px;">' +
    uom_list +
    "</select></span></div></td>" +
    '<td ><div class="form-group" style="width: 100px;"><input class="old_stone_cal_type" type="radio" name="est_stones_item[cal_type][' +
    (rowNo - 1) +
    ']" value="1" checked="true">By Wt&nbsp;<input type="radio" name="est_stones_item[cal_type][' +
    (rowNo - 1) +
    ']" class="old_stone_cal_type" value="2"> By Pcs</div></td>' +
    '<td style="width:15%;"><input type="number" class="old_stone_rate form-control" name="est_stones_item[old_stone_rate][]" value=""  style="width:80%;"/></td>' +
    '<td><input type="number" class="stone_price" name="est_stones_item[stone_price][]" value=""  /></td>' +
    '<td><a href="#" onClick="$(this).closest(\'tr\').remove();" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td></tr>';
  $("#old_stoneModal .modal-body")
    .find("#estimation_stone_old_metal_details tbody")
    .append(row);
  $("#old_stoneModal").modal("show");
}

$(document).on("keyup", ".bill_amount", function (e) {
  if ($(this).attr("name") == "purchase[billamount][]") {
    calculate_orderAdv_purchase_details();
    let row = $(this).closest("tr");
    calculateRateBasedonFinalAmt(row);
    calculateOldMatelItemSaleValue();
  }
});

function calculateRateBasedonFinalAmt(row) {
  let pur_gross_val = row.find(".pur_gross_val").val()
    ? row.find(".pur_gross_val").val()
    : 0;
  let pur_net_val = row.find(".pur_net_val").val()
    ? row.find(".pur_net_val").val()
    : 0;
  let bill_amount = row.find(".bill_amount").val()
    ? row.find(".bill_amount").val()
    : 0;
  let rate_per_gram = parseFloat(bill_amount / pur_net_val).toFixed(2);

  row.find(".bill_rate_per_grm").val(rate_per_gram);
}

function get_old_metal_types() {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/get_old_metal_types?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),
    type: "POST",
    dataType: "JSON",
    success: function (data) {
      old_metal_types = data;
    },
    error: function (error) {},
  });
}

//Purchase entry in billing form

/*$("#filter_tag_no").on('keyup',function(e){
	if(e.which === 13){
		if($("#filter_tag_no").val()){
			$("#search_tag_no").trigger('click');
		}
		$(this).val('').focus();
	}
})


$('#filter_est_no').on('keyup',function(e){
	if(e.which===13){
		if($('#filter_est_no').val()){
			$('#search_est_no').trigger('click');
		}
		$(this).val('').focus();
	}
})*/

function create_customer(mobile_no) {
  // $("#confirm-add").modal("show");
  $('.offcanvas').offcanvas('show');
  get_country();
  // get_village_list();
  $("#cus_mobile").val(mobile_no);
}

function checkToasterDuplicate(checkMsg) {
  let message = [];
  let flag = true;

  $(".alert").each(function (key, val) {
    let messageContent = $(this).find(".message").html();
    if (messageContent != undefined) {
      messageContent = messageContent.replace(/<br>/g, "");
      if (messageContent) {
        message.push(messageContent);
      }
    }
  });

  if (message.length > 0) {
    if (message.includes(checkMsg.replace(/<br>/g, ""))) {
      return (flag = false);
    }
  }

  return flag;
}

//OTP FOR CREDIT COLLEDCTION DISCOUNT
$("#send_cc_disc_otp_yes").on("click", function () {
  allow_discount_otp = true;
  $(".otp_confirm").css("display", "none");
  $(".disc_otp").css("display", "block");
  $("#apply_cc_disc").trigger("click");
  cc_discount_otp();
});

$("#send_cc_disc_otp_no").on("click", function () {
  $("#credit_discount_amt").val(0);
  calculateSaleBillRowTotal();
  calculateFinalCost();
  $("#credit_disc_otp_modal").modal("toggle");
});

function cc_discount_otp() {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/credit_coll_disc_admin_approval/?nocache=" +
      my_Date.getUTCSeconds(),
    dataType: "json",
    method: "POST",
    data: { id_branch: $("#id_branch").val() },
    success: function (data) {
      if (data.status == true) {
        $("#cc_disc_otp").val("");
        $("#error-msg").html("");
        $("#remaining_time").html("");
        discount_val = $("#credit_discount_amt").val();
        $("#cc_dis_value").val(discount_val);
        $.toaster({
          priority: "success",
          title: "Success!",
          message: "" + "</br>" + data.msg,
        });

        var fewSeconds = 60;
        $("#resend_otp").prop("disabled", true);
        timer = setTimeout(function () {
          $("#resend_otp").prop("disabled", false);
        }, fewSeconds * 1000);
      } else {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br> Admin Access Denied...",
        });
        $("#credit_discount_amt").val("");
      }
    },
    error: function (error) {},
  });
}
$("#verfiy_cc_otp").on("click", function () {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/verify_credit_coll_disc_otp/?nocache=" +
      my_Date.getUTCSeconds(),
    data: { otp: $("#cc_disc_otp").val() },
    dataType: "json",
    method: "POST",
    success: function (data) {
      if (data.status == true) {
        calculate_discount_amt();

        $("#credit_disc_otp_modal").modal("toggle");
        allow_discount_otp = false;
        $.toaster({
          priority: "success",
          title: "Success!",
          message: "" + "</br>" + data.msg,
        });
      } else {
        $("#cc_disc_otp").val("");
        $.toaster({
          priority: "danger",
          title: "Success!",
          message: "" + "</br>" + data.msg,
        });
      }
    },
    error: function (error) {},
  });
});

$("#cc_discount_close_modal").on("click", function () {
  $("#credit_discount_amt").val(0);
  calculateSaleBillRowTotal();
  $("#credit_disc_otp_modal").modal("toggle");
});
$("#cc_resend_otp").on("click", function () {
  cc_discount_otp();
});

//Direct Billing

$(document).on("click", ".sales_add", function (e) {
  e.preventDefault();
  // if ($('#bill_cus_id').val() == '') {
  // 	$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>Please Enter Customer Name" });
  // } else {
  if ($("#billing_sale_details > tbody  > tr").length > 0) {
    if (validateSaleTagDetailRow()) {
      create_new_bill_sale_details();
      get_wastage_settings_details();

      $(".bill_sel_product").select2({
        placeholder: "Select Product",
        allowClear: true,
      });

      $(".bill_select_design").select2({
        placeholder: "Select Design",
        allowClear: true,
      });

      $(".bill_sel_sub_design").select2({
        placeholder: "Select Sub Design",
        allowClear: true,
      });

      $(".bill_section_select").select2({
        placeholder: "Section Selection",
        allowClear: true,
      });
    } else {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Fill required fields",
      });
    }
  } else {
    create_new_bill_sale_details();
    get_wastage_settings_details();

    $(".bill_sel_product").select2({
      placeholder: "Select Product",
      allowClear: true,
    });

    $(".bill_select_design").select2({
      placeholder: "Select Design",
      allowClear: true,
    });

    $(".bill_sel_sub_design").select2({
      placeholder: "Select Sub Design",
      allowClear: true,
    });
    $(".bill_section_select").select2({
      placeholder: "Section Selection",
      allowClear: true,
    });
  }
  // }
});

function create_new_bill_sale_details() {
  var tag_image = base_url + "assets/img/no_image.png";

  var stone_details = [];
  var other_metal_details = "";

  var purity = "<option value=''>-Select Purity-</option>";
  $.each(purities, function (pkey, pitem) {
    purity +=
      "<option  value='" + pitem.id_purity + "'>" + pitem.purity + "</option>";
  });

  var select_emp = "<option value=''>-Select Employee-</option>";
  $.each(item_emp_details, function (pkey, emp) {
    console.log(item_emp_details);
    let emp_selected = "";
    if (emp.id_employee == emp_select) {
      emp_selected = "selected = 'selected'";
    }
    select_emp +=
      "<option " +
      emp_selected +
      " value='" +
      emp.id_employee +
      "'>" +
      emp.emp_name +
      "</option>";
  });

  var rowId = new Date().getTime();

  $(".bill_purity").select2();

  $(".itemtype").select2();

  let isbillsplit =
    ctrl_page[1] == "bill_split"
      ? '<td><input class="form-control sale_noof_bills" tabindex=-1 name="sale_noof_bills" type="text" readonly placeholder="No of bills." value="" autocomplete="off" tabindex=18 style="width: 50px;" /></td>'
      : "";

  let billSplitImg =
    ctrl_page[1] == "bill_split"
      ? ""
      : '<td><img src="' +
        tag_image +
        '" width="50" height="55"><a class="btn btn-secondary tag_images" data-toggle="modal" data-id="unique" id="edit"><i class="fa fa-eye" ></i></a></td>';

  var row =
    '<tr id="' +
    rowId +
    '">' +
    '<td><input type="checkbox" class="delivery_status"  checked disabled><input type="hidden" class="is_delivered" name="sale[is_delivered][]" value="1"></td>' +
    '<td><input type="checkbox" class="show_huid"  checked value="1"> <input type="hidden" class="showHuid" name="sale[show_huid][]" value ="1"></td>' +
    '<td><input type="text" class="form-control huid" style="width: 100px;" value=""  name="sale[huid][]"></td>' +
    '<td><select class="form-control itemtype" style="width: 120px;" name="sale[itemtype][]"><option value="1">Non_tagged</option><option value="2" selected>Home Bill</option></select></td>' +
    '<td><input type="text" class=" form-control bill_tag_code" style="width:100px" name="sale[tag_code][]" placeholder="Tag Code"></input><input type="hidden" value=""  name="sale[tag][]" class="bill_tag_id"/></td>' +
    '<td><select class="form-control item_emp_sel" style="width:170px;" name="sale[item_emp_id][]" >' +
    select_emp +
    "</select></td>" +
    '<td><input type="checkbox" class="partial" disabled><input type="hidden" class="is_partial"  name="sale[is_partial][]" ></td>' +
    isbillsplit +
    billSplitImg +
    '<td><span class="sale_pro_hsn"></span><input type="hidden" name="sale[id_collecion_maping_det][]" class="id_collecion_maping_det" value=""><input type="hidden" name="sale[order_no][]" class="order_no" value=""><input type="hidden" name="sale[id_orderdetails][]" class="id_orderdetails" value=""><input type="hidden" name="sale[id_customerorder][]" class="id_customerorder" value=""><input type="hidden" class="sale_pro_hsn" name="sale[hsn]" value="" /><input type="hidden" class="sale_type" name="sale[sourcetype][]" value="1" /><input type="hidden" class="is_est_details" value="1" name="sale[is_est_details][]" /><input type="hidden" class="sale_cal_type" name="sale[calltype][]" value="" /><input type="hidden" class="sale_uom" value=""  name="sale[uom][]" /><input type="hidden" class="total_tax" name="sale[item_total_tax][]"><input type="hidden" class="min_wastage" value=""  name="sale[min_wastage][]" /><input type="hidden" class="max_wastage" value=""  name="sale[max_wastage][]" /><input type="hidden" class="stock_type" name="sale[stock_type][]" value="" /><input type="hidden" class="is_non_tag" name="sale[is_non_tag][]" value="" /><input type="hidden" class="rate_field"  value="" /><input type="hidden" class="mc_limit"  value="" /><input type="hidden" class="va_limit"  value="" /><input type="hidden" class="margin_mrp"  value="" /><input type="hidden" class="purchase_cost" value="" /></td>' +
    '<td><select class="form-control bill_section_select" style="width:130px;"><select/><input type="hidden" class="bill_id_section" name="sale[id_section][]" value="" /></td>' +
    '<td><select class="form-control bill_sel_product" style="width:130px;"></select><input class="sale_product_id" type="hidden" name="sale[product][]" value="" /><input class="new_prod_id" type="hidden"><input class="scheme_closure_benefit" type="hidden" name="sale[scheme_closure_benefit][]" value="" /><input type="hidden" class="metal_type" value="" /></td>' +
    '<td><select class=" form-control bill_select_design" style="width:130px;"><select/><input type="hidden" class="sale_design_id" name="sale[design][]" value="" /></td>' +
    '<td><select class="form-control bill_sel_sub_design" style="width:130px;"></select><input type="hidden" class="bill_id_sub_design" name="sale[id_sub_design][]" value="" /></td>' +
    '<td><input min="0" type="number" class="sale_pcs form-control"   style="width:50px;" placeholder="Pcs"  name="sale[pcs][]" value="" ><span class="blc_pcs" style="display:none">Stock : </span><input type="hidden" class="tot_blc_pcs"></td>' +
    '<td><select class="bill_purity form-control" style="width:130px" >' +
    purity +
    '</select><input type="hidden" value="" class="sale_purity" name="sale[purity][]" /></td>' +
    '<td><select  class="form-control bill_size"   placeholder="Size"  value="" style="width:100px;"  /><input type="hidden" class="bill_id_size" name="sale[size][]" value=""/><input type="hidden" class="certification_cost" value="" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value=""/><input type="hidden" name="sale[stone_details][]" value=\'' +
    JSON.stringify(stone_details) +
    '\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value=""/><input type="hidden" class="other_metal_details" name="sale[other_metal_details][]" value=' +
    JSON.stringify(other_metal_details) +
    ' class="other_metal_details"  /></td>' +
    "<td>-</td>" +
    '<td><input min="0" type="number" class="bill_gross_val form-control" name="sale[gross][]" style="width:120px;""  value="" placeholder="Gwt"/><span class="blc_gwt" ></span><input type="hidden" class="tot_blc_gwt"><input type="hidden" name="sale[act_gwt][]"  class="act_gwt"/><input type="hidden" name="sale[bill_gross_val][]"  class="bill_gross_value"/></td>' +
    '<td><div class="form-group" style="width:120px;"> <div class="input-group"><input class="form-control bill_less_val" value="" type="number" step="any" readonly/><span class="input-group-addon input-sm add_tag_lwt" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));">+</span></div></div><input type="hidden" class="bill_less_val" name="sale[less][]" value="" /> </td>' +
    '<td><span class="bill_sale_net_wt"></span><input type="hidden" class="bill_sale_net_wt" name="sale[net][]" value="" /><input type="hidden" class="bill_tag_net_wt_val"  value="" /></td>' +
    '<td><input min="0" type="number"  class="bill_wastage form-control" value="" ' +
    va_readonly +
    ' style="width:100px;" placeholder="Wastage"/><input type="hidden" class="bill_wastage_per" name="sale[wastage][]" value="" /></td>' +
    '<td><span min="0" class="est_wastage_wt"></span><input type="number" ' +
    va_readonly +
    ' class="bill_wastage_wt form-control"  style="width:100px" value=""><input type="hidden" name="sale[wastage_discount][]" class="wastage_discount" value=""><input type="hidden" name="sale[mc_discount][]" class="mc_discount" value=""><input type="hidden" name="sale[item_blc_discount][]" class="item_blc_discount" value=""></td>' +
    '<td><select class="bill_mctype form-control" ' +
    mc_readonly +
    ' name="sale[bill_mctype][]"  style="width:80px;' +
    mc_type_selection +
    '"><option value="1" >Pcs</option><option value="2" >Gram</option></select></td>' +
    '<td><span class="making_charge"></span><input type="hidden" class="mc_dis" value="0"><input type="number" min="0" class="bill_mc form-control" name="sale[mc][]" value="" placeholder="MC"  style="width:100px" ' +
    mc_readonly +
    '/><input type="hidden" class="discount"  name="sale[adjusted_dis][]" value="" /><input type="hidden" class="bill_mc_value" value="" /></td>' +
    '<td><input type="number" class="bill_rate_per_grm form-control" name="sale[bill_rate_per_grm][]"  step="any"  style="width:100px" ' +
    rate_readonly +
    "/></td>" +
    '<td><input type="number" class="bill_discount form-control" name="sale[discount][]"  step="any" style="width:100px" value="" readonly/></td>' +
    '<td><input min="0" class="bill_taxable_amt form-control" placeholder="Taxable Amt" type="number" style="width:120px" value="" readonly></span></td>' +
    '<td><span class="tgrp_name"></span><input type="hidden" class="sale_tax_group" name="sale[taxgroup][]" value="" /></td>' +
    '<td class="tax_amt"></td>' +
    // + '<td class="total_charges"><input type="hidden" value="" class="charges_details" /><input type="hidden" class="charge_value" value="" /></td>'

    '<td  class="total_charges"><a href="#" onClick="create_new_empty_est_cus_charges_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" class="charges_details" name="sale[charges_details][]"><input class="charge_value" type="hidden"  name="sale[charge_value][]"></td>' +
    '<td class="total_other_metal"></td>' +
    //+'<td>'+(stone_details.length>0 ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>' :'-')+'<input type="hidden" class="certification_cost" value="'+estval.certification_cost+'" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="'+estval.othermat_amount+'"/><input type="hidden" name="sale[stone_details][]" value=\''+(JSON.stringify(stone_details))+'\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value="'+tag_other_itm_amount+'"/><input type="hidden" class="other_metal_details" name="sale[other_metal_details][]" value='+(JSON.stringify(other_metal_details))+' class="other_metal_details" /></td>'

    //+'<td>'+(stone_details.length>0 ? '<a href="#" onClick="create_new_empty_bill_sales_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a>' :'-')+'<input type="hidden" class="certification_cost" value="'+estval.certification_cost+'" /><input type="hidden" class="est_old_stone_val" value="" /><input type="hidden" class="est_old_dust_val" value="" /><input type="hidden" class="bill_material_price" value="'+estval.othermat_amount+'"/><input type="hidden" name="sale[stone_details][]" value=\''+(JSON.stringify(stone_details))+'\' class="stone_details" /><input type="hidden" class="tag_other_itm_amount" value="'+tag_other_itm_amount+'"/><input type="hidden" class="other_metal_details" name="sale[other_metal_details][]" value='+(JSON.stringify(other_metal_details))+' class="other_metal_details" /></td>'

    '<td><input type="hidden" class="bill_stone_price" value="" /><input type="number" style="width:150px"class="bill_amount form-control" name="sale[billamount][]" value="" step="any" readonly /><input type="hidden" class="per_grm_amount" name="sale[per_grm][]" value="" step="any" /></td>' +
    // + '<td>-</td>'

    '<td style="display:none;"><span class="tag_code"></span><input type="hidden" name="sale[total_cgst][]" class="sale_cgst"/><input type="hidden" class="sale_sgst" name="sale[total_sgst][]"/><input type="hidden" class="sale_igst" name="sale[total_igst][]"/></td>' +

    "<td>-</td>" +
    '<td><span class="esti_number">-</span><input type="hidden" class="est_itm_id" name="sale[est_itm_id][]" value="" /><input type="hidden" class="sale_est_itm_id" name="sale[estid][]" value="" /><input type="hidden" class="tag_sales_value"  value="" /><input type="hidden" class="gift_applicable"  value="" /><input type="hidden" class="quality_id" name="sale[quality_id][]" value=""><input type="hidden" class="stone_type" value=""><input type="hidden" class="uom_id" value=""><input type="hidden" class="stone_calculation_based_on" value=""><input type="hidden" class="esti_no"  name="sale[esti_no][]"  value="" /></td>' +
    '<td><a href="#" onClick="remove_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
    "</tr>";
  // get_ActiveProducts(row);
  // get_ActiveSections(row);

  $("#billing_sale_details tbody").append(row);
  $("#billing_sale_details > tbody").find(".item_emp_sel").select2();

  let row_lastObj = $("#billing_sale_details tbody #" + rowId);

  get_home_bill_counter(row_lastObj);
  get_bill_ActiveProduct(row_lastObj);

  get_tag_purities();

  calculateSaleBillRowTotal();
}

function validateSaleTagDetailRow() {
  var row_validate = true;

  $("#billing_sale_details > tbody > tr").each(function (idx, row) {
    let calculation_based_on = $(this)
      .find(".bill_sel_product option:selected")
      .attr("calculation_based_on");

    if ($(this).find(".itemtype").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select Item Type",
      });
      row_validate = false;
    } else if ($(this).find(".item_emp_sel").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select The Employee",
      });
      row_validate = false;
    } else if ($(this).find(".bill_id_section").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select The Section",
      });
      row_validate = false;
    } else if ($(this).find(".sale_product_id").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select The Product",
      });
      row_validate = false;
    } else if ($(this).find(".sale_design_id").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select The Design",
      });
      row_validate = false;
    } else if (
      $(this).find(".id_sub_design").val() == "" &&
      $(this).find(".sale_tag_id").val() == ""
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select The Sub Design",
      });
      row_validate = false;
    } else if ($(this).find(".bill_purity").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Select The Purity",
      });
      row_validate = false;
    } else if ($(this).find(".sale_pcs").val() == "") {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Enter The Pieces",
      });
      row_validate = false;
    } else if (
      $(this).find(".bill_gross_val").val() == "" &&
      calculation_based_on != 3
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Enter The Gross Weight",
      });
      row_validate = false;
    } else if (
      ($(this).find(".bill_net_val").val() == "" ||
        $(this).find(".bill_net_val").val() == 0) &&
      calculation_based_on != 3
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Enter The Net Weight",
      });
      row_validate = false;
    } else if (
      $(this).find(".bill_rate_per_grm").val() == "" ||
      $(this).find(".bill_rate_per_grm").val() == 0
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Please Enter The Rate",
      });
      row_validate = false;
    } else if (
      $(this).find(".bill_taxable_amt").val() == "" ||
      $(this).find(".bill_taxable_amt").val() == 0
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Invalid Taxable Amount ",
      });
      row_validate = false;
    } else if (
      $(this).find(".bill_amount").val() == "" ||
      $(this).find(".bill_amount").val() == 0
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Invalid Amount",
      });
      row_validate = false;
    }
  });

  return row_validate;
}

function get_ActiveProducts(curRow) {
  $.ajax({
    type: "POST",
    url: base_url + "index.php/admin_ret_reports/get_ActiveProduct",
    data: { id_category: "" },
    dataType: "json",
    success: function (data) {
      prod_details = data;
      // if(curRow != '' && curRow != undefined && curRow != null){
      // 	curRow.find(".sel_product option").remove();
      // }
      var pro_id = curRow.find(".sale_product_id").val();

      if (curRow != "" && curRow != undefined && curRow != null) {
        curRow.find(".sale_product_id option").remove();

        $.each(data, function (key, item) {
          curRow
            .find(".sel_product")
            .append(
              $("<option></option>")
                .attr("value", item.pro_id)
                .text(item.product_name)
            );
        });

        curRow.find(".sel_product").select2({
          placeholder: "Select Product",
          allowClear: true,
        });
      } else {
        $(".sale_product_id option").remove();
        var sale_product_id = $(".sale_product_id").val();
        $.each(data, function (key, item) {
          $(".sel_product").append(
            $("<option></option>")
              .attr("tgrp_name", item.tgrp_name)
              .text(item.product_name)
          );
        });
        // $(".sel_product").select2({
        // 		placeholder: "Select Product",
        // 		allowClear: true
        // 	});
      }
      if (sale_product_id != "") {
        $(".sel_product").select2(
          "val",
          sale_product_id != "" && sale_product_id > 0 ? sale_product_id : ""
        );
      }
      if (
        curRow != "" &&
        curRow != undefined &&
        curRow != null &&
        pro_id != ""
      ) {
        curRow.find(".sale_product_id").val(curRow.find(".sel_product").val());
        curRow.find(".sel_product").select2("val", pro_id != "" ? pro_id : "");
        curRow.find(".sel_product").prop("disabled", true);
      }
    },
  });
}

$(document).on("change", ".sel_product ", function () {
  var row = $(this).closest("tr");
  if (this.value != "") {
    let id_product = this.value;
    get_activeDesigns(id_product, row);
    row.find(".sale_product_id").val(this.value);
  } else {
    // row.find('.sale_product_id').val('');
    // row.find('.sale_design_id').val('');
    // row.find('.id_sub_design').val('');
  }
});

function get_activeDesigns(id_product, curRow) {
  $(".overlay").css("display", "block");
  $.ajax({
    type: "POST",
    url: base_url + "index.php/admin_ret_catalog/get_active_design_products",
    dataType: "json",
    data: { id_product: id_product },
    success: function (data) {
      var id = $(".select_design").val();
      var sale_design_id = $(".sale_design_id").val();

      $(".select_design option").remove();

      $.each(data, function (key, item) {
        $(".select_design").append(
          $("<option></option>")
            .attr("value", item.design_no)
            .text(item.design_name)
        );
      });

      // $(".select_design").select2({
      // 	placeholder: "Design",
      // 	allowClear: true
      // });

      $(".select_design").select2("val", id != "" && id > 0 ? id : "");
      if (sale_design_id != "") {
        $(".select_design").select2(
          "val",
          sale_design_id != "" && sale_design_id > 0 ? sale_design_id : ""
        );
      }

      $(".overlay").css("display", "none");
    },
  });
}

$(document).on("change", ".select_design ", function () {
  var row = $(this).closest("tr");
  var id_product = row.find(".sale_product_id").val();

  if (id_product != "") {
    if (this.value != "") {
      let id_design = this.value;
      get_billActiveSubDesigns(id_product, id_design, row);
      row.find(".sale_design_id").val(this.value);
    } else {
      row.find(".sale_design_id").val("");
      row.find(".id_sub_design").val("");
    }
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select The Product",
    });
  }
});

$(document).on("change", ".bill_sel_sub_design  ", function () {
  var row = $(this).closest("tr");
  var id_product = row.find(".sale_product_id").val();
  var id_design = row.find(".sale_design_id").val();
  var id_branch =
    $("#branch_filter").val() != "" && $("#branch_filter").val() != undefined
      ? $("#branch_filter").val()
      : $("#branch_select").val();
  // if (id_product == '') {
  // 	// if(checkToasterDuplicate('Please Select The Product'))
  // 	// {
  // 		$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>Please Select The Product" });
  // 	// }
  // } else if (id_design == '') {
  // 	$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>Please Select The Design" });
  // } else {
  if (this.value != "") {
    row.find(".bill_id_sub_design").val(this.value);
  } else {
    if (row.find(".bill_tag_id").val() == "") {
      row.find(".bill_id_sub_design").val("");
    }
  }

  get_min_max_mc_wastage(id_branch, id_product, id_design, this.value);
  // }
});

function get_ActiveSections(curRow) {
  // $(".bill_section_select  option").remove();

  my_Date = new Date();
  $.ajax({
    type: "POST",
    url:
      base_url +
      "index.php/admin_ret_catalog/get_sectionBranchwise?nocache=" +
      my_Date.getUTCSeconds(),
    data: {
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
    },
    dataType: "json",
    success: function (data) {
      var id = $("#id_section").val();

      $.each(data, function (key, item) {
        $(".bill_section_select ").append(
          $("<option></option>")
            .attr("value", item.id_section)
            .text(item.section_name)
        );
      });

      // $('.bill_section_select').select2({
      // 	placeholder:"Select Section",
      // 	allowClear: true
      // });

      // if(id!='' && id!=undefined){
      // $(".bill_section_select ").select2("val",(id!='' && id>0?id:''));
      // }

      $(".overlay").css("display", "none");
    },
  });
}

$(document).on("change", ".section_select", function () {
  var row = $(this).closest("tr");

  if (this.value != "") {
    row.find(".id_section").val(this.value);
  } else {
    row.find(".id_section").val("");
  }
});

$(document).on("change", ".bill_purity", function (e) {
  var row = $(this).closest("tr");
  if (this.value != "") {
    row.find(".sale_purity").val(this.value);
  }
  get_search_custom_metal_rates(row);
});
function get_search_custom_metal_rates(curRow) {
  var id_purity = curRow.find(".bill_purity").val();
  var id_metal = curRow.find(".metal_type").val();
  if (id_purity == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Please Select Purity..",
    });
  } else if (id_metal == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Invalid Metal..",
    });
  } else {
    $("div.overlay").css("display", "block");
    my_Date = new Date();
    $.ajax({
      url:
        base_url +
        "index.php/admin_ret_estimation/get_metal_purity_rate?nocache=" +
        my_Date.getUTCSeconds(),
      dataType: "json",
      method: "POST",
      data: { id_purity: id_purity, id_metal: id_metal },
      success: function (data) {
        $("div.overlay").css("display", "none");
        curRow.find(".bill_rate_per_grm").val(0);
        curRow.find(".rate_field").val("");

        curRow.find(".rate_field").val(data.rate_field);
        // curRow.find('.cus_market_rate_field').val(data.market_rate_field);
        let rate_field = data.rate_field;
        let rate_per_grm = 0;
        if (rate_field != "") {
          rate_per_grm =
            isNaN($("#" + rate_field).val()) || $("#" + rate_field).val() == ""
              ? 0
              : $("#" + rate_field).val();
        }
        curRow.find(".bill_rate_per_grm").val(rate_per_grm);
        calculateSaleBillRowTotal();
      },
    });
  }
}

$(document).on(
  "change",
  ".bill_gross_val,.bill_wastage_per,.bill_mc,.bill_mctype,.bill_taxable_amt,.bill_rate_per_grm",
  function () {
    var row = $(this).closest("tr");

    if (
      (row.find(".itemtype").val() == 2 || row.find(".itemtype").val() == 1) &&
      row.find(".sale_est_itm_id").val() == ""
    ) {
      row.find(".tag_sales_value").val(this.value);
    }

    calculateSaleBillRowTotal();
  }
);

//bill_item_type
$(document).on("change", ".itemtype ", function () {
  var row = $(this).closest("tr");

  if (this.value == 2) {
    row.find(".bill_tag_code").prop("readonly", false);

    row.find(".blc_pcs").css("display", "none");
    row.find(".blc_gwt").css("display", "none");
    row.find(".is_non_tag").val(0);

    get_bill_ActiveProduct(row);
    get_home_bill_counter(row);
  } else if (this.value == 1) {
    row.find(".bill_tag_code").prop("readonly", true);
    getNonTagproducts();
    get_bill_ActiveSections(row);

    row.find(".bill_sale_prod").prop("disabled", false);
    row.find(".bill_sale_design").prop("disabled", false);
    row.find(".bill_purity").prop("disabled", false);
    row.find(".sale_pcs").prop("readonly", false);
    row.find(".bill_gross_val").prop("readonly", false);
    row.find(".bill_wastage").prop("disabled", false);
    row.find(".bill_mc").prop("disabled", false);
    row.find(".bill_mctype").prop("disabled", false);
    row.find(".per_grm_amount").prop("disabled", false);
    row.find(".hb_tag_code ").prop("disabled", false);
    row.find(".partial").prop("disabled", true);
    row.find(".bill_size").prop("disabled", false);
    row.find(".bill_wastage_wt").prop("disabled", false);

    row.find(".bill_section_select ").prop("disabled", false);
    row.find(".bill_sel_product").prop("disabled", false);
    row.find(".bill_select_design").prop("disabled", false);
    row.find(".bill_sel_sub_design").prop("disabled", false);

    row.find(".blc_pcs").css("display", "block");
    row.find(".blc_gwt").css("display", "block");
    row.find(".is_non_tag").val(1);
  }

  // row.find('.bill_section_select').val('');
  // row.find('.sel_product').val('');
  row.find(".sale_product_id").val("");
  row.find(".bill_id_section").val("");
  row.find(".sale_design_id").val("");
  row.find(".bill_id_sub_design").val("");
  row.find(".bill_section_select").select2("val", "");
  row.find(".bill_sel_product").select2("val", "");
  row.find(".bill_select_design").select2("val", "");
  row.find(".bill_sel_sub_design").select2("val", "");
  row.find(".bill_tag_code ").val("");
  // row.find('.bill_select_design').val('');
  // row.find('.bill_sel_sub_design').val('');
  row.find(".bill_tag_id").val("");
  row.find(".sale_pcs").val("");
  row.find(".bill_purity").val("");
  row.find(".bill_gross_val ").val("");
  row.find(".lwt").val("");
  row.find(".bill_sale_net_wt").html("");
  row.find(".sale_pro_hsn").html("");
  row.find(".bill_wastage ").val("");
  row.find(".est_wastage_wt").html("");
  row.find(".bill_wastage_wt").val("");
  row.find(".bill_mc ").val(0);
  row.find(".bill_rate_per_grm ").val("");
  row.find(".bill_discount  ").val("");
  row.find(".bill_taxable_amt ").html("");
  row.find(".tgrp_name ").html("");
  row.find(".tax_amt").val("");
  row.find(".per_grm_amount ").val("");
  row.find(".tag_code ").html("");
  row.find(".bill_amount").val("");
  row.find(".bill_amount").val("");
  row.find(".tgrp_name").html("");
  row.find(".bill_taxable_amt").val("");
  row.find(".bill_amount").val("");
  row.find(".tax_amt").text("");
});

$(document).on("keyup", ".bill_tag_code", function (e) {
  var row = $(this).closest("tr");
  var tagData = this.value;
  var type = "";
  var searchTxt = "";
  if (tagData != "") {
    var istagId = tagData.search("/") > 0 ? true : false;
    var isTagCode = tagData.search("-") > 0 ? true : false;
    if (istagId) {
      var tId = tagData.split("/");
      searchTxt = tId.length >= 2 ? tId[0] : "";
      type = "tag_id";
    } else if (isTagCode) {
      searchTxt = this.value;
      type = "tag_code";
    }
    if (searchTxt != "") {
      if ($("#branch_settings").val() == 1) {
        if ($("#id_branch").val() != "") {
          getCusSearchTags(searchTxt, type, row);
        } else {
          alert("Select Branch");
          $(this).val("");
        }
      } else {
        getCusSearchTags(searchTxt, type, row);
      }
    }
  }
});

function getCusSearchTags(searchTxt, searchField, curRow) {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/getPartialTagSearch/?nocache=" +
      my_Date.getUTCSeconds(),
    dataType: "json",
    method: "POST",
    data: {
      searchTxt: searchTxt,
      searchField: searchField,
      id_branch: $("#id_branch").val(),
    },
    success: function (data) {
      cur_search_tags = data;
      // $.each(data, function(key, item){
      // 	$('#estimation_custom_details > tbody tr').each(function(idx, row){
      // 		if(item != undefined){
      // 			if($(this).find('.est_tag_id').val() == item.value){
      // 				data.splice(key, 1);
      // 			}
      // 		}
      // 	});
      // });
      $(".bill_tag_code ").autocomplete({
        source: data,
        select: function (e, i) {
          e.preventDefault();
          var curRowItem = i.item;
          if (curRowItem.sales_mode == 2) {
            // 1 - Fixed Rate, 2 - Flexible
            get_metal_rates_by_branch(i.item.current_branch);
          }

          var stone_details = [];

          var stone_price = 0;

          $.each(i.item.stone_details, function (skey, sitem) {
            if (sitem.pieces > 0) {
              stone_price += parseFloat(sitem.amount);
              stone_details.push({
                is_apply_in_lwt: sitem.is_apply_in_lwt,
                show_in_lwt: sitem.is_apply_in_lwt,
                stone_id: sitem.stone_id,
                stones_type: sitem.stone_type,
                stone_pcs: sitem.pieces,
                stone_wt: sitem.wt,
                stone_price: sitem.amount,
                stone_rate: sitem.rate_per_gram,
                stone_uom_id: sitem.uom_id,
                stone_cal_type: sitem.stone_cal_type,
                rate_per_gram: sitem.rate_per_gram,
              });
            }
          });

          console.log("test stone details : " + stone_details);
          curRow.find(".sale_product_id").val(curRowItem.product_id);
          curRow.find(".new_prod_id").val(curRowItem.product_id);

          var cur_prod_id = curRowItem.product_id;

          curRow.find(".bill_sale_prod").val(curRowItem.product_name);
          curRow.find(".bill_sale_design").val(curRowItem.design_name);
          curRow.find(".sale_design_id").val(curRowItem.design_id);
          curRow.find(".bill_id_sub_design").val(curRowItem.id_sub_design);
          curRow.find(".bill_purity ").val(curRowItem.purity);
          curRow.find(".sale_purity ").val(curRowItem.purity);

          curRow.find(".bill_cat_purity ").val(curRowItem.purity);
          curRow.find(".sale_pcs").val(curRowItem.piece);
          curRow.find(".bill_sale_pcs").val(curRowItem.piece);
          curRow.find(".bill_gross_val").val(curRowItem.gross_wt);
          curRow.find(".bill_gross_value").val(curRowItem.gross_wt);
          curRow.find(".bill_sale_net_wt").val(curRowItem.net_wt);
          curRow.find(".bill_net_val").html(curRowItem.net_wt);
          curRow.find(".sale_tax_group").val(curRowItem.tax_group_id);
          curRow.find(".bill_tag_code ").val(i.item.label);
          curRow.find(".bill_tag_id").val(i.item.value);
          curRow.find(".bill_mctype ").val(curRowItem.tag_mc_type);
          curRow.find(".bill_id_section").val(curRowItem.id_section);
          curRow.find(".tag_code").html(i.item.label);
          curRow
            .find(".bill_wastage_per")
            .val(curRowItem.retail_max_wastage_percent);

          curRow
            .find(".calculation_based_on")
            .val(curRowItem.calculation_based_on);
          curRow.find(".bill_mc").val(curRowItem.tag_mc_value);
          curRow.find(".rate_field").val(curRowItem.rate_field);
          let rate_field = curRowItem.rate_field;
          if (rate_field != "") {
            rate_per_grm =
              isNaN($("#" + rate_field).val()) ||
              $("#" + rate_field).val() == ""
                ? 0
                : $("#" + rate_field).val();
          }
          curRow.find(".per_grm_amount").val(rate_per_grm);
          curRow.find(".per_grm_amount").html(rate_per_grm);
          curRow.find(".per_grm").val(rate_per_grm);

          curRow.find(".bill_stone_price").val(stone_price);
          curRow.find(".bill_less_val").val(curRowItem.less_wt);
          curRow.find(".bill_size").val(curRowItem.size);
          curRow.find(".bill_id_size").val(curRowItem.size);

          curRow.find(".sale_tag_id").val(i.item.value);

          curRow.find(".is_partial").val(1);
          curRow.find(".cus_size").val(curRowItem.size);
          curRow.find(".size").val(curRowItem.size);
          curRow.find(".cus_tag_blc_gwt").val(curRowItem.gross_wt);
          curRow.find(".cur_gwt").val(curRowItem.gross_wt);
          curRow.find(".cus_lwt").val(curRowItem.less_wt);
          curRow.find(".cus_mc").val(curRowItem.tag_mc_value);
          curRow.find(".id_mc_type").val(curRowItem.tag_mc_type);
          curRow.find(".metal_type").val(curRowItem.metal_type);
          curRow.find(".tax_group_id").val(curRowItem.tax_group_id);
          curRow.find(".act_gwt").val(curRowItem.gross_wt);
          curRow.find(".id_orderdetails").val(curRowItem.id_orderdetails);
          curRow.find(".order_no").html(curRowItem.order_no);
          curRow.find(".stone_details").val(JSON.stringify(stone_details));
          if (
            curRowItem.calculation_based_on == 3 ||
            curRowItem.calculation_based_on == 4
          ) {
            curRow.find(".cus_partial").prop("disabled", true);
          } else {
            curRow.find(".cus_partial").prop("disabled", false);
          }

          if (curRow.find(".itemtype").val() == 2) {
            curRow.find(".bill_sale_prod").prop("readonly", true);
            curRow.find(".bill_sale_design").prop("readonly", true);
            curRow.find(".bill_purity").prop("readonly", true);
            curRow.find(".sale_pcs").prop("readonly", true);
            curRow.find(".bill_gross_val").prop("readonly", true);
            curRow.find(".bill_wastage").prop("readonly", true);
            // curRow.find('.bill_mc').prop('readonly', true);
            // curRow.find('.bill_mctype').prop('readonly', true);
            curRow.find(".per_grm_amount").prop("readonly", true);
            curRow.find(".hb_tag_code ").prop("readonly", true);
            curRow.find(".partial").prop("readonly", false);
            curRow.find(".bill_size").prop("readonly", true);
            curRow.find(".bill_wastage_wt").prop("readonly", true);
          }
          // calculateBillCustomItemSaleValue(curRow);
          // currow_prods();
          var product = "";
          // $.each(currow_prods,function(key,pitem){
          // 		if(cur_prod_id ==pitem.pro_id){
          // 			product += "<option  value='" + pitem.pro_id + "'>" + pitem.product_name + "</option>";

          // 			// $('.new_product').select2("val",(65));

          // 		}
          // });
          // get_ActiveProducts(curRow);

          // 	$(".bill_section_select ").select2("val",(id!='' && id>0?id:''));

          get_bill_ActiveSections(curRow);
          get_bill_ActiveProduct(curRow);
          // get_activeDesigns(id_product="",curRow);
          calculateSaleBillRowTotal();
          calculate_sales_details();

          /*if(validateTagDetailRow()){
							create_new_empty_est_tag_row();
							$('#estimation_tag_details > tbody').find('tr:last td:eq(0) .est_tag_name').focus();
						}*/
        },
        change: function (event, ui) {
          if (ui.item === null) {
            /* $(this).val('');
							curRow.find('td:eq(0) .est_tag_name').val("");
							curRow.find('td:eq(0) .est_tag_id').val(""); */
          } else {
            //$('#estimation_tag_details > tbody').find('tr:last td:eq(0) .est_tag_name').focus();
          }
        },
        response: function (e, i) {
          // ui.content is the array that's about to be sent to the response callback.
          if (searchTxt != "") {
            if (i.content.length !== 0) {
              //console.log("content : ", i.content);
            }
          } else {
            curRow.find(".est_tag_name").val("");
            curRow.find(".est_tag_id").val("");
          }
        },
        minLength: 1,
      });
    },
  });
}

// function get_CurrentProducts(){
// 	$.ajax({
// 		type: 'POST',
// 		url: base_url+'index.php/admin_ret_reports/get_ActiveProduct',
// 		data: ( { 'id_category' :'' }),
// 		dataType:'json',
// 		success:function(data){
// 			currow_prods = data;
// 		}

// });
// }

function get_bill_ActiveSections(curRow) {
  // alert(curRow.find('.bill_id_sub_design').val());

  my_Date = new Date();
  $.ajax({
    type: "POST",
    url:
      base_url +
      "index.php/admin_ret_catalog/get_sectionBranchwise?nocache=" +
      my_Date.getUTCSeconds(),
    data: {
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
    },
    dataType: "json",
    success: function (data) {
      // var id=$("#id_section").val();
      var section_select = curRow.find(".bill_id_section").val();
      if (curRow != "" && curRow != undefined && curRow != null) {
        curRow.find(".bill_section_select option").remove();
        $.each(data, function (key, item) {
          curRow
            .find(".bill_section_select")
            .append(
              $("<option></option>")
                .attr("value", item.id_section)
                .text(item.section_name)
            );
        });
        curRow.find(".bill_section_select").select2({
          placeholder: "Select Section",
          allowClear: true,
        });
      }
      curRow.find(".bill_section_select").select2({
        placeholder: "Select Section",
        allowClear: true,
      });

      // if(id!='' && id!=undefined){
      // 	$(".bill_section_select ").select2("val",(id!='' && id>0?id:''));
      // }
      if (curRow != "" && curRow != undefined && curRow != null) {
        curRow.find(".bill_section_select").select2("val", section_select);
        if (section_select != "") {
          curRow.find(".bill_section_select").prop("disabled", true);
        }
      }
      $(".overlay").css("display", "none");
    },
  });
}

$(document).on("change", ".bill_section_select ", function () {
  var row = $(this).closest("tr");

  if (this.value != "") {
    row.find(".bill_id_section").val(this.value);
  } else {
    // row.find('.bill_id_section').val('');
  }

  if (row.find(".itemtype").val() == 1) {
    getNonTagDesignDetails(row);
  }
});

function get_bill_ActiveProduct(curRow) {
  //$('.sale_product_id option').remove();
  $.ajax({
    type: "POST",
    url: base_url + "index.php/admin_ret_reports/get_ActiveProduct",
    data: { id_category: "" },
    dataType: "json",
    success: function (data) {
      if (curRow != "" && curRow != undefined && curRow != null) {
        var sale_product_id = curRow.find(".sale_product_id").val();

        curRow.find(".bill_sel_product option").remove();
        $.each(data, function (key, item) {
          curRow.find(".bill_sel_product").append(
            $("<option></option>")
              .attr("value", item.pro_id)
              .attr("id_metal", item.id_metal)
              // .attr("tax_percentage", item.tax_percentage)
              .attr("hsn_code", item.hsn_code)
              .attr("tax_group_id", item.tax_group_id)
              .attr("tgrp_name", item.tgrp_name)
              .attr("value", item.pro_id)
              .attr("sales_mode", item.sales_mode)
              .attr("calculation_based_on", item.calculation_based_on)
              .attr("sale_cal_type", item.calculation_based_on)

              .text(item.product_name)
          );
        });
        curRow.find(".bill_sel_product").select2({
          placeholder: "Select Product",
          allowClear: true,
        });
      }

      if (curRow != "" && curRow != undefined && curRow != null) {
        curRow.find(".bill_sel_product ").select2("val", sale_product_id);
        if (sale_product_id != "") {
          curRow.find(".bill_sel_product").prop("disabled", true);
        }
      }
      $(".overlay").css("display", "none");
    },
  });
}

$(document).on("change", ".bill_sel_product ", function () {
  var row = $(this).closest("tr");
  if (this.value != "") {
    let id_product = this.value;

    row.find(".sale_product_id").val(this.value);
    const idMetal = row
      .find(".bill_sel_product option:selected")
      .attr("id_metal");
    const tax_percentage = row
      .find(".bill_sel_product option:selected")
      .attr("tax_percentage");
    const hsn_code = row
      .find(".bill_sel_product option:selected")
      .attr("hsn_code");
    const tax_group_id = row
      .find(".bill_sel_product option:selected")
      .attr("tax_group_id");
    const sale_tax_group = row
      .find(".bill_sel_product option:selected")
      .attr("tgrp_name");
    const sales_mode = row
      .find(".bill_sel_product option:selected")
      .attr("sales_mode");
    const calculation_based_on = row
      .find(".bill_sel_product option:selected")
      .attr("calculation_based_on");
    const sale_cal_type = row
      .find(".bill_sel_product option:selected")
      .attr("sale_cal_type");
    const stone_type = row
      .find(".bill_sel_product option:selected")
      .attr("stone_type");

    row.find(".metal_type").val(idMetal);
    row.find(".sale_pro_hsn").html(hsn_code);
    row.find(".sale_tax_group").val(tax_group_id);
    row.find(".tgrp_name").html(sale_tax_group);
    row.find(".sale_cal_type").html(sale_cal_type);
    row.find(".sale_cal_type").val(sale_cal_type);
    row.find(".sale_cal_type").val(calculation_based_on);
    row.find(".stone_type").val(stone_type);

    row.find(".bill_select_design").select2("val", "");
    // row.find('.bill_sel_sub_design ').select2("val", '');
    if (row.find(".bill_tag_id").val() == "") {
      row.find(".sale_design_id ").val("");
      row.find(".bill_id_sub_design ").val("");
    }

    if (calculation_based_on == 3) {
      curRow.find(".bill_gross_val").attr("readonly", true);
      curRow.find(".bill_wastage ").attr("readonly", true);
      curRow.find(".bill_wastage_wt  ").attr("readonly", true);
      curRow.find(".bill_mc").attr("readonly", true);
      curRow.find(".bill_mctype").attr("readonly", true);
    }

    if (sales_mode == 1) {
      // curRow.find('.bill_gross_val').attr("readonly",true);
      // curRow.find('.bill_less_val').attr("readonly",true);
      // curRow.find('.bill_mc').attr("readonly",true);
      // curRow.find('.bill_wastage').attr("readonly",true);
      // curRow.find('.cus_wastage_wt').attr("readonly",true);
      curRow.find(".bill_taxable_amt").attr("readonly", false);
    } else {
      // curRow.find('.bill_gross_val').attr("readonly",false);
      // curRow.find('.bill_less_val').attr("readonly",false);
      // curRow.find('.bill_mc').attr("readonly",false);
      // curRow.find('.bill_wastage').attr("readonly",false);
      // curRow.find('.cus_wastage_wt').attr("readonly",false);
      curRow.find(".bill_taxable_amt").attr("readonly", true);
      // $('#estimation_custom_details > tbody').find('tr:last td:eq(1) .cus_qty').focus();
    }

    get_sizes(id_product, curRow);

    // row.find('.sale_tax_group').val(sale_tax_group);

    if (row.find(".itemtype").val() == 1) {
      getNontagDesigns(row, this.value);
      getNonTagDesignDetails(row);
    } else if (row.find(".itemtype").val() == 2) {
      get_bill_activeDesigns(id_product, row);
    }
  } else {
    curRow.find(".bill_taxable_amt").attr("readonly", true);

    // row.find('.sale_product_id').val('');
    // row.find('.sale_design_id').val('');
    // row.find('.id_sub_design').val('');
  }
});

function get_bill_activeDesigns(id_product, curRow) {
  $(".overlay").css("display", "block");
  $.ajax({
    type: "POST",
    url: base_url + "index.php/admin_ret_catalog/get_active_design_products",
    dataType: "json",
    data: { id_product: id_product },
    success: function (data) {
      var des_id = curRow.find(".sale_design_id").val();

      if (curRow != "" && curRow != undefined && curRow != null) {
        curRow.find(".bill_select_design option").remove();

        $.each(data, function (key, item) {
          curRow
            .find(".bill_select_design")
            .append(
              $("<option></option>")
                .attr("value", item.design_no)
                .text(item.design_name)
            );
        });

        curRow.find(".bill_select_design").select2({
          placeholder: "Design",
          allowClear: true,
        });
      }

      if (curRow != "" && curRow != undefined && curRow != null) {
        // curRow.find(".sale_design_id").val(curRow.find(".bill_select_design").val());
        curRow
          .find(".bill_select_design")
          .select2("val", des_id != "" ? des_id : "");
        if (des_id != "") {
          curRow.find(".bill_select_design").prop("disabled", true);
        }
      }
      $(".overlay").css("display", "none");
    },
  });
}

$(document).on("change", ".bill_select_design ", function () {
  var row = $(this).closest("tr");
  var id_product = row.find(".sale_product_id").val();

  if (id_product != "") {
    if (this.value != "") {
      let id_design = this.value;
      get_billActiveSubDesigns(id_product, id_design, row);
      row.find(".sale_design_id").val(this.value);

      if (row.find(".itemtype").val() == 1) {
        getNonTagDesignDetails(row);
      }

      if (row.find(".bill_tag_id").val() == "") {
        row.find(".bill_id_sub_design").val("");
        row.find(".bill_sel_sub_design").select2("val", "");
      }
    } else {
      if (row.find(".bill_tag_id").val() == "") {
        row.find(".sale_design_id").val("");
        row.find(".id_sub_design").val("");
      }
    }
  }
  // else {
  // 	$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>Please Select The Product" });

  // }
});

function get_billActiveSubDesigns(id_product, id_design, curRow) {
  $(".overlay").css("display", "block");
  $.ajax({
    type: "POST",
    url: base_url + "index.php/admin_ret_catalog/get_ActiveSubDesigns",
    dataType: "json",
    data: { id_product: id_product, design_no: id_design },
    success: function (data) {
      if (curRow != "" && curRow != undefined && curRow != null) {
        var sub_des_id = curRow.find(".bill_id_sub_design").val();
        curRow.find(".bill_sel_sub_design option").remove();
        $.each(data, function (key, item) {
          curRow
            .find(".bill_sel_sub_design")
            .append(
              $("<option></option>")
                .attr("value", item.id_sub_design)
                .text(item.sub_design_name)
            );
        });

        curRow.find(".bill_sel_sub_design").select2({
          placeholder: "Sub Design",
          allowClear: true,
        });
      }

      if (curRow != "" && curRow != undefined && curRow != null) {
        curRow
          .find(".bill_sel_sub_design")
          .select2("val", sub_des_id != "" ? sub_des_id : "");
        if (sub_des_id != "") {
          curRow.find(".bill_sel_sub_design").prop("disabled", true);
        }
      }

      $(".overlay").css("display", "none");
    },
  });
}

$(document).on("change", ".bill_sel_sub_design ", function () {
  var row = $(this).closest("tr");

  if (row.find(".itemtype").val() == 1) {
    getNonTagDesignDetails(row);
  }
});

function getNonTagproducts() {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/getNonTagproducts/?nocache=" +
      my_Date.getUTCSeconds(),
    dataType: "json",
    method: "POST",
    success: function (data) {
      console.log(data);
      cat_product_details = data;

      console.log("cat_product_details" + cat_product_details);

      if (curRow != "" && curRow != undefined && curRow != null) {
        var sale_product_id = curRow.find(".sale_product_id").val();

        curRow.find(".bill_sel_product option").remove();
        $.each(data, function (key, item) {
          curRow.find(".bill_sel_product").append(
            $("<option></option>")
              .attr("value", item.pro_id)
              .attr("id_metal", item.id_metal)
              // .attr("tax_percentage", item.tax_percentage)
              .attr("hsn_code", item.hsn_code)
              .attr("tax_group_id", item.tax_group_id)
              .attr("calculation_based_on", item.calculation_based_on)
              .attr("sales_mode", item.sales_mode)
              .attr("tgrp_name", item.tgrp_name)

              .attr("value", item.pro_id)
              .text(item.product_name)
          );
        });
        curRow.find(".bill_sel_product").select2({
          placeholder: "Select Product",
          allowClear: true,
        });
      }

      if (curRow != "" && curRow != undefined && curRow != null) {
        curRow.find(".bill_sel_product ").select2("val", sale_product_id);
        if (sale_product_id != "") {
          curRow.find(".bill_sel_product").prop("disabled", true);
        }
      }
      $(".overlay").css("display", "none");
    },
  });
}

function getNontagDesigns(curRow, pro_id, des_id) {
  curRow.find(".cat_design option").remove();
  my_Date = new Date();
  $.ajax({
    url: base_url + "index.php/admin_ret_catalog/get_active_design_products",
    dataType: "json",
    method: "POST",
    data: {
      id_product: pro_id,
      searchTxt: "",
      is_non_tag: curRow.find(".is_non_tag").val(),
      id_branch: $("#id_branch").val(),
      design_no: des_id,
    },
    success: function (data) {
      var des_id = curRow.find(".sale_design_id").val();

      if (curRow != "" && curRow != undefined && curRow != null) {
        curRow.find(".bill_select_design option").remove();

        $.each(data, function (key, item) {
          curRow
            .find(".bill_select_design")
            .append(
              $("<option></option>")
                .attr("value", item.design_no)
                .text(item.design_name)
            );
        });

        curRow.find(".bill_select_design").select2({
          placeholder: "Design",
          allowClear: true,
        });
      }

      if (curRow != "" && curRow != undefined && curRow != null) {
        // curRow.find(".sale_design_id").val(curRow.find(".bill_select_design").val());
        curRow
          .find(".bill_select_design")
          .select2("val", des_id != "" ? des_id : "");
        if (des_id != "") {
          curRow.find(".bill_select_design").prop("disabled", true);
        }
      }
      $(".overlay").css("display", "none");
    },
  });
}

function getNonTagDesignDetails(curRow) {
  my_Date = new Date();
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_estimation/get_non_tag_stock/?nocache=" +
      my_Date.getUTCSeconds(),
    dataType: "json",
    method: "POST",
    data: {
      id_branch: $("#id_branch").val(),
      id_section: curRow.find(".bill_id_section").val(),
      id_product: curRow.find(".sale_product_id").val(),
      id_design: curRow.find(".sale_design_id").val(),
      id_sub_design: curRow.find(".bill_id_sub_design").val(),
    },
    success: function (data) {
      //alert(data);
      console.log(data);
      var curr_used_gross = 0;
      var curr_used_pcs = 0;
      if (curRow.find(".is_non_tag").val() == 1) {
        $("#billing_sale_details> tbody  > tr").each(function (index, tr) {
          if ($(this).find(".itemtype").val() == 1) {
            curr_used_gross += parseFloat(
              $(this).find(".bill_gross_val").val() == ""
                ? 0
                : $(this).find(".bill_gross_val").val()
            );
            curr_used_pcs += parseFloat(
              $(this).find(".sale_pcs").val() == ""
                ? 0
                : $(this).find(".sale_pcs").val()
            );
          }
        });
        if (data != "") {
          curRow.find(".tot_blc_pcs").val(data.no_of_piece - curr_used_pcs);
          curRow.find(".tot_blc_gwt").val(data.gross_wt - curr_used_gross);
          curRow.find(".blc_pcs").html(data.no_of_piece - curr_used_pcs);
          curRow.find(".blc_gwt").html(data.gross_wt - curr_used_gross);
          curRow.find(".blc_pcs").css("display", "block");
          curRow.find(".blc_gwt").css("display", "block");
        } else {
          curRow.find(".tot_blc_pcs").val(0);
          curRow.find(".tot_blc_gwt").val(0);
          curRow.find(".blc_pcs").html(0);
          curRow.find(".blc_gwt").html(0);
          curRow.find(".blc_pcs").css("display", "none");
          curRow.find(".blc_gwt").css("display", "none");
        }
      }
    },
  });
}

$(document).on("keyup", ".stone_wt", function () {
  var row = $(this).closest("tr");

  validate_cur_row_stone_wt(row);
});

$(document).on("change", ".stone_uom_id", function () {
  var row = $(this).closest("tr");

  validate_cur_row_stone_wt(row);
});

function validate_cur_row_stone_wt(row) {
  // Sales
  var active_id = $("#active_id").val();
  var gwt = $("#" + active_id)
    .find(".bill_gross_val")
    .val();
  if (parseFloat(this.value) > parseFloat(gwt)) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Entered Stone WT is greater than Gwt",
    });
    row.find(".stone_wt").val(0);
  }
  var stone_grm_wt = 0;
  var stone_dia_wt = 0;

  $("#stoneModal .modal-body #estimation_stone_item_details> tbody  > tr").each(
    function (index, tr) {
      if ($(this).find(".is_apply_in_lwt ").val() == 1) {
        if ($(this).find(".stone_uom_id").val() == 1) {
          stone_grm_wt += parseFloat($(this).find(".stone_wt").val());
        }
        if ($(this).find(".stone_uom_id").val() == 6) {
          stone_dia_wt += parseFloat(
            parseFloat($(this).find(".stone_wt").val()) / 5
          );
        }
      }
    }
  );

  // if ($('#estimation_stone_item_details>tbody>tr').length > 1) {
  // 	if (parseFloat(gwt) < (parseFloat(stone_grm_wt) + parseFloat(stone_dia_wt))) {
  // 		$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>" + 'Entered Stone WT is greater than Gwt' });
  // 		row.find('.stone_wt').val(0);
  // 		row.find('.stone_uom_id').val(1);

  // 	}
  // }
}

$(document).on("keyup", ".sale_pcs ", function (e) {
  var curr_used_pcs = 0;
  var tot_blc_pcs = 0;
  var row = $(this).closest("tr");
  var sale_design_id = $(this).closest("tr").find(".sale_design_id").val();
  var is_non_tag = $(this).closest("tr").find(".is_non_tag").val();
  if (row.find(".itemtype").val() == 1) {
    $("#billing_sale_details> tbody  > tr").each(function (index, tr) {
      var id_design = $(this).find(".sale_design_id").val();
      if (id_design == sale_design_id) {
        tot_blc_pcs = $(this).find(".tot_blc_pcs").val();
        curr_used_pcs = parseFloat(
          $(this).find(".sale_pcs").val() == ""
            ? 0
            : $(this).find(".sale_pcs").val()
        );
      }
    });
    if (tot_blc_pcs < curr_used_pcs) {
      row.find(".sale_pcs").val(0);
      row.find(".sale_pcs").focus();
      alert("Entered pieces greater than available pieces.");
    } else {
      row.find(".blc_pcs").html(tot_blc_pcs - curr_used_pcs);
    }
  }
});

function get_sizes(id_product, curRow) {
  curRow.find(".bill_size option").remove();

  $.ajax({
    type: "POST",

    url: base_url + "index.php/admin_ret_billing/getactivesize",

    data: { id_product: id_product },

    dataType: "json",

    success: function (data) {
      var id_size = $("#bill_size").val();
      $.each(data, function (key, item) {
        curRow
          .find(".bill_size")
          .append(
            $("<option></option>")
              .attr("value", item.id_size)
              .text(item.size_name)
          );
      });
      curRow.find(".bill_size").select2({
        placeholder: "Select Size",
        allowClear: true,
      });
      curRow.find(".bill_size").select2("val", "");

      if (id_size != "") {
        console.log(id_size);
        curRow
          .find(".bill_size")
          .select2("val", id_size != "" && id_size > 0 ? id_size : "");
      }

      $(".overlay").css("display", "none");
    },
  });
}

$(document).on("change", "bill_size", function () {
  var row = $(this).closest("tr");

  if (this.value != "") {
    row.find(".bill_id_size").val(this.value);
  }
});

function validateOldMatelRow() {
  var row_validate = true;
  $("#purchase_item_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".pur_metal_type").val() == "" ||
      $(this).find(".old_metal_type").val() == "" ||
      $(this).find(".old_metal_category").val() == "" ||
      $(this).find(".pur_piece").val() == "" ||
      $(this).find(".pur_gross_val").val() == "" ||
      $(this).find(".bill_amount").val() == "" ||
      $(this).find(".bill_rate_per_grm").val() == ""
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Please Fill all required field",
      });
      row_validate = false;
    }
  });
  return row_validate;
}

$(document).on("change", ".partial", function () {
  if ($(this).is(":checked")) {
    // var act_mc_value=$(this).closest('tr').find('.act_mc_value').val();
    $(this).closest("tr").find(".is_partial").val(1);
    $(this).closest("tr").find(".bill_gross_val").prop("readonly", false);
    // $(this).closest('tr').find('.mc_value').val(act_mc_value);
  } else {
    var act_gwt = $(this).closest("tr").find(".act_gwt").val();
    // var act_mc_value=$(this).closest('tr').find('.act_mc_value').val();
    var less_wt = $(this).closest("tr").find(".bill_less_val").val();
    $(this).closest("tr").find(".is_partial").val(0);
    $(this).closest("tr").find(".bill_gross_val").prop("readonly", true);
    // $(this).closest('tr').find('.lwt').prop('readonly',true);
    // $(this).closest('tr').find('.gwt').val(act_gwt);
    $(this).closest("tr").find(".bill_gross_val").val(act_gwt);
    // $(this).closest('tr').find('.mc_value').val(act_mc_value);
    // $(this).closest('tr').find('.mc').html(act_mc_value);
    // $(this).closest('tr').find('.nwt').html(parseFloat(act_gwt-less_wt).toFixed(3));
    $(this)
      .closest("tr")
      .find(".bill_net_val")
      .val(parseFloat(act_gwt - less_wt).toFixed(3));
    $(this)
      .closest("tr")
      .find(".bill_net_val")
      .html(parseFloat(act_gwt - less_wt).toFixed(3));
  }
  calculateSaleBillRowTotal();
  calculate_sales_details();
});

$(document).on("keyup", ".bill_gross_val", function () {
  var row = $(this).closest("tr");

  var act_gwt = parseFloat(row.find(".act_gwt").val());
  var gwt = parseFloat(row.find(".bill_gross_val").val());

  if (
    row.find(".is_partial").val() == 1 &&
    row.find(".bill_tag_id").val() != "" &&
    row.find(".bill_tag_code").val() != ""
  ) {
    if (parseFloat(act_gwt) >= parseFloat(isNaN(gwt) ? 0 : gwt)) {
      var less_wt = row.find(".bill_less_val").val();
      var net_wt = parseFloat(gwt - (isNaN(less_wt) ? 0 : less_wt)).toFixed(4);
      row.find(".bill_net_val").html(net_wt);
      row.find(".bill_net_val").val(net_wt);

      // row.find(".tot_nwt").val(net_wt);
      // row.find(".cur_gwt").val(gwt);
      var row = row;
    } else {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Maximum Gross weight Exceed",
      });

      var less_wt = row.find(".bill_less_val").val();
      var net_wt = parseFloat(gwt - (isNaN(less_wt) ? 0 : less_wt)).toFixed(4);
      row.find(".bill_net_val").val(net_wt);
      row.find(".bill_net_val").html(net_wt);

      row.find(".bill_gross_val").val(parseFloat(act_gwt).toFixed(3));
      row.find(".bill_gross_val").val(parseFloat(act_gwt).toFixed(3));
      row.find(".bill_gross_val").focus();
    }
  }

  // calculatetag_SaleValue();

  if (row.find(".itemtype").val() == 1) {
    let tot_blc_gwt = row.find(".tot_blc_gwt").val();

    if (parseFloat(this.value) > parseFloat(tot_blc_gwt)) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>Maximum Gross weight Exceed",
      });
      row.find(".bill_gross_val").val(0);
      row.find(".bill_gross_val").focus();
    }
  }

  calculateSaleBillRowTotal();
  calculate_sales_details();
});

//END OF DIRECT BILLING

/* shortcuts */

$(document).keydown(function (e) {
  if (e.ctrlKey && e.key === "s") {
    e.preventDefault(); // Prevent the default browser save behavior

    if (!$("#pay_submit").prop("disabled")) {
      $("#pay_submit").trigger("click");
    }
  }
});

$(document).keydown(function (e) {
  if (e.key === "F1") {
    e.preventDefault();
    $(".nav-tabs li").removeClass("active"); // Remove active class from all tab links
    $("#tab_make_pay").addClass("active");

    $(".tab-content div").removeClass("active");
    $("#make_pay").addClass("active");
    $("#make_pay_cash").focus();
  } else if (e.key === "F2") {
    e.preventDefault();
    $(".nav-tabs li").removeClass("active"); // Remove active class from all tab links
    // $('#card-detail-modal').modal('show');
    $("#card_detail_modal").trigger("click");
    $(".tab-content div").removeClass("active");
    $("#tab_make_pay").addClass("active");
    $("#make_pay").addClass("active");
  } else if (e.key === "F3") {
    e.preventDefault();
    $(".nav-tabs li").removeClass("active"); // Remove active class from all tab links

    // $('#net_banking_modal').modal('show');
    $("#net_bank_modal").trigger("click");
    $(".tab-content div").removeClass("active");
    $("#tab_make_pay").addClass("active");
    $("#make_pay").addClass("active");
  }
});
/* shortcuts */

function updatePurchaseColumnTotal() {
  $("#purchase_item_details tfoot").empty();
  var pur_gross_val = 0;
  var est_old_dust_val = 0;
  var stone_wt = 0;
  var pur_wastage_wt = 0;
  var pur_net_val = 0;
  var bill_amount = 0;
  $("#purchase_item_details tbody tr").each(function () {
    pur_gross_val += parseFloat($(this).find(".pur_gross_val").val()) || 0;
    est_old_dust_val +=
      parseFloat($(this).find(".est_old_dust_val").val()) || 0;
    stone_wt += parseFloat($(this).find(".stone_wt").val()) || 0;
    pur_wastage_wt += parseFloat($(this).find(".pur_wastage_wt").val()) || 0;
    pur_net_val += parseFloat($(this).find(".pur_net_val").val()) || 0;
    bill_amount += parseFloat($(this).find(".bill_amount").val()) || 0;
  });

  newRow =
    '<tr style="font-weight:bold; color: blue;">' +
    "<td></td>" +
    "<td></td>" +
    "<td>SUB TOTAL</td>" +
    "<td></td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(pur_gross_val).toFixed(3)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(est_old_dust_val).toFixed(3)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(stone_wt).toFixed(3)) +
    "</td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(pur_wastage_wt).toFixed(3)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(pur_net_val).toFixed(3)) +
    "</td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(bill_amount).toFixed(2)) +
    "</td>" +
    "<td></td>" +
    "</tr>";
  $("#purchase_item_details tfoot").append(newRow);
}

$(document).on(
  "change",
  ".pur_gross_val,.pur_wastage_wt,.est_old_dust_val,stone_wt,.pur_net_val,.bill_amount,.pur_wastage,.bill_rate_per_grm",
  function (e) {
    updatePurchaseColumnTotal();
  }
);

function updateSaleColumnTotal() {
  $("#billing_sale_details tfoot").empty();
  var bill_gross_val = 0;
  var lwt = 0;
  var bill_sale_net_wt = 0;
  var bill_wastage_wt = 0;
  var making_charge = 0;
  var tax_amt = 0;
  var bill_taxable_amt = 0;
  var bill_discount = 0;
  var tax_amt = 0;
  var bill_amount = 0;
  var metal_amount = 0;

  var bill_split = "";
  $("#billing_sale_details tbody tr").each(function () {
    bill_gross_val += parseFloat($(this).find(".bill_gross_val").val()) || 0;
    lwt += parseFloat($(this).find(".bill_less_val").val()) || 0;
    bill_sale_net_wt +=
      parseFloat($(this).find(".bill_sale_net_wt").val()) || 0;
    bill_wastage_wt += parseFloat($(this).find(".bill_wastage_wt").val()) || 0;
    making_charge += parseFloat($(this).find(".making_charge").html()) || 0;
    bill_discount += parseFloat($(this).find(".bill_discount").val()) || 0;
    bill_taxable_amt +=
      parseFloat($(this).find(".bill_taxable_amt").val()) || 0;
    tax_amt += parseFloat($(this).find(".tax_amt").html()) || 0;
    bill_amount += parseFloat($(this).find(".bill_amount").val()) || 0;
    metal_amount += parseFloat($(this).find(".other_metal_amount").html()) || 0;
  });

  if (ctrl_page[1] == "bill_split") {
    bill_split = "<td></td>";
  }

  newRow =
    '<tr style="font-weight:bold; color: blue;">' +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    bill_split +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    '<td colspan="2">SUB TOTAL</td>' +
    "<td></td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(bill_gross_val).toFixed(3)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(lwt).toFixed(3)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(bill_sale_net_wt).toFixed(3)) +
    "</td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(bill_wastage_wt).toFixed(3)) +
    "</td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(making_charge).toFixed(2)) +
    "</td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(bill_discount).toFixed(2)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(bill_taxable_amt).toFixed(2)) +
    "</td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(tax_amt).toFixed(2)) +
    "</td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(metal_amount).toFixed(2)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(bill_amount).toFixed(2)) +
    "</td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    // + '<td></td>'
    // + '<td></td>'
    "</tr>";
  $("#billing_sale_details tfoot").append(newRow);
}

$(document).on(
  "change",
  ".bill_gross_val,.bill_sale_net_wt,.bill_wastage_wt,.bill_discount,.bill_taxable_amt,.tax_amt,.bill_amount,.bill_wastage,.bill_mc,.bill_rate_per_grm,.summary_discount_amt",
  function (e) {
    updateSaleColumnTotal();
  }
);

$("#stoneModal").on("hidden.bs.modal", function (e) {
  updateSaleColumnTotal();
});

function updateReturnColumnTotal() {
  $("#sale_return_details tfoot").empty();
  var bill_gross_val = 0;
  var bill_less_val = 0;
  var bill_net_val = 0;
  var bill_discount = 0;
  var tax_amt = 0;
  var bill_taxable_amt = 0;
  var sale_ret_amt = 0;
  var sale_ret_disc_amt = 0;

  var tax_amt = 0;
  var bill_amount = 0;
  var bill_wastage_wt = 0;
  $("#sale_return_details tbody tr").each(function () {
    bill_gross_val += parseFloat($(this).find(".bill_gross_val").val()) || 0;
    bill_less_val += parseFloat($(this).find(".bill_less_val").val()) || 0;
    bill_net_val += parseFloat($(this).find(".bill_net_val").val()) || 0;
    bill_wastage_wt += parseFloat($(this).find(".bill_wastage_wt").val()) || 0;
    bill_discount += parseFloat($(this).find(".bill_discount").val()) || 0;
    bill_taxable_amt +=
      parseFloat($(this).find(".bill_taxable_amt").val()) || 0;
    sale_ret_disc_amt +=
      parseFloat($(this).find(".sale_ret_disc_amt").val()) || 0;
    tax_amt += parseFloat($(this).find(".tax_amt").val()) || 0;
    bill_amount += parseFloat($(this).find(".bill_amount").val()) || 0;
    sale_ret_amt += parseFloat($(this).find(".sale_ret_amt").val()) || 0;
  });

  newRow =
    '<tr style="font-weight:bold; color: blue;">' +
    "<td></td>" +
    '<td colspan="2">SUB TOTAL</td>' +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(bill_gross_val).toFixed(3)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(bill_less_val).toFixed(3)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(bill_net_val).toFixed(3)) +
    "</td>" +
    "<td></td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(bill_discount).toFixed(2)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(bill_taxable_amt).toFixed(2)) +
    "</td>" +
    "<td></td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(bill_amount).toFixed(2)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(sale_ret_disc_amt).toFixed(2)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(sale_ret_amt).toFixed(2)) +
    "</td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "</tr>";
  $("#sale_return_details tfoot").append(newRow);
}

function calculateOrderColumnTotal() {
  $("#billing_order_adv_details tfoot").empty();

  var bill_gross_val = 0;
  var bill_less_val = 0;
  var bill_net_val = 0;
  var bill_mc = 0;

  $("#billing_order_adv_details tbody tr").each(function () {
    bill_gross_val += parseFloat($(this).find(".bill_gross_val").val()) || 0;
    bill_less_val += parseFloat($(this).find(".bill_less_val").val()) || 0;
    bill_less_val += parseFloat($(this).find(".bill_net_val").val()) || 0;
    bill_mc += parseFloat($(this).find(".bill_mc").val()) || 0;
  });

  newRow =
    '<tr style="font-weight:bold; color: blue;">' +
    "<td></td>" +
    '<td colspan="2">SUB TOTAL</td>' +
    "<td>" +
    money_format_india(parseFloat(bill_gross_val).toFixed(3)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(bill_less_val).toFixed(3)) +
    "</td>" +
    "<td>" +
    money_format_india(parseFloat(bill_net_val).toFixed(3)) +
    "</td>" +
    "<td></td>" +
    "<td></td>" +
    "<td>" +
    money_format_india(parseFloat(bill_mc).toFixed(2)) +
    "</td>" +
    "<td></td>" +
    "<td></td>" +
    "<td></td>" +
    "</tr>";

  $("#billing_order_adv_details tfoot").append(newRow);
}

$(document).on("change", ".ref_no", function () {
  var row = $(this).closest("tr"); // get the current row
  var ref_no = row.find(".ref_no").val();
  var rowId = row.attr("id");

  duplicate_ref_no(ref_no, row, rowId);
});

function duplicate_ref_no(ref_no, row, rowId) {
  my_Date = new Date();

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/get_prev_ref_no?nocache=" +
      my_Date.getUTCSeconds(),

    type: "POST",

    data: { ref_no: ref_no },

    dataType: "JSON",

    cache: false,

    success: function (data) {
      let old_tag_id_values = data;

      if (old_tag_id_values.length > 0) {
        $.toaster({
          priority: "danger",
          title: "warning!",
          message: "" + "</br>" + "Ref No Already Exists...",
        });

        row.find(".ref_no").focus();

        row.find(".ref_no").val("");
      } else {
        // row.find('.tag_upd_huid').val(huid);

        if (duplicate_ref_no_row(ref_no, rowId)) {
          row.find(".ref_no").val(ref_no);
        } else {
          $.toaster({
            priority: "danger",
            title: "warning!",
            message: "" + "</br>" + "Ref No Already Exists in row...",
          });

          row.find(".ref_no").focus();

          row.find(".ref_no").val("");
        }
      }
    },
  });
}

function duplicate_ref_no_row(ref_no, rowId) {
  var rowvalidate = true;

  var table = "";

  if ($("#card_details > tbody  > tr").length > 0) {
    table = "card_details";
  } else {
    table = "net_bank_details";
  }

  $("#" + table + " > tbody  > tr").each(function (index, tr) {
    var row = $(this);

    var table_id = $(this).attr("id");

    if (table_id != rowId) {
      if (ref_no == row.find(".ref_no").val()) {
        rowvalidate = false;
      }
    }
  });

  return rowvalidate;
}

$("#close_issue").on("click", function () {
  selected = [];
  $("#receipt_list tbody tr").each(function (index, value) {
    if ($(value).find(".close_issue ").is(":checked")) {
      transData = {
        id_issue_receipt: $(value).find(".id_issue_receipt ").html(),
      };

      selected.push(transData);
    }
    //console.log(transData);
  });

  if (selected.length) {
    close_issue_receipt(selected);
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please Select Issue Id",
    });
  }
});

function close_issue_receipt(req_data) {
  $("div.overlay").css("display", "block");
  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/close_issue_receipt?nocache=" +
      my_Date.getUTCSeconds() +
      "" +
      my_Date.getUTCMinutes() +
      "" +
      my_Date.getUTCHours(),

    data: { req_data: req_data },

    type: "POST",

    dataType: "JSON",

    success: function (data) {
      $.toaster({
        priority: data.class,
        title: data.title,
        message: "" + "</br>" + data.message,
      });

      set_issue_list();

      $("div.overlay").css("display", "none");
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

$(document).on("change", ".show_huid", function () {
  var curRow = $(this).closest("tr");

  if ($(this).prop("checked")) {
    curRow.find(".showHuid").val(1);
  } else {
    curRow.find(".showHuid").val(0);
  }
});

function huid_validation(huid) {
  let letters_and_numbers = /^[a-zA-Z0-9]+$/;
  let result = letters_and_numbers.test(huid);
  if (huid.length < 6) {
    result = false;
  }
  if (huid.length > 6) {
    // const pattern = /^(\d{6},)+\d{6}$/;

    const pattern = /^([\d\w]{6},)+[\d\w]{6}$/;

    if (pattern.test(huid)) {
      result = true;
    } else {
      result = false;
    }
  }
  return result;
}

$(document).on("blur", ".huid", function () {
  let huid = $.trim($(this).val().toUpperCase());
  var curRow = $(this).closest("tr");
  tag_id = curRow.find(".sale_tag_id").val();
  $(this).val(huid);

  if (huid != "") {
    vallid = validate_huid(tag_id, huid);
    console.log(vallid);
    if (
      !huid_validation(huid) ||
      !huid_validation_bills(curRow, huid) ||
      !vallid
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Invalid HUID Number!",
      });
      $(this).focus();
      $(this).val("");
    }
  }
});

function huid_validation_bills(row, huid) {
  result = true;

  $("#billing_sale_details > tbody  > tr").each(function (index, tr) {
    var curRow = $(this).closest("tr");

    if (
      curRow.find(".huid").val() != "" &&
      curRow.find(".huid").val() == huid &&
      curRow.index() != row.index()
    ) {
      result = false;
    }
  });
  return result;
}

function validate_huid(huid, tag_id) {
  status = true;

  $.ajax({
    type: "POST",

    url: base_url + "index.php/admin_ret_billing/validate_huid",

    dataType: "json",

    data: { tag_id: tag_id, huid: huid },

    async: false,

    success: function (data) {
      status = data.status;

      console.log(typeof status);

      if (status != "0") {
        status = true;
      } else {
        status = false;
      }
    },
  });

  return status;
}

/* Denominaion starts */
$(".cash_count").on("keyup", function () {
  let total_denomination_amount = 0;

  $("#denomination > tbody tr").each(function (idx, row) {
    curRow = $(this);

    let cash_count = curRow.find(".cash_count").val();
    let cash_value = curRow.find(".cash_value").val();

    if (cash_count) {
      total_denomination_amount += cash_count * cash_value;
    }
  });
  $("#total_denomination_amount").val(
    parseFloat(total_denomination_amount).toFixed(2)
  );
});

$("#cash_received,#cash_opening_balance,.cash_count").on("keyup", function () {
  let cash_received = $("#cash_received").val() ? $("#cash_received").val() : 0;
  let cash_opening_balance = $("#cash_opening_balance").val()
    ? $("#cash_opening_balance").val()
    : 0;
  let total_denomination_amount = $("#total_denomination_amount").val()
    ? $("#total_denomination_amount").val()
    : 0;
  $("#cash_total").val(
    parseFloat(
      parseFloat(cash_received) + parseFloat(cash_opening_balance)
    ).toFixed(2)
  );

  let total_cash_in_hand =
    parseFloat(cash_received) + parseFloat(cash_opening_balance);
  let total_diff = parseFloat(
    total_denomination_amount - total_cash_in_hand
  ).toFixed(2);

  $("#total_diff").val(total_diff);
});

function get_ActiveCounters() {
  $("#counter_sel option").remove();
  $("div.overlay").css("display", "block");
  $.ajax({
    type: "POST",
    url: base_url + "index.php/admin_ret_catalog/get_ActiveCounter",
    dataType: "json",
    data: {
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
      id_floor: $("#floor_sel").val(),
    },
    success: function (data) {
      var id = $("#counter").val();
      $("#counter_sel").append(
        $("<option></option>").attr("value", 0).text("All")
      );
      $.each(data, function (key, item) {
        $("#counter_sel").append(
          $("<option></option>")
            .attr("value", item.counter_id)
            .text(item.counter_name)
        );
      });
      $("#counter_sel").select2({
        placeholder: "Select Counter",
        allowClear: true,
      });
      $("#counter_sel").select2("val", id != "" && id > 0 ? id : "");
      $(".overlay").css("display", "none");
    },
  });
}

$("#cash_coll_search").on("click", function () {
  getCashCollection_ajax();
});

function getCashCollection_ajax() {
  my_Date = new Date();
  $("div.overlay").css("display", "block");

  var cash_type = $("input[name='cash[cash_type]']:checked").val();

  $.ajax({
    type: "POST",
    data: {
      from_date: $("#cash_coll_date").val(),
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
      counter_id: $("#counter_sel").val(),
      cash_type,
    },
    url:
      base_url +
      "index.php/admin_ret_billing/cash_collection/ajax/?nocache=" +
      my_Date.getUTCSeconds(),
    dataType: "json",
    success: function (data) {
      if (cash_type == 2) {
        let cash_payment = 0;
        let gen_cash_payment = 0;
        if (data.list) {
          if (data.list.payment_details.length > 0) {
            $.each(data.list.payment_details, function (key, item) {
              if (item.payment_mode == "Cash") {
                cash_payment += parseFloat(item.payment_amount);
              }
            });
          }
          if (data.list.general_pay.length > 0) {
            $.each(data.list.general_pay, function (key, item) {
              if (item.payment_mode == "Cash") {
                if (item.transcation_type == 1) {
                  gen_cash_payment += parseFloat(item.payment_amount);
                }
                if (item.transcation_type == 2) {
                  gen_cash_payment -= parseFloat(item.payment_amount);
                }
              }
            });
          }
        }

        // $('.cash_amount').html(parseFloat(parseFloat(cash_payment) + parseFloat(gen_cash_payment)).toFixed(2));
        // $('#cash_amount').val(parseFloat(parseFloat(cash_payment) + parseFloat(gen_cash_payment)).toFixed(2));
        $("#cash_received").val(
          parseFloat(
            parseFloat(cash_payment) + parseFloat(gen_cash_payment)
          ).toFixed(2)
        );
      } else if (cash_type == 1) {
        if (data.list.chit_payment) {
          // $('.cash_amount').html(parseFloat(parseFloat(data.list.chit_payment.cash_bill_pay)).toFixed(2));
          // $('#cash_amount').val(parseFloat(parseFloat(data.list.chit_payment.cash_bill_pay)).toFixed(2));
          $("#cash_received").val(
            parseFloat(
              parseFloat(data.list.chit_payment.cash_bill_pay)
            ).toFixed(2)
          );
        }
      } else if (cash_type == 3) {
        let cash_payment = 0;
        let gen_cash_payment = 0;
        let crm_payment = 0;
        let total_crm_retail_amt = 0;

        if (data.list.chit_payment) {
          crm_payment = parseFloat(data.list.chit_payment.cash_bill_pay);
        }

        if (data.list) {
          if (data.list.payment_details.length > 0) {
            $.each(data.list.payment_details, function (key, item) {
              if (item.payment_mode == "Cash") {
                cash_payment += parseFloat(item.payment_amount);
              }
            });
          }
          if (data.list.general_pay.length > 0) {
            $.each(data.list.general_pay, function (key, item) {
              if (item.payment_mode == "Cash") {
                if (item.transcation_type == 1) {
                  gen_cash_payment += parseFloat(item.payment_amount);
                }
                if (item.transcation_type == 2) {
                  gen_cash_payment -= parseFloat(item.payment_amount);
                }
              }
            });
          }
        }

        total_crm_retail_amt =
          parseFloat(crm_payment) +
          parseFloat(cash_payment) +
          parseFloat(gen_cash_payment);

        $("#cash_received").val(parseFloat(total_crm_retail_amt).toFixed(2));
      }
    },
  });
  $("div.overlay").css("display", "none");
}

$("#cash_coll_save").on("click", function () {
  var form_data = $("#cash_coll_form").serialize();

  $("#cash_coll_save").prop("disabled", true);

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/cash_collection/save?nocache=" +
      my_Date.getUTCSeconds(),

    data: form_data,

    type: "POST",

    dataType: "JSON",

    success: function (data) {
      if (data.status) {
        // window.location.reload();
        window.location.href =
          base_url + "index.php/admin_ret_billing/cash_collection/list";
      }
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
});

function get_cash_collection_list(from_date, to_date) {
  my_Date = new Date();

  $("div.overlay").css("display", "block");

  $.ajax({
    url:
      base_url +
      "index.php/admin_ret_billing/cash_collection/ajax_list?nocache=" +
      my_Date.getUTCSeconds(),

    dataType: "JSON",

    type: "POST",

    data: {
      from_date: $("#cash_date1").text(),
      to_date: $("#cash_date2").text(),
      id_metal: $("#metal").val(),
      emp_id: $("#select_emp").val(),
    },

    success: function (data) {
      set_cash_collection_list(data);

      $("div.overlay").css("display", "none");
    },

    error: function (error) {
      $("div.overlay").css("display", "none");
    },
  });
}

function set_cash_collection_list(data) {
  var list = data.list;
  var oTable = $("#cash_collection_list").DataTable();
  oTable.clear().draw();
  if (list != null && list.length > 0) {
    oTable = $("#cash_collection_list").dataTable({
      bDestroy: true,
      bInfo: true,
      bFilter: true,
      scrollX: "100%",
      bSort: true,
      dom: "lBfrtip",
      order: [[0, "desc"]],
      columnDefs: [
        {
          targets: [4, 5, 6, 7, 8],
          className: "dt-body-right",
        },
      ],
      buttons: [
        {
          extend: "print",
          footer: true,
          title: "Cash Collection Report",
          // messageTop: title,
          customize: function (win) {
            $(win.document.body)
              .find("table")
              .addClass("compact")
              .css("font-size", "10px");
          },
        },
        /* {
					extend: 'colvis',
					collectionLayout: 'fixed columns',
					collectionTitle: 'Column visibility control'
				},
				{
					extend: 'excel',
					footer: true,
					title: "Cash Collection Report",
				} */
      ],
      aaData: list,
      aoColumns: [
        { mDataProp: "date" },
        { mDataProp: "branch_name" },
        { mDataProp: "counter_name" },
        { mDataProp: "cash_type" },
        { mDataProp: "sales_amount" },
        { mDataProp: "cash_on_hand" },
        { mDataProp: "opening_balance" },
        { mDataProp: "total_amount" },
        { mDataProp: "diff" },
        {
          mDataProp: null,

          sClass: "control center",

          sDefaultContent:
            '<span class="drill-val"><i class="fa fa-chevron-circle-down text-teal"></i></span>',
        },
        {
          mDataProp: function (row, type, val, meta) {
            id = row.cash_collection_id;

            print_url =
              base_url +
              "index.php/admin_ret_billing/cash_collection/print/" +
              id;

            action_content =
              '<a href="' +
              print_url +
              '" target="_blank" class="btn btn-info btn-print" data-toggle="tooltip" title="Receipt"><i class="fa fa-print" ></i></a>';

            return action_content;
          },
        },
      ],
    });

    var anOpen = [];

    $(document).on("click", "#cash_collection_list .control", function () {
      var nTr = this.parentNode;

      var i = $.inArray(nTr, anOpen);

      if (i === -1) {
        $(".drill-val", this).html(
          '<i class="fa fa-chevron-circle-up text-teal"></i>'
        );

        oTable.fnOpen(nTr, fnFormatRowCashDetails(oTable, nTr), "details");

        anOpen.push(nTr);
      } else {
        $(".drill-val", this).html(
          '<i class="fa fa-chevron-circle-down text-teal"></i>'
        );

        oTable.fnClose(nTr);

        anOpen.splice(i, 1);
      }
    });
  }

  $("div.overlay").css("display", "none");
}

function fnFormatRowCashDetails(oTable, nTr) {
  var oData = oTable.fnGetData(nTr);

  var rowDetail = "";

  var prodTable =
    '<div class="innerDetails">' +
    '<table class="table table-responsive table-bordered text-center table-sm">' +
    '<tr class="bg-teal">' +
    "<th>S.No</th>" +
    "<th>Cash</th>" +
    "<th>Count</th>" +
    "<th>Amount</th>" +
    "</tr>";

  var cash_details = oData.cash_details;

  $.each(cash_details, function (idx, val) {
    prodTable +=
      '<tr class="prod_det_btn">' +
      "<td>" +
      parseFloat(idx + 1) +
      "</td>" +
      "<td>" +
      val.note +
      "</td>" +
      "<td>" +
      val.value +
      "</td>" +
      "<td>" +
      val.amount +
      "</td>" +
      "</tr>";
  });

  rowDetail = prodTable + "</table></div>";

  return rowDetail;
}

/* Denominaion ends */
//Account Head Starts

// $('#account_head_modal').on('click',function(){

//     $('#account_head_modal').modal('show');

//     if($('#account_head_details > tbody > tr').length==0)

//     {

//          create_new_empty_account_head_row();

//     }

// });

$("#new_account_head").on("click", function () {
  $("#AccountAlert span").remove();

  if (validateaccDetailRow()) {
    create_new_empty_account_head_row();
  } else {
    $("#AccountAlert").append(
      "<span>Please fill all fields in current row.</span>"
    );

    $("#AccountAlert span").delay(20000).fadeOut(500);
  }
});

function validateaccDetailRow() {
  var row_validate = true;

  $("#account_head_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".acc_head").val() == "" ||
      $(this).find(".c_amount").val() == ""
    ) {
      $.toaster({
        priority: "danger",
        title: "Warning!",
        message: "" + "</br>" + "Please Fill The Required Fields..",
      });

      row_validate = false;

      return true;
    }
  });

  return row_validate;
}

function removeacc_row(curRow) {
  curRow.remove();

  calculate_Acc_Amount();
}

function calculate_Acc_Amount() {
  var total_amount = 0;

  var acc_amount = 0;

  $("#account_head_modal .modal-body #account_head_details > tbody  > tr").each(
    function (index, tr) {
      if ($(this).find(".c_amount").val() != "") {
        acc_amount += parseFloat($(this).find(".c_amount").val());
      }
    }
  );

  $(".ah_total_amount").html(parseFloat(acc_amount).toFixed(2));

  $("#issue_amount").val(parseFloat(acc_amount).toFixed(2));

  $(".pay_to_cus").val(parseFloat(acc_amount).toFixed(2));
}

function create_new_empty_account_head_row() {
  var acc_list = "";

  // var acc_list='<option value="">Select Account Head</option>';

  $.each(account_details, function (pkey, item) {
    acc_list +=
      "<option value='" + item.id_acc_head + "'>" + item.name + "</option>";
  });

  var row = "";

  row +=
    "<tr>" +
    '<td class="acc_type" ><select class="form-control acc_head" name="acc_details[id_acc_head][]" >' +
    acc_list +
    "</select></td> " +
    '<td><input type="number" step="any" class="form-control c_amount"  name="acc_details[amount][]"/></td>' +
    '<td><a href="#" onClick="removeacc_row($(this).closest(\'tr\'));" class="btn btn-danger btn-del"><i class="fa fa-trash"></i></a></td>' +
    "</tr>";

  $("#account_head_details tbody").append(row);

  calculate_Acc_Amount();
}

$(document).on("keyup", ".c_amount", function (e) {
  calculate_Acc_Amount();
});

$("#save_issue_account").on("click", function () {
  var acc_head = [];

  if (validateaccDetailRow()) {
    $(
      "#account_head_modal .modal-body #account_head_details > tbody  > tr"
    ).each(function (index, tr) {
      if (
        $(this).find(".c_amount").val() != "" &&
        $(this).find(".c_amount").val() != undefined
      ) {
        acc_head.push({
          id_account_head: $(this).find(".acc_head").val(),
          amount: $(this).find(".c_amount").val(),
        });
      }
    });

    console.log(acc_head);

    $("#acc_head_details").val(
      acc_head.length > 0 ? JSON.stringify(acc_head) : ""
    );

    $("#account_head_modal").modal("toggle");

    // var total = $('.ah_total_amount').html();

    // $('#issue_amount').val(total);

    calculate_Acc_Amount();

    calculateIssueAmount();
  } else {
    alert("Please fill required fields");
  }
});

//Account Head Ends

//Purchase Split
$("#pu_no_of_split").on("keyup", function () {
  if (this.value != "") {
    var split_value = $("#pu_no_of_split").val().split(",");
    var count = 0;
    for (var i = 0, n = split_value.length; i < n; i++) {
      count += parseFloat(split_value[i]);
    }
    if (count == 100) {
      $("#apply_pu_split").attr("disabled", false);
    } else {
      $("#apply_pu_split").attr("disabled", true);
    }
  }
});

$("#apply_pu_split").on("click", function () {
  $("#bill_split_pu_details > tbody").empty();

  var split_value = $("#pu_no_of_split").val().split(",");
  var count = 0;
  for (var i = 0, n = split_value.length; i < n; i++) {
    count += parseFloat(split_value[i]);
  }
  if (count == 100) {
    $("#purchase_item_details > tbody tr").each(function (idx, row) {
      curRow = $(this);
      createPurchaseBillSplitRow(curRow);
    });
    calculate_purchase_split_details();
  } else {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Please enter valid split ratio.",
      settings: { timeout: 5000 },
    });
  }
});

function createPurchaseBillSplitRow(curRow) {
  if (curRow != undefined) {
    var pursplitrows = [];
    var split_value = $("#pu_no_of_split").val().split(",");
    var tot_length = $("#bill_split_pu_details tbody tr").length;
    for (var i = 0, n = split_value.length; i < n; i++) {
      var splitratio = split_value[i];

      var old_est_sale_row = curRow;

      console.log(old_est_sale_row.find(".pur_gross_val").val());

      var split_gross_wt = parseFloat(
        parseFloat(old_est_sale_row.find(".pur_gross_val").val()) *
          (splitratio / 100)
      ).toFixed(3);

      var split_net_wt = parseFloat(
        parseFloat(old_est_sale_row.find(".pur_net_val").val()) *
          (splitratio / 100)
      ).toFixed(3);

      var split_less_wt = parseFloat(
        parseFloat(
          parseFloat(old_est_sale_row.find(".pur_gross_val").val()) -
            parseFloat(old_est_sale_row.find(".pur_net_val").val())
        ) *
          (splitratio / 100)
      ).toFixed(3);

      var split_va_wt = parseFloat(
        parseFloat(old_est_sale_row.find(".pur_wastage_wt").val()) *
          (splitratio / 100)
      ).toFixed(3);

      var split_dust_wt = parseFloat(
        parseFloat(old_est_sale_row.find(".est_old_dust_val").val()) *
          (splitratio / 100)
      ).toFixed(3);

      //var split_st_val = parseFloat(parseFloat(old_est_sale_row.find('.other_stone_price').val()) * (splitratio / 100)).toFixed(2);

      var split_amt_val = parseFloat(
        parseFloat(old_est_sale_row.find(".bill_amount").val()) *
          (splitratio / 100)
      ).toFixed(2);

      var split_other_st_val = parseFloat(
        parseFloat(old_est_sale_row.find(".other_stone_price").val()) *
          (splitratio / 100)
      ).toFixed(2);

      var stone_details = old_est_sale_row.find(".stone_details").val();

      var row_stn_details = [];

      if (stone_details != "") {
        stone_details = JSON.parse(stone_details);
        if (stone_details.length > 0) {
          $.each(stone_details, function (k, val) {
            var sp_stone_weight = isNaN(parseFloat(val.stone_wt))
              ? 0
              : parseFloat(
                  parseFloat(val.stone_wt) * (splitratio / 100)
                ).toFixed(3);
            var sp_stone_price = isNaN(parseFloat(val.stone_price))
              ? 0
              : parseFloat(
                  parseFloat(val.stone_price) * (splitratio / 100)
                ).toFixed(2);
            row_stn_details.push({
              stone_id: val.stone_id,
              est_old_metal_stone_id: val.est_old_metal_stone_id,
              uom_id: val.uom_id,
              stone_pcs: val.stone_pcs,
              stone_wt: sp_stone_weight,
              stone_price: sp_stone_price,
            });
          });
        }
      }

      var row =
        '<tr id="' +
        tot_length +
        '">' +
        "<td><span>" +
        (tot_length + 1) +
        '</span><input type="hidden" class="is_pur_utilized" value="0" name="split_purchase[is_pur_utilized][]" /></td>' +
        "<td><span>" +
        old_est_sale_row.find(".old_metal_category option:selected").text() +
        '</span><input type="hidden" class="is_est_details" value="1" name="split_purchase[is_est_details][]" /><input type="hidden" class="est_old_itm_id" value="' +
        old_est_sale_row.find(".est_old_itm_id").val() +
        '" name="split_purchase[est_old_itm_id][]" /><input type="hidden" name="purchase[est_itm_id][]" class="est_itm_id" value="' +
        old_est_sale_row.find(".est_old_itm_id").val() +
        '" /><input type="hidden" class="item_type" name="split_purchase[itemtype][]" value="' +
        old_est_sale_row.find(".item_type").val() +
        '" /><input type="hidden" class="pur_metal_type" value="' +
        old_est_sale_row.find(".pur_metal_type").val() +
        '" name="split_purchase[metal_type][]" /></td>' +
        '<td>-<input type="hidden" class="est_old_metal_type" value="' +
        old_est_sale_row.find(".old_metal_type").val() +
        '" name="split_purchase[old_metal_type][]" /><input type="hidden" class="est_old_metal_category" value="' +
        old_est_sale_row.find(".old_metal_category").val() +
        '" name="split_purchase[old_metal_category][]" /></td>' +
        '<td><input type="number" class="pur_pcs" name="split_purchase[pcs][]" value="1" /><input type="hidden" class="pur_purity" value="' +
        old_est_sale_row.find(".purity").val() +
        '" name="split_purchase[purity][]" /><input type="hidden" class="pur_touch" value="' +
        old_est_sale_row.find(".old_touch").val() +
        '" name="split_purchase[touch][]" /></td>' +
        "<td><span>" +
        split_gross_wt +
        '</span><input type="hidden" class="pur_gross_val" name="split_purchase[gross][]" value="' +
        split_gross_wt +
        '" /></td>' +
        "<td><span>" +
        split_less_wt +
        '</span><input type="hidden" class="pur_less_val" name="split_purchase[less][]" value="' +
        split_less_wt +
        '" /></td>' +
        "<td><span>" +
        split_net_wt +
        '</span><input type="hidden" class="pur_net_val" name="split_purchase[net][]" value="' +
        split_net_wt +
        '" /><input type="hidden" class="est_old_dust_val" name="split_purchase[dust_wt][]" value="' +
        split_dust_wt +
        '" /><input type="hidden" class="est_old_stone_val" value="' +
        split_other_st_val +
        '"  name="split_purchase[stone_wt][]"/></td>' +
        "<td><span>" +
        old_est_sale_row.find(".pur_wastage").val() +
        '</span><input type="hidden" class="pur_wastage" name="split_purchase[wastage][]" value="' +
        old_est_sale_row.find(".pur_wastage").val() +
        '" /></td>' +
        "<td><span>" +
        split_va_wt +
        '</span><input type="hidden" class="pur_wastage_wt" name="split_purchase[wastage_wt][]" value="' +
        split_va_wt +
        '" /></td>' +
        '<td><input type="number" class="pur_discount" name="split_purchase[discount][]" value="0" /></td>' +
        '<td><a href="#" onClick="create_new_empty_bill_purchase_stone_item($(this).closest(\'tr\'));" class="btn btn-success"><i class="fa fa-plus"></i></a><input type="hidden" class="stone_details" value=\'' +
        JSON.stringify(row_stn_details) +
        '\' name="split_purchase[stone_details][]"/><input type="hidden" class="other_stone_price" value="' +
        split_other_st_val +
        '" /><input type="hidden" class="other_stone_wt" value="' +
        old_est_sale_row.find(".other_stone_wt").val() +
        '" /><input type="hidden" class="bill_material_price" value="' +
        old_est_sale_row.find(".bill_material_price").val() +
        '"/></td>' +
        '<td><input type="number" class="bill_amount" name="split_purchase[billamount][]" value="' +
        split_amt_val +
        '" step="any" readonly /><input type="hidden" class="bill_rate_per_grm" name="split_purchase[rate_per_grm][]" value="' +
        old_est_sale_row.find(".bill_rate_per_grm").val() +
        '" step="any" readonly /></td>' +
        "<td><span>" +
        old_est_sale_row.find(".pur_est_id").val() +
        '</span><input type="hidden" class="pur_est_id" name="split_purchase[estid][]" value="' +
        old_est_sale_row.find(".pur_est_id").val() +
        '" /></td>' +
        "</tr>";
      $("#bill_split_pu_details tbody").append(row);

      tot_length++;
    }
  }
}
function create_oldmetal_split() {
  var total_purchase_cost = 0;
  var splitted_purchase_weight = 0;
  var splitted_purchase_bill_amount = 0;
  var summary_pur_weight = $(".pur_det_gwt").html();

  $("#billing_split_sale_details > tbody tr").each(function (idx, row) {
    curRow = $(this);
    var old_metal_details = [];
    var purchase_weight = 0;
    $("#purchase_item_details > tbody tr").each(function (idx, row) {
      oldmetalRow = $(this);
      var total_splitted_amount =
        parseFloat(oldmetalRow.find(".bill_amount").val()) +
        parseFloat(splitted_purchase_bill_amount);
      if (
        parseFloat(curRow.find(".bill_amount").val()) >
        parseFloat(total_splitted_amount)
      ) {
        split_weight =
          parseFloat(oldmetalRow.find(".pur_gross_val").val()) -
          parseFloat(purchase_weight);
        splitted_purchase_weight += parseFloat(split_weight);
        splitted_purchase_bill_amount += parseFloat(
          oldmetalRow.find(".bill_amount").val()
        );
        if (
          parseFloat(summary_pur_weight) >= parseFloat(splitted_purchase_weight)
        ) {
          purchase_weight += parseFloat(split_weight);
          old_metal_details.push({
            bill_est_touch: oldmetalRow.find(".bill_est_touch").val(),
            purity: oldmetalRow.find(".purity").val(),
            is_est_details: oldmetalRow.find(".is_est_details").val(),
            est_old_itm_id: oldmetalRow.find(".est_old_itm_id").val(),
            item_type: oldmetalRow.find(".item_type").val(),
            pur_metal_type: oldmetalRow.find(".pur_metal_type").val(),
            pur_pcs: oldmetalRow.find(".pur_pcs").val(),
            pur_gross_val: split_weight,
            pur_less_val: oldmetalRow.find(".pur_less_val").val(),
            pur_net_val: oldmetalRow.find(".pur_net_val").val(),
            est_old_dust_val: oldmetalRow.find(".est_old_dust_val").val(),
            est_old_stone_val: oldmetalRow.find(".est_old_stone_val").val(),
            pur_wastage: oldmetalRow.find(".pur_wastage").val(),
            pur_wastage_wt: oldmetalRow.find(".pur_wastage_wt").val(),
            pur_discount: oldmetalRow.find(".pur_discount").val(),
            other_stone_price: oldmetalRow.find(".other_stone_price").val(),
            other_stone_wt: oldmetalRow.find(".other_stone_wt").val(),
            bill_material_price: oldmetalRow.find(".bill_material_price").val(),
            bill_amount: oldmetalRow.find(".bill_amount").val(),
            bill_rate_per_grm: oldmetalRow.find(".bill_rate_per_grm").val(),
            pur_est_id: oldmetalRow.find(".pur_est_id").val(),
            pur_esti_no: oldmetalRow.find(".pur_esti_no").val(),
          });
        }
      } else {
        var item_cost = curRow.find(".bill_amount").val();
        var old_metal_rate = oldmetalRow.find(".bill_rate_per_grm").val();
        var gross_wt = parseFloat(
          parseFloat(item_cost) / parseFloat(old_metal_rate)
        ).toFixed(3);
        purchase_weight += parseFloat(gross_wt);
        old_metal_details.push({
          bill_est_touch: oldmetalRow.find(".bill_est_touch").val(),
          purity: oldmetalRow.find(".purity").val(),
          is_est_details: oldmetalRow.find(".is_est_details").val(),
          est_old_itm_id: oldmetalRow.find(".est_old_itm_id").val(),
          item_type: oldmetalRow.find(".item_type").val(),
          pur_metal_type: oldmetalRow.find(".pur_metal_type").val(),
          pur_pcs: oldmetalRow.find(".pur_pcs").val(),
          pur_gross_val: gross_wt,
          pur_less_val: oldmetalRow.find(".pur_less_val").val(),
          pur_net_val: oldmetalRow.find(".pur_net_val").val(),
          est_old_dust_val: oldmetalRow.find(".est_old_dust_val").val(),
          est_old_stone_val: oldmetalRow.find(".est_old_stone_val").val(),
          pur_wastage: oldmetalRow.find(".pur_wastage").val(),
          pur_wastage_wt: oldmetalRow.find(".pur_wastage_wt").val(),
          pur_discount: oldmetalRow.find(".pur_discount").val(),
          other_stone_price: oldmetalRow.find(".other_stone_price").val(),
          other_stone_wt: oldmetalRow.find(".other_stone_wt").val(),
          bill_material_price: oldmetalRow.find(".bill_material_price").val(),
          bill_amount: oldmetalRow.find(".bill_amount").val(),
          bill_rate_per_grm: oldmetalRow.find(".bill_rate_per_grm").val(),
          pur_est_id: oldmetalRow.find(".pur_est_id").val(),
          pur_esti_no: oldmetalRow.find(".pur_esti_no").val(),
        });
      }
    });
    curRow.find(".old_metal_details").val(JSON.stringify(old_metal_details));
    curRow
      .find(".purchase_weight")
      .html(parseFloat(purchase_weight).toFixed(3));
  });
}

function calculate_purchase_split_details() {
  var pur_weight = 0;
  var pur_rate = 0;
  var gift_voucher = 0;
  var chit_amt = 0;
  var tot_pur_pcs = 0;
  var tot_pur_gwt = 0;
  var tot_pur_lwt = 0;
  var tot_pur_nwt = 0;
  var tot_pur_dis = 0;
  var tot_pur_value = 0;
  $("#bill_split_pu_details > tbody  > tr").each(function (index, tr) {
    if (
      $(this).find(".pur_gross_val").val() != "" &&
      $(this).find(".bill_amount").val() != ""
    ) {
      pur_weight += parseFloat(
        isNaN($(this).find(".pur_net_val").val()) ||
          $(this).find(".pur_net_val").val() == ""
          ? 0
          : $(this).find(".pur_net_val").val()
      );
      pur_rate += parseFloat(
        isNaN($(this).find(".bill_amount").val()) ||
          $(this).find(".bill_amount").val() == ""
          ? 0
          : $(this).find(".bill_amount").val()
      );
      tot_pur_pcs += parseFloat(
        isNaN($(this).find(".pur_pcs").val()) ||
          $(this).find(".pur_pcs").val() == ""
          ? 0
          : $(this).find(".pur_pcs").val()
      );
      tot_pur_gwt += parseFloat(
        isNaN($(this).find(".pur_gross_val").val()) ||
          $(this).find(".pur_gross_val").val() == ""
          ? 0
          : $(this).find(".pur_gross_val").val()
      );
      tot_pur_lwt += parseFloat(
        isNaN($(this).find(".pur_less_val").val()) ||
          $(this).find(".pur_less_val").val() == ""
          ? 0
          : $(this).find(".pur_less_val").val()
      );
      tot_pur_nwt += parseFloat(
        isNaN($(this).find(".pur_net_val").val()) ||
          $(this).find(".pur_net_val").val() == ""
          ? 0
          : $(this).find(".pur_net_val").val()
      );
      tot_pur_dis += parseFloat(
        isNaN($(this).find(".pur_discount").val()) ||
          $(this).find(".pur_discount").val() == ""
          ? 0
          : $(this).find(".pur_discount").val()
      );
      tot_pur_value += parseFloat(
        isNaN($(this).find(".bill_amount").val()) ||
          $(this).find(".bill_amount").val() == ""
          ? 0
          : $(this).find(".bill_amount").val()
      );
    }
  });

  $(".split_pur_det_pcs").html(tot_pur_pcs);
  $(".split_pur_det_gwt").html(parseFloat(tot_pur_gwt).toFixed(3));
  $(".split_pur_det_lwt").html(parseFloat(tot_pur_lwt).toFixed(3));
  $(".split_pur_det_nwt").html(parseFloat(tot_pur_nwt).toFixed(3));
  $(".split_pur_det_dis").html(parseFloat(tot_pur_dis).toFixed(2));
  $(".split_pur_det_purvalue").html(parseFloat(tot_pur_value).toFixed(2));
  //calculateFinalCost();
}

function create_new_empty_old_metal_details_row(curRow, id) {
  if (curRow != undefined) {
    $("#row_active_id").val(curRow.closest("tr").attr("id"));
    selected_split_row = curRow;
  }
  var row = "";
  var catRow = $("#row_active_id").val();
  /*	var item_cost = curRow.find('.split_recd_amount').val();
		var row_payment_details = $(curRow).find('.split_payment_details').val();
		var cus_advance_details = $(curRow).find('.cus_advance_details').val();
		if (row_payment_details != "") {
			var payment_details = JSON.parse(row_payment_details);
			if (payment_details.length > 0) {
				$.each(payment_details, function (pkey, pitem) {
					create_new_empty_payment_row(pitem);
				});
			}
		}
		else {
			add_new_payment();
		}
		if (cus_advance_details != '') {
			var adv_details = JSON.parse(cus_advance_details);
			console.log(adv_details);
			if (adv_details.length > 0) {
				$.each(adv_details, function (pkey, pitem) {
					create_new_empty_split_advance_row(pitem);
				});
			}
		}*/

  /*var clonedTbody = $("#bill_split_pu_details tbody").clone();
	clonedTbody.find("td:first-child").prepend("<input type='checkbox' class='is_utilized' />");
	// Append modified tbody to another table
	$("#split_purchase_item_details tbody").html(clonedTbody);*/

  $("#split_purchase_item_details tbody").empty();

  $(".curr_bill_sal_val").html(
    parseFloat(selected_split_row.find(".bill_amount").val()).toFixed(2)
  );

  var _selected_pur_details = selected_split_row
    .find(".old_metal_details")
    .val();
  var _selected_gwt = 0;
  var _selected_nwt = 0;
  var _selected_amt = 0;

  if (_selected_pur_details != "") {
    _selected_pur_details = JSON.parse(_selected_pur_details);
  }

  $("#bill_split_pu_details tbody tr").each(function () {
    // Clone the row
    var clonedRow = $(this).clone();

    var _crow_id = $(this).attr("id");

    var is_checked = "";
    var is_utilized = 0;
    var is_current_row_selected = 0;
    var is_row_disabled = "";
    if (clonedRow.find(".is_pur_utilized").val() == 1) {
      is_checked = "checked";
      is_utilized = 1;
      is_row_disabled = "disabled";
      if (_selected_pur_details != "") {
        $.each(_selected_pur_details, function (k, val) {
          if (val.selected_row_id == _crow_id) {
            is_row_disabled = "";
            is_current_row_selected = 1;

            _selected_gwt += parseFloat(
              isNaN(selected_split_row.find(".pur_gross_val").val()) ||
                selected_split_row.find(".pur_gross_val").val() == ""
                ? 0
                : selected_split_row.find(".pur_gross_val").val()
            );
            _selected_nwt += parseFloat(
              isNaN(selected_split_row.find(".pur_net_val").val()) ||
                selected_split_row.find(".pur_net_val").val() == ""
                ? 0
                : selected_split_row.find(".pur_net_val").val()
            );
            _selected_amt += parseFloat(
              isNaN(selected_split_row.find(".bill_amount").val()) ||
                selected_split_row.find(".bill_amount").val() == ""
                ? 0
                : selected_split_row.find(".bill_amount").val()
            );
          }
        });
      }
    }

    // Add a checkbox in the first td
    clonedRow
      .find("td:first-child")
      .prepend(
        "<input value='" +
          is_utilized +
          "' " +
          is_checked +
          " type='checkbox' class='is_utilized' " +
          is_row_disabled +
          " /><input value='" +
          is_current_row_selected +
          "' type='hidden' class='iscurrentrowselected' />"
      );
    // Append the modified row to the target table = 1;
    $("#split_purchase_item_details tbody").append(clonedRow);
  });

  $(".curr_grs_wt").html(parseFloat(_selected_gwt).toFixed(3));
  $(".curr_net_wt").html(parseFloat(_selected_nwt).toFixed(3));
  $(".curr_tot_amt").html(parseFloat(_selected_amt).toFixed(2));

  $("#purchase_item_details_model").modal("show");
  //$('.tot_bill_split_amount').html(item_cost);
  calculate_split_payment_amount();
}

//Purchase Stone
function create_new_empty_bill_purchase_stone_item(curRow, id) {
  if (curRow != undefined) {
    $("#pur_active_id").val(curRow.closest("tr").attr("id"));
  }
  var row = "";
  var catRow = $("#pur_active_id").val();
  var row_st_details = $(curRow).find(".stone_details").val();
  var stone_details = JSON.parse(row_st_details);
  if (stone_details.length > 0) {
    $.each(stone_details, function (pkey, pitem) {
      var stones_list = "";
      $.each(stones, function (pkey, item) {
        var selected = "";
        if (item.stone_id == pitem.stone_id) {
          selected = "selected='selected'";
          disabled = "disabled='disabled'";
        }
        stones_list +=
          "<option value='" +
          item.stone_id +
          "'" +
          selected +
          ">" +
          item.stone_name +
          "</option>";
      });
      row +=
        '<tr><td><select class="stone_id" name="est_stones_item[stone_id][]" ' +
        disabled +
        ">" +
        stones_list +
        '</select><input type="hidden" class="stone_id" name="est_stones[stone_id][]" value="' +
        pitem["stone_id"] +
        '" disabled/></td><td><input type="number" class="stone_pcs" name="est_stones[stone_pcs][]" value="' +
        pitem["stone_pcs"] +
        '" disabled/></td><td><input class="stone_wt" type="number" name="est_stones[stone_wt][]" value="' +
        pitem["stone_wt"] +
        '" disabled/></td><td><input type="number" class="stone_price" name="est_stones[stone_price][]" value="' +
        pitem["stone_price"] +
        '" disabled></td><td>-</td></tr>';
    });
  }
  $("#PurstoneModal .modal-body")
    .find("#estimation_pur_stone_item_details tbody")
    .append(row);
  $("#PurstoneModal").modal("show");
}
$("#purchase_item_details_model  #update_pur_item_details").on(
  "click",
  function () {
    var catRow = $("#row_active_id").val();
    var old_metal_payment_details = [];
    var total_recd_amt = 0;
    $(
      "#purchase_item_details_model .modal-body #split_purchase_item_details > tbody  > tr"
    ).each(function (index, tr) {
      if ($(this).find(".iscurrentrowselected").val() == 1) {
        total_recd_amt += parseFloat($(this).find(".bill_amount").val());

        old_metal_payment_details.push({
          selected_row_id: $(this).attr("id"),

          metal_type: $(this).find(".pur_metal_type").val(),

          itemtype: $(this).find(".item_type").val(),

          est_old_itm_id: $(this).find(".est_old_itm_id").val(),

          piece: $(this).find(".pur_pcs").val(),

          gross: $(this).find(".pur_gross_val").val(),

          stone_wt: $(this).find(".est_old_stone_val").val(),

          dust_wt: $(this).find(".est_old_dust_val").val(),

          net: $(this).find(".pur_net_val").val(),

          wastage_wt: $(this).find(".pur_wastage_wt").val(),

          wastage: $(this).find(".pur_wastage").val(),

          billamount: $(this).find(".bill_amount").val(),

          rate_per_grm: $(this).find(".bill_rate_per_grm").val(),

          purity: $(this).find(".pur_purity").val(),

          touch: $(this).find(".pur_touch").val(),

          discount: $(this).find(".pur_discount").val(),

          stone_details: $(this).find(".stone_details").val(),

          old_metal_category: $(this).find(".est_old_metal_category").val(),

          old_metal_type: $(this).find(".est_old_metal_type").val(),
        });
      }
    });

    selected_split_row
      .find(".old_metal_details")
      .val(
        old_metal_payment_details.length > 0
          ? JSON.stringify(old_metal_payment_details)
          : ""
      );

    selected_split_row
      .find(".purchase_old_metal_amt")
      .html(parseFloat(total_recd_amt).toFixed(2));

    $("#purchase_item_details_model .modal-body")
      .find("#split_purchase_item_details tbody")
      .empty();
    $("#purchase_item_details_model").modal("toggle");

    calculateSaleBillSplitRowTotal();
  }
);
$("#PurstoneModal  #close_pur_stone_details").on("click", function () {
  $("#PurstoneModal .modal-body")
    .find("#estimation_pur_stone_item_details tbody")
    .empty();
});
$("#purchase_item_details_model  #close_pur_stone_details").on(
  "click",
  function () {
    $("#purchase_item_details_model .modal-body")
      .find("#estimation_pur_stone_item_details tbody")
      .empty();
  }
);
//Purchase Stone

function create_customer_kyc(curRow, id) {
  if (curRow != undefined) {
    $("#row_active_id").val(curRow.closest("tr").attr("id"));
    selected_split_row = curRow;
  }
  var row = "";
  var pan_no = curRow.find(".pan_no").val();
  var aadhar_no = curRow.find(".aadhar_no").val();
  var dl_no = curRow.find(".dl_no").val();
  var pp_no = curRow.find(".pp_no").val();
  $("#pan_no").val(pan_no);
  $("#aadhar_no").val(aadhar_no);
  $("#dl_no").val(dl_no);
  $("#pp_no").val(pp_no);
  $("#bill_split_kyc_modal").modal("show");
}

//Purchase Split

$(document).on(
  "change",
  ".adj_amount,.paymode,.ref_no,.net_bank_type,.recd_amt ,.net_bank_type ,.bankname ,.cheque_deposit_date,.approval_no ,.device_type ",
  function () {
    //Only For Validation Purpose

    calculate_split_payment_amount();
  }
);

$(document).ready(function () {
  $(document).on("keyup", "#pan_no,#pan", function (e) {
    var row = $(this).closest("tr");

    var pan = document.getElementById("pan_no");
    let pan_no = this.value;
    var currow = $("#row_active_id").val();
    var inputValue = pan_no.toUpperCase();
    pan.value = inputValue;

    if (this.value.length == 10) {
      // checkPANAvail(row, this.value);
    }
  });
});

// function check_pan_duplicate(row, pan_no) {
//   $.ajax({
//     type: "POST",
//     url:
//       base_url +
//       "index.php/admin_ret_billing/check_pan_duplicate/?nocache=" +
//       my_Date.getUTCSeconds(),
//     dataType: "json",
//     method: "POST",
//     data: { pan_no: pan_no },
//     success: function (data) {
//       if (data.status == 1) {
//         $.toaster({
//           priority: "danger",
//           title: "Warning!",
//           message: "" + "</br>PAN No Already Exist",
//         });
//         $("#pan_no").val("");
//         $("#pan").val("");
//       }

//       if ($("#billing_split_sale_details > tbody >tr").length > 0) {
//         $("#billing_split_sale_details > tbody >tr").each(function (idx, row) {
//           if ($(this).find(".pan_no").val() == pan_no) {
//             $.toaster({
//               priority: "danger",
//               title: "Warning!",
//               message: "" + "</br>PAN No Already Exist",
//             });
//             $("#pan_no").val("");
//             $("#pan").val("");
//           }
//         });
//       }
//     },
//   });
// }

// Update hidden input value based on checkbox state
$(document).ready(function () {
  $("#split_purchase_item_details tbody").on(
    "change",
    ".is_utilized",
    function () {
      var isChecked = $(this).prop("checked") ? 1 : 0;
      $(this).closest("tr").find(".is_utilized").val(isChecked);
      $(this).closest("tr").find(".is_pur_utilized").val(isChecked);
      $(this).closest("tr").find(".iscurrentrowselected").val(isChecked);

      var currrowId = $(this).closest("tr").attr("id");

      var is_pur_utilized = false;

      //if(isChecked){

      var tot_pur_gwt = 0;
      var tot_pur_nwt = 0;
      var tot_pur_value = 0;
      $("#split_purchase_item_details > tbody  > tr").each(function (
        index,
        tr
      ) {
        oldmetalselectedRow = $(this);
        if (oldmetalselectedRow.find(".iscurrentrowselected").val() == 1) {
          tot_pur_gwt += parseFloat(
            isNaN($(this).find(".pur_gross_val").val()) ||
              $(this).find(".pur_gross_val").val() == ""
              ? 0
              : $(this).find(".pur_gross_val").val()
          );
          tot_pur_nwt += parseFloat(
            isNaN($(this).find(".pur_net_val").val()) ||
              $(this).find(".pur_net_val").val() == ""
              ? 0
              : $(this).find(".pur_net_val").val()
          );
          tot_pur_value += parseFloat(
            isNaN($(this).find(".bill_amount").val()) ||
              $(this).find(".bill_amount").val() == ""
              ? 0
              : $(this).find(".bill_amount").val()
          );
        }
      });
      if (
        parseFloat(tot_pur_value) >
        parseFloat(selected_split_row.find(".bill_amount").val())
      ) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Purchase value is grater than sales value..",
        });
        $(this).closest("tr").find(".is_utilized").val(0);
        $(this).closest("tr").find(".is_pur_utilized").val(0);
        $(this).closest("tr").find(".iscurrentrowselected").val(0);
        $(this).prop("checked", false);
      } else {
        if (isChecked) {
          $("#bill_split_pu_details tbody tr").each(function () {
            // Get the id attribute of the current row
            var rowId = $(this).attr("id");
            if (rowId == currrowId) {
              $(this).find(".is_pur_utilized").val(1);
            }
          });
        } else {
          $("#bill_split_pu_details tbody tr").each(function () {
            // Get the id attribute of the current row
            var rowId = $(this).attr("id");
            if (rowId == currrowId) {
              $(this).find(".is_pur_utilized").val(0);
            }
          });
        }

        $(".curr_grs_wt").html(parseFloat(tot_pur_gwt).toFixed(3));
        $(".curr_net_wt").html(parseFloat(tot_pur_nwt).toFixed(3));
        $(".curr_tot_amt").html(parseFloat(tot_pur_value).toFixed(2));
        $(".curr_bill_sal_val").html(
          parseFloat(selected_split_row.find(".bill_amount").val()).toFixed(2)
        );
      }

      //bill_split_pu_details

      /*}else{
			$(".curr_grs_wt").html(0.000);
			$(".curr_net_wt").html(0.000);
			$(".curr_tot_amt").html(0.00);
		}*/
    }
  );
});

/* 	old tag id search */

$("#search_oldtag_no").on("click", function () {
  if (
    ($("#filter_oldtag_no").val() != "") != "" &&
    $("#id_branch").val() != ""
  ) {
    getEstimationDetails();
  } else {
    if ($("#filter_oldtag_no").val() == "") {
      alert("Please enter Old Tag number");

      $("#filter_oldtag_no").focus();
    } else if ($("#id_branch").val() == "") {
      alert("Please select branch");

      $("#filter_oldtag_no").focus();
    }
  }

  $("#filter_oldtag_no").val("").focus();
});

/* 	old tag id search */

$(document).on("keyup", ".stone_wt", function () {
  var row = $(this).closest("tr");

  validate_cur_row_stone_wt(row, this.value, "");
});

$(document).on("change", ".stone_uom_id", function () {
  var row = $(this).closest("tr");

  validate_cur_row_stone_wt(row, "", this.value);
});

function validate_cur_row_stone_wt(row, stone_wt, uom_id) {
  // Sales
  var active_id = $("#active_id").val();
  var gwt = $("#" + active_id)
    .find(".bill_gross_val")
    .val();
  if (parseFloat(stone_wt) > parseFloat(gwt)) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>" + "Entered Stone WT is greater than Gwt",
    });
    row.find(".stone_wt").val(0);
  }
  var stone_grm_wt = 0;
  var stone_dia_wt = 0;

  $("#stoneModal .modal-body #estimation_stone_item_details> tbody  > tr").each(
    function (index, tr) {
      if ($(this).find(".is_apply_in_lwt ").val() == 1) {
        if ($(this).find(".stone_uom_id").val() == 1) {
          stone_grm_wt += parseFloat($(this).find(".stone_wt").val());
        }
        if ($(this).find(".stone_uom_id").val() == 6) {
          stone_dia_wt += parseFloat(
            parseFloat($(this).find(".stone_wt").val()) / 5
          );
        }
      }
    }
  );

  // if ($('#estimation_stone_item_details>tbody>tr').length > 1) {
  // 	if (parseFloat(gwt) < (parseFloat(stone_grm_wt) + parseFloat(stone_dia_wt))) {
  // 		$.toaster({ priority: 'danger', title: 'Warning!', message: '' + "</br>" + 'Entered Stone WT is greater than Gwt' });
  // 		row.find('.stone_wt').val(0);
  // 		row.find('.stone_uom_id').val(1);

  // 	}
  // }
}

function get_home_bill_counter(row) {
  // alert(curRow.find('.bill_id_sub_design').val());
  my_Date = new Date();
  $.ajax({
    type: "POST",
    url:
      base_url +
      "index.php/admin_ret_billing/get_home_bill_sectionBranchwise?nocache=" +
      my_Date.getUTCSeconds(),
    data: {
      id_branch:
        $("#branch_filter").val() != "" &&
        $("#branch_filter").val() != undefined
          ? $("#branch_filter").val()
          : $("#branch_select").val(),
    },
    dataType: "json",
    success: function (data) {
      var section_select = curRow.find(".bill_id_section").val();
      if (curRow != "" && curRow != undefined && curRow != null) {
        curRow.find(".bill_section_select option").remove();
        $.each(data, function (key, item) {
          curRow
            .find(".bill_section_select")
            .append(
              $("<option></option>")
                .attr("value", item.id_section)
                .text(item.section_name)
            );
        });
        curRow.find(".bill_section_select").select2({
          placeholder: "Select Section",
          allowClear: true,
        });
      }
      curRow.find(".bill_section_select").select2({
        placeholder: "Select Section",
        allowClear: true,
      });
      if (curRow != "" && curRow != undefined && curRow != null) {
        curRow.find(".bill_section_select").select2("val", section_select);
        if (section_select != "") {
          curRow.find(".bill_section_select").prop("disabled", true);
        }
      }
      $(".overlay").css("display", "none");
    },
  });
}

// ADMIN APP START

function send_mobile_approval_request() {
  $("#otp_validation").modal("hide");

  if ($("#emp_select").val() == "" || $("#emp_select").val() == null) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br> Please Select Employee ....",
    });
    $("#summary_discount_amt").val(0);
    calculate_discount_amt();
    $("#otp_validation").modal("hide");
    $("#app_aproval_modal").modal("hide");
  } else {
    $("#app_aproval_modal").modal("show");
    show_countdown(function (return_status) {});

    my_Date = new Date();
    var item_details = [];
    var sales_deteils = [];
    var purchase_Details = [];
    var profit_amt = 0;
    var profit_per = 0;
    count = 0;
    // calculate_discount_amt();

    var disc_amt = $("#summary_discount_amt").val();
    $("#summary_discount_amt").val(0);
    calculate_discount_amt();
    calculateSaleBillRowTotal();

    $("#summary_discount_amt").val(disc_amt);

    $("#billing_sale_details > tbody tr").each(function (idx, row) {
      currow = $(this);
      count += 1;

      rate_with_mc = parseFloat(
        $(this).find(".bill_taxable_amt").val()
      ).toFixed(3);

      var total_sales_amt = $(".sale_amt_with_tax").html();

      var disc_amt = $("#summary_discount_amt").val();

      var disc_per = parseFloat((disc_amt / total_sales_amt) * 100);

      var discount = parseFloat((rate_with_mc * disc_per) / 100);

      rate_with_mc = parseFloat(rate_with_mc - discount).toFixed(2);

      sale_item_type = $(this).find(".sale_item_type").val();

      var profit_diamond = 0;
      var profit_stone = 0;
      var profit_va = 0;

      if (sale_item_type == 0) {
        profit_diamond =
          parseFloat($(this).find(".sale_diamond").val()) -
          parseFloat($(this).find(".pur_diamond").val());

        profit_stone =
          parseFloat($(this).find(".sale_stone").val()) -
          parseFloat($(this).find(".pur_stone").val());

        profit_va =
          parseFloat($(this).find(".bill_sale_net_wt").html()) *
            (parseFloat($(this).find(".est_wastage").html()) / 100) -
          parseFloat(
            $(this).find(".bill_sale_net_wt").html() *
              parseFloat($(this).find(".purchase_va").val() / 100)
          );
      }

      sales_deteils.push({
        is_partial: $(this).find(".is_partial").val(),
        est_id: $(this).find(".est_id").val(),
        section: $(this).find(".id_section").val(),
        product_name:
          $(this).find(".product_name").html() != undefined
            ? $(this).find(".product_name").html()
            : $(this).find(".bill_sel_product option:selected").text(),
        id_product: $(this).find(".sale_product_id").val(),
        id_design: $(this).find(".sale_design_id").val(),
        id_sub_design: $(this).find(".bill_id_sub_design").val(),
        pieces: $(this).find(".sale_pcs").val(),
        sale_purity: $(this).find(".sale_purity").val(),
        gross_wt: parseFloat($(this).find(".bill_gross_val").val()).toFixed(3),
        less_wt: parseFloat($(this).find(".bill_less_val").val()).toFixed(3),
        net_wt: parseFloat($(this).find(".bill_sale_net_wt").html()).toFixed(3),
        wastage_per: $(this).find(".bill_wastage").val(),
        wastage_wt: $(this).find(".bill_wastage_wt").val(),
        bill_mctype: $(this).find(".bill_mctype").val(),
        bill_rate_per_grm: $(this).find(".bill_rate_per_grm").val(),
        bill_taxable_amt: $(this).find(".bill_taxable_amt").val(),
        tgrp_name: $(this).find(".tgrp_name").val(),
        tax_amt: $(this).find(".tax_amt").val(),
        per_grm_amount: $(this).find(".per_grm_amount").val(),
        purchase_mc_type:
          sale_item_type == 0 ? $(this).find(".purchase_mc_type").val() : 0,
        purchase_va:
          sale_item_type == 0 ? $(this).find(".purchase_va").val() : 0,
        pur_mc: sale_item_type == 0 ? $(this).find(".purchase_mc").val() : 0,
        purchase_mc:
          sale_item_type == 0 ? $(this).find(".total_purchase_mc").val() : 0,
        tag_purchase_cost:
          sale_item_type == 0
            ? parseFloat($(this).find(".tag_purchase_cost").val()) || 0
            : 0,
        purchase_rate:
          sale_item_type == 0
            ? parseFloat($(this).find(".purchase_rate").val()) || 0
            : 0,
        profit_amt:
          sale_item_type == 0
            ? parseFloat($(this).find(".profit").val()) || 0
            : 0,
        profit_percentage:
          sale_item_type == 0
            ? parseFloat($(this).find(".profit_percentage").val()) || 0
            : 0,
        discount: parseFloat(discount).toFixed(2) || 0,
        discount_percentage: parseFloat(disc_per).toFixed(2),
        sale_mc: $(this).find(".making_charge").html(),
        sale_va:
          ($(this).find(".est_wastage").html() != undefined
            ? $(this).find(".est_wastage").html()
            : $(this).find(".bill_wastage").val()) || 0,
        tag_code:
          sale_item_type == 0
            ? $(this).find(".product_name").html() != undefined
              ? $(this).find(".tag_code").html()
              : $(this).find(".bill_tag_code").val()
            : "",
        tag_id: $(this).find(".sale_tag_id").html(),
        sale_amount: $(this).find(".bill_amount").val(),
        age: sale_item_type == 0 ? $(this).find(".tag_age").val() : 0,
        min_sale_value:
          $(this).find(".min_sale_value").val() != ""
            ? $(this).find(".min_sale_value").val()
            : 0,
        pur_diamond:
          $(this).find(".pur_diamond").val() != ""
            ? $(this).find(".pur_diamond").val()
            : 0,
        pur_stone:
          $(this).find(".pur_stone").val() != ""
            ? $(this).find(".pur_stone").val()
            : 0,
        sale_stone:
          $(this).find(".sale_stone").val() != ""
            ? $(this).find(".sale_stone").val()
            : 0,
        sale_diamond:
          $(this).find(".sale_diamond").val() != ""
            ? $(this).find(".sale_diamond").val()
            : 0,
        profit_va: parseFloat(profit_va).toFixed(3),
        profit_stone: parseFloat(profit_stone).toFixed(2),
        profit_diamond: parseFloat(profit_diamond).toFixed(2),
      });
      profit_amt +=
        sale_item_type == 0
          ? parseFloat($(this).find(".profit").val()) || 0
          : 0;
    });
    $("#purchase_item_details > tbody tr").each(function (idx, row) {
      currow = $(this);
      purchase_Details.push({
        pur_metal_type: $(this).find(".pur_metal_type").val(),
        old_metal_type: $(this).find(".old_metal_type").val(),
        old_metal_category: $(this).find(".old_metal_category").val(),
        purity: $(this).find(".purity").val(),
        pur_piece: $(this).find(".pur_piece").val(),
        pur_gross_val: $(this).find(".pur_gross_val").val(),
        est_old_dust_val: $(this).find(".est_old_dust_val").val(),
        old_swt: $(this).find(".old_swt").val(),
        pur_wastage: $(this).find(".pur_wastage").val(),
        pur_wastage: $(this).find(".pur_wastage").val(),
        pur_wastage: $(this).find(".pur_wastage").val(),
        pur_wastage_wt: $(this).find(".pur_wastage_wt").val(),
        bill_rate_per_grm: $(this).find(".bill_rate_per_grm").val(),
        old_touch: $(this).find(".old_touch").val(),
        id_purpose: $(this).find(".id_purpose").val(),
        old_metal_remarks: $(this).find(".old_metal_remarks").val(),
        bill_amount: $(this).find(".bill_amount").val(),
        category: $(this).find(".old_metal_category option:selected").text(),
        old_metal_type_name: $(this)
          .find(".old_metal_type option:selected")
          .text(),
        pur_net_val: $(this).find(".pur_net_val").val(),
        pur_dust_val: $(this).find(".pur_dust_val ").val(),
        pur_stone_wt: $(this).find(".stone_wt").val(),
        pur_less_wt: parseFloat(
          $(this).find(".pur_gross_val").val() -
            parseFloat($(this).find(".pur_net_val").val())
        ).toFixed(3),
      });
    });

    profit_per = parseFloat(
      (parseFloat(profit_amt) / parseFloat($("#total_payment_amount").val())) *
        100
    ).toFixed(2);
    console.log(sales_deteils);
    console.log(purchase_Details);
    console.log(item_details);
    //	discount_amount =  $('#summary_discount_amt').val();
    item_details.push({
      Sales: sales_deteils,
      Purchase: purchase_Details,
      profit_amount: profit_amt,
      profit_percentage: profit_per,
      chit_details: chit_details != null ? chit_details : [],
    });
    $("#otp_item_details").val(JSON.stringify(item_details));

    //	$('#disc_reset').trigger("click");

    //	$('#summary_discount_amt').val(discount_amount);

    $("#apprl_status").val(0);
    $("#disc_approved_by").val("");
    $("#disc_approved_id").val("");
    $("#otp_approved_by").val("");
    $("#is_otp_approved").val(0);

    $.ajax({
      url:
        base_url +
        "index.php/admin_app_api/bill_disc_app_approval/?nocache=" +
        my_Date.getUTCSeconds(),
      dataType: "json",
      method: "POST",
      data: {
        id_branch: $("#id_branch").val(),
        bill_cus_id: $("#bill_cus_id").val(),
        bill_cus_name: $("#bill_cus_name").val(),
        item_details: $("#otp_item_details").val(),
        id_emp: $("#emp_select").val(),
        disc_amt: $("#summary_discount_amt").val(),
        OTP_aprvl_type: 1,
        ApprovalMessage: $("#discountApprovalMessage").html(),
        total_bill_amt: $("#total_payment_amount").val(),
        id_estimations: estimation_id,
      },
      success: function (data) {
        if (data.status == true) {
          $.toaster({
            priority: "success",
            title: "Warning!",
            message: "" + "</br>" + data.message,
          });
          $("#approval_id").val(data.approval_id);
          $("#approval_type").val(data.approval_type);
        } else {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>" + data.message,
          });
          $("#approval_id").val(data.approval_id);
          $("#approval_type").val(data.approval_type);

          $("#summary_discount_amt").val(0);
          calculateFinalCost();
        }
      },
      error: function (error) {},
    });
  }
}

$(document).ready(function () {
  if (ctrl_page[1] == "billing" && ctrl_page[2] == "add") {
    var socket = io("https://liverate.logimaxindia.com:3001/");

    let cliIDcode = $("#cliIDcode").val();

    socket.on(
      "retailupdateapprove:App\\Events\\RETAILDataUpdates",
      function (data) {
        console.log(data);
        console.log(JSON.stringify(data));
        $("#disc_amt_modified").val(0);

        if (data.updatedata.clientcode == cliIDcode) {
          $("#is_approval_success").val(0);
          if (
            data.updatedata.status == 1 &&
            $("#approval_id").val() == data.updatedata.approval_id &&
            $("#apprl_status").val() != 4
          ) {
            //Success
            if (
              data.updatedata.apprl_type == 1 &&
              $("#is_approval_success").val() == 0
            ) {
              //Bill Discount Success
              $("#approval_id").val(data.updatedata.approval_id);
              $("#apprl_approved_by").val(data.updatedata.apprl_approved_by);
              $("#apprl_status").val(data.updatedata.status);
              $("#app_aproval_modal").modal("hide");
              $("#is_approval_success").val(1);

              $("#disc_approved_id").val(data.updatedata.approval_id);
              $("#disc_approved_by").val(data.updatedata.apprl_approved_by);
              $("#otp_approved_by").val(data.updatedata.apprl_approved_by);
              $("#is_otp_approved").val(1);
              $("#disc_amt_modified").val(1);

              if (
                data.updatedata.disc_amt > 0 &&
                data.updatedata.disc_amt != "" &&
                data.updatedata.is_disc_modified == 1
              ) {
                //If Discount Amount Modified While Approval
                $("#summary_discount_amt ").val(data.updatedata.disc_amt);
                calculate_discount_amt();
                $.toaster({
                  priority: "success",
                  title: "Success!",
                  message:
                    "" +
                    "</br>Approval Successed For the Amount of Rs." +
                    parseFloat(data.updatedata.disc_amt).toFixed(2),
                });
              } else {
                $.toaster({
                  priority: "success",
                  title: "Success!",
                  message: "" + "</br>Approval Successed",
                });
                calculate_discount_amt();
              }
            }

            if (
              data.updatedata.apprl_type == 2 &&
              $("#is_approval_success").val() == 0
            ) {
              //Credit Bill Success
              $("#approval_id").val(data.updatedata.approval_id);
              $("#apprl_approved_by").val(data.updatedata.apprl_approved_by);

              $("#credit_approved_id").val(data.updatedata.approval_id);
              $("#credit_approved_by").val(data.updatedata.apprl_approved_by);

              $("#apprl_status").val(data.updatedata.status);
              $("#cc_app_aproval_modal").modal("hide");
              $("#is_approval_success").val(1);
              $("#pay_submit").trigger("click");
            }
          } else if (
            data.updatedata.status == 2 &&
            $("#approval_id").val() == data.updatedata.approval_id &&
            $("#apprl_status").val() != 4
          ) {
            //Rejected
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: "" + "</br>Approval Rejected",
            });
            $("#is_approval_success").val(0);

            if (
              data.updatedata.apprl_type == 1 &&
              $("#is_approval_success").val() == 0
            ) {
              //Bill Discount Rejected
              $("#app_aproval_modal").modal("hide");
              $("#summary_discount_amt").val(0);
              $("#approval_id").val(data.updatedata.approval_id);
              $("#apprl_approved_by").val(data.updatedata.apprl_approved_by);
              $("#apprl_status").val(data.updatedata.status);
              calculateSaleBillRowTotal();
              calculateFinalCost();
            }

            if (
              data.updatedata.apprl_type == 2 &&
              $("#is_approval_success").val() == 0
            ) {
              //Credit Bill Rejected
              $("#cc_app_aproval_modal").modal("hide");
              $("#is_to_be_no").prop("checked", true);
              $("#is_credit_no").prop("checked", true);
              $("#approval_id").val(data.updatedata.approval_id);
              $("#apprl_approved_by").val(data.updatedata.apprl_approved_by);
              $("#apprl_status").val(data.updatedata.status);
              calculateFinalCost();
              $(".receive_amount").prop("readonly", true);
            }
          }
        }
      }
    );
  }
});

function credit_otp_confirmation(CreditApprovalMessage) {
  $("#CreditApprovalMessage").html(CreditApprovalMessage);
  $("#CreditApprovalMessage").css("display", "block");
  $(".otp_block").css("display", "none");
  $("#send_credit_otp").css("display", "inline-block");
  $("#send_credit_otp_no").css("display", "inline-block");
  $("#approve").css("display", "none");
  $("#cancel_credit_otp").css("display", "none");
  $("#otp_modal").modal("show");
}

function credit_app_approval_confirmation(CreditApprovalMessage) {
  // $("#CreditApprovalMessage").html(CreditApprovalMessage);

  // $('#cc_app_aproval_modal').modal('show');
  $("#CreditApprovalMessage").html(CreditApprovalMessage);
  $(".otp_block").css("display", "none");
  $("#cancel_credit_otp").css("display", "none");
  $("#approve").css("display", "none");

  $("#otp_modal").modal("show");
}

function send_cc_app_approval_request(e) {
  $("#otp_modal").modal("hide");

  if ($("#emp_select").val() == "" || $("#emp_select").val() == null) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br> Please Select Employee ...",
    });
    // $('#is_to_be_no').prop('checked', true);
    // $('#is_credit_no').prop('checked', true);
    // $(".receive_amount").prop('readonly', true);
    $("#otp_validation").modal("hide");
    $("#cc_app_aproval_modal").modal("hide");

    e.preventDefault();
  } else {
    $("#cc_app_aproval_modal").modal("show");

    my_Date = new Date();
    var item_details = [];
    var sales_deteils = [];
    var purchase_Details = [];
    var is_credit = $("input[name='billing[is_credit]']:checked").val();
    var is_to_be = $("input[name='billing[is_to_be]']:checked").val();
    let iscredit = "";
    if (is_credit == 1 && is_to_be == 0) {
      iscredit = 1;
    } else if (is_credit == 1 && is_to_be == 1) {
      iscredit = 2;
    }

    $("#billing_sale_details > tbody tr").each(function (idx, row) {
      currow = $(this);
      sales_deteils.push({
        is_partial: $(this).find(".is_partial").val(),
        est_id: $(this).find(".est_id").val(),
        section: $(this).find(".id_section").val(),
        id_product: $(this).find(".sale_product_id").val(),
        id_design: $(this).find(".sale_design_id").val(),
        id_sub_design: $(this).find(".bill_id_sub_design").val(),
        pieces: $(this).find(".sale_pcs").val(),
        sale_purity: $(this).find(".sale_purity").val(),
        gross_wt: parseFloat($(this).find(".bill_gross_val").val()).toFixed(3),
        less_wt: parseFloat($(this).find(".bill_less_val").val()).toFixed(3),
        net_wt: parseFloat($(this).find(".bill_sale_net_wt").html()).toFixed(3),
        wastage_per: $(this).find(".bill_wastage").val(),
        wastage_wt: $(this).find(".bill_wastage_wt").val(),
        bill_mctype: $(this).find(".bill_mctype").val(),
        bill_rate_per_grm: $(this).find(".bill_rate_per_grm").val(),
        bill_taxable_amt: $(this).find(".bill_taxable_amt").val(),
        tgrp_name: $(this).find(".tgrp_name").val(),
        tax_amt: $(this).find(".tax_amt").val(),
        per_grm_amount: $(this).find(".per_grm_amount").val(),
        min_sale_value:
          $(this).find(".min_sale_value").val() != ""
            ? $(this).find(".min_sale_value").val()
            : 0,
      });
    });
    $("#purchase_item_details > tbody tr").each(function (idx, row) {
      currow = $(this);
      purchase_Details.push({
        pur_metal_type: $(this).find(".pur_metal_type").val(),
        old_metal_type: $(this).find(".old_metal_type").val(),
        old_metal_category: $(this).find(".old_metal_category").val(),
        purity: $(this).find(".purity").val(),
        pur_piece: $(this).find(".pur_piece").val(),
        pur_gross_val: $(this).find(".pur_gross_val").val(),
        est_old_dust_val: $(this).find(".est_old_dust_val").val(),
        old_swt: $(this).find(".old_swt").val(),
        pur_wastage: $(this).find(".pur_wastage").val(),
        pur_wastage_wt: $(this).find(".pur_wastage_wt").val(),
        bill_rate_per_grm: $(this).find(".bill_rate_per_grm").val(),
        old_touch: $(this).find(".old_touch").val(),
        id_purpose: $(this).find(".id_purpose").val(),
        old_metal_remarks: $(this).find(".old_metal_remarks").val(),
        bill_amount: $(this).find(".bill_amount").val(),
      });
    });
    console.log(sales_deteils);
    console.log(purchase_Details);
    console.log(item_details);
    item_details.push({
      Sales: sales_deteils,
      Purchase: purchase_Details,
      credit_due_date: $("#credit_due_date").val(),
    });

    $("#otp_item_details").val(JSON.stringify(item_details));

    $("#apprl_status").val(0);
    $("#credit_approved_by").val("");
    $("#credit_approved_id").val("");

    $.ajax({
      url:
        base_url +
        "index.php/admin_app_api/credit_bill_app_approval/?nocache=" +
        my_Date.getUTCSeconds(),
      dataType: "json",
      method: "POST",
      data: {
        id_branch: $("#id_branch").val(),
        bill_cus_id: $("#bill_cus_id").val(),
        bill_cus_name: $("#bill_cus_name").val(),
        item_details: $("#otp_item_details").val(),
        id_emp: $("#emp_select").val(),
        OTP_aprvl_type: 2,
        cr_paid_amt: $(".sum_of_amt").html(),
        total_bill_amt: $("#total_payment_amount").val(),
        ApprovalMessage: $("#discountApprovalMessage").html(),
        iscredit: iscredit,
        id_estimations: estimation_id,
      },
      success: function (data) {
        if (data.status == true) {
          $.toaster({
            priority: "success",
            title: "Warning!",
            message: "" + "</br>" + data.message,
          });
          $("#approval_id").val(data.approval_id);
          $("#approval_type").val(data.approval_type);
        } else {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>" + data.message,
          });
          $("#approval_id").val(data.approval_id);
          $("#approval_type").val(data.approval_type);
          $("#cc_app_aproval_modal").modal("hide");
          $("#is_to_be_no").prop("checked", true);
          $("#is_credit_no").prop("checked", true);
          calculateFinalCost();
        }
      },
      error: function (error) {},
    });
  }

  show_countdown(function (return_status) {});
}

$(document).on("click", ".cancel_credit_aprvl", function () {
  $("#is_credit_no").prop("checked", true);
  calculateFinalCost();
});

$(document).on("click", ".cancel_bill_disc_aprvl", function () {
  $("#summary_discount_amt").val(0);
  calculate_discount_amt();

  calculateFinalCost();

  let Active_aprvl_id = $("#approval_id").val();

  update_aprvl_status(Active_aprvl_id, 3);
});

$(document).on("click", ".cancel_cc_aprvl", function () {
  $("#is_to_be_no").prop("checked", true);
  $("#is_credit_no").prop("checked", true);
  calculateFinalCost();
  let Active_aprvl_id = $("#approval_id").val();
  update_aprvl_status(Active_aprvl_id, 3);
  $(".receive_amount").prop("readonly", true);
});

function check_est(est_id, est_data) {
  var flag = true;
  estimation_id.forEach(function (item, index) {
    if (item == est_id) {
      flag = false;
    }
  });
  return flag;
}

function update_aprvl_status(Active_aprvl_id, status) {
  //status = 3 -> Cancelled
  //status = 4 -> Expired

  if (Active_aprvl_id == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Approvel ID Not Found",
    });
  } else if (status == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Approvel stauts Not Found",
    });
  } else {
    $.ajax({
      url:
        base_url +
        "index.php/admin_app_api/update_aprvl_status/?nocache=" +
        my_Date.getUTCSeconds(),
      dataType: "json",
      method: "POST",
      data: { active_aprvl_id: Active_aprvl_id, approval_status: status },
      success: function (data) {
        if (data.status) {
          if (data.approval_status == 3) {
            //Cancelled
            $.toaster({
              priority: "success",
              title: "Success!",
              message: "" + "</br>" + data.msg,
            });
            $("#apprl_status").val(data.approval_status);
          } else if (data.approval_status == 4) {
            //Expired
            $.toaster({
              priority: "warning",
              title: "Success!",
              message: "" + "</br>" + data.msg,
            });
            $("#apprl_status").val(data.approval_status);
          }
        } else {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>" + data.msg,
          });
        }
      },
      error: function (err) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Cannot Update Cancel Status",
        });
      },
    });
  }
}

$(document).on("click", ".get_approval", function () {
  get_approval_status();
});

function get_approval_status() {
  my_Date = new Date();

  if ($("#emp_select").val() == "" || $("#emp_select").val() == null) {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br> Please Select Employee ....",
    });
  } else if ($("#approval_id").val() == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br> Approval ID not Found ....",
    });
  } else {
    $.ajax({
      url:
        base_url +
        "index.php/admin_app_api/get_approval_status/?nocache=" +
        my_Date.getUTCSeconds(),
      dataType: "json",
      method: "POST",
      data: {
        approval_id: $("#approval_id").val(),
      },
      async: false,
      success: function (data) {
        if (data.apprl_status == 0) {
          $.toaster({
            priority: "warning",
            title: "Warning!",
            message: "" + "</br>Waiting For Approval",
          });
        } else if (
          data.apprl_status == 1 &&
          data.apprl_id == $("#approval_id").val() &&
          $("#apprl_status").val() != 4
        ) {
          //Successed
          if (data.apprl_type == 1) {
            //Bill Discount
            $("#disc_amt_modified").val(0);

            if (
              data.disc_amt > 0 &&
              data.disc_amt != "" &&
              data.is_disc_modified == 1
            ) {
              //If Discount Amount Modified While Approval
              $("#summary_discount_amt ").val(data.disc_amt);
              $("#disc_amt_modified").val(1);

              calculate_discount_amt();
              $.toaster({
                priority: "success",
                title: "Success!",
                message:
                  "" +
                  "</br>Approval Successed For the Amount of Rs." +
                  parseFloat(data.disc_amt).toFixed(2),
              });
            } else {
              $.toaster({
                priority: "success",
                title: "Success!",
                message: "" + "</br>Approval Successed",
              });
              calculate_discount_amt();
            }
            $("#approval_id").val(data.apprl_id);
            $("#apprl_approved_by").val(data.apprl_approved_by);
            $("#apprl_status").val(data.apprl_status);
            $("#app_aproval_modal").modal("hide");
            $("#is_approval_success").val(1);

            $("#disc_approved_id").val(data.apprl_id);
            $("#disc_approved_by").val(data.apprl_approved_by);
            $("#otp_approved_by").val(data.apprl_approved_by);
            $("#is_otp_approved").val(1);
          } else if (data.apprl_type == 2) {
            //Credit
            $.toaster({
              priority: "success",
              title: "Success!",
              message: "" + "</br>Approval Successed",
            });
            $("#approval_id").val(data.apprl_id);
            $("#apprl_approved_by").val(data.apprl_approved_by);
            $("#apprl_status").val(data.apprl_status);
            $("#cc_app_aproval_modal").modal("hide");
            $("#is_approval_success").val(1);
            $("#pay_submit").trigger("click");

            $("#credit_approved_id").val(data.apprl_id);
            $("#credit_approved_by").val(data.apprl_approved_by);
          }
        } else if (
          data.apprl_status == 2 &&
          data.apprl_id == $("#approval_id").val() &&
          $("#apprl_status").val() != 4
        ) {
          //Rejected

          if (data.apprl_type == 1) {
            //Bill Discount
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: "" + "</br>Approval Rejected",
            });
            $("#app_aproval_modal").modal("hide");
            $("#summary_discount_amt").val(0);
            calculateSaleBillRowTotal();
            calculateFinalCost();
            $("#approval_id").val(data.apprl_id);
            $("#apprl_approved_by").val(data.apprl_approved_by);
            $("#apprl_status").val(data.apprl_status);
          } else if (data.apprl_type == 2) {
            //Credit
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message: "" + "</br>Approval Rejected",
            });
            $("#cc_app_aproval_modal").modal("hide");
            $("#is_to_be_no").prop("checked", true);
            $("#is_credit_no").prop("checked", true);
            calculateFinalCost();
            $("#approval_id").val(data.apprl_id);
            $("#apprl_approved_by").val(data.apprl_approved_by);
            $("#apprl_status").val(data.apprl_status);
          }
        } else if (data.apprl_status == 4) {
          if (data.apprl_type == 1) {
            //Bill Discount
            $.toaster({
              priority: "warning",
              title: "Warning!",
              message: "" + "</br>Approval Request Expired",
            });
            $("#app_aproval_modal").modal("hide");
          } else if (data.apprl_type == 2) {
            //Credit
            $.toaster({
              priority: "warning",
              title: "Warning!",
              message: "" + "</br>Approval Request Expired",
            });
            $("#cc_app_aproval_modal").modal("hide");
          }
        }
      },
      error: function (error) {},
    });
  }
}

let intervalId;
function show_countdown(callback) {
  const now = new Date().getTime();
  const targetTime = now + 7200 * 1000;
  if (intervalId) {
    clearInterval(intervalId);
  }
  $(".show_timer").html("");
  intervalId = setInterval(function () {
    const currentTime = new Date().getTime();
    const distance = targetTime - currentTime;
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

    $(".show_timer").html("( " + minutes + "m " + seconds + "s )");

    if (distance < 0) {
      clearInterval(intervalId);
      set_expired_staus();
    }
  }, 1000);
}

function set_expired_staus() {
  $(".show_timer").html("");
  get_approval_status(); //Async Function , Check Status If Socket was not Working

  let approval_type = $("#approval_type").val();
  let approval_id = $("#approval_id").val();
  let approval_status = $("#apprl_status").val();
  if (approval_id != "" && approval_type == 1 && approval_status == 0) {
    //Bill Discount
    $("#summary_discount_amt").val(0);
    calculate_discount_amt();
    update_aprvl_status(approval_id, 4);
    $("#app_aproval_modal").modal("hide");
  } else if (approval_id != "" && approval_type == 2 && approval_status == 0) {
    // Credit
    $("#is_to_be_no").prop("checked", true);
    $("#is_credit_no").prop("checked", true);
    calculateFinalCost();
    update_aprvl_status(approval_id, 4);
    $("#cc_app_aproval_modal").modal("hide");
    $(".receive_amount").prop("readonly", true);
  }
}

function update_aprvl_status(Active_aprvl_id, status) {
  //status = 3 -> Cancelled
  //status = 4 -> Expired

  if (Active_aprvl_id == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Approvel ID Not Found",
    });
  } else if (status == "") {
    $.toaster({
      priority: "danger",
      title: "Warning!",
      message: "" + "</br>Approvel stauts Not Found",
    });
  } else {
    $.ajax({
      url:
        base_url +
        "index.php/admin_app_api/update_aprvl_status/?nocache=" +
        my_Date.getUTCSeconds(),
      dataType: "json",
      method: "POST",
      data: { active_aprvl_id: Active_aprvl_id, approval_status: status },
      success: function (data) {
        if (data.status) {
          if (data.approval_status == 3) {
            //Cancelled
            $.toaster({
              priority: "success",
              title: "Success!",
              message: "" + "</br>" + data.msg,
            });
            $("#apprl_status").val(data.approval_status);
          } else if (data.approval_status == 4) {
            //Expired
            $.toaster({
              priority: "warning",
              title: "Success!",
              message: "" + "</br>" + data.msg,
            });
            $("#apprl_status").val(data.approval_status);
          }
        } else {
          $.toaster({
            priority: "danger",
            title: "Warning!",
            message: "" + "</br>" + data.msg,
          });
        }
      },
      error: function (err) {
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message: "" + "</br>Cannot Update Cancel Status",
        });
      },
    });
  }
}

// ADMIN APP END

$('input[type=radio][name="receipt[receipt_to]"]').change(function () {
  $("#name").val("");

  $("#id_employee").val("");

  $("#id_customer").html("");

  $("#id_karigar").html("");
});

function getStoneRateSettings() {
  $.ajax({
    type: "GET",
    url: base_url + "index.php/admin_ret_catalog/getStoneRateSettings",
    dataType: "json",
    success: function (data) {
      stone_rate_settings = data;
      $(".overlay").css("display", "none");
    },
  });
}

function check_min_max_stone_rate(curRow) {
  var stone_rate = curRow.find(".rate_per_gram ").val();
  $.each(stone_rate_settings, function (key, items) {
    var stone_centwt = 0;
    if (curRow.find(".stone_type").val() == 1) {
      var stone_pcs =
        isNaN(curRow.find(".stone_pcs").val()) ||
        curRow.find(".stone_pcs").val() == ""
          ? 0
          : parseInt(curRow.find(".stone_pcs").val());
      var stone_wt =
        isNaN(curRow.find(".stone_wt").val()) ||
        curRow.find(".stone_wt").val() == ""
          ? 0
          : parseFloat(curRow.find(".stone_wt").val());
      stone_centwt = parseFloat((stone_wt / stone_pcs) * 100).toFixed(3);
    }

    if (
      $("#id_branch").val() == items.id_branch &&
      curRow.find(".stone_type").val() == items.stone_type &&
      curRow.find(".stone_id").val() == items.stone_id &&
      curRow.find(".quality_id").val() == items.quality_id &&
      curRow.find(".stone_uom_id").val() == items.uom_id
    ) {
      if (stone_centwt > 0) {
        if (
          stone_centwt >= parseFloat(items.from_cent) &&
          stone_centwt <= parseFloat(items.to_cent)
        ) {
          if (
            curRow.find(".rate_per_gram ").val() >=
              parseFloat(items.min_rate) &&
            curRow.find(".rate_per_gram ").val() <= parseFloat(items.max_rate)
          ) {
            curRow.find(".rate_per_gram ").val(stone_rate);
          } else {
            curRow.find(".rate_per_gram ").val(items.max_rate);
            $.toaster({
              priority: "danger",
              title: "Warning!",
              message:
                "" +
                "</br>" +
                "Entered Stone Rate Must be Within " +
                items.min_rate +
                " and " +
                items.max_rate +
                " !",
            });
          }
        }
      } else if (
        curRow.find(".rate_per_gram ").val() >= parseFloat(items.min_rate) &&
        curRow.find(".rate_per_gram ").val() <= parseFloat(items.max_rate)
      ) {
        curRow.find(".rate_per_gram ").val(stone_rate);
      } else {
        curRow.find(".rate_per_gram ").val(items.max_rate);
        $.toaster({
          priority: "danger",
          title: "Warning!",
          message:
            "" +
            "</br>" +
            "Entered Stone Rate Must be Within " +
            items.min_rate +
            " and " +
            items.max_rate +
            " !",
        });
      }
    }
  });
  calculate_stone_amount();
}

function get_min_max_mc_wastage(
  id_branch,
  id_product,
  id_design,
  id_sub_design
) {}
function get_wastage_settings_details() {
  $.ajax({
    type: "POST",
    url: base_url + "index.php/admin_ret_tagging/get_wastage_settings_details",
    dataType: "json",
    success: function (data) {
      wast_settings_details = data;
    },
  });
}

$(document).on("click", ".advance_btn", function () {
  $("#bill_ord_adv_adj > tbody").empty();

  html = "";

  $.each(order_adv_details, function (key, items) {
    html +=
      "<tr>" +
      '<td><input type="checkbox" ' +
      (items.is_checked ? "checked" : "") +
      '  class="bill_adv_id"  name="adv_order_adj[bill_adv_id]" value="' +
      items.bill_adv_id +
      '"></td>' +
      '<td><div class="adv_bill_no" value="' +
      items.bill_no +
      '">' +
      items.bill_no +
      "</div></td>" +
      '<td><div class="advance_amount" >' +
      items.paid_advance +
      "</div></td>" +
      '<td><input type="number" class="form-control ord_adj_amount" name="adv_order_adj[ord_adj_amount]" ' +
      (items.is_checked ? "" : "readonly") +
      '  value ="' +
      items.adj_advance +
      '" ></td>' +
      '<td><input type="number" class="form-control ord_blc_amount" name="adv_order_adj[ord_blc_amount]" value ="' +
      items.balance_amount +
      '" readonly ></td>' +
      "</tr>";
  });

  $("#bill_ord_adv_adj > tbody").html(html);

  calculate_order_advance_adjusted();

  $("#ord_adv_adj").modal("show");
});

$(document).on("change", ".ord_adj_amount", function () {
  var curRow = $(this).closest("tr");

  var adj_amount = isNaN(parseFloat($(this).val())) ? 0 : $(this).val();

  var advance_amount = curRow.find(".advance_amount").html();

  var bal_amount = parseFloat(advance_amount) - parseFloat(adj_amount);

  curRow.find(".ord_blc_amount").val(parseFloat(bal_amount).toFixed(2));

  calculate_order_advance_adjusted();
});

$(document).on("change", ".bill_adv_id", function () {
  var curRow = $(this).closest("tr");

  if ($(this).prop("checked")) {
    curRow.find(".ord_adj_amount").attr("readonly", false);
  } else {
    curRow.find(".ord_adj_amount").val(parseFloat(0).toFixed(2));

    curRow.find(".ord_adj_amount").attr("readonly", true);
  }

  calculate_order_advance_adjusted();
});

function calculate_order_advance_adjusted() {
  var adj_amount = 0;
  var advance_amount = 0;
  var bal_amount = 0;

  $("#bill_ord_adv_adj > tbody tr").each(function (idx, row) {
    var curRow = $(this);

    adj_amount += isNaN(parseFloat(curRow.find(".ord_adj_amount").val()))
      ? 0
      : parseFloat(curRow.find(".ord_adj_amount").val());

    advance_amount += parseFloat(curRow.find(".advance_amount").html());

    bal_amount += parseFloat(curRow.find(".ord_blc_amount").val());
  });

  $(".total_ord_adv_amt").html(parseFloat(advance_amount).toFixed(2));

  $(".total_ord_adj_adv_amt").html(parseFloat(adj_amount).toFixed(2));

  $(".total_ord_blc_amt").html(parseFloat(bal_amount).toFixed(2));
}

$("#add_ord_adv_adj").on("click", function (e) {
  $("#bill_ord_adv_adj > tbody tr").each(function (idx, row) {
    var curRow = $(this);

    is_checked = curRow.find(".bill_adv_id").prop("checked") ? 1 : 0;

    adj_amount = isNaN(curRow.find(".ord_adj_amount").val())
      ? 0
      : curRow.find(".ord_adj_amount").val();

    advance_amount = curRow.find(".advance_amount").html();

    bal_amount = curRow.find(".ord_blc_amount").val();

    let adv_bill = order_adv_details.find(
      (item) => item.bill_adv_id == curRow.find(".bill_adv_id").val()
    );

    if (adv_bill) {
      adv_bill.is_checked = is_checked;
      adv_bill.adj_advance = adj_amount;
      adv_bill.balance_amount = bal_amount;
    }

    console.log(adv_bill);
  });

  order_adv = $(".total_ord_adj_adv_amt").html();

  $(".summary_adv_paid_amt").html(order_adv);

  $("#ord_adv_adj_details").val(
    order_adv_details.length > 0 ? JSON.stringify(order_adv_details) : ""
  );

  $("#ord_adv_adj").modal("hide");

  $(".close_add_ord_adj").trigger("click");

	calculateFinalCost();


	});


	$(document).on('ready', function(){

		if ($('#is_eda').val() == 2) {

			$('#pan_no').attr('disabled', true);

		}

		else {

			$('#pan_no').attr('disabled', false);

		}


	});

 $(document).on('keyup',  '.stone_price', function() {
	var cur_row = $(this).closest('tr'); 

	cur_row.find('.rate_per_gram').val(0);

	calculate_stone_amount();

});
// Payment_Edit Starts Here - Kanaga_Sundar - 11-02-2025
function updateBillCusDetails(payload){

	var cus_bill_id = ctrl_page[3];

	payload['bill_id'] = cus_bill_id;

	$.ajax({

		type: 'POST',

		url: base_url + 'index.php/admin_ret_billing/paymentmode_edit/update',

		dataType: 'json',

		data: payload,

		success: function (data) {

			if(data.status){
				$.toaster({ 
					priority: 'success', 
					title: 'Success!', 
					settings: { 'timeout': 5000 }, 
					message: '' + "</br>" + data.message
				});

				$('#cusDet button').prop("disabled", true);

			} else {
				$.toaster({ 
					priority: 'danger', 
					title: 'Warning!', 
					settings: { 'timeout': 5000 }, 
					message: '' + "</br>" + data.message
				});
			}

		}

	});

}
$("#c_name").on("keyup", function (){

	if(ctrl_page[1]=='paymentmode_edit'){

		$('#updBilledName').prop('disabled',false);

	}

});

$("#pan_no").on("change", function (){

	var pan_no = $("#pan_no").val();

	var regexp = /^[a-zA-Z]{5}\d{4}[a-zA-Z]{1}$/;



	if (ctrl_page[1] == 'paymentmode_edit') {

		if (pan_no != '' && regexp.test(pan_no)) {

			$('#updPanNo').prop('disabled', false);

		} else {

			$.toaster({
				priority: 'danger',
				title: 'Warning!',
				message: '' + "</br>Enter The Valid PAN No",
				settings: { timeout: 5000 }
			});
		}

	}

});

$("#gst_num").on("change", function (){

	var gst_no = $("#gst_num").val();

	var billing_for = $("input[name='billing_for']:checked").val();

	var reggst = /^([0][1-9]|[1-2][0-9]|[3][0-7])[A-Z]{5}[0-9]{4}[A-Z][1-9A-Z][Z][0-9A-Z]$/;

	if (ctrl_page[1]=='paymentmode_edit' && gst_no != ''){

		if(reggst.test(gst_no)){
	
			$('#updGstNo').prop('disabled',false);
	
		} else {
	
			$.toaster({
				priority: 'danger', 
				title: 'Warning!', 
				message: '' + "</br>" + 'Enter the Valid GST No..',
				settings: { timeout: 5000 } 
			});
	
		}
	} else {

		if(ctrl_page[1]=='paymentmode_edit' && billing_for == '2'){

			$.toaster({
				priority: 'danger', 
				title: 'Warning!', 
				message: '' + "</br>" + 'Enter the GST No..',
				settings: { timeout: 5000 } 
			});

		} else {

			$('#updGstNo').prop('disabled',false);
			
		}

	}

});

$("#aadhaar_no").on("change", function (){

	var aadhaar_no = $("#aadhaar_no").val().replace(/-/g, "");

	if(ctrl_page[1]=='paymentmode_edit'){
		
		if (aadhaar_no != '' && aadhaar_no.length == '12') {

			$("#updAadharNo").prop("disabled", false);

		} else {

			$.toaster({
				priority: "danger",
				title: "Warning!",
				message: "" + "</br>" + "Enter the Valid AADHAAR No..",
				settings: { timeout: 5000 }
			});

		}

  	}

});

$("input[name='billing_for']").change(function () {

	if(ctrl_page[1]=='paymentmode_edit'){

		var selectedValue = $(this).val();

		var gst_no = $("#gst_no").val();

		var reggst = /^([0][1-9]|[1-2][0-9]|[3][0-7])[A-Z]{5}[0-9]{4}[A-Z][1-9A-Z][Z][0-9A-Z]$/;
	
		if (selectedValue == "2" && gst_no != '' && !reggst.test(gst_no)) {

			$("#updCusType").prop("disabled", true);


		} else {

			$("#updCusType").prop("disabled", false);

		}

	}
});

$('#emp_select').select2().on('select2:close',function(){

	if(ctrl_page[1]=='paymentmode_edit'){

		$('#id_employee').val($('#emp_select').val());

		$('#updEmpName').prop('disabled',false);

	}

});

// Payment_Edit Ends Here


function set_excisting_sales_return_details() {
	console.log("Checking and setting checkboxes...");
  
	$('#sale_return_details > tbody > tr').each(function () {
	  var bill_det_id = $(this).find('input.bill_det_id').first().val(); // Pick first occurrence
	  console.log("Checking bill_det_id:", bill_det_id);
  
	  $('#bill_items_tbl_for_return > tbody > tr').each(function () {
		var current_id = $(this).find('input.bill_det_id').first().val();
		console.log("Comparing with:", current_id);
  
		if (current_id === bill_det_id) {
		  var checkbox = $(this).find('input.select_est_details');
  
		  checkbox.prop('checked', true);
		  checkbox.attr("checked", "checked")
  
		}
	  });
	});
  }